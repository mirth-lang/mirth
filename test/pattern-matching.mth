
module(mirth-tests.pattern-matching)
import(std.prelude)
import(std.world)
import(std.str)

data(Foo,
    FOO0,
    FOO1 -> Int,
    FOO2 -> Int Int,
    FOO3 -> Int Int Int)

def(foo-sum, Foo -- Int,
    match(
        FOO0 -> 0,
        FOO1 -> id,
        FOO2 -> +,
        FOO3 -> + +,
    ))

def(foo-tag, Foo -- Str,
    FOO0 -> "FOO0",
    FOO1 -> drop "FOO1",
    FOO2 -> drop2 "FOO2",
    _ -> drop "FOO3")

def(foo-display, +World Foo -- +World,
    print(
        dup foo-tag ;
        ", sum = " ; dup foo-sum show;
        ", values = " ;
        match(
            FOO0 -> "[]";,
            FOO1 -> "[ "; show; " ]" ;,
            FOO2 -> "[ "; dip(show;) " "; show; " ]";,
            FOO3 -> "[ "; dip2(show;) " "; dip(show;) " "; show; " ]";,
        )
    ))

def(main, +World -- +World,
    Foo.FOO0 foo-display
    10 Foo.FOO1 foo-display
    20 Foo.FOO1 foo-display
    30 12 Foo.FOO2 foo-display
    40 60 Foo.FOO2 foo-display
    90 90 20 Foo.FOO3 foo-display
    9000 0 1 Foo.FOO3 foo-display)

# mirth-test # pout # FOO0, sum = 0, values = []
# mirth-test # pout # FOO1, sum = 10, values = [ 10 ]
# mirth-test # pout # FOO1, sum = 20, values = [ 20 ]
# mirth-test # pout # FOO2, sum = 42, values = [ 30 12 ]
# mirth-test # pout # FOO2, sum = 100, values = [ 40 60 ]
# mirth-test # pout # FOO3, sum = 200, values = [ 90 90 20 ]
# mirth-test # pout # FOO3, sum = 9001, values = [ 9000 0 1 ]
