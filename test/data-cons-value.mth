module(mirth-tests.data-cons-value)

import(std.prelude)
data(Foo, Foo0, Foo1, Foo2)
data(Bar, Bar0, Bar1 -> Int)
data(Baz, Baz -> Foo)
data(MyStr, MyStr -> Str)

data(CustomEnum,
    1 One, Two, Three,
    400 FourHundred, FourHundredOne,
    -10 NegativeTen, NegativeNine, NegativeEight,
)
data(CustomUnit, 42 FortyTwo)
def CustomUnit.indirect [ CustomUnit -- CustomUnit ] { id }

def(main, --,
    assert!(Foo0 cons-value 0 ==, "Foo0 cons-value 0 ==")
    assert!(Foo1 cons-value 1 ==, "Foo1 cons-value 1 ==")
    assert!(Foo2 cons-value 2 ==, "Foo2 cons-value 2 ==")
    assert!(Bar0 cons-value 0 ==, "Bar0 cons-value 0 ==")
    assert!(0 Bar1 cons-value 1 ==, "0 Bar1 cons-value 1 ==")
    assert!(1 Bar1 cons-value 1 ==, "1 Bar1 cons-value 1 ==")
    assert!(2 Bar1 cons-value 1 ==, "2 Bar1 cons-value 1 ==")
    assert!(Foo0 Baz cons-value 0 ==, "Foo0 Baz cons-value 0 ==")
    assert!(Foo1 Baz cons-value 0 ==, "Foo1 Baz cons-value 0 ==")
    assert!(Foo2 Baz cons-value 0 ==, "Foo2 Baz cons-value 0 ==")
    assert!("Hello" MyStr cons-value 0 ==, "\"Hello\" MyStr cons-value 0 ==")
    assert!("World" MyStr cons-value 0 ==, "\"World\" MyStr cons-value 0 ==")

    assert!(One cons-value 1 ==, "One cons-value 1 ==")
    assert!(Two cons-value 2 ==, "Two cons-value 2 ==")
    assert!(Three cons-value 3 ==, "Three cons-value 3 ==")
    assert!(FourHundred cons-value 400 ==, "FourHundred cons-value 400 ==")
    assert!(FourHundredOne cons-value 401 ==, "FourHundredOne cons-value 401 ==")
    assert!(NegativeTen cons-value -10 ==, "NegativeTen cons-value -10 ==")
    assert!(NegativeNine cons-value -9 ==, "NegativeNine cons-value -9 ==")
    assert!(NegativeEight cons-value -8 ==, "NegativeNine cons-value -8 ==")
    assert!(FortyTwo cons-value 42 ==, "FortyTwo cons-value 42 ==")
    assert!(FortyTwo indirect cons-value 42 ==, "FortyTwo indirect cons-value 42 ==")
)
