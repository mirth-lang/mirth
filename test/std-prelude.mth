module(mirth-tests.std-prelude)
import(std.prelude)
import(std.test)
import(std.str)

def(main, +World -- +World,
    +Tests.start!

    "id" test (
        1 id => (1)
        1 2 id => (1, 2)
        1 2 3 id => (1, 2, 3)
        1 2 3 4 id => (1, 2, 3, 4)

        "A" id => ("A")
        "A" "B" id => ("A", "B")
        "A" "B" "C" id => ("A", "B", "C")
        "A" "B" "C" "D" id => ("A", "B", "C", "D")
    )

    "swap" test (
        1 2 swap => (2, 1)
        1 2 3 swap => (1, 3, 2)
        "foo" "bar" swap => ("bar", "foo")
        "foo" "bar" "baz" swap => ("foo", "baz", "bar")
    )

    "dup" test (
        1 dup => (1, 1)
        1 2 dup => (1, 2, 2)
        "foo" dup => ("foo", "foo")
        "foo" "bar" dup => ("foo", "bar", "bar")
     )
    "drop" test (
        1 2 drop => (1)
        1 2 3 drop => (1,2)
        1 2 3 4 drop => (1,2,3)
        1 2 3 4 5 drop => (1,2,3,4)
        "A" "B" drop => ("A")
        "A" "B""C" drop => ("A","B")
    )
    "dip" test (
        1 2 dip(1+) => (2,2)
        1 2 3 dip(swap) => (2,1,3)
        "A" "B" "C" dip(cat) => ("AB", "C")
    )

    "run" test (
        1 [1+] run => (2)
        1 [2 +] run => (3)
        2 [3 +] run => (5)
        3 [1+] run => (4)
    )

    "Int.+" test (
        10 20 + => (30)
        20 30 + => (50)
        10 -1 + => (9)
        -1 0 + => (-1)
    )

    "Int.-" test (
        10 20 - => (-10)
        20 31 - => (-11)
        10 -1 - => (11)
        -1 0 - => (-1)
    )

    "Int.*" test (
        10 20 * => (200)
        10 -2 * => (-20)
        -1 -3 * => (3)
        0 10000 * => (0)
    )

    "Int./%" test (
        10 3 /% => (3, 1)   10 -3 /% => (-4, -2)
         9 3 /% => (3, 0)    9 -3 /% => (-3,  0)
         8 3 /% => (2, 2)    8 -3 /% => (-3, -1)
         7 3 /% => (2, 1)    7 -3 /% => (-3, -2)
         6 3 /% => (2, 0)    6 -3 /% => (-2,  0)
         5 3 /% => (1, 2)    5 -3 /% => (-2, -1)
         4 3 /% => (1, 1)    4 -3 /% => (-2, -2)
         3 3 /% => (1, 0)    3 -3 /% => (-1,  0)
         2 3 /% => (0, 2)    2 -3 /% => (-1, -1)
         1 3 /% => (0, 1)    1 -3 /% => (-1, -2)
         0 3 /% => (0, 0)    0 -3 /% => ( 0,  0)
        -1 3 /% => (-1, 2)  -1 -3 /% => ( 0, -1)
        -2 3 /% => (-1, 1)  -2 -3 /% => ( 0, -2)
        -3 3 /% => (-1, 0)  -3 -3 /% => ( 1,  0)
        -4 3 /% => (-2, 2)  -4 -3 /% => ( 1, -1)
        -5 3 /% => (-2, 1)  -5 -3 /% => ( 1, -2)
        -6 3 /% => (-2, 0)  -6 -3 /% => ( 2,  0)
        -7 3 /% => (-3, 2)  -7 -3 /% => ( 2, -1)
        -8 3 /% => (-3, 1)  -8 -3 /% => ( 2, -2)
        -9 3 /% => (-3, 0)  -9 -3 /% => ( 3,  0)
       -10 3 /% => (-4, 2) -10 -3 /% => ( 3, -1)
    )

    +Tests.end!)


# mirth-test # pout # 10 tests passed.
