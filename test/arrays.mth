module test.arrays
import std.prelude
import std.array
import std.list
import std.world
import std.test
import std.str

def main {

    +Tests (
        "len, push, pop, get, set" test (
            Nil@Int \array
            @array len =>: 0u
            Str(@array repr;) =>: "Array( )"

            10 @array:push
            @array len =>: 1u
            0u @array get =>: 10
            Str(@array repr;) =>: "Array( 10 ; )"

            20 @array:push
            @array len =>: 2u
            0u @array get =>: 10
            1u @array get =>: 20
            Str(@array repr;) =>: "Array( 10 ; 20 ; )"

            30 @array:push
            @array len =>: 3u
            0u @array get =>: 10
            1u @array get =>: 20
            2u @array get =>: 30
            Str(@array repr;) =>: "Array( 10 ; 20 ; 30 ; )"

            40 1u @array:set
            @array len =>: 3u
            0u @array get =>: 10
            1u @array get =>: 40
            2u @array get =>: 30
            Str(@array repr;) =>: "Array( 10 ; 40 ; 30 ; )"

            @array:pop =>: 30
            @array len =>: 2u
            0u @array get =>: 10
            1u @array get =>: 40
            Str(@array repr;) =>: "Array( 10 ; 40 ; )"

            @array:pop =>: 40
            @array len =>: 1u
            0u @array get =>: 10
            Str(@array repr;) =>: "Array( 10 ; )"

            @array:pop =>: 10
            @array len =>: 0u
            Str(@array repr;) =>: "Array( )"
        )

        "Array.Fill, prefix, suffix, slice" test (
            10 5u Array.New \array
            @array repr =>: "Array( 10 ; 10 ; 10 ; 10 ; 10 ; )"

            30 2u @array:set
            @array repr =>: "Array( 10 ; 10 ; 30 ; 10 ; 10 ; )"

            100 3u @array:set
            @array repr =>: "Array( 10 ; 10 ; 30 ; 100 ; 10 ; )"

            0 1u @array:set
            @array repr =>: "Array( 10 ; 0 ; 30 ; 100 ; 10 ; )"

            0u @array prefix repr =>: "Array( )"
            1u @array prefix repr =>: "Array( 10 ; )"
            2u @array prefix repr =>: "Array( 10 ; 0 ; )"
            3u @array prefix repr =>: "Array( 10 ; 0 ; 30 ; )"
            4u @array prefix repr =>: "Array( 10 ; 0 ; 30 ; 100 ; )"
            5u @array prefix repr =>: "Array( 10 ; 0 ; 30 ; 100 ; 10 ; )"
            6u @array prefix repr =>: "Array( 10 ; 0 ; 30 ; 100 ; 10 ; )"

            0u @array suffix repr =>: "Array( 10 ; 0 ; 30 ; 100 ; 10 ; )"
            1u @array suffix repr =>: "Array( 0 ; 30 ; 100 ; 10 ; )"
            2u @array suffix repr =>: "Array( 30 ; 100 ; 10 ; )"
            3u @array suffix repr =>: "Array( 100 ; 10 ; )"
            4u @array suffix repr =>: "Array( 10 ; )"
            5u @array suffix repr =>: "Array( )"
            6u @array suffix repr =>: "Array( )"
        )

        "Array(;), cat" test (
            Array(10 ; 20 ; 30 ;) repr =>: "Array( 10 ; 20 ; 30 ; )"
            Array(10 ; 20 ; 30 ;) Array(40 ; 50 ; 60 ;) cat repr
                =>: "Array( 10 ; 20 ; 30 ; 40 ; 50 ; 60 ; )"
            Array(10 ; 20 ; 30 ;) Array(40 ; 50 ; 60 ;) cat repr
                =>: "Array( 10 ; 20 ; 30 ; 40 ; 50 ; 60 ; )"
            Array() Array(1 ; 2 ; 3 ; 4 ; 5 ;) cat repr
                =>: "Array( 1 ; 2 ; 3 ; 4 ; 5 ; )"
            Array(1 ; 2 ; 3 ; 4 ; 5 ;) Array() cat repr
                =>: "Array( 1 ; 2 ; 3 ; 4 ; 5 ; )"
            Nil@Int Array() cat repr =>: "Array( )"
        )

        "Array.=" test (
            Nil@Int Nil@Int = =>: True

            Array(0 ;) Array(0 ;) = =>: True
            Array(0 ;) Array(1 ;) = =>: False
            Array(1 ;) Array(0 ;) = =>: False
            Array(1 ;) Array(1 ;) = =>: True

            Array(0 ; 0 ;) Array(0 ; 0 ;) = =>: True
            Array(0 ; 0 ;) Array(1 ; 0 ;) = =>: False
            Array(1 ; 0 ;) Array(0 ; 0 ;) = =>: False
            Array(1 ; 0 ;) Array(1 ; 0 ;) = =>: True

            Array(0 ; 0 ;) Array(0 ; 1 ;) = =>: False
            Array(0 ; 0 ;) Array(1 ; 1 ;) = =>: False
            Array(1 ; 0 ;) Array(0 ; 1 ;) = =>: False
            Array(1 ; 0 ;) Array(1 ; 1 ;) = =>: False

            Array(0 ; 1 ;) Array(0 ; 0 ;) = =>: False
            Array(0 ; 1 ;) Array(1 ; 0 ;) = =>: False
            Array(1 ; 1 ;) Array(0 ; 0 ;) = =>: False
            Array(1 ; 1 ;) Array(1 ; 0 ;) = =>: False

            Array(0 ; 1 ;) Array(0 ; 1 ;) = =>: True
            Array(0 ; 1 ;) Array(1 ; 1 ;) = =>: False
            Array(1 ; 1 ;) Array(0 ; 1 ;) = =>: False
            Array(1 ; 1 ;) Array(1 ; 1 ;) = =>: True

            Nil@Int Array(0 ;) = =>: False
            Nil@Int Array(1 ;) = =>: False
            Array(0 ;) Nil@Int = =>: False
            Array(1 ;) Nil@Int = =>: False

            Array(0 ;) Array(0 ; 0 ;) = =>: False
            Array(0 ;) Array(0 ; 1 ;) = =>: False
            Array(0 ;) Array(1 ; 0 ;) = =>: False
            Array(0 ;) Array(1 ; 1 ;) = =>: False
            Array(1 ;) Array(0 ; 0 ;) = =>: False
            Array(1 ;) Array(0 ; 1 ;) = =>: False
            Array(1 ;) Array(1 ; 0 ;) = =>: False
            Array(1 ;) Array(1 ; 1 ;) = =>: False
            Array(0 ; 0 ;) Array(0 ;) = =>: False
            Array(0 ; 1 ;) Array(0 ;) = =>: False
            Array(1 ; 0 ;) Array(0 ;) = =>: False
            Array(1 ; 1 ;) Array(0 ;) = =>: False
            Array(0 ; 0 ;) Array(1 ;) = =>: False
            Array(0 ; 1 ;) Array(1 ;) = =>: False
            Array(1 ; 0 ;) Array(1 ;) = =>: False
            Array(1 ; 1 ;) Array(1 ;) = =>: False
        )

        "Array(Bool)" test (
            Array( True ; False ; True ; False ; ) \array
            0u @array get =>: True
            1u @array get =>: False
            2u @array get =>: True
            3u @array get =>: False
            @array @array = =>: True
            @array show-bools =>: "1010"
            @array @array cat !array
            @array show-bools =>: "10101010"
            0u @array suffix show-bools =>: "10101010"
            1u @array suffix show-bools =>:  "0101010"
            2u @array suffix show-bools =>:   "101010"

            False 40u Array.New !array
            @array show-bools =>: "0000000000000000000000000000000000000000"
            True 10u @array:set
            @array show-bools =>: "0000000000100000000000000000000000000000"
            True 35u @array:set
            @array show-bools =>: "0000000000100000000000000000000000010000"
            0u @array suffix show-bools =>: "0000000000100000000000000000000000010000"
            1u @array suffix show-bools =>:  "000000000100000000000000000000000010000"
            2u @array suffix show-bools =>:   "00000000100000000000000000000000010000"
            3u @array suffix show-bools =>:    "0000000100000000000000000000000010000"
            4u @array suffix show-bools =>:     "000000100000000000000000000000010000"
            5u @array suffix show-bools =>:      "00000100000000000000000000000010000"
            6u @array suffix show-bools =>:       "0000100000000000000000000000010000"
            7u @array suffix show-bools =>:        "000100000000000000000000000010000"
            8u @array suffix show-bools =>:         "00100000000000000000000000010000"
            9u @array suffix show-bools =>:          "0100000000000000000000000010000"
            10u @array suffix show-bools =>:          "100000000000000000000000010000"

            @array 10u @array suffix cat show-bools => (
                "0000000000100000000000000000000000010000"
                          "100000000000000000000000010000" cat
            )

            10u @array suffix @array cat show-bools => (
                          "100000000000000000000000010000"
                "0000000000100000000000000000000000010000" cat
            )
            10u @array suffix
             6u @array suffix cat
                @array cat show-bools => (
                          "100000000000000000000000010000"
                      "0000100000000000000000000000010000" cat
                "0000000000100000000000000000000000010000" cat
            )
        )

        "Array(List(Int))" test (
            Nil@ListInt repr =>: "Array( )"

            Nil@ListInt \array
            List(1 ; 2 ; 3 ;) @array:push
            List(4 ; 5 ;) @array:push
            @array repr
                =>: "Array( List( 1 ; 2 ; 3 ; ) ; List( 4 ; 5 ; ) ; )"

            List.Nil @array:push
            @array repr
                =>: "Array( List( 1 ; 2 ; 3 ; ) ; List( 4 ; 5 ; ) ; List( ) ; )"
            @array map(sum) repr
                =>: "Array( 6 Some ; 9 Some ; None ; )"
            @array map(foldl(0,+))
                =>: Array( 6 ; 9 ; 0 ; )
        )

        "Array.sort" test (
            Array( 1 ; 2 ; 3 ; 4 ; ) sort
                =>: Array( 1 ; 2 ; 3 ; 4 ; )

            Array( 4 ; 3 ; 2 ; 1 ; ) sort
                =>: Array( 1 ; 2 ; 3 ; 4 ; )

            Array( 1 ; 3 ; 2 ; 5 ; 4 ; ) sort
                =>: Array( 1 ; 2 ; 3 ; 4 ; 5 ; )

            "Hello, world!" prim-str-to-array sort prim-array-to-str
                =>: " !,Hdellloorw"
        )

        "expand" test (
            Array( 1 ; 2 ; 3 ; ) \array
            0 6u @array:expand
            @array repr =>: "Array( 1 ; 2 ; 3 ; 0 ; 0 ; 0 ; )"
            4 10u @array:expand
            @array repr =>: "Array( 1 ; 2 ; 3 ; 0 ; 0 ; 0 ; 4 ; 4 ; 4 ; 4 ; )"

            Array.Nil \array
            1 100u @array:expand
            0 @array for(+) =>: 100

            Array( ) \array
            False 2560u @array:expand
            @array show-bools => (
                "0000000000"
                dup cat dup cat dup cat dup cat
                dup cat dup cat dup cat dup cat
            )

            +Debug (
                "this is a regression test" \val
                Array() \array
                @val get-num-refs \refs0
                @val 100u @array:expand
                @val get-num-refs \refs1
                @val 200u @array:expand
                @val get-num-refs \refs2
                @val 300u @array:expand
                @val get-num-refs \refs3
                @refs0 @refs0 - =>: 0
                @refs1 @refs0 - =>: 100
                @refs2 @refs0 - =>: 200
                @refs3 @refs0 - =>: 300
            )
        )

        "using buffer" test (
            Array( 0u8 ) \array
            4u @array:expand
            @array repr =>: "Array( 0u8 ; 0u8 ; 0u8 ; 0u8 ; )"
            10u8 unsafe:@array:with-base:!U8
            @array repr =>: "Array( 10u8 ; 0u8 ; 0u8 ; 0u8 ; )"
            20u8 unsafe:@array:with-base(1 bytes + !U8)
            @array repr =>: "Array( 10u8 ; 20u8 ; 0u8 ; 0u8 ; )"
            30u8 unsafe:@array:with-base(2 bytes + !U8)
            @array repr =>: "Array( 10u8 ; 20u8 ; 30u8 ; 0u8 ; )"
        )
    )
}

def New@Int [ Nat -- Array(Int) ] { 0 swap Array.New }
def Nil@Int [ Array(Int) ] { 0 0u Array.New }
def New@ListInt [ Nat -- Array:List:Int ] { L0 swap Array.New }
def Nil@ListInt [ Array:List:Int ] { L0 0u Array.New }
def show-bools [ Array(Bool) -- Str ] { Str:for:if("1";,"0";) }

# mirth-test # pout # 9 tests passed.
