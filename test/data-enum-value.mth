module(mirth-tests.data-enum-value)

import(std.prelude)
data(Foo, Foo0, Foo1, Foo2)
data(Bar, Bar0, Bar1 -> Int)
data(Baz, Baz -> Foo)
data(MyStr, MyStr -> Str)

data(CustomEnum,
    1 One, Two, Three,
    400 FourHundred, FourHundredOne,
    -10 NegativeTen, NegativeNine, NegativeEight,
)
data(CustomUnit, 42 FortyTwo)
def CustomUnit.indirect [ CustomUnit -- CustomUnit ] { id }

def(main, --,
    assert!(Foo.Foo0 enum-value 0 ==, "Foo0 enum-value 0 ==")
    assert!(Foo.Foo1 enum-value 1 ==, "Foo1 enum-value 1 ==")
    assert!(Foo.Foo2 enum-value 2 ==, "Foo2 enum-value 2 ==")
    assert!(Bar.Bar0 enum-value 0 ==, "Bar0 enum-value 0 ==")
    assert!(0 Bar.Bar1 enum-value 1 ==, "0 Bar1 enum-value 1 ==")
    assert!(1 Bar.Bar1 enum-value 1 ==, "1 Bar1 enum-value 1 ==")
    assert!(2 Bar.Bar1 enum-value 1 ==, "2 Bar1 enum-value 1 ==")
    assert!(Foo.Foo0 Baz.Baz enum-value 0 ==, "Foo0 Baz enum-value 0 ==")
    assert!(Foo.Foo1 Baz.Baz enum-value 0 ==, "Foo1 Baz enum-value 0 ==")
    assert!(Foo.Foo2 Baz.Baz enum-value 0 ==, "Foo2 Baz enum-value 0 ==")
    assert!("Hello" MyStr enum-value 0 ==, "\"Hello\" MyStr enum-value 0 ==")
    assert!("World" MyStr enum-value 0 ==, "\"World\" MyStr enum-value 0 ==")

    assert!(CustomEnum.One enum-value 1 ==, "One enum-value 1 ==")
    assert!(CustomEnum.Two enum-value 2 ==, "Two enum-value 2 ==")
    assert!(CustomEnum.Three enum-value 3 ==, "Three enum-value 3 ==")
    assert!(CustomEnum.FourHundred enum-value 400 ==, "FourHundred enum-value 400 ==")
    assert!(CustomEnum.FourHundredOne enum-value 401 ==, "FourHundredOne enum-value 401 ==")
    assert!(CustomEnum.NegativeTen enum-value -10 ==, "NegativeTen enum-value -10 ==")
    assert!(CustomEnum.NegativeNine enum-value -9 ==, "NegativeNine enum-value -9 ==")
    assert!(CustomEnum.NegativeEight enum-value -8 ==, "NegativeNine enum-value -8 ==")
    assert!(CustomUnit.FortyTwo enum-value 42 ==, "FortyTwo enum-value 42 ==")
    assert!(CustomUnit.FortyTwo indirect enum-value 42 ==, "FortyTwo indirect enum-value 42 ==")
)
