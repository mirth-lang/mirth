module(mirth-tests.std-list)

import(std.prelude)
import(std.list)
import(std.maybe)
import(std.either)
import(std.test)
import(std.str)

def(main, +World -- +World,
    +Tests.start!

    "constructors" test (
        Nil => ( LIST( ) )
        1 Nil Cons => ( LIST( 1 ; ) )
        1 2 Nil Cons Cons => ( LIST( 1 ; 2 ; ) )
        1 2 3 Nil Cons Cons Cons => ( LIST( 1 ; 2 ; 3 ; ) )

        L0 => ( LIST( ) )
        1 L1 => ( LIST( 1 ; ) )
        1 2 L2 => ( LIST( 1 ; 2 ; ) )
        1 2 3 L3 => ( LIST( 1 ; 2 ; 3 ; ) )
        1 2 3 4 L4 => ( LIST( 1 ; 2 ; 3 ; 4 ; ) )
        1 2 3 4 5 L5 => ( LIST( 1 ; 2 ; 3 ; 4 ; 5 ; ) )
        1 2 3 4 5 6 L6 => ( LIST( 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; ) )
        1 2 3 4 5 6 7 L7 => ( LIST( 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; ) )
        1 2 3 4 5 6 7 8 L8 => ( LIST( 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; ) )

        1 L1+ => ( LIST+( 1 ;+ ) )
        1 2 L2+ => ( LIST+( 1 ; 2 ;+ ) )
        1 2 3 L3+ => ( LIST+( 1 ; 2 ; 3 ;+ ) )
        1 2 3 4 L4+ => ( LIST+( 1 ; 2 ; 3 ; 4 ;+ ) )
        1 2 3 4 5 L5+ => ( LIST+( 1 ; 2 ; 3 ; 4 ; 5 ;+ ) )
        1 2 3 4 5 6 L6+ => ( LIST+( 1 ; 2 ; 3 ; 4 ; 5 ; 6 ;+ ) )
        1 2 3 4 5 6 7 L7+ => ( LIST+( 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ;+ ) )
        1 2 3 4 5 6 7 8 L8+ => ( LIST+( 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ;+ ) )
    )

    "destructors" test (
        L0 /L0 => ( T )
        1 L1 /L0 => ( F )
        1 2 L2 /L0 => ( F )
        1 2 3 L3 /L0 => ( F )

        L0 /L1 => ( NONE )
        1 L1 /L1 => ( 1 SOME )
        1 2 L2 /L1 => ( NONE )
        1 2 3 L3 /L1 => ( NONE )

        L0 /L2 =>2 ( NONE )
        1 L1 /L2 =>2 ( NONE )
        1 2 L2 /L2 =>2 ( 1 2 pack2 SOME )
        1 2 3 L3 /L2 =>2 ( NONE )

        L0 /L3 =>3 ( NONE )
        1 L1 /L3 =>3 ( NONE )
        1 2 L2 /L3 =>3 ( NONE )
        1 2 3 L3 /L3 =>3 ( 1 2 3 pack3 SOME )

        1 L1+ /L1+ => ( 1 SOME )
        1 2 L2+ /L1+ => ( NONE )
        1 2 3 L3+ /L1+ => ( NONE )
    )

    "empty?" test (
        L0 empty? => ( T )
        1 L1 empty? => ( F )
        1 2 L2 empty? => ( F )
        1 2 3 L3 empty? => ( F )
    )

    "len" test (
        L0 len => ( 0 )
        1 L1 len => ( 1 )
        2 3 L2 len => ( 2 )
        4 5 6 L3 len => ( 3 )

        7 L1+ len => ( 1 )
        8 9 L2+ len => ( 2 )
        8 7 6 L3+ len => ( 3 )
    )

    ">List" test (
        1 L1+ >List => ( 1 L1 )
        1 2 L2+ >List => ( 1 2 L2 )
        1 2 3 L3+ >List => ( 1 2 3 L3 )
    )

    ">List+" test (
        L0 >List+ =>+ ( NONE )
        1 L1 >List+ =>+ ( 1 L1+ SOME )
        1 2 L2 >List+ =>+ ( 1 2 L2+ SOME )
        1 2 3 L3 >List+ =>+ ( 1 2 3 L3+ SOME )
    )

    "cons" test (
        0 L0 cons => ( 0 L1 )
        0 1 L1 cons => ( 0 1 L2 )
        0 1 2 L2 cons => ( 0 1 2 L3 )
        0 1 2 3 L3 cons => ( 0 1 2 3 L4 )
    )

    "cons+" test (
        0 L0 cons+ => ( 0 L1+ )
        0 1 L1 cons+ => ( 0 1 L2+ )
        0 1 2 L2 cons+ => ( 0 1 2 L3+ )
        0 1 2 3 L3 cons+ => ( 0 1 2 3 L4+ )

        0 1 L1+ cons+ => ( 0 1 L2+ )
        0 1 2 L2+ cons+ => ( 0 1 2 L3+ )
        0 1 2 3 L3+ cons+ => ( 0 1 2 3 L4+ )
    )

    "List.snoc" test (
        L0 0 List.snoc => ( 0 L1 )
        11 L1 0 List.snoc => ( 11 0 L2 )
        21 22 L2 0 List.snoc => ( 21 22 0 L3 )
        31 32 33 L3 0 List.snoc => ( 31 32 33 0 L4 )
    )

    "List.snoc+" test (
        L0 0 List.snoc+ => ( 0 L1+ )
        11 L1 0 List.snoc+ => ( 11 0 L2+ )
        21 22 L2 0 List.snoc+ => ( 21 22 0 L3+ )
        31 32 33 L3 0 List.snoc+ => ( 31 32 33 0 L4+ )
    )

    "List+.snoc+" test (
        11 L1+ 0 List+.snoc+ => ( 11 0 L2+ )
        21 22 L2+ 0 List+.snoc+ => ( 21 22 0 L3+ )
        31 32 33 L3+ 0 List+.snoc+ => ( 31 32 33 0 L4+ )
    )

    "uncons" test (
        L0 uncons
            => ( L0 )
            => ( NONE )
        11 L1 uncons
            => ( L0 )
            => ( 11 SOME )
        21 22 L2 uncons
            => ( 22 L1 )
            => ( 21 SOME )
        31 32 33 L3 uncons
            => ( 32 33 L2 )
            => ( 31 SOME )

        11 L1+ uncons
            => ( L0 )
            => ( 11 )
        21 22 L2+ uncons
            => ( 22 L1 )
            => ( 21 )
        31 32 33 L3+ uncons
            => ( 32 33 L2 )
            => ( 31 )
    )

    "unsnoc" test (
        LIST( 10 ; 20 ; 30 ; ) unsnoc
            => ( 30 SOME )
            => ( 10 20 L2 )
        LIST+( 11 ;+ 21 ; 31 ; ) unsnoc
            => ( 31 )
            => ( 11 21 L2 )
    )

    "cat" test (
              L0       L0 cat => (             L0 )
        1     L1       L0 cat => ( 1           L1 )
        1 2   L2       L0 cat => ( 1 2         L2 )
        1 2 3 L3       L0 cat => ( 1 2 3       L3 )
              L0 9     L1 cat => (       9     L1 )
        1     L1 9     L1 cat => ( 1     9     L2 )
        1 2   L2 9     L1 cat => ( 1 2   9     L3 )
        1 2 3 L3 9     L1 cat => ( 1 2 3 9     L4 )
              L0 9 8   L2 cat => (       9 8   L2 )
        1     L1 9 8   L2 cat => ( 1     9 8   L3 )
        1 2   L2 9 8   L2 cat => ( 1 2   9 8   L4 )
        1 2 3 L3 9 8   L2 cat => ( 1 2 3 9 8   L5 )
              L0 9 8 7 L3 cat => (       9 8 7 L3 )
        1     L1 9 8 7 L3 cat => ( 1     9 8 7 L4 )
        1 2   L2 9 8 7 L3 cat => ( 1 2   9 8 7 L5 )
        1 2 3 L3 9 8 7 L3 cat => ( 1 2 3 9 8 7 L6 )

              L0 9     L1+ cat => (       9     L1+ )
        1     L1 9     L1+ cat => ( 1     9     L2+ )
        1 2   L2 9     L1+ cat => ( 1 2   9     L3+ )
        1 2 3 L3 9     L1+ cat => ( 1 2 3 9     L4+ )
              L0 9 8   L2+ cat => (       9 8   L2+ )
        1     L1 9 8   L2+ cat => ( 1     9 8   L3+ )
        1 2   L2 9 8   L2+ cat => ( 1 2   9 8   L4+ )
        1 2 3 L3 9 8   L2+ cat => ( 1 2 3 9 8   L5+ )
              L0 9 8 7 L3+ cat => (       9 8 7 L3+ )
        1     L1 9 8 7 L3+ cat => ( 1     9 8 7 L4+ )
        1 2   L2 9 8 7 L3+ cat => ( 1 2   9 8 7 L5+ )
        1 2 3 L3 9 8 7 L3+ cat => ( 1 2 3 9 8 7 L6+ )
    )
    "cat+" test (
        1     L1+       L0 cat+ => ( 1           L1+ )
        1 2   L2+       L0 cat+ => ( 1 2         L2+ )
        1 2 3 L3+       L0 cat+ => ( 1 2 3       L3+ )
        1     L1+ 9     L1 cat+ => ( 1     9     L2+ )
        1 2   L2+ 9     L1 cat+ => ( 1 2   9     L3+ )
        1 2 3 L3+ 9     L1 cat+ => ( 1 2 3 9     L4+ )
        1     L1+ 9 8   L2 cat+ => ( 1     9 8   L3+ )
        1 2   L2+ 9 8   L2 cat+ => ( 1 2   9 8   L4+ )
        1 2 3 L3+ 9 8   L2 cat+ => ( 1 2 3 9 8   L5+ )
        1     L1+ 9 8 7 L3 cat+ => ( 1     9 8 7 L4+ )
        1 2   L2+ 9 8 7 L3 cat+ => ( 1 2   9 8 7 L5+ )
        1 2 3 L3+ 9 8 7 L3 cat+ => ( 1 2 3 9 8 7 L6+ )

        1     L1+ 9     L1+ cat+ => ( 1     9     L2+ )
        1 2   L2+ 9     L1+ cat+ => ( 1 2   9     L3+ )
        1 2 3 L3+ 9     L1+ cat+ => ( 1 2 3 9     L4+ )
        1     L1+ 9 8   L2+ cat+ => ( 1     9 8   L3+ )
        1 2   L2+ 9 8   L2+ cat+ => ( 1 2   9 8   L4+ )
        1 2 3 L3+ 9 8   L2+ cat+ => ( 1 2 3 9 8   L5+ )
        1     L1+ 9 8 7 L3+ cat+ => ( 1     9 8 7 L4+ )
        1 2   L2+ 9 8 7 L3+ cat+ => ( 1 2   9 8 7 L5+ )
        1 2 3 L3+ 9 8 7 L3+ cat+ => ( 1 2 3 9 8 7 L6+ )
    )

    "first" test (
        L0 first => ( NONE )
        1 L1 first => ( 1 SOME )
        2 3 L2 first => ( 2 SOME )
        4 5 6 L3 first => ( 4 SOME )

        7 L1+ first => ( 7 )
        8 9 L2+ first => ( 8 )
        10 11 12 L3+ first => ( 10 )
    )

    "last" test (
        L0 last => ( NONE )
        1 L1 last => ( 1 SOME )
        1 2 L2 last => ( 2 SOME )
        1 2 3 L3 last => ( 3 SOME )

        1 L1+ last => ( 1 )
        1 2 L2+ last => ( 2 )
        1 2 3 L3+ last => ( 3 )
    )

    "reverse" test (
        L0 reverse => ( L0 )
        1 L1 reverse => ( 1 L1 )
        1 2 L2 reverse => ( 2 1 L2 )
        1 2 3 L3 reverse => ( 3 2 1 L3 )

        1 L1+ reverse => ( 1 L1+ )
        1 2 L2+ reverse => ( 2 1 L2+ )
        1 2 3 L3+ reverse => ( 3 2 1 L3+ )
    )

    "map" test (
        L0 map(Int.1+) => ( L0 )
        1 L1 map(1+) => ( 2 L1 )
        1 2 L2 map(1+) => ( 2 3 L2 )
        1 2 3 L3 map(1+) => ( 2 3 4 L3 )

        1 L1+ map(1+) => ( 2 L1+ )
        1 2 L2+ map(1+) => ( 2 3 L2+ )
        1 2 3 L3+ map(1+) => ( 2 3 4 L3+ )
    )

    "for" test (
        ""   L0 for(Int.show cat) => ( "" )
        "" 1     L1 for(show cat) => ( "1" )
        "" 1 2   L2 for(show cat) => ( "12" )
        "" 1 2 3 L3 for(show cat) => ( "123" )

        "" 4     L1+ for(show cat) => ( "4" )
        "" 4 5   L2+ for(show cat) => ( "45" )
        "" 4 5 6 L3+ for(show cat) => ( "456" )
    )

    "reverse-for" test (
        ""   L0 reverse-for(Int.show cat) => ( "" )
        "" 1     L1 reverse-for(show cat) => ( "1" )
        "" 1 2   L2 reverse-for(show cat) => ( "21" )
        "" 1 2 3 L3 reverse-for(show cat) => ( "321" )

        "" 4     L1+ reverse-for(show cat) => ( "4" )
        "" 4 5   L2+ reverse-for(show cat) => ( "54" )
        "" 4 5 6 L3+ reverse-for(show cat) => ( "654" )
    )

    "fold" test (
        L0         fold(Str.cat) =>s ( NONE )
        "1"         L1 fold(cat) =>s ( "1" SOME )
        "1" "2"     L2 fold(cat) =>s ( "12" SOME )
        "1" "2" "3" L3 fold(cat) =>s ( "123" SOME )

        "1"         L1+ fold(cat) => ( "1" )
        "1" "2"     L2+ fold(cat) => ( "12" )
        "1" "2" "3" L3+ fold(cat) => ( "123" )
    )

    "filter" test (
        L0 filter(dup 0 >) => (L0)
        0 L1 filter(dup 0>) => (L0)
        0 1 L2 filter(dup 0>) => (1 L1)
        0 1 -1 L3 filter(dup 0>) => (1 L1)
        0 1 -1 2 L4 filter(dup 0>) => (1 2 L2)
        0 1 -1 2 -2 L5 filter(dup 0>) => (1 2 L2)
        0 1 -1 2 -2 3 L6 filter(dup 0>) => (1 2 3 L3)
        0 1 -1 2 -2 3 -3 L7 filter(dup 0>) => (1 2 3 L3)

        0 L1+ filter(dup 0>) => (L0)
        0 1 L2+ filter(dup 0>) => (1 L1)
        0 1 -1 L3+ filter(dup 0>) => (1 L1)
        0 1 -1 2 L4+ filter(dup 0>) => (1 2 L2)
        0 1 -1 2 -2 L5+ filter(dup 0>) => (1 2 L2)
        0 1 -1 2 -2 3 L6+ filter(dup 0>) => (1 2 3 L3)
        0 1 -1 2 -2 3 -3 L7+ filter(dup 0>) => (1 2 3 L3)
    )

    "flatmap" test (
        L0 flatmap(L1) => (L0)
        1 L1 flatmap(L1) => (1 L1)
        1 2 L2 flatmap(L1) => (1 2 L2)
        1 2 3 L3 flatmap(L1) => (1 2 3 L3)

        L0 flatmap(dup L2) => (L0)
        1 L1 flatmap(dup L2) => (1 1 L2)
        1 2 L2 flatmap(dup L2) => (1 1 2 2 L4)
        1 2 3 L3 flatmap(dup L2) => (1 1 2 2 3 3 L6)

        1 L1+ flatmap(dup L2) => (1 1 L2)
        1 2 L2+ flatmap(dup L2) => (1 1 2 2 L4)
        1 2 3 L3+ flatmap(dup L2) => (1 1 2 2 3 3 L6)
    )

    "filter-some" test (
        id      L0 filter-some(drop NONE) => (L0)
        1       L1 filter-some(drop NONE) => (L0)
        1 2     L2 filter-some(drop NONE) => (L0)
        1 2 3   L3 filter-some(drop NONE) => (L0)
        1 2 3 4 L4 filter-some(drop NONE) => (L0)

        id      L0 filter-some(/Even) => (L0)
        1       L1 filter-some(/Even) => (L0)
        1 2     L2 filter-some(/Even) => (1 L1)
        1 2 3   L3 filter-some(/Even) => (1 L1)
        1 2 3 4 L4 filter-some(/Even) => (1 2 L2)

        id      L0 filter-some(/Odd) => (L0)
        1       L1 filter-some(/Odd) => (0 L1)
        1 2     L2 filter-some(/Odd) => (0 L1)
        1 2 3   L3 filter-some(/Odd) => (0 1 L2)
        1 2 3 4 L4 filter-some(/Odd) => (0 1 L2)

        1       L1+ filter-some(/Even) => (L0)
        1 2     L2+ filter-some(/Even) => (1 L1)
        1 2 3   L3+ filter-some(/Even) => (1 L1)
        1 2 3 4 L4+ filter-some(/Even) => (1 2 L2)

        1       L1+ filter-some(/Odd) => (0 L1)
        1 2     L2+ filter-some(/Odd) => (0 L1)
        1 2 3   L3+ filter-some(/Odd) => (0 1 L2)
        1 2 3 4 L4+ filter-some(/Odd) => (0 1 L2)
    )

    "find-some" test (
        id      L0 find-some(drop NONE) => (NONE)
        1       L1 find-some(drop NONE) => (NONE)
        1 2     L2 find-some(drop NONE) => (NONE)
        1 2 3   L3 find-some(drop NONE) => (NONE)
        1 2 3 4 L4 find-some(drop NONE) => (NONE)

        id      L0 find-some(/Even) => (NONE)
        1       L1 find-some(/Even) => (NONE)
        1 2     L2 find-some(/Even) => (1 SOME)
        1 2 3   L3 find-some(/Even) => (1 SOME)
        1 2 3 4 L4 find-some(/Even) => (1 SOME)

        id      L0 find-some(/Odd) => (NONE)
        1       L1 find-some(/Odd) => (0 SOME)
        1 2     L2 find-some(/Odd) => (0 SOME)
        1 2 3   L3 find-some(/Odd) => (0 SOME)
        1 2 3 4 L4 find-some(/Odd) => (0 SOME)

        1       L1+ find-some(/Even) => (NONE)
        1 2     L2+ find-some(/Even) => (1 SOME)
        1 2 3   L3+ find-some(/Even) => (1 SOME)
        1 2 3 4 L4+ find-some(/Even) => (1 SOME)

        1       L1+ find-some(/Odd) => (0 SOME)
        1 2     L2+ find-some(/Odd) => (0 SOME)
        1 2 3   L3+ find-some(/Odd) => (0 SOME)
        1 2 3 4 L4+ find-some(/Odd) => (0 SOME)
    )

    "reverse-find-some" test (
        id      L0 reverse-find-some(drop NONE) => (NONE)
        1       L1 reverse-find-some(drop NONE) => (NONE)
        1 2     L2 reverse-find-some(drop NONE) => (NONE)
        1 2 3   L3 reverse-find-some(drop NONE) => (NONE)
        1 2 3 4 L4 reverse-find-some(drop NONE) => (NONE)

        id      L0 reverse-find-some(/Even) => (NONE)
        1       L1 reverse-find-some(/Even) => (NONE)
        1 2     L2 reverse-find-some(/Even) => (1 SOME)
        1 2 3   L3 reverse-find-some(/Even) => (1 SOME)
        1 2 3 4 L4 reverse-find-some(/Even) => (2 SOME)

        id      L0 reverse-find-some(/Odd) => (NONE)
        1       L1 reverse-find-some(/Odd) => (0 SOME)
        1 2     L2 reverse-find-some(/Odd) => (0 SOME)
        1 2 3   L3 reverse-find-some(/Odd) => (1 SOME)
        1 2 3 4 L4 reverse-find-some(/Odd) => (1 SOME)

        1       L1+ reverse-find-some(/Even) => (NONE)
        1 2     L2+ reverse-find-some(/Even) => (1 SOME)
        1 2 3   L3+ reverse-find-some(/Even) => (1 SOME)
        1 2 3 4 L4+ reverse-find-some(/Even) => (2 SOME)

        1       L1+ reverse-find-some(/Odd) => (0 SOME)
        1 2     L2+ reverse-find-some(/Odd) => (0 SOME)
        1 2 3   L3+ reverse-find-some(/Odd) => (1 SOME)
        1 2 3 4 L4+ reverse-find-some(/Odd) => (1 SOME)
    )

    "find" test (
        id      L0 find(dup 2 >) => (NONE)
        1       L1 find(dup 2 >) => (NONE)
        1 2     L2 find(dup 2 >) => (NONE)
        1 2 3   L3 find(dup 2 >) => (3 SOME)
        1 2 3 4 L4 find(dup 2 >) => (3 SOME)

        1       L1+ find(dup 2 >) => (NONE)
        1 2     L2+ find(dup 2 >) => (NONE)
        1 2 3   L3+ find(dup 2 >) => (3 SOME)
        1 2 3 4 L4+ find(dup 2 >) => (3 SOME)
    )

    "reverse-find" test (
        id      L0 reverse-find(dup 2 >) => (NONE)
        1       L1 reverse-find(dup 2 >) => (NONE)
        1 2     L2 reverse-find(dup 2 >) => (NONE)
        1 2 3   L3 reverse-find(dup 2 >) => (3 SOME)
        1 2 3 4 L4 reverse-find(dup 2 >) => (4 SOME)

        1       L1+ reverse-find(dup 2 >) => (NONE)
        1 2     L2+ reverse-find(dup 2 >) => (NONE)
        1 2 3   L3+ reverse-find(dup 2 >) => (3 SOME)
        1 2 3 4 L4+ reverse-find(dup 2 >) => (4 SOME)
    )

    "any" test (
        id      L0 any(dup 2 >) => (F)
        1       L1 any(dup 2 >) => (F)
        1 2     L2 any(dup 2 >) => (F)
        1 2 3   L3 any(dup 2 >) => (T)
        1 2 3 4 L4 any(dup 2 >) => (T)

        1       L1+ any(dup 2 >) => (F)
        1 2     L2+ any(dup 2 >) => (F)
        1 2 3   L3+ any(dup 2 >) => (T)
        1 2 3 4 L4+ any(dup 2 >) => (T)
    )

    "all" test (
        id      L0 all(dup 2 <) => (T)
        1       L1 all(dup 2 <) => (T)
        1 2     L2 all(dup 2 <) => (F)
        1 2 3   L3 all(dup 2 <) => (F)
        1 2 3 4 L4 all(dup 2 <) => (F)

        1       L1+ all(dup 2 <) => (T)
        1 2     L2+ all(dup 2 <) => (F)
        1 2 3   L3+ all(dup 2 <) => (F)
        1 2 3 4 L4+ all(dup 2 <) => (F)
    )

    "collect" test (
        collect(NONE) => ( L0 )
        1 2 3 L3 collect(unsnoc) => ( 3 2 1 L3 ) => ( L0 )
        1 2 3 L3 collect(uncons swap) => ( 1 2 3 L3 ) => ( L0 )
        1 2 3 4 L4 collect(uncons swap bind(/Odd)) => ( 0 L1 ) => ( 3 4 L2 )
        1 3 2 4 L4 collect(uncons swap bind(/Odd)) => ( 0 1 L2 ) => ( 4 L1 )
    )

    "collect-while" test (
        collect-while(F, 1) => ( L0 )
        1 collect-while(dup 0>, sip:1-) => ( 1 L1 ) => ( 0 )
        3 collect-while(dup 0>, sip:1-) => ( 3 2 1 L3 ) => ( 0 )
    )

    "Int.range" test (
        0 0 range => ( 0 L1 )
        0 1 range => ( 0 1 L2 )
        0 2 range => ( 0 1 2 L3 )
        0 3 range => ( 0 1 2 3 L4 )
        1 0 range => ( L0 )
        1 1 range => ( 1 L1 )
        1 2 range => ( 1 2 L2 )
        1 3 range => ( 1 2 3 L3 )
        2 0 range => ( L0 )
        2 1 range => ( L0 )
        2 2 range => ( 2 L1 )
        2 3 range => ( 2 3 L2 )
        3 0 range => ( L0 )
        3 1 range => ( L0 )
        3 2 range => ( L0 )
        3 3 range => ( 3 L1 )
    )

    "Int.to:" test (
        0 to: 0 => ( 0 L1 )
        0 to: 1 => ( 0 1 L2 )
        0 to: 2 => ( 0 1 2 L3 )
        0 to: 3 => ( 0 1 2 3 L4 )
        1 to: 0 => ( L0 )
        1 to: 1 => ( 1 L1 )
        1 to: 2 => ( 1 2 L2 )
        1 to: 3 => ( 1 2 3 L3 )
        2 to: 0 => ( L0 )
        2 to: 1 => ( L0 )
        2 to: 2 => ( 2 L1 )
        2 to: 3 => ( 2 3 L2 )
        3 to: 0 => ( L0 )
        3 to: 1 => ( L0 )
        3 to: 2 => ( L0 )
        3 to: 3 => ( 3 L1 )
    )

    "Int.from:" test (
        0 from: 0 => ( 0 L1 )
        0 from: 1 => ( L0 )
        0 from: 2 => ( L0 )
        0 from: 3 => ( L0 )
        1 from: 0 => ( 0 1 L2 )
        1 from: 1 => ( 1 L1 )
        1 from: 2 => ( L0 )
        1 from: 3 => ( L0 )
        2 from: 0 => ( 0 1 2 L3 )
        2 from: 1 => ( 1 2 L2 )
        2 from: 2 => ( 2 L1 )
        2 from: 3 => ( L0 )
        3 from: 0 => ( 0 1 2 3 L4 )
        3 from: 1 => ( 1 2 3 L3 )
        3 from: 2 => ( 2 3 L2 )
        3 from: 3 => ( 3 L1 )
    )

    "thaw & freeze" test (
        L0 thaw freeze => ( L0 )
        1 L1 thaw freeze => ( 1 L1 )
        1 2 L2 thaw freeze => ( 1 2 L2 )
        1 2 3 L3 thaw freeze => ( 1 2 3 L3 )

        1 L1+ thaw freeze => ( 1 L1+ )
        1 2 L2+ thaw freeze => ( 1 2 L2+ )
        1 2 3 L3+ thaw freeze => ( 1 2 3 L3+ )
    )

    "push!" test (
        id    L0 thaw 9 push! freeze => (       9 L1 )
        1     L1 thaw 9 push! freeze => ( 1     9 L2 )
        1 2   L2 thaw 9 push! freeze => ( 1 2   9 L3 )
        1 2 3 L3 thaw 9 push! freeze => ( 1 2 3 9 L4 )
        id    L0 thaw 9 push! 8 push! freeze => (       9 8 L2 )
        1     L1 thaw 9 push! 8 push! freeze => ( 1     9 8 L3 )
        1 2   L2 thaw 9 push! 8 push! freeze => ( 1 2   9 8 L4 )
        1 2 3 L3 thaw 9 push! 8 push! freeze => ( 1 2 3 9 8 L5 )
        id    L0 thaw 9 push! 8 push! 7 push! freeze => (       9 8 7 L3 )
        1     L1 thaw 9 push! 8 push! 7 push! freeze => ( 1     9 8 7 L4 )
        1 2   L2 thaw 9 push! 8 push! 7 push! freeze => ( 1 2   9 8 7 L5 )
        1 2 3 L3 thaw 9 push! 8 push! 7 push! freeze => ( 1 2 3 9 8 7 L6 )

        1     L1+ thaw 9 push! freeze => ( 1     9 L2+ )
        1 2   L2+ thaw 9 push! freeze => ( 1 2   9 L3+ )
        1 2 3 L3+ thaw 9 push! freeze => ( 1 2 3 9 L4+ )
        1     L1+ thaw 9 push! 8 push! freeze => ( 1     9 8 L3+ )
        1 2   L2+ thaw 9 push! 8 push! freeze => ( 1 2   9 8 L4+ )
        1 2 3 L3+ thaw 9 push! 8 push! freeze => ( 1 2 3 9 8 L5+ )
        1     L1+ thaw 9 push! 8 push! 7 push! freeze => ( 1     9 8 7 L4+ )
        1 2   L2+ thaw 9 push! 8 push! 7 push! freeze => ( 1 2   9 8 7 L5+ )
        1 2 3 L3+ thaw 9 push! 8 push! 7 push! freeze => ( 1 2 3 9 8 7 L6+ )
    )

    ";" test (
        id    L0 thaw 9 ; freeze => (       9 L1 )
        1     L1 thaw 9 ; freeze => ( 1     9 L2 )
        1 2   L2 thaw 9 ; freeze => ( 1 2   9 L3 )
        1 2 3 L3 thaw 9 ; freeze => ( 1 2 3 9 L4 )
        id    L0 thaw 9 ; 8 ; freeze => (       9 8 L2 )
        1     L1 thaw 9 ; 8 ; freeze => ( 1     9 8 L3 )
        1 2   L2 thaw 9 ; 8 ; freeze => ( 1 2   9 8 L4 )
        1 2 3 L3 thaw 9 ; 8 ; freeze => ( 1 2 3 9 8 L5 )
        id    L0 thaw 9 ; 8 ; 7 ; freeze => (       9 8 7 L3 )
        1     L1 thaw 9 ; 8 ; 7 ; freeze => ( 1     9 8 7 L4 )
        1 2   L2 thaw 9 ; 8 ; 7 ; freeze => ( 1 2   9 8 7 L5 )
        1 2 3 L3 thaw 9 ; 8 ; 7 ; freeze => ( 1 2 3 9 8 7 L6 )

        1     L1+ thaw 9 ; freeze => ( 1     9 L2+ )
        1 2   L2+ thaw 9 ; freeze => ( 1 2   9 L3+ )
        1 2 3 L3+ thaw 9 ; freeze => ( 1 2 3 9 L4+ )
        1     L1+ thaw 9 ; 8 ; freeze => ( 1     9 8 L3+ )
        1 2   L2+ thaw 9 ; 8 ; freeze => ( 1 2   9 8 L4+ )
        1 2 3 L3+ thaw 9 ; 8 ; freeze => ( 1 2 3 9 8 L5+ )
        1     L1+ thaw 9 ; 8 ; 7 ; freeze => ( 1     9 8 7 L4+ )
        1 2   L2+ thaw 9 ; 8 ; 7 ; freeze => ( 1 2   9 8 7 L5+ )
        1 2 3 L3+ thaw 9 ; 8 ; 7 ; freeze => ( 1 2 3 9 8 7 L6+ )
    )

    "push+!" test (
        id    L0 thaw 9 push+! freeze => (       9 L1+ )
        1     L1 thaw 9 push+! freeze => ( 1     9 L2+ )
        1 2   L2 thaw 9 push+! freeze => ( 1 2   9 L3+ )
        1 2 3 L3 thaw 9 push+! freeze => ( 1 2 3 9 L4+ )
        id    L0 thaw 9 push+! 8 push! freeze => (       9 8 L2+ )
        1     L1 thaw 9 push+! 8 push! freeze => ( 1     9 8 L3+ )
        1 2   L2 thaw 9 push+! 8 push! freeze => ( 1 2   9 8 L4+ )
        1 2 3 L3 thaw 9 push+! 8 push! freeze => ( 1 2 3 9 8 L5+ )
        id    L0 thaw 9 push+! 8 push! 7 push! freeze => (       9 8 7 L3+ )
        1     L1 thaw 9 push+! 8 push! 7 push! freeze => ( 1     9 8 7 L4+ )
        1 2   L2 thaw 9 push+! 8 push! 7 push! freeze => ( 1 2   9 8 7 L5+ )
        1 2 3 L3 thaw 9 push+! 8 push! 7 push! freeze => ( 1 2 3 9 8 7 L6+ )

        id    L0 thaw 9 push! 8 push+! freeze => (       9 8 L2+ )
        1     L1 thaw 9 push! 8 push+! freeze => ( 1     9 8 L3+ )
        1 2   L2 thaw 9 push! 8 push+! freeze => ( 1 2   9 8 L4+ )
        1 2 3 L3 thaw 9 push! 8 push+! freeze => ( 1 2 3 9 8 L5+ )
        id    L0 thaw 9 push! 8 push+! 7 push! freeze => (       9 8 7 L3+ )
        1     L1 thaw 9 push! 8 push+! 7 push! freeze => ( 1     9 8 7 L4+ )
        1 2   L2 thaw 9 push! 8 push+! 7 push! freeze => ( 1 2   9 8 7 L5+ )
        1 2 3 L3 thaw 9 push! 8 push+! 7 push! freeze => ( 1 2 3 9 8 7 L6+ )

        id    L0 thaw 9 push! 8 push! 7 push+! freeze => (       9 8 7 L3+ )
        1     L1 thaw 9 push! 8 push! 7 push+! freeze => ( 1     9 8 7 L4+ )
        1 2   L2 thaw 9 push! 8 push! 7 push+! freeze => ( 1 2   9 8 7 L5+ )
        1 2 3 L3 thaw 9 push! 8 push! 7 push+! freeze => ( 1 2 3 9 8 7 L6+ )
    )

    ";+" test (
        id    L0 thaw 9 ;+ freeze => (       9 L1+ )
        1     L1 thaw 9 ;+ freeze => ( 1     9 L2+ )
        1 2   L2 thaw 9 ;+ freeze => ( 1 2   9 L3+ )
        1 2 3 L3 thaw 9 ;+ freeze => ( 1 2 3 9 L4+ )
        id    L0 thaw 9 ;+ 8 ; freeze => (       9 8 L2+ )
        1     L1 thaw 9 ;+ 8 ; freeze => ( 1     9 8 L3+ )
        1 2   L2 thaw 9 ;+ 8 ; freeze => ( 1 2   9 8 L4+ )
        1 2 3 L3 thaw 9 ;+ 8 ; freeze => ( 1 2 3 9 8 L5+ )
        id    L0 thaw 9 ;+ 8 ; 7 ; freeze => (       9 8 7 L3+ )
        1     L1 thaw 9 ;+ 8 ; 7 ; freeze => ( 1     9 8 7 L4+ )
        1 2   L2 thaw 9 ;+ 8 ; 7 ; freeze => ( 1 2   9 8 7 L5+ )
        1 2 3 L3 thaw 9 ;+ 8 ; 7 ; freeze => ( 1 2 3 9 8 7 L6+ )

        id    L0 thaw 9 ; 8 ;+ freeze => (       9 8 L2+ )
        1     L1 thaw 9 ; 8 ;+ freeze => ( 1     9 8 L3+ )
        1 2   L2 thaw 9 ; 8 ;+ freeze => ( 1 2   9 8 L4+ )
        1 2 3 L3 thaw 9 ; 8 ;+ freeze => ( 1 2 3 9 8 L5+ )
        id    L0 thaw 9 ; 8 ;+ 7 ; freeze => (       9 8 7 L3+ )
        1     L1 thaw 9 ; 8 ;+ 7 ; freeze => ( 1     9 8 7 L4+ )
        1 2   L2 thaw 9 ; 8 ;+ 7 ; freeze => ( 1 2   9 8 7 L5+ )
        1 2 3 L3 thaw 9 ; 8 ;+ 7 ; freeze => ( 1 2 3 9 8 7 L6+ )

        id    L0 thaw 9 ; 8 ; 7 ;+ freeze => (       9 8 7 L3+ )
        1     L1 thaw 9 ; 8 ; 7 ;+ freeze => ( 1     9 8 7 L4+ )
        1 2   L2 thaw 9 ; 8 ; 7 ;+ freeze => ( 1 2   9 8 7 L5+ )
        1 2 3 L3 thaw 9 ; 8 ; 7 ;+ freeze => ( 1 2 3 9 8 7 L6+ )
    )

    "pop!" test (
        id    L0 thaw pop! freeze => (     L0 ) => ( NONE )
        1     L1 thaw pop! freeze => (     L0 ) => ( 1 SOME )
        1 2   L2 thaw pop! freeze => ( 1   L1 ) => ( 2 SOME )
        1 2 3 L3 thaw pop! freeze => ( 1 2 L2 ) => ( 3 SOME )

        1     L1+ thaw pop! freeze => (     L0 ) => ( 1 )
        1 2   L2+ thaw pop! freeze => ( 1   L1 ) => ( 2 )
        1 2 3 L3+ thaw pop! freeze => ( 1 2 L2 ) => ( 3 )
    )

    "==" test (
        id    L0       L0 ==:Int.== => ( T )
        1     L1       L0 ==:== => ( F )
        1 2   L2       L0 ==:== => ( F )
        1 2 3 L3       L0 ==:== => ( F )
        id    L0 1     L1 ==:== => ( F )
        1     L1 1     L1 ==:== => ( T )
        1 2   L2 1     L1 ==:== => ( F )
        1 2 3 L3 1     L1 ==:== => ( F )
        id    L0 9     L1 ==:== => ( F )
        1     L1 9     L1 ==:== => ( F )
        1 2   L2 9     L1 ==:== => ( F )
        1 2 3 L3 9     L1 ==:== => ( F )
        id    L0 1 2   L2 ==:== => ( F )
        1     L1 1 2   L2 ==:== => ( F )
        1 2   L2 1 2   L2 ==:== => ( T )
        1 2 3 L3 1 2   L2 ==:== => ( F )
        id    L0 9 2   L2 ==:== => ( F )
        1     L1 9 2   L2 ==:== => ( F )
        1 2   L2 9 2   L2 ==:== => ( F )
        1 2 3 L3 9 2   L2 ==:== => ( F )
        id    L0 1 9   L2 ==:== => ( F )
        1     L1 1 9   L2 ==:== => ( F )
        1 2   L2 1 9   L2 ==:== => ( F )
        1 2 3 L3 1 9   L2 ==:== => ( F )
        id    L0 1 2 3 L3 ==:== => ( F )
        1     L1 1 2 3 L3 ==:== => ( F )
        1 2   L2 1 2 3 L3 ==:== => ( F )
        1 2 3 L3 1 2 3 L3 ==:== => ( T )
        id    L0 9 2 3 L3 ==:== => ( F )
        1     L1 9 2 3 L3 ==:== => ( F )
        1 2   L2 9 2 3 L3 ==:== => ( F )
        1 2 3 L3 9 2 3 L3 ==:== => ( F )
        id    L0 1 9 3 L3 ==:== => ( F )
        1     L1 1 9 3 L3 ==:== => ( F )
        1 2   L2 1 9 3 L3 ==:== => ( F )
        1 2 3 L3 1 9 3 L3 ==:== => ( F )
        id    L0 1 2 9 L3 ==:== => ( F )
        1     L1 1 2 9 L3 ==:== => ( F )
        1 2   L2 1 2 9 L3 ==:== => ( F )
        1 2 3 L3 1 2 9 L3 ==:== => ( F )

        1     L1+ 1     L1+ ==:== => ( T )
        1 2   L2+ 1     L1+ ==:== => ( F )
        1 2 3 L3+ 1     L1+ ==:== => ( F )
        1     L1+ 9     L1+ ==:== => ( F )
        1 2   L2+ 9     L1+ ==:== => ( F )
        1 2 3 L3+ 9     L1+ ==:== => ( F )
        1     L1+ 1 2   L2+ ==:== => ( F )
        1 2   L2+ 1 2   L2+ ==:== => ( T )
        1 2 3 L3+ 1 2   L2+ ==:== => ( F )
        1     L1+ 9 2   L2+ ==:== => ( F )
        1 2   L2+ 9 2   L2+ ==:== => ( F )
        1 2 3 L3+ 9 2   L2+ ==:== => ( F )
        1     L1+ 1 9   L2+ ==:== => ( F )
        1 2   L2+ 1 9   L2+ ==:== => ( F )
        1 2 3 L3+ 1 9   L2+ ==:== => ( F )
        1     L1+ 1 2 3 L3+ ==:== => ( F )
        1 2   L2+ 1 2 3 L3+ ==:== => ( F )
        1 2 3 L3+ 1 2 3 L3+ ==:== => ( T )
        1     L1+ 9 2 3 L3+ ==:== => ( F )
        1 2   L2+ 9 2 3 L3+ ==:== => ( F )
        1 2 3 L3+ 9 2 3 L3+ ==:== => ( F )
        1     L1+ 1 9 3 L3+ ==:== => ( F )
        1 2   L2+ 1 9 3 L3+ ==:== => ( F )
        1 2 3 L3+ 1 9 3 L3+ ==:== => ( F )
        1     L1+ 1 2 9 L3+ ==:== => ( F )
        1 2   L2+ 1 2 9 L3+ ==:== => ( F )
        1 2 3 L3+ 1 2 9 L3+ ==:== => ( F )
    )

    "member" test (
        0 id    L0 member:== => ( F )  0 id    L0 member:<= => ( F )
        0 1     L1 member:== => ( F )  0 1     L1 member:<= => ( T )
        0 1 2   L2 member:== => ( F )  0 1 2   L2 member:<= => ( T )
        0 1 2 3 L3 member:== => ( F )  0 1 2 3 L3 member:<= => ( T )
        1 id    L0 member:== => ( F )  1 id    L0 member:<= => ( F )
        1 1     L1 member:== => ( T )  1 1     L1 member:<= => ( T )
        1 1 2   L2 member:== => ( T )  1 1 2   L2 member:<= => ( T )
        1 1 2 3 L3 member:== => ( T )  1 1 2 3 L3 member:<= => ( T )
        2 id    L0 member:== => ( F )  2 id    L0 member:<= => ( F )
        2 1     L1 member:== => ( F )  2 1     L1 member:<= => ( F )
        2 1 2   L2 member:== => ( T )  2 1 2   L2 member:<= => ( T )
        2 1 2 3 L3 member:== => ( T )  2 1 2 3 L3 member:<= => ( T )
        3 id    L0 member:== => ( F )  3 id    L0 member:<= => ( F )
        3 1     L1 member:== => ( F )  3 1     L1 member:<= => ( F )
        3 1 2   L2 member:== => ( F )  3 1 2   L2 member:<= => ( F )
        3 1 2 3 L3 member:== => ( T )  3 1 2 3 L3 member:<= => ( T )
        4 id    L0 member:== => ( F )  4 id    L0 member:<= => ( F )
        4 1     L1 member:== => ( F )  4 1     L1 member:<= => ( F )
        4 1 2   L2 member:== => ( F )  4 1 2   L2 member:<= => ( F )
        4 1 2 3 L3 member:== => ( F )  4 1 2 3 L3 member:<= => ( F )

        0 1     L1+ member:== => ( F )  0 1     L1+ member:<= => ( T )
        0 1 2   L2+ member:== => ( F )  0 1 2   L2+ member:<= => ( T )
        0 1 2 3 L3+ member:== => ( F )  0 1 2 3 L3+ member:<= => ( T )
        1 1     L1+ member:== => ( T )  1 1     L1+ member:<= => ( T )
        1 1 2   L2+ member:== => ( T )  1 1 2   L2+ member:<= => ( T )
        1 1 2 3 L3+ member:== => ( T )  1 1 2 3 L3+ member:<= => ( T )
        2 1     L1+ member:== => ( F )  2 1     L1+ member:<= => ( F )
        2 1 2   L2+ member:== => ( T )  2 1 2   L2+ member:<= => ( T )
        2 1 2 3 L3+ member:== => ( T )  2 1 2 3 L3+ member:<= => ( T )
        3 1     L1+ member:== => ( F )  3 1     L1+ member:<= => ( F )
        3 1 2   L2+ member:== => ( F )  3 1 2   L2+ member:<= => ( F )
        3 1 2 3 L3+ member:== => ( T )  3 1 2 3 L3+ member:<= => ( T )
        4 1     L1+ member:== => ( F )  4 1     L1+ member:<= => ( F )
        4 1 2   L2+ member:== => ( F )  4 1 2   L2+ member:<= => ( F )
        4 1 2 3 L3+ member:== => ( F )  4 1 2 3 L3+ member:<= => ( F )
    )

    "difference" test (
        id      L0       L0 difference:Int.== => (     L0 )
        1       L1       L0 difference:== => ( 1       L1 )
        1 2     L2       L0 difference:== => ( 1 2     L2 )
        1 2 3   L3       L0 difference:== => ( 1 2 3   L3 )
        1 2 3 4 L4       L0 difference:== => ( 1 2 3 4 L4 )
        id      L0 1     L1 difference:== => (         L0 )
        1       L1 1     L1 difference:== => (         L0 )
        1 2     L2 1     L1 difference:== => (   2     L1 )
        1 2 3   L3 1     L1 difference:== => (   2 3   L2 )
        1 2 3 4 L4 1     L1 difference:== => (   2 3 4 L3 )
        id      L0   2   L1 difference:== => (         L0 )
        1       L1   2   L1 difference:== => ( 1       L1 )
        1 2     L2   2   L1 difference:== => ( 1       L1 )
        1 2 3   L3   2   L1 difference:== => ( 1   3   L2 )
        1 2 3 4 L4   2   L1 difference:== => ( 1   3 4 L3 )
        id      L0 1 2   L2 difference:== => (         L0 )
        1       L1 1 2   L2 difference:== => (         L0 )
        1 2     L2 1 2   L2 difference:== => (         L0 )
        1 2 3   L3 1 2   L2 difference:== => (     3   L1 )
        1 2 3 4 L4 1 2   L2 difference:== => (     3 4 L2 )
        id      L0 2 1   L2 difference:== => (         L0 )
        1       L1 2 1   L2 difference:== => (         L0 )
        1 2     L2 2 1   L2 difference:== => (         L0 )
        1 2 3   L3 2 1   L2 difference:== => (     3   L1 )
        1 2 3 4 L4 2 1   L2 difference:== => (     3 4 L2 )
        id      L0     3 L1 difference:== => (         L0 )
        1       L1     3 L1 difference:== => ( 1       L1 )
        1 2     L2     3 L1 difference:== => ( 1 2     L2 )
        1 2 3   L3     3 L1 difference:== => ( 1 2     L2 )
        1 2 3 4 L4     3 L1 difference:== => ( 1 2   4 L3 )
        id      L0 1   3 L2 difference:== => (         L0 )
        1       L1 1   3 L2 difference:== => (         L0 )
        1 2     L2 1   3 L2 difference:== => (   2     L1 )
        1 2 3   L3 1   3 L2 difference:== => (   2     L1 )
        1 2 3 4 L4 1   3 L2 difference:== => (   2   4 L2 )
        id      L0 3   1 L2 difference:== => (         L0 )
        1       L1 3   1 L2 difference:== => (         L0 )
        1 2     L2 3   1 L2 difference:== => (   2     L1 )
        1 2 3   L3 3   1 L2 difference:== => (   2     L1 )
        1 2 3 4 L4 3   1 L2 difference:== => (   2   4 L2 )
        id      L0 1 2 3 L3 difference:== => (         L0 )
        1       L1 1 2 3 L3 difference:== => (         L0 )
        1 2     L2 1 2 3 L3 difference:== => (         L0 )
        1 2 3   L3 1 2 3 L3 difference:== => (         L0 )
        1 2 3 4 L4 1 2 3 L3 difference:== => (       4 L1 )
    )

    "union" test (
        id      L0       L0 union:Int.== => (     L0 )
        1       L1       L0 union:== => ( 1       L1 )
        1 2     L2       L0 union:== => ( 1 2     L2 )
        1 2 3   L3       L0 union:== => ( 1 2 3   L3 )
        1 2 3 4 L4       L0 union:== => ( 1 2 3 4 L4 )
        id      L0 1     L1 union:== => ( 1       L1 )
        1       L1 1     L1 union:== => ( 1       L1 )
        1 2     L2 1     L1 union:== => ( 1 2     L2 )
        1 2 3   L3 1     L1 union:== => ( 1 2 3   L3 )
        1 2 3 4 L4 1     L1 union:== => ( 1 2 3 4 L4 )
        id      L0   2   L1 union:== => (   2     L1 )
        1       L1   2   L1 union:== => ( 1 2     L2 )
        1 2     L2   2   L1 union:== => ( 1 2     L2 )
        1 2 3   L3   2   L1 union:== => ( 1 2 3   L3 )
        1 2 3 4 L4   2   L1 union:== => ( 1 2 3 4 L4 )
        id      L0 1 2   L2 union:== => ( 1 2     L2 )
        1       L1 1 2   L2 union:== => ( 1 2     L2 )
        1 2     L2 1 2   L2 union:== => ( 1 2     L2 )
        1 2 3   L3 1 2   L2 union:== => ( 1 2 3   L3 )
        1 2 3 4 L4 1 2   L2 union:== => ( 1 2 3 4 L4 )
        id      L0 2 1   L2 union:== => ( 2 1     L2 )
        1       L1 2 1   L2 union:== => ( 1 2     L2 )
        1 2     L2 2 1   L2 union:== => ( 1 2     L2 )
        1 2 3   L3 2 1   L2 union:== => ( 1 2 3   L3 )
        1 2 3 4 L4 2 1   L2 union:== => ( 1 2 3 4 L4 )
        id      L0     3 L1 union:== => (     3   L1 )
        1       L1     3 L1 union:== => ( 1   3   L2 )
        1 2     L2     3 L1 union:== => ( 1 2 3   L3 )
        1 2 3   L3     3 L1 union:== => ( 1 2 3   L3 )
        1 2 3 4 L4     3 L1 union:== => ( 1 2 3 4 L4 )
        id      L0 1   3 L2 union:== => ( 1   3   L2 )
        1       L1 1   3 L2 union:== => ( 1   3   L2 )
        1 2     L2 1   3 L2 union:== => ( 1 2 3   L3 )
        1 2 3   L3 1   3 L2 union:== => ( 1 2 3   L3 )
        1 2 3 4 L4 1   3 L2 union:== => ( 1 2 3 4 L4 )
        id      L0 3   1 L2 union:== => ( 3   1   L2 )
        1       L1 3   1 L2 union:== => ( 1   3   L2 )
        1 2     L2 3   1 L2 union:== => ( 1 2 3   L3 )
        1 2 3   L3 3   1 L2 union:== => ( 1 2 3   L3 )
        1 2 3 4 L4 3   1 L2 union:== => ( 1 2 3 4 L4 )
        id      L0 1 2 3 L3 union:== => ( 1 2 3   L3 )
        1       L1 1 2 3 L3 union:== => ( 1 2 3   L3 )
        1 2     L2 1 2 3 L3 union:== => ( 1 2 3   L3 )
        1 2 3   L3 1 2 3 L3 union:== => ( 1 2 3   L3 )
        1 2 3 4 L4 1 2 3 L3 union:== => ( 1 2 3 4 L4 )
    )

    "unions" test (
        id       L0 unions:Int.== => ( L0 )
        L0       L1 unions:Int.== => ( L0 )
        L0 L0    L2 unions:Int.== => ( L0 )
        L0 L0 L0 L3 unions:Int.== => ( L0 )

        1 L1      L1 unions:== => ( 1 L1 )
        1 L1 1 L1 L2 unions:== => ( 1 L1 )
        1 L1 2 L1 L2 unions:== => ( 1 2 L2 )
        2 L1 1 L1 L2 unions:== => ( 2 1 L2 )

        1 2 L2 3 4 L2 5 6 L2 L3 unions:== => ( 1 2 3 4 5 6 L6 )
        1 2 L2 3 4 L2 2 4 L2 L3 unions:== => ( 1 2 3 4     L4 )
    )

    "map2" test (
        id    L0   L0 map2(Int.2* +) => (         L0 )
        1     L1   L0 map2(Int.2* +) => (         L0 )
        1 2   L2   L0 map2(Int.2* +) => (         L0 )
        1 2 3 L3   L0 map2(Int.2* +) => (         L0 )
        id    L0 4     L1 map2(2* +) => (         L0 )
        1     L1 4     L1 map2(2* +) => ( 9       L1 )
        1 2   L2 4     L1 map2(2* +) => ( 9       L1 )
        1 2 3 L3 4     L1 map2(2* +) => ( 9       L1 )
        id    L0 4 5   L2 map2(2* +) => (         L0 )
        1     L1 4 5   L2 map2(2* +) => ( 9       L1 )
        1 2   L2 4 5   L2 map2(2* +) => ( 9 12    L2 )
        1 2 3 L3 4 5   L2 map2(2* +) => ( 9 12    L2 )
        id    L0 4 5 6 L3 map2(2* +) => (         L0 )
        1     L1 4 5 6 L3 map2(2* +) => ( 9       L1 )
        1 2   L2 4 5 6 L3 map2(2* +) => ( 9 12    L2 )
        1 2 3 L3 4 5 6 L3 map2(2* +) => ( 9 12 15 L3 )

        1     L1+ 4     L1+ map2(2* -) => ( -7       L1+ )
        1 2   L2+ 4     L1+ map2(2* -) => ( -7       L1+ )
        1 2 3 L3+ 4     L1+ map2(2* -) => ( -7       L1+ )
        1     L1+ 4 5   L2+ map2(2* -) => ( -7       L1+ )
        1 2   L2+ 4 5   L2+ map2(2* -) => ( -7 -8    L2+ )
        1 2 3 L3+ 4 5   L2+ map2(2* -) => ( -7 -8    L2+ )
        1     L1+ 4 5 6 L3+ map2(2* -) => ( -7       L1+ )
        1 2   L2+ 4 5 6 L3+ map2(2* -) => ( -7 -8    L2+ )
        1 2 3 L3+ 4 5 6 L3+ map2(2* -) => ( -7 -8 -9 L3+ )
    )

    "take-while" test (
        id        L0 take-while(dup 2 <=) => (     L0 )
        1         L1 take-while(dup 2 <=) => ( 1   L1 )
        1 2       L2 take-while(dup 2 <=) => ( 1 2 L2 )
        1 2 3     L3 take-while(dup 2 <=) => ( 1 2 L2 )
        1 2 3 2   L4 take-while(dup 2 <=) => ( 1 2 L2 )
        1 2 3 2 1 L5 take-while(dup 2 <=) => ( 1 2 L2 )

        1         L1+ take-while(dup 2 <=) => ( 1   L1 )
        1 2       L2+ take-while(dup 2 <=) => ( 1 2 L2 )
        1 2 3     L3+ take-while(dup 2 <=) => ( 1 2 L2 )
        1 2 3 2   L4+ take-while(dup 2 <=) => ( 1 2 L2 )
        1 2 3 2 1 L5+ take-while(dup 2 <=) => ( 1 2 L2 )
    )

    "partition-either" test (
        id          L0 partition-either(Even/Odd) => (      L0) => (      L0)
        1           L1 partition-either(Even/Odd) => (0     L1) => (      L0)
        1 2         L2 partition-either(Even/Odd) => (0     L1) => (1     L1)
        1 2 3       L3 partition-either(Even/Odd) => (0 1   L2) => (1     L1)
        1 2 3 4     L4 partition-either(Even/Odd) => (0 1   L2) => (1 2   L2)
        1 2 3 4 5   L5 partition-either(Even/Odd) => (0 1 2 L3) => (1 2   L2)
        1 2 3 4 5 6 L6 partition-either(Even/Odd) => (0 1 2 L3) => (1 2 3 L3)

        1           L1+ partition-either(Even/Odd) => (0     L1) => (      L0)
        1 2         L2+ partition-either(Even/Odd) => (0     L1) => (1     L1)
        1 2 3       L3+ partition-either(Even/Odd) => (0 1   L2) => (1     L1)
        1 2 3 4     L4+ partition-either(Even/Odd) => (0 1   L2) => (1 2   L2)
        1 2 3 4 5   L5+ partition-either(Even/Odd) => (0 1 2 L3) => (1 2   L2)
        1 2 3 4 5 6 L6+ partition-either(Even/Odd) => (0 1 2 L3) => (1 2 3 L3)
    )

    "partition" test (
        id          L0 partition(dup even?) => (      L0) => (      L0)
        1           L1 partition(dup even?) => (1     L1) => (      L0)
        1 2         L2 partition(dup even?) => (1     L1) => (2     L1)
        1 2 3       L3 partition(dup even?) => (1 3   L2) => (2     L1)
        1 2 3 4     L4 partition(dup even?) => (1 3   L2) => (2 4   L2)
        1 2 3 4 5   L5 partition(dup even?) => (1 3 5 L3) => (2 4   L2)
        1 2 3 4 5 6 L6 partition(dup even?) => (1 3 5 L3) => (2 4 6 L3)

        1           L1+ partition(dup even?) => (1     L1) => (      L0)
        1 2         L2+ partition(dup even?) => (1     L1) => (2     L1)
        1 2 3       L3+ partition(dup even?) => (1 3   L2) => (2     L1)
        1 2 3 4     L4+ partition(dup even?) => (1 3   L2) => (2 4   L2)
        1 2 3 4 5   L5+ partition(dup even?) => (1 3 5 L3) => (2 4   L2)
        1 2 3 4 5 6 L6+ partition(dup even?) => (1 3 5 L3) => (2 4 6 L3)
    )

    "show" test (
        id L0 show:Int.show => ( "LIST( )" )
        1     L1 show:show => ( "LIST( 1 ; )" )
        1 2   L2 show:show => ( "LIST( 1 ; 2 ; )" )
        1 2 3 L3 show:show => ( "LIST( 1 ; 2 ; 3 ; )")

        1     L1+ show:show => ( "LIST+( 1 ;+ )" )
        1 2   L2+ show:show => ( "LIST+( 1 ; 2 ;+ )" )
        1 2 3 L3+ show:show => ( "LIST+( 1 ; 2 ; 3 ;+ )")
    )

    +Tests.end!)

def(Even/Odd, Int -- Either(Int,Int), 2 /% 0= if(LEFT, RIGHT))
def(/Even, Int -- Maybe(Int), Even/Odd left?)
def(/Odd, Int -- Maybe(Int), Even/Odd right?)
def(even?, Int -- Bool, /Even some?)
# mirth-test # pout # 52 tests passed.
