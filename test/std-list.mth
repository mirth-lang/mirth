module(mirth-tests.std-list)

import(std.prelude)
import(std.list)
import(std.maybe)
import(std.either)
import(std.test)
import(std.str)

alias Nil List.Nil
alias Cons List.Cons

def main [ +World -- +World ] {
    +Tests.Start!

    "constructors" test (
        L0-Int => ( List( ) )
        1 Nil Cons => ( List( 1 ; ) )
        1 2 Nil Cons Cons => ( List( 1 ; 2 ; ) )
        1 2 3 Nil Cons Cons Cons => ( List( 1 ; 2 ; 3 ; ) )

        L0-Int => ( List( ) )
        1 L1 => ( List( 1 ; ) )
        1 2 L2 => ( List( 1 ; 2 ; ) )
        1 2 3 L3 => ( List( 1 ; 2 ; 3 ; ) )
        1 2 3 4 L4 => ( List( 1 ; 2 ; 3 ; 4 ; ) )
        1 2 3 4 5 L5 => ( List( 1 ; 2 ; 3 ; 4 ; 5 ; ) )
        1 2 3 4 5 6 L6 => ( List( 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; ) )
        1 2 3 4 5 6 7 L7 => ( List( 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; ) )
        1 2 3 4 5 6 7 8 L8 => ( List( 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; ) )

        1 N1 => ( Nest( 1 ;+ ) )
        1 2 N2 => ( Nest( 1 ; 2 ;+ ) )
        1 2 3 N3 => ( Nest( 1 ; 2 ; 3 ;+ ) )
        1 2 3 4 N4 => ( Nest( 1 ; 2 ; 3 ; 4 ;+ ) )
        1 2 3 4 5 N5 => ( Nest( 1 ; 2 ; 3 ; 4 ; 5 ;+ ) )
        1 2 3 4 5 6 N6 => ( Nest( 1 ; 2 ; 3 ; 4 ; 5 ; 6 ;+ ) )
        1 2 3 4 5 6 7 N7 => ( Nest( 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ;+ ) )
        1 2 3 4 5 6 7 8 N8 => ( Nest( 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ;+ ) )
    )

    "empty?" test (
        L0 empty? => ( True )
        1 L1 empty? => ( False )
        1 2 L2 empty? => ( False )
        1 2 3 L3 empty? => ( False )
    )

    "single?" test (
        L0-Int single? => ( None )
        1 L1 single? => ( 1 Some )
        1 2 L2 single? => ( None )
        1 2 3 L3 single? => ( None )

        1 N1 single? => ( 1 Some )
        1 2 N2 single? => ( None )
        1 2 3 N3 single? => ( None )
    )

    "len" test (
        L0 len => ( 0u )
        1 L1 len => ( 1u )
        2 3 L2 len => ( 2u )
        4 5 6 L3 len => ( 3u )

        7 N1 len => ( 1u )
        8 9 N2 len => ( 2u )
        8 7 6 N3 len => ( 3u )
    )

    ">List" test (
        1 N1 >List => ( 1 L1 )
        1 2 N2 >List => ( 1 2 L2 )
        1 2 3 N3 >List => ( 1 2 3 L3 )
    )

    ">Nest?" test (
        L0-Int >Nest? => ( None )
        1 L1 >Nest? => ( 1 N1 Some )
        1 2 L2 >Nest? => ( 1 2 N2 Some )
        1 2 3 L3 >Nest? => ( 1 2 3 N3 Some )
    )

    "cons" test (
        0 L0 cons => ( 0 L1 )
        0 1 L1 cons => ( 0 1 L2 )
        0 1 2 L2 cons => ( 0 1 2 L3 )
        0 1 2 3 L3 cons => ( 0 1 2 3 L4 )

        0 L0 cons+ => ( 0 N1 )
        0 1 L1 cons+ => ( 0 1 N2 )
        0 1 2 L2 cons+ => ( 0 1 2 N3 )
        0 1 2 3 L3 cons+ => ( 0 1 2 3 N4 )

        0 1 N1 cons => ( 0 1 N2 )
        0 1 2 N2 cons => ( 0 1 2 N3 )
        0 1 2 3 N3 cons => ( 0 1 2 3 N4 )
    )

    "List.snoc" test (
        L0 0 List.snoc => ( 0 L1 )
        11 L1 0 List.snoc => ( 11 0 L2 )
        21 22 L2 0 List.snoc => ( 21 22 0 L3 )
        31 32 33 L3 0 List.snoc => ( 31 32 33 0 L4 )

        L0 0 List.snoc+ => ( 0 N1 )
        11 L1 0 List.snoc+ => ( 11 0 N2 )
        21 22 L2 0 List.snoc+ => ( 21 22 0 N3 )
        31 32 33 L3 0 List.snoc+ => ( 31 32 33 0 N4 )
    )

    "Nest.snoc" test (
        11 N1 0 Nest.snoc => ( 11 0 N2 )
        21 22 N2 0 Nest.snoc => ( 21 22 0 N3 )
        31 32 33 N3 0 Nest.snoc => ( 31 32 33 0 N4 )
    )

    "uncons" test (
        L0-Int uncons
            => ( L0 )
            => ( None )
        11 L1 uncons
            => ( L0 )
            => ( 11 Some )
        21 22 L2 uncons
            => ( 22 L1 )
            => ( 21 Some )
        31 32 33 L3 uncons
            => ( 32 33 L2 )
            => ( 31 Some )

        11 N1 uncons
            => ( L0 )
            => ( 11 )
        21 22 N2 uncons
            => ( 22 L1 )
            => ( 21 )
        31 32 33 N3 uncons
            => ( 32 33 L2 )
            => ( 31 )
    )

    "unsnoc" test (
        List( 10 ; 20 ; 30 ; ) unsnoc
            => ( 30 Some )
            => ( 10 20 L2 )
        Nest( 11 ;+ 21 ; 31 ; ) unsnoc
            => ( 31 )
            => ( 11 21 L2 )
    )

    "cat" test (
        L0-Int         L0 cat => (             L0 )
        1     L1       L0 cat => ( 1           L1 )
        1 2   L2       L0 cat => ( 1 2         L2 )
        1 2 3 L3       L0 cat => ( 1 2 3       L3 )
              L0 9     L1 cat => (       9     L1 )
        1     L1 9     L1 cat => ( 1     9     L2 )
        1 2   L2 9     L1 cat => ( 1 2   9     L3 )
        1 2 3 L3 9     L1 cat => ( 1 2 3 9     L4 )
              L0 9 8   L2 cat => (       9 8   L2 )
        1     L1 9 8   L2 cat => ( 1     9 8   L3 )
        1 2   L2 9 8   L2 cat => ( 1 2   9 8   L4 )
        1 2 3 L3 9 8   L2 cat => ( 1 2 3 9 8   L5 )
              L0 9 8 7 L3 cat => (       9 8 7 L3 )
        1     L1 9 8 7 L3 cat => ( 1     9 8 7 L4 )
        1 2   L2 9 8 7 L3 cat => ( 1 2   9 8 7 L5 )
        1 2 3 L3 9 8 7 L3 cat => ( 1 2 3 9 8 7 L6 )

              L0 9     N1 cat => (       9     N1 )
        1     L1 9     N1 cat => ( 1     9     N2 )
        1 2   L2 9     N1 cat => ( 1 2   9     N3 )
        1 2 3 L3 9     N1 cat => ( 1 2 3 9     N4 )
              L0 9 8   N2 cat => (       9 8   N2 )
        1     L1 9 8   N2 cat => ( 1     9 8   N3 )
        1 2   L2 9 8   N2 cat => ( 1 2   9 8   N4 )
        1 2 3 L3 9 8   N2 cat => ( 1 2 3 9 8   N5 )
              L0 9 8 7 N3 cat => (       9 8 7 N3 )
        1     L1 9 8 7 N3 cat => ( 1     9 8 7 N4 )
        1 2   L2 9 8 7 N3 cat => ( 1 2   9 8 7 N5 )
        1 2 3 L3 9 8 7 N3 cat => ( 1 2 3 9 8 7 N6 )
    )
    "cat+" test (
        1     N1       L0 cat+ => ( 1           N1 )
        1 2   N2       L0 cat+ => ( 1 2         N2 )
        1 2 3 N3       L0 cat+ => ( 1 2 3       N3 )
        1     N1 9     L1 cat+ => ( 1     9     N2 )
        1 2   N2 9     L1 cat+ => ( 1 2   9     N3 )
        1 2 3 N3 9     L1 cat+ => ( 1 2 3 9     N4 )
        1     N1 9 8   L2 cat+ => ( 1     9 8   N3 )
        1 2   N2 9 8   L2 cat+ => ( 1 2   9 8   N4 )
        1 2 3 N3 9 8   L2 cat+ => ( 1 2 3 9 8   N5 )
        1     N1 9 8 7 L3 cat+ => ( 1     9 8 7 N4 )
        1 2   N2 9 8 7 L3 cat+ => ( 1 2   9 8 7 N5 )
        1 2 3 N3 9 8 7 L3 cat+ => ( 1 2 3 9 8 7 N6 )

        1     N1 9     N1 cat+ => ( 1     9     N2 )
        1 2   N2 9     N1 cat+ => ( 1 2   9     N3 )
        1 2 3 N3 9     N1 cat+ => ( 1 2 3 9     N4 )
        1     N1 9 8   N2 cat+ => ( 1     9 8   N3 )
        1 2   N2 9 8   N2 cat+ => ( 1 2   9 8   N4 )
        1 2 3 N3 9 8   N2 cat+ => ( 1 2 3 9 8   N5 )
        1     N1 9 8 7 N3 cat+ => ( 1     9 8 7 N4 )
        1 2   N2 9 8 7 N3 cat+ => ( 1 2   9 8 7 N5 )
        1 2 3 N3 9 8 7 N3 cat+ => ( 1 2 3 9 8 7 N6 )
    )

    "first" test (
        L0-Int first => ( None )
        1 L1 first => ( 1 Some )
        2 3 L2 first => ( 2 Some )
        4 5 6 L3 first => ( 4 Some )

        7 N1 first => ( 7 )
        8 9 N2 first => ( 8 )
        10 11 12 N3 first => ( 10 )
    )

    "last" test (
        L0-Int last => ( None )
        1 L1 last => ( 1 Some )
        1 2 L2 last => ( 2 Some )
        1 2 3 L3 last => ( 3 Some )

        1 N1 last => ( 1 )
        1 2 N2 last => ( 2 )
        1 2 3 N3 last => ( 3 )
    )

    "reverse" test (
        L0-Int reverse => ( L0 )
        1 L1 reverse => ( 1 L1 )
        1 2 L2 reverse => ( 2 1 L2 )
        1 2 3 L3 reverse => ( 3 2 1 L3 )

        1 N1 reverse => ( 1 N1 )
        1 2 N2 reverse => ( 2 1 N2 )
        1 2 3 N3 reverse => ( 3 2 1 N3 )
    )

    "map" test (
        L0-Int map(1+) => ( L0 )
        1 L1 map(1+) => ( 2 L1 )
        1 2 L2 map(1+) => ( 2 3 L2 )
        1 2 3 L3 map(1+) => ( 2 3 4 L3 )

        1 N1 map(1+) => ( 2 N1 )
        1 2 N2 map(1+) => ( 2 3 N2 )
        1 2 3 N3 map(1+) => ( 2 3 4 N3 )
    )

    "for" test (
        ""   L0-Int for(>Str cat) => ( "" )
        "" 1     L1 for(>Str cat) => ( "1" )
        "" 1 2   L2 for(>Str cat) => ( "12" )
        "" 1 2 3 L3 for(>Str cat) => ( "123" )

        "" 4     N1 for(>Str cat) => ( "4" )
        "" 4 5   N2 for(>Str cat) => ( "45" )
        "" 4 5 6 N3 for(>Str cat) => ( "456" )

        ""   L0-Int for(>Str cat, "," cat) => ( "" )
        "" 1     L1 for(>Str cat, "," cat) => ( "1" )
        "" 1 2   L2 for(>Str cat, "," cat) => ( "1,2" )
        "" 1 2 3 L3 for(>Str cat, "," cat) => ( "1,2,3" )

        "" 4     N1 for(>Str cat, "," cat) => ( "4" )
        "" 4 5   N2 for(>Str cat, "," cat) => ( "4,5" )
        "" 4 5 6 N3 for(>Str cat, "," cat) => ( "4,5,6" )

        "" 4       N1 for(>Str, cat) => ( "4" ) => ( ""    )
        "" 4 5     N2 for(>Str, cat) => ( "5" ) => ( "4"   )
        "" 4 5 6   N3 for(>Str, cat) => ( "6" ) => ( "45"  )
        "" 4 5 6 7 N4 for(>Str, cat) => ( "7" ) => ( "456" )
    )

    "reverse-for" test (
        ""   L0-Int reverse-for(>Str cat) => ( "" )
        "" 1     L1 reverse-for(>Str cat) => ( "1" )
        "" 1 2   L2 reverse-for(>Str cat) => ( "21" )
        "" 1 2 3 L3 reverse-for(>Str cat) => ( "321" )

        "" 4     N1 reverse-for(>Str cat) => ( "4" )
        "" 4 5   N2 reverse-for(>Str cat) => ( "54" )
        "" 4 5 6 N3 reverse-for(>Str cat) => ( "654" )
    )

    "fold" test (
        L0-Str         fold(cat) => ( None )
        "1"         L1 fold(cat) => ( "1" Some )
        "1" "2"     L2 fold(cat) => ( "12" Some )
        "1" "2" "3" L3 fold(cat) => ( "123" Some )

        "1"         N1 fold(cat) => ( "1" )
        "1" "2"     N2 fold(cat) => ( "12" )
        "1" "2" "3" N3 fold(cat) => ( "123" )
    )

    "filter" test (
        L0-Int filter(0>) => (L0)
        0 L1 filter(0>) => (L0)
        0 1 L2 filter(0>) => (1 L1)
        0 1 -1 L3 filter(0>) => (1 L1)
        0 1 -1 2 L4 filter(0>) => (1 2 L2)
        0 1 -1 2 -2 L5 filter(0>) => (1 2 L2)
        0 1 -1 2 -2 3 L6 filter(0>) => (1 2 3 L3)
        0 1 -1 2 -2 3 -3 L7 filter(0>) => (1 2 3 L3)

        0 N1 filter(0>) => (L0)
        0 1 N2 filter(0>) => (1 L1)
        0 1 -1 N3 filter(0>) => (1 L1)
        0 1 -1 2 N4 filter(0>) => (1 2 L2)
        0 1 -1 2 -2 N5 filter(0>) => (1 2 L2)
        0 1 -1 2 -2 3 N6 filter(0>) => (1 2 3 L3)
        0 1 -1 2 -2 3 -3 N7 filter(0>) => (1 2 3 L3)
    )

    "flatmap" test (
        L0-Int flatmap(L1) => (L0)
        1 L1 flatmap(L1) => (1 L1)
        1 2 L2 flatmap(L1) => (1 2 L2)
        1 2 3 L3 flatmap(L1) => (1 2 3 L3)

        L0-Int flatmap(dup L2) => (L0)
        1 L1 flatmap(dup L2) => (1 1 L2)
        1 2 L2 flatmap(dup L2) => (1 1 2 2 L4)
        1 2 3 L3 flatmap(dup L2) => (1 1 2 2 3 3 L6)

        1 N1 flatmap(dup L2) => (1 1 L2)
        1 2 N2 flatmap(dup L2) => (1 1 2 2 L4)
        1 2 3 N3 flatmap(dup L2) => (1 1 2 2 3 3 L6)
    )

    "filter-some" test (
        L0-Int     filter-some(drop None) => (L0-Int)
        1       L1 filter-some(drop None) => (L0-Int)
        1 2     L2 filter-some(drop None) => (L0-Int)
        1 2 3   L3 filter-some(drop None) => (L0-Int)
        1 2 3 4 L4 filter-some(drop None) => (L0-Int)

        L0-Int     filter-some(drop 9 Some) => (L0)
        1       L1 filter-some(drop 9 Some) => (9 L1)
        1 2     L2 filter-some(drop 9 Some) => (9 9 L2)
        1 2 3   L3 filter-some(drop 9 Some) => (9 9 9 L3)
        1 2 3 4 L4 filter-some(drop 9 Some) => (9 9 9 9 L4)

        L0-Int     filter-some(/Even) => (L0)
        1       L1 filter-some(/Even) => (L0)
        1 2     L2 filter-some(/Even) => (1 L1)
        1 2 3   L3 filter-some(/Even) => (1 L1)
        1 2 3 4 L4 filter-some(/Even) => (1 2 L2)

        L0-Int     filter-some(/Odd) => (L0)
        1       L1 filter-some(/Odd) => (0 L1)
        1 2     L2 filter-some(/Odd) => (0 L1)
        1 2 3   L3 filter-some(/Odd) => (0 1 L2)
        1 2 3 4 L4 filter-some(/Odd) => (0 1 L2)

        1       N1 filter-some(/Even) => (L0)
        1 2     N2 filter-some(/Even) => (1 L1)
        1 2 3   N3 filter-some(/Even) => (1 L1)
        1 2 3 4 N4 filter-some(/Even) => (1 2 L2)

        1       N1 filter-some(/Odd) => (0 L1)
        1 2     N2 filter-some(/Odd) => (0 L1)
        1 2 3   N3 filter-some(/Odd) => (0 1 L2)
        1 2 3 4 N4 filter-some(/Odd) => (0 1 L2)
    )

    "find-some" test (
        L0-Int     find-some(drop None) => (None-Int)
        1       L1 find-some(drop None) => (None-Int)
        1 2     L2 find-some(drop None) => (None-Int)
        1 2 3   L3 find-some(drop None) => (None-Int)
        1 2 3 4 L4 find-some(drop None) => (None-Int)

        L0-Int     find-some(drop 9 Some) => (None)
        1       L1 find-some(drop 9 Some) => (9 Some)
        1 2     L2 find-some(drop 9 Some) => (9 Some)
        1 2 3   L3 find-some(drop 9 Some) => (9 Some)
        1 2 3 4 L4 find-some(drop 9 Some) => (9 Some)

        L0-Int     find-some(/Even) => (None)
        1       L1 find-some(/Even) => (None)
        1 2     L2 find-some(/Even) => (1 Some)
        1 2 3   L3 find-some(/Even) => (1 Some)
        1 2 3 4 L4 find-some(/Even) => (1 Some)

        L0-Int     find-some(/Odd) => (None)
        1       L1 find-some(/Odd) => (0 Some)
        1 2     L2 find-some(/Odd) => (0 Some)
        1 2 3   L3 find-some(/Odd) => (0 Some)
        1 2 3 4 L4 find-some(/Odd) => (0 Some)

        1       N1 find-some(/Even) => (None)
        1 2     N2 find-some(/Even) => (1 Some)
        1 2 3   N3 find-some(/Even) => (1 Some)
        1 2 3 4 N4 find-some(/Even) => (1 Some)

        1       N1 find-some(/Odd) => (0 Some)
        1 2     N2 find-some(/Odd) => (0 Some)
        1 2 3   N3 find-some(/Odd) => (0 Some)
        1 2 3 4 N4 find-some(/Odd) => (0 Some)
    )

    "reverse-find-some" test (
        L0-Int     reverse-find-some(drop None) => (None-Int)
        1       L1 reverse-find-some(drop None) => (None-Int)
        1 2     L2 reverse-find-some(drop None) => (None-Int)
        1 2 3   L3 reverse-find-some(drop None) => (None-Int)
        1 2 3 4 L4 reverse-find-some(drop None) => (None-Int)

        L0-Int     reverse-find-some(drop 9 Some) => (None)
        1       L1 reverse-find-some(drop 9 Some) => (9 Some)
        1 2     L2 reverse-find-some(drop 9 Some) => (9 Some)
        1 2 3   L3 reverse-find-some(drop 9 Some) => (9 Some)
        1 2 3 4 L4 reverse-find-some(drop 9 Some) => (9 Some)

        L0-Int     reverse-find-some(/Even) => (None)
        1       L1 reverse-find-some(/Even) => (None)
        1 2     L2 reverse-find-some(/Even) => (1 Some)
        1 2 3   L3 reverse-find-some(/Even) => (1 Some)
        1 2 3 4 L4 reverse-find-some(/Even) => (2 Some)

        L0-Int     reverse-find-some(/Odd) => (None)
        1       L1 reverse-find-some(/Odd) => (0 Some)
        1 2     L2 reverse-find-some(/Odd) => (0 Some)
        1 2 3   L3 reverse-find-some(/Odd) => (1 Some)
        1 2 3 4 L4 reverse-find-some(/Odd) => (1 Some)

        1       N1 reverse-find-some(/Even) => (None)
        1 2     N2 reverse-find-some(/Even) => (1 Some)
        1 2 3   N3 reverse-find-some(/Even) => (1 Some)
        1 2 3 4 N4 reverse-find-some(/Even) => (2 Some)

        1       N1 reverse-find-some(/Odd) => (0 Some)
        1 2     N2 reverse-find-some(/Odd) => (0 Some)
        1 2 3   N3 reverse-find-some(/Odd) => (1 Some)
        1 2 3 4 N4 reverse-find-some(/Odd) => (1 Some)
    )

    "find" test (
        L0-Int     find(2 >) => (None)
        1       L1 find(2 >) => (None)
        1 2     L2 find(2 >) => (None)
        1 2 3   L3 find(2 >) => (3 Some)
        1 2 3 4 L4 find(2 >) => (3 Some)

        1       N1 find(2 >) => (None)
        1 2     N2 find(2 >) => (None)
        1 2 3   N3 find(2 >) => (3 Some)
        1 2 3 4 N4 find(2 >) => (3 Some)
    )

    "reverse-find" test (
        L0-Int     reverse-find(2 >) => (None)
        1       L1 reverse-find(2 >) => (None)
        1 2     L2 reverse-find(2 >) => (None)
        1 2 3   L3 reverse-find(2 >) => (3 Some)
        1 2 3 4 L4 reverse-find(2 >) => (4 Some)

        1       N1 reverse-find(2 >) => (None)
        1 2     N2 reverse-find(2 >) => (None)
        1 2 3   N3 reverse-find(2 >) => (3 Some)
        1 2 3 4 N4 reverse-find(2 >) => (4 Some)
    )

    "any" test (
        L0-Int     has(2 >) => (False)
        1       L1 has(2 >) => (False)
        1 2     L2 has(2 >) => (False)
        1 2 3   L3 has(2 >) => (True)
        1 2 3 4 L4 has(2 >) => (True)

        1       N1 has(2 >) => (False)
        1 2     N2 has(2 >) => (False)
        1 2 3   N3 has(2 >) => (True)
        1 2 3 4 N4 has(2 >) => (True)
    )

    "all" test (
        L0-Int     all(2 <) => (True)
        1       L1 all(2 <) => (True)
        1 2     L2 all(2 <) => (False)
        1 2 3   L3 all(2 <) => (False)
        1 2 3 4 L4 all(2 <) => (False)

        1       N1 all(2 <) => (True)
        1 2     N2 all(2 <) => (False)
        1 2 3   N3 all(2 <) => (False)
        1 2 3 4 N4 all(2 <) => (False)
    )

    "collect" test (
        collect(None) => ( L0-Int )
        1 2 3 L3 collect(unsnoc) => ( 3 2 1 L3 ) => ( L0 )
        1 2 3 L3 collect(uncons swap) => ( 1 2 3 L3 ) => ( L0 )
        1 2 3 4 L4 collect(uncons swap bind(/Odd)) => ( 0 L1 ) => ( 3 4 L2 )
        1 3 2 4 L4 collect(uncons swap bind(/Odd)) => ( 0 1 L2 ) => ( 4 L1 )
    )

    "collect-while" test (
        collect-while(False, 1) => ( L0 )
        1 collect-while(dup 0>, sip:1-) => ( 1 L1 ) => ( 0 )
        3 collect-while(dup 0>, sip:1-) => ( 3 2 1 L3 ) => ( 0 )
    )

    "Int.range" test (
        0 0 range => ( 0 L1 )
        0 1 range => ( 0 1 L2 )
        0 2 range => ( 0 1 2 L3 )
        0 3 range => ( 0 1 2 3 L4 )
        1 0 range => ( L0 )
        1 1 range => ( 1 L1 )
        1 2 range => ( 1 2 L2 )
        1 3 range => ( 1 2 3 L3 )
        2 0 range => ( L0 )
        2 1 range => ( L0 )
        2 2 range => ( 2 L1 )
        2 3 range => ( 2 3 L2 )
        3 0 range => ( L0 )
        3 1 range => ( L0 )
        3 2 range => ( L0 )
        3 3 range => ( 3 L1 )
    )

    "Int.to:" test (
        0 to: 0 => ( 0 L1 )
        0 to: 1 => ( 0 1 L2 )
        0 to: 2 => ( 0 1 2 L3 )
        0 to: 3 => ( 0 1 2 3 L4 )
        1 to: 0 => ( L0 )
        1 to: 1 => ( 1 L1 )
        1 to: 2 => ( 1 2 L2 )
        1 to: 3 => ( 1 2 3 L3 )
        2 to: 0 => ( L0 )
        2 to: 1 => ( L0 )
        2 to: 2 => ( 2 L1 )
        2 to: 3 => ( 2 3 L2 )
        3 to: 0 => ( L0 )
        3 to: 1 => ( L0 )
        3 to: 2 => ( L0 )
        3 to: 3 => ( 3 L1 )
    )

    "Int.from:" test (
        0 from: 0 => ( 0 L1 )
        0 from: 1 => ( L0 )
        0 from: 2 => ( L0 )
        0 from: 3 => ( L0 )
        1 from: 0 => ( 0 1 L2 )
        1 from: 1 => ( 1 L1 )
        1 from: 2 => ( L0 )
        1 from: 3 => ( L0 )
        2 from: 0 => ( 0 1 2 L3 )
        2 from: 1 => ( 1 2 L2 )
        2 from: 2 => ( 2 L1 )
        2 from: 3 => ( L0 )
        3 from: 0 => ( 0 1 2 3 L4 )
        3 from: 1 => ( 1 2 3 L3 )
        3 from: 2 => ( 2 3 L2 )
        3 from: 3 => ( 3 L1 )
    )

    "build! +>" test (
        L0 build! done! => ( L0-Int )
        1 L1 build! done! => ( 1 L1 )
        1 2 L2 build! done! => ( 1 2 L2 )
        1 2 3 L3 build! done! => ( 1 2 3 L3 )

        1 N1 build! done! => ( 1 N1 )
        1 2 N2 build! done! => ( 1 2 N2 )
        1 2 3 N3 build! done! => ( 1 2 3 N3 )
    )

    "push!" test (
        id    L0 build! 9 push! done! => (       9 L1 )
        1     L1 build! 9 push! done! => ( 1     9 L2 )
        1 2   L2 build! 9 push! done! => ( 1 2   9 L3 )
        1 2 3 L3 build! 9 push! done! => ( 1 2 3 9 L4 )
        id    L0 build! 9 push! 8 push! done! => (       9 8 L2 )
        1     L1 build! 9 push! 8 push! done! => ( 1     9 8 L3 )
        1 2   L2 build! 9 push! 8 push! done! => ( 1 2   9 8 L4 )
        1 2 3 L3 build! 9 push! 8 push! done! => ( 1 2 3 9 8 L5 )
        id    L0 build! 9 push! 8 push! 7 push! done! => (       9 8 7 L3 )
        1     L1 build! 9 push! 8 push! 7 push! done! => ( 1     9 8 7 L4 )
        1 2   L2 build! 9 push! 8 push! 7 push! done! => ( 1 2   9 8 7 L5 )
        1 2 3 L3 build! 9 push! 8 push! 7 push! done! => ( 1 2 3 9 8 7 L6 )

        1     N1 build! 9 push! done! => ( 1     9 N2 )
        1 2   N2 build! 9 push! done! => ( 1 2   9 N3 )
        1 2 3 N3 build! 9 push! done! => ( 1 2 3 9 N4 )
        1     N1 build! 9 push! 8 push! done! => ( 1     9 8 N3 )
        1 2   N2 build! 9 push! 8 push! done! => ( 1 2   9 8 N4 )
        1 2 3 N3 build! 9 push! 8 push! done! => ( 1 2 3 9 8 N5 )
        1     N1 build! 9 push! 8 push! 7 push! done! => ( 1     9 8 7 N4 )
        1 2   N2 build! 9 push! 8 push! 7 push! done! => ( 1 2   9 8 7 N5 )
        1 2 3 N3 build! 9 push! 8 push! 7 push! done! => ( 1 2 3 9 8 7 N6 )
    )

    ";" test (
        id    L0 build! 9 ; done! => (       9 L1 )
        1     L1 build! 9 ; done! => ( 1     9 L2 )
        1 2   L2 build! 9 ; done! => ( 1 2   9 L3 )
        1 2 3 L3 build! 9 ; done! => ( 1 2 3 9 L4 )
        id    L0 build! 9 ; 8 ; done! => (       9 8 L2 )
        1     L1 build! 9 ; 8 ; done! => ( 1     9 8 L3 )
        1 2   L2 build! 9 ; 8 ; done! => ( 1 2   9 8 L4 )
        1 2 3 L3 build! 9 ; 8 ; done! => ( 1 2 3 9 8 L5 )
        id    L0 build! 9 ; 8 ; 7 ; done! => (       9 8 7 L3 )
        1     L1 build! 9 ; 8 ; 7 ; done! => ( 1     9 8 7 L4 )
        1 2   L2 build! 9 ; 8 ; 7 ; done! => ( 1 2   9 8 7 L5 )
        1 2 3 L3 build! 9 ; 8 ; 7 ; done! => ( 1 2 3 9 8 7 L6 )

        1     N1 build! 9 ; done! => ( 1     9 N2 )
        1 2   N2 build! 9 ; done! => ( 1 2   9 N3 )
        1 2 3 N3 build! 9 ; done! => ( 1 2 3 9 N4 )
        1     N1 build! 9 ; 8 ; done! => ( 1     9 8 N3 )
        1 2   N2 build! 9 ; 8 ; done! => ( 1 2   9 8 N4 )
        1 2 3 N3 build! 9 ; 8 ; done! => ( 1 2 3 9 8 N5 )
        1     N1 build! 9 ; 8 ; 7 ; done! => ( 1     9 8 7 N4 )
        1 2   N2 build! 9 ; 8 ; 7 ; done! => ( 1 2   9 8 7 N5 )
        1 2 3 N3 build! 9 ; 8 ; 7 ; done! => ( 1 2 3 9 8 7 N6 )
    )

    "push+!" test (
        id    L0 build! 9 push+! done! => (       9 N1 )
        1     L1 build! 9 push+! done! => ( 1     9 N2 )
        1 2   L2 build! 9 push+! done! => ( 1 2   9 N3 )
        1 2 3 L3 build! 9 push+! done! => ( 1 2 3 9 N4 )
        id    L0 build! 9 push+! 8 push! done! => (       9 8 N2 )
        1     L1 build! 9 push+! 8 push! done! => ( 1     9 8 N3 )
        1 2   L2 build! 9 push+! 8 push! done! => ( 1 2   9 8 N4 )
        1 2 3 L3 build! 9 push+! 8 push! done! => ( 1 2 3 9 8 N5 )
        id    L0 build! 9 push+! 8 push! 7 push! done! => (       9 8 7 N3 )
        1     L1 build! 9 push+! 8 push! 7 push! done! => ( 1     9 8 7 N4 )
        1 2   L2 build! 9 push+! 8 push! 7 push! done! => ( 1 2   9 8 7 N5 )
        1 2 3 L3 build! 9 push+! 8 push! 7 push! done! => ( 1 2 3 9 8 7 N6 )

        id    L0 build! 9 push! 8 push+! done! => (       9 8 N2 )
        1     L1 build! 9 push! 8 push+! done! => ( 1     9 8 N3 )
        1 2   L2 build! 9 push! 8 push+! done! => ( 1 2   9 8 N4 )
        1 2 3 L3 build! 9 push! 8 push+! done! => ( 1 2 3 9 8 N5 )
        id    L0 build! 9 push! 8 push+! 7 push! done! => (       9 8 7 N3 )
        1     L1 build! 9 push! 8 push+! 7 push! done! => ( 1     9 8 7 N4 )
        1 2   L2 build! 9 push! 8 push+! 7 push! done! => ( 1 2   9 8 7 N5 )
        1 2 3 L3 build! 9 push! 8 push+! 7 push! done! => ( 1 2 3 9 8 7 N6 )

        id    L0 build! 9 push! 8 push! 7 push+! done! => (       9 8 7 N3 )
        1     L1 build! 9 push! 8 push! 7 push+! done! => ( 1     9 8 7 N4 )
        1 2   L2 build! 9 push! 8 push! 7 push+! done! => ( 1 2   9 8 7 N5 )
        1 2 3 L3 build! 9 push! 8 push! 7 push+! done! => ( 1 2 3 9 8 7 N6 )
    )

    ";+" test (
        id    L0 build! 9 ;+ done! => (       9 N1 )
        1     L1 build! 9 ;+ done! => ( 1     9 N2 )
        1 2   L2 build! 9 ;+ done! => ( 1 2   9 N3 )
        1 2 3 L3 build! 9 ;+ done! => ( 1 2 3 9 N4 )
        id    L0 build! 9 ;+ 8 ; done! => (       9 8 N2 )
        1     L1 build! 9 ;+ 8 ; done! => ( 1     9 8 N3 )
        1 2   L2 build! 9 ;+ 8 ; done! => ( 1 2   9 8 N4 )
        1 2 3 L3 build! 9 ;+ 8 ; done! => ( 1 2 3 9 8 N5 )
        id    L0 build! 9 ;+ 8 ; 7 ; done! => (       9 8 7 N3 )
        1     L1 build! 9 ;+ 8 ; 7 ; done! => ( 1     9 8 7 N4 )
        1 2   L2 build! 9 ;+ 8 ; 7 ; done! => ( 1 2   9 8 7 N5 )
        1 2 3 L3 build! 9 ;+ 8 ; 7 ; done! => ( 1 2 3 9 8 7 N6 )

        id    L0 build! 9 ; 8 ;+ done! => (       9 8 N2 )
        1     L1 build! 9 ; 8 ;+ done! => ( 1     9 8 N3 )
        1 2   L2 build! 9 ; 8 ;+ done! => ( 1 2   9 8 N4 )
        1 2 3 L3 build! 9 ; 8 ;+ done! => ( 1 2 3 9 8 N5 )
        id    L0 build! 9 ; 8 ;+ 7 ; done! => (       9 8 7 N3 )
        1     L1 build! 9 ; 8 ;+ 7 ; done! => ( 1     9 8 7 N4 )
        1 2   L2 build! 9 ; 8 ;+ 7 ; done! => ( 1 2   9 8 7 N5 )
        1 2 3 L3 build! 9 ; 8 ;+ 7 ; done! => ( 1 2 3 9 8 7 N6 )

        id    L0 build! 9 ; 8 ; 7 ;+ done! => (       9 8 7 N3 )
        1     L1 build! 9 ; 8 ; 7 ;+ done! => ( 1     9 8 7 N4 )
        1 2   L2 build! 9 ; 8 ; 7 ;+ done! => ( 1 2   9 8 7 N5 )
        1 2 3 L3 build! 9 ; 8 ; 7 ;+ done! => ( 1 2 3 9 8 7 N6 )
    )

    "pop!" test (
        L0-Int   build! pop! done! => (     L0 ) => ( None )
        1     L1 build! pop! done! => (     L0 ) => ( 1 Some )
        1 2   L2 build! pop! done! => ( 1   L1 ) => ( 2 Some )
        1 2 3 L3 build! pop! done! => ( 1 2 L2 ) => ( 3 Some )

        1     N1 build! pop! done! => (     L0 ) => ( 1 )
        1 2   N2 build! pop! done! => ( 1   L1 ) => ( 2 )
        1 2 3 N3 build! pop! done! => ( 1 2 L2 ) => ( 3 )
    )

    "=" test (
        id    L0       L0 =:Int.= => ( True )
        1     L1       L0 =:= => ( False )
        1 2   L2       L0 =:= => ( False )
        1 2 3 L3       L0 =:= => ( False )
        id    L0 1     L1 =:= => ( False )
        1     L1 1     L1 =:= => ( True )
        1 2   L2 1     L1 =:= => ( False )
        1 2 3 L3 1     L1 =:= => ( False )
        id    L0 9     L1 =:= => ( False )
        1     L1 9     L1 =:= => ( False )
        1 2   L2 9     L1 =:= => ( False )
        1 2 3 L3 9     L1 =:= => ( False )
        id    L0 1 2   L2 =:= => ( False )
        1     L1 1 2   L2 =:= => ( False )
        1 2   L2 1 2   L2 =:= => ( True )
        1 2 3 L3 1 2   L2 =:= => ( False )
        id    L0 9 2   L2 =:= => ( False )
        1     L1 9 2   L2 =:= => ( False )
        1 2   L2 9 2   L2 =:= => ( False )
        1 2 3 L3 9 2   L2 =:= => ( False )
        id    L0 1 9   L2 =:= => ( False )
        1     L1 1 9   L2 =:= => ( False )
        1 2   L2 1 9   L2 =:= => ( False )
        1 2 3 L3 1 9   L2 =:= => ( False )
        id    L0 1 2 3 L3 =:= => ( False )
        1     L1 1 2 3 L3 =:= => ( False )
        1 2   L2 1 2 3 L3 =:= => ( False )
        1 2 3 L3 1 2 3 L3 =:= => ( True )
        id    L0 9 2 3 L3 =:= => ( False )
        1     L1 9 2 3 L3 =:= => ( False )
        1 2   L2 9 2 3 L3 =:= => ( False )
        1 2 3 L3 9 2 3 L3 =:= => ( False )
        id    L0 1 9 3 L3 =:= => ( False )
        1     L1 1 9 3 L3 =:= => ( False )
        1 2   L2 1 9 3 L3 =:= => ( False )
        1 2 3 L3 1 9 3 L3 =:= => ( False )
        id    L0 1 2 9 L3 =:= => ( False )
        1     L1 1 2 9 L3 =:= => ( False )
        1 2   L2 1 2 9 L3 =:= => ( False )
        1 2 3 L3 1 2 9 L3 =:= => ( False )

        1     N1 1     N1 =:= => ( True )
        1 2   N2 1     N1 =:= => ( False )
        1 2 3 N3 1     N1 =:= => ( False )
        1     N1 9     N1 =:= => ( False )
        1 2   N2 9     N1 =:= => ( False )
        1 2 3 N3 9     N1 =:= => ( False )
        1     N1 1 2   N2 =:= => ( False )
        1 2   N2 1 2   N2 =:= => ( True )
        1 2 3 N3 1 2   N2 =:= => ( False )
        1     N1 9 2   N2 =:= => ( False )
        1 2   N2 9 2   N2 =:= => ( False )
        1 2 3 N3 9 2   N2 =:= => ( False )
        1     N1 1 9   N2 =:= => ( False )
        1 2   N2 1 9   N2 =:= => ( False )
        1 2 3 N3 1 9   N2 =:= => ( False )
        1     N1 1 2 3 N3 =:= => ( False )
        1 2   N2 1 2 3 N3 =:= => ( False )
        1 2 3 N3 1 2 3 N3 =:= => ( True )
        1     N1 9 2 3 N3 =:= => ( False )
        1 2   N2 9 2 3 N3 =:= => ( False )
        1 2 3 N3 9 2 3 N3 =:= => ( False )
        1     N1 1 9 3 N3 =:= => ( False )
        1 2   N2 1 9 3 N3 =:= => ( False )
        1 2 3 N3 1 9 3 N3 =:= => ( False )
        1     N1 1 2 9 N3 =:= => ( False )
        1 2   N2 1 2 9 N3 =:= => ( False )
        1 2 3 N3 1 2 9 N3 =:= => ( False )
    )

    "lookup" test (
        0 id    L0 lookup:Int.= => (   None )  0 id    L0 lookup:Int.<= => (   None )
        0 1     L1 lookup:Int.= => (   None )  0 1     L1 lookup:Int.<= => ( 1 Some )
        0 1 2   L2 lookup:Int.= => (   None )  0 1 2   L2 lookup:Int.<= => ( 1 Some )
        0 1 2 3 L3 lookup:Int.= => (   None )  0 1 2 3 L3 lookup:Int.<= => ( 1 Some )
        1 id    L0 lookup:Int.= => (   None )  1 id    L0 lookup:Int.<= => (   None )
        1 1     L1 lookup:Int.= => ( 1 Some )  1 1     L1 lookup:Int.<= => ( 1 Some )
        1 1 2   L2 lookup:Int.= => ( 1 Some )  1 1 2   L2 lookup:Int.<= => ( 1 Some )
        1 1 2 3 L3 lookup:Int.= => ( 1 Some )  1 1 2 3 L3 lookup:Int.<= => ( 1 Some )
        2 id    L0 lookup:Int.= => (   None )  2 id    L0 lookup:Int.<= => (   None )
        2 1     L1 lookup:Int.= => (   None )  2 1     L1 lookup:Int.<= => (   None )
        2 1 2   L2 lookup:Int.= => ( 2 Some )  2 1 2   L2 lookup:Int.<= => ( 2 Some )
        2 1 2 3 L3 lookup:Int.= => ( 2 Some )  2 1 2 3 L3 lookup:Int.<= => ( 2 Some )
        3 id    L0 lookup:Int.= => (   None )  3 id    L0 lookup:Int.<= => (   None )
        3 1     L1 lookup:Int.= => (   None )  3 1     L1 lookup:Int.<= => (   None )
        3 1 2   L2 lookup:Int.= => (   None )  3 1 2   L2 lookup:Int.<= => (   None )
        3 1 2 3 L3 lookup:Int.= => ( 3 Some )  3 1 2 3 L3 lookup:Int.<= => ( 3 Some )
        4 id    L0 lookup:Int.= => (   None )  4 id    L0 lookup:Int.<= => (   None )
        4 1     L1 lookup:Int.= => (   None )  4 1     L1 lookup:Int.<= => (   None )
        4 1 2   L2 lookup:Int.= => (   None )  4 1 2   L2 lookup:Int.<= => (   None )
        4 1 2 3 L3 lookup:Int.= => (   None )  4 1 2 3 L3 lookup:Int.<= => (   None )

        0 1     N1 lookup:Int.= => (   None )  0 1     N1 lookup:Int.<= => ( 1 Some )
        0 1 2   N2 lookup:Int.= => (   None )  0 1 2   N2 lookup:Int.<= => ( 1 Some )
        0 1 2 3 N3 lookup:Int.= => (   None )  0 1 2 3 N3 lookup:Int.<= => ( 1 Some )
        1 1     N1 lookup:Int.= => ( 1 Some )  1 1     N1 lookup:Int.<= => ( 1 Some )
        1 1 2   N2 lookup:Int.= => ( 1 Some )  1 1 2   N2 lookup:Int.<= => ( 1 Some )
        1 1 2 3 N3 lookup:Int.= => ( 1 Some )  1 1 2 3 N3 lookup:Int.<= => ( 1 Some )
        2 1     N1 lookup:Int.= => (   None )  2 1     N1 lookup:Int.<= => (   None )
        2 1 2   N2 lookup:Int.= => ( 2 Some )  2 1 2   N2 lookup:Int.<= => ( 2 Some )
        2 1 2 3 N3 lookup:Int.= => ( 2 Some )  2 1 2 3 N3 lookup:Int.<= => ( 2 Some )
        3 1     N1 lookup:Int.= => (   None )  3 1     N1 lookup:Int.<= => (   None )
        3 1 2   N2 lookup:Int.= => (   None )  3 1 2   N2 lookup:Int.<= => (   None )
        3 1 2 3 N3 lookup:Int.= => ( 3 Some )  3 1 2 3 N3 lookup:Int.<= => ( 3 Some )
        4 1     N1 lookup:Int.= => (   None )  4 1     N1 lookup:Int.<= => (   None )
        4 1 2   N2 lookup:Int.= => (   None )  4 1 2   N2 lookup:Int.<= => (   None )
        4 1 2 3 N3 lookup:Int.= => (   None )  4 1 2 3 N3 lookup:Int.<= => (   None )
    )

    "reverse-lookup" test (
        0 id    L0 reverse-lookup:Int.= => (   None )  0 id    L0 reverse-lookup:Int.<= => (   None )
        0 1     L1 reverse-lookup:Int.= => (   None )  0 1     L1 reverse-lookup:Int.<= => ( 1 Some )
        0 1 2   L2 reverse-lookup:Int.= => (   None )  0 1 2   L2 reverse-lookup:Int.<= => ( 2 Some )
        0 1 2 3 L3 reverse-lookup:Int.= => (   None )  0 1 2 3 L3 reverse-lookup:Int.<= => ( 3 Some )
        1 id    L0 reverse-lookup:Int.= => (   None )  1 id    L0 reverse-lookup:Int.<= => (   None )
        1 1     L1 reverse-lookup:Int.= => ( 1 Some )  1 1     L1 reverse-lookup:Int.<= => ( 1 Some )
        1 1 2   L2 reverse-lookup:Int.= => ( 1 Some )  1 1 2   L2 reverse-lookup:Int.<= => ( 2 Some )
        1 1 2 3 L3 reverse-lookup:Int.= => ( 1 Some )  1 1 2 3 L3 reverse-lookup:Int.<= => ( 3 Some )
        2 id    L0 reverse-lookup:Int.= => (   None )  2 id    L0 reverse-lookup:Int.<= => (   None )
        2 1     L1 reverse-lookup:Int.= => (   None )  2 1     L1 reverse-lookup:Int.<= => (   None )
        2 1 2   L2 reverse-lookup:Int.= => ( 2 Some )  2 1 2   L2 reverse-lookup:Int.<= => ( 2 Some )
        2 1 2 3 L3 reverse-lookup:Int.= => ( 2 Some )  2 1 2 3 L3 reverse-lookup:Int.<= => ( 3 Some )
        3 id    L0 reverse-lookup:Int.= => (   None )  3 id    L0 reverse-lookup:Int.<= => (   None )
        3 1     L1 reverse-lookup:Int.= => (   None )  3 1     L1 reverse-lookup:Int.<= => (   None )
        3 1 2   L2 reverse-lookup:Int.= => (   None )  3 1 2   L2 reverse-lookup:Int.<= => (   None )
        3 1 2 3 L3 reverse-lookup:Int.= => ( 3 Some )  3 1 2 3 L3 reverse-lookup:Int.<= => ( 3 Some )
        4 id    L0 reverse-lookup:Int.= => (   None )  4 id    L0 reverse-lookup:Int.<= => (   None )
        4 1     L1 reverse-lookup:Int.= => (   None )  4 1     L1 reverse-lookup:Int.<= => (   None )
        4 1 2   L2 reverse-lookup:Int.= => (   None )  4 1 2   L2 reverse-lookup:Int.<= => (   None )
        4 1 2 3 L3 reverse-lookup:Int.= => (   None )  4 1 2 3 L3 reverse-lookup:Int.<= => (   None )

        0 1     N1 reverse-lookup:Int.= => (   None )  0 1     N1 reverse-lookup:Int.<= => ( 1 Some )
        0 1 2   N2 reverse-lookup:Int.= => (   None )  0 1 2   N2 reverse-lookup:Int.<= => ( 2 Some )
        0 1 2 3 N3 reverse-lookup:Int.= => (   None )  0 1 2 3 N3 reverse-lookup:Int.<= => ( 3 Some )
        1 1     N1 reverse-lookup:Int.= => ( 1 Some )  1 1     N1 reverse-lookup:Int.<= => ( 1 Some )
        1 1 2   N2 reverse-lookup:Int.= => ( 1 Some )  1 1 2   N2 reverse-lookup:Int.<= => ( 2 Some )
        1 1 2 3 N3 reverse-lookup:Int.= => ( 1 Some )  1 1 2 3 N3 reverse-lookup:Int.<= => ( 3 Some )
        2 1     N1 reverse-lookup:Int.= => (   None )  2 1     N1 reverse-lookup:Int.<= => (   None )
        2 1 2   N2 reverse-lookup:Int.= => ( 2 Some )  2 1 2   N2 reverse-lookup:Int.<= => ( 2 Some )
        2 1 2 3 N3 reverse-lookup:Int.= => ( 2 Some )  2 1 2 3 N3 reverse-lookup:Int.<= => ( 3 Some )
        3 1     N1 reverse-lookup:Int.= => (   None )  3 1     N1 reverse-lookup:Int.<= => (   None )
        3 1 2   N2 reverse-lookup:Int.= => (   None )  3 1 2   N2 reverse-lookup:Int.<= => (   None )
        3 1 2 3 N3 reverse-lookup:Int.= => ( 3 Some )  3 1 2 3 N3 reverse-lookup:Int.<= => ( 3 Some )
        4 1     N1 reverse-lookup:Int.= => (   None )  4 1     N1 reverse-lookup:Int.<= => (   None )
        4 1 2   N2 reverse-lookup:Int.= => (   None )  4 1 2   N2 reverse-lookup:Int.<= => (   None )
        4 1 2 3 N3 reverse-lookup:Int.= => (   None )  4 1 2 3 N3 reverse-lookup:Int.<= => (   None )
    )

    "member" test (
        0 id    L0 member:Int.= => ( False )  0 id    L0 member:Int.<= => ( False )
        0 1     L1 member:Int.= => ( False )  0 1     L1 member:Int.<= => ( True  )
        0 1 2   L2 member:Int.= => ( False )  0 1 2   L2 member:Int.<= => ( True  )
        0 1 2 3 L3 member:Int.= => ( False )  0 1 2 3 L3 member:Int.<= => ( True  )
        1 id    L0 member:Int.= => ( False )  1 id    L0 member:Int.<= => ( False )
        1 1     L1 member:Int.= => ( True  )  1 1     L1 member:Int.<= => ( True  )
        1 1 2   L2 member:Int.= => ( True  )  1 1 2   L2 member:Int.<= => ( True  )
        1 1 2 3 L3 member:Int.= => ( True  )  1 1 2 3 L3 member:Int.<= => ( True  )
        2 id    L0 member:Int.= => ( False )  2 id    L0 member:Int.<= => ( False )
        2 1     L1 member:Int.= => ( False )  2 1     L1 member:Int.<= => ( False )
        2 1 2   L2 member:Int.= => ( True  )  2 1 2   L2 member:Int.<= => ( True  )
        2 1 2 3 L3 member:Int.= => ( True  )  2 1 2 3 L3 member:Int.<= => ( True  )
        3 id    L0 member:Int.= => ( False )  3 id    L0 member:Int.<= => ( False )
        3 1     L1 member:Int.= => ( False )  3 1     L1 member:Int.<= => ( False )
        3 1 2   L2 member:Int.= => ( False )  3 1 2   L2 member:Int.<= => ( False )
        3 1 2 3 L3 member:Int.= => ( True  )  3 1 2 3 L3 member:Int.<= => ( True  )
        4 id    L0 member:Int.= => ( False )  4 id    L0 member:Int.<= => ( False )
        4 1     L1 member:Int.= => ( False )  4 1     L1 member:Int.<= => ( False )
        4 1 2   L2 member:Int.= => ( False )  4 1 2   L2 member:Int.<= => ( False )
        4 1 2 3 L3 member:Int.= => ( False )  4 1 2 3 L3 member:Int.<= => ( False )

        0 1     N1 member:Int.= => ( False )  0 1     N1 member:Int.<= => ( True  )
        0 1 2   N2 member:Int.= => ( False )  0 1 2   N2 member:Int.<= => ( True  )
        0 1 2 3 N3 member:Int.= => ( False )  0 1 2 3 N3 member:Int.<= => ( True  )
        1 1     N1 member:Int.= => ( True  )  1 1     N1 member:Int.<= => ( True  )
        1 1 2   N2 member:Int.= => ( True  )  1 1 2   N2 member:Int.<= => ( True  )
        1 1 2 3 N3 member:Int.= => ( True  )  1 1 2 3 N3 member:Int.<= => ( True  )
        2 1     N1 member:Int.= => ( False )  2 1     N1 member:Int.<= => ( False )
        2 1 2   N2 member:Int.= => ( True  )  2 1 2   N2 member:Int.<= => ( True  )
        2 1 2 3 N3 member:Int.= => ( True  )  2 1 2 3 N3 member:Int.<= => ( True  )
        3 1     N1 member:Int.= => ( False )  3 1     N1 member:Int.<= => ( False )
        3 1 2   N2 member:Int.= => ( False )  3 1 2   N2 member:Int.<= => ( False )
        3 1 2 3 N3 member:Int.= => ( True  )  3 1 2 3 N3 member:Int.<= => ( True  )
        4 1     N1 member:Int.= => ( False )  4 1     N1 member:Int.<= => ( False )
        4 1 2   N2 member:Int.= => ( False )  4 1 2   N2 member:Int.<= => ( False )
        4 1 2 3 N3 member:Int.= => ( False )  4 1 2 3 N3 member:Int.<= => ( False )
    )

    "difference" test (
        id      L0       L0 difference:Int.= => (     L0 )
        1       L1       L0 difference:= => ( 1       L1 )
        1 2     L2       L0 difference:= => ( 1 2     L2 )
        1 2 3   L3       L0 difference:= => ( 1 2 3   L3 )
        1 2 3 4 L4       L0 difference:= => ( 1 2 3 4 L4 )
        id      L0 1     L1 difference:= => (         L0 )
        1       L1 1     L1 difference:= => (         L0 )
        1 2     L2 1     L1 difference:= => (   2     L1 )
        1 2 3   L3 1     L1 difference:= => (   2 3   L2 )
        1 2 3 4 L4 1     L1 difference:= => (   2 3 4 L3 )
        id      L0   2   L1 difference:= => (         L0 )
        1       L1   2   L1 difference:= => ( 1       L1 )
        1 2     L2   2   L1 difference:= => ( 1       L1 )
        1 2 3   L3   2   L1 difference:= => ( 1   3   L2 )
        1 2 3 4 L4   2   L1 difference:= => ( 1   3 4 L3 )
        id      L0 1 2   L2 difference:= => (         L0 )
        1       L1 1 2   L2 difference:= => (         L0 )
        1 2     L2 1 2   L2 difference:= => (         L0 )
        1 2 3   L3 1 2   L2 difference:= => (     3   L1 )
        1 2 3 4 L4 1 2   L2 difference:= => (     3 4 L2 )
        id      L0 2 1   L2 difference:= => (         L0 )
        1       L1 2 1   L2 difference:= => (         L0 )
        1 2     L2 2 1   L2 difference:= => (         L0 )
        1 2 3   L3 2 1   L2 difference:= => (     3   L1 )
        1 2 3 4 L4 2 1   L2 difference:= => (     3 4 L2 )
        id      L0     3 L1 difference:= => (         L0 )
        1       L1     3 L1 difference:= => ( 1       L1 )
        1 2     L2     3 L1 difference:= => ( 1 2     L2 )
        1 2 3   L3     3 L1 difference:= => ( 1 2     L2 )
        1 2 3 4 L4     3 L1 difference:= => ( 1 2   4 L3 )
        id      L0 1   3 L2 difference:= => (         L0 )
        1       L1 1   3 L2 difference:= => (         L0 )
        1 2     L2 1   3 L2 difference:= => (   2     L1 )
        1 2 3   L3 1   3 L2 difference:= => (   2     L1 )
        1 2 3 4 L4 1   3 L2 difference:= => (   2   4 L2 )
        id      L0 3   1 L2 difference:= => (         L0 )
        1       L1 3   1 L2 difference:= => (         L0 )
        1 2     L2 3   1 L2 difference:= => (   2     L1 )
        1 2 3   L3 3   1 L2 difference:= => (   2     L1 )
        1 2 3 4 L4 3   1 L2 difference:= => (   2   4 L2 )
        id      L0 1 2 3 L3 difference:= => (         L0 )
        1       L1 1 2 3 L3 difference:= => (         L0 )
        1 2     L2 1 2 3 L3 difference:= => (         L0 )
        1 2 3   L3 1 2 3 L3 difference:= => (         L0 )
        1 2 3 4 L4 1 2 3 L3 difference:= => (       4 L1 )
    )

    "union" test (
        id      L0       L0 union:Int.= => (     L0 )
        1       L1       L0 union:= => ( 1       L1 )
        1 2     L2       L0 union:= => ( 1 2     L2 )
        1 2 3   L3       L0 union:= => ( 1 2 3   L3 )
        1 2 3 4 L4       L0 union:= => ( 1 2 3 4 L4 )
        id      L0 1     L1 union:= => ( 1       L1 )
        1       L1 1     L1 union:= => ( 1       L1 )
        1 2     L2 1     L1 union:= => ( 1 2     L2 )
        1 2 3   L3 1     L1 union:= => ( 1 2 3   L3 )
        1 2 3 4 L4 1     L1 union:= => ( 1 2 3 4 L4 )
        id      L0   2   L1 union:= => (   2     L1 )
        1       L1   2   L1 union:= => ( 1 2     L2 )
        1 2     L2   2   L1 union:= => ( 1 2     L2 )
        1 2 3   L3   2   L1 union:= => ( 1 2 3   L3 )
        1 2 3 4 L4   2   L1 union:= => ( 1 2 3 4 L4 )
        id      L0 1 2   L2 union:= => ( 1 2     L2 )
        1       L1 1 2   L2 union:= => ( 1 2     L2 )
        1 2     L2 1 2   L2 union:= => ( 1 2     L2 )
        1 2 3   L3 1 2   L2 union:= => ( 1 2 3   L3 )
        1 2 3 4 L4 1 2   L2 union:= => ( 1 2 3 4 L4 )
        id      L0 2 1   L2 union:= => ( 2 1     L2 )
        1       L1 2 1   L2 union:= => ( 1 2     L2 )
        1 2     L2 2 1   L2 union:= => ( 1 2     L2 )
        1 2 3   L3 2 1   L2 union:= => ( 1 2 3   L3 )
        1 2 3 4 L4 2 1   L2 union:= => ( 1 2 3 4 L4 )
        id      L0     3 L1 union:= => (     3   L1 )
        1       L1     3 L1 union:= => ( 1   3   L2 )
        1 2     L2     3 L1 union:= => ( 1 2 3   L3 )
        1 2 3   L3     3 L1 union:= => ( 1 2 3   L3 )
        1 2 3 4 L4     3 L1 union:= => ( 1 2 3 4 L4 )
        id      L0 1   3 L2 union:= => ( 1   3   L2 )
        1       L1 1   3 L2 union:= => ( 1   3   L2 )
        1 2     L2 1   3 L2 union:= => ( 1 2 3   L3 )
        1 2 3   L3 1   3 L2 union:= => ( 1 2 3   L3 )
        1 2 3 4 L4 1   3 L2 union:= => ( 1 2 3 4 L4 )
        id      L0 3   1 L2 union:= => ( 3   1   L2 )
        1       L1 3   1 L2 union:= => ( 1   3   L2 )
        1 2     L2 3   1 L2 union:= => ( 1 2 3   L3 )
        1 2 3   L3 3   1 L2 union:= => ( 1 2 3   L3 )
        1 2 3 4 L4 3   1 L2 union:= => ( 1 2 3 4 L4 )
        id      L0 1 2 3 L3 union:= => ( 1 2 3   L3 )
        1       L1 1 2 3 L3 union:= => ( 1 2 3   L3 )
        1 2     L2 1 2 3 L3 union:= => ( 1 2 3   L3 )
        1 2 3   L3 1 2 3 L3 union:= => ( 1 2 3   L3 )
        1 2 3 4 L4 1 2 3 L3 union:= => ( 1 2 3 4 L4 )
    )

    "unions" test (
        id       L0 unions:Int.= => ( L0 )
        L0       L1 unions:Int.= => ( L0 )
        L0 L0    L2 unions:Int.= => ( L0 )
        L0 L0 L0 L3 unions:Int.= => ( L0 )

        1 L1      L1 unions:= => ( 1 L1 )
        1 L1 1 L1 L2 unions:= => ( 1 L1 )
        1 L1 2 L1 L2 unions:= => ( 1 2 L2 )
        2 L1 1 L1 L2 unions:= => ( 2 1 L2 )

        1 2 L2 3 4 L2 5 6 L2 L3 unions:= => ( 1 2 3 4 5 6 L6 )
        1 2 L2 3 4 L2 2 4 L2 L3 unions:= => ( 1 2 3 4     L4 )
    )

    "map2" test (
        id    L0-Int       L0-Int map2(2* +) => (         L0 )
        1     L1           L0-Int map2(2* +) => (         L0 )
        1 2   L2           L0-Int map2(2* +) => (         L0 )
        1 2 3 L3           L0-Int map2(2* +) => (         L0 )
        id    L0-Int 4     L1     map2(2* +) => (         L0 )
        1     L1     4     L1     map2(2* +) => ( 9       L1 )
        1 2   L2     4     L1     map2(2* +) => ( 9       L1 )
        1 2 3 L3     4     L1     map2(2* +) => ( 9       L1 )
        id    L0-Int 4 5   L2     map2(2* +) => (         L0 )
        1     L1     4 5   L2     map2(2* +) => ( 9       L1 )
        1 2   L2     4 5   L2     map2(2* +) => ( 9 12    L2 )
        1 2 3 L3     4 5   L2     map2(2* +) => ( 9 12    L2 )
        id    L0-Int 4 5 6 L3     map2(2* +) => (         L0 )
        1     L1     4 5 6 L3     map2(2* +) => ( 9       L1 )
        1 2   L2     4 5 6 L3     map2(2* +) => ( 9 12    L2 )
        1 2 3 L3     4 5 6 L3     map2(2* +) => ( 9 12 15 L3 )

        1     N1 4     N1 map2(2* -) => ( -7       N1 )
        1 2   N2 4     N1 map2(2* -) => ( -7       N1 )
        1 2 3 N3 4     N1 map2(2* -) => ( -7       N1 )
        1     N1 4 5   N2 map2(2* -) => ( -7       N1 )
        1 2   N2 4 5   N2 map2(2* -) => ( -7 -8    N2 )
        1 2 3 N3 4 5   N2 map2(2* -) => ( -7 -8    N2 )
        1     N1 4 5 6 N3 map2(2* -) => ( -7       N1 )
        1 2   N2 4 5 6 N3 map2(2* -) => ( -7 -8    N2 )
        1 2 3 N3 4 5 6 N3 map2(2* -) => ( -7 -8 -9 N3 )
    )

    "take-while" test (
        id    L0-Int take-while(2 <=) => (     L0 )
        1         L1 take-while(2 <=) => ( 1   L1 )
        1 2       L2 take-while(2 <=) => ( 1 2 L2 )
        1 2 3     L3 take-while(2 <=) => ( 1 2 L2 )
        1 2 3 2   L4 take-while(2 <=) => ( 1 2 L2 )
        1 2 3 2 1 L5 take-while(2 <=) => ( 1 2 L2 )

        1         N1 take-while(2 <=) => ( 1   L1 )
        1 2       N2 take-while(2 <=) => ( 1 2 L2 )
        1 2 3     N3 take-while(2 <=) => ( 1 2 L2 )
        1 2 3 2   N4 take-while(2 <=) => ( 1 2 L2 )
        1 2 3 2 1 N5 take-while(2 <=) => ( 1 2 L2 )
    )

    "partition-either" test (
        id      L0-Int partition-either(Even/Odd) => (      L0) => (      L0)
        1           L1 partition-either(Even/Odd) => (0     L1) => (      L0)
        1 2         L2 partition-either(Even/Odd) => (0     L1) => (1     L1)
        1 2 3       L3 partition-either(Even/Odd) => (0 1   L2) => (1     L1)
        1 2 3 4     L4 partition-either(Even/Odd) => (0 1   L2) => (1 2   L2)
        1 2 3 4 5   L5 partition-either(Even/Odd) => (0 1 2 L3) => (1 2   L2)
        1 2 3 4 5 6 L6 partition-either(Even/Odd) => (0 1 2 L3) => (1 2 3 L3)

        1           N1 partition-either(Even/Odd) => (0     L1) => (      L0)
        1 2         N2 partition-either(Even/Odd) => (0     L1) => (1     L1)
        1 2 3       N3 partition-either(Even/Odd) => (0 1   L2) => (1     L1)
        1 2 3 4     N4 partition-either(Even/Odd) => (0 1   L2) => (1 2   L2)
        1 2 3 4 5   N5 partition-either(Even/Odd) => (0 1 2 L3) => (1 2   L2)
        1 2 3 4 5 6 N6 partition-either(Even/Odd) => (0 1 2 L3) => (1 2 3 L3)
    )

    "partition" test (
        id      L0-Int partition(even?) => (      L0) => (      L0)
        1           L1 partition(even?) => (      L0) => (1     L1)
        1 2         L2 partition(even?) => (2     L1) => (1     L1)
        1 2 3       L3 partition(even?) => (2     L1) => (1 3   L2)
        1 2 3 4     L4 partition(even?) => (2 4   L2) => (1 3   L2)
        1 2 3 4 5   L5 partition(even?) => (2 4   L2) => (1 3 5 L3)
        1 2 3 4 5 6 L6 partition(even?) => (2 4 6 L3) => (1 3 5 L3)

        1           N1 partition(even?) => (      L0) => (1     L1)
        1 2         N2 partition(even?) => (2     L1) => (1     L1)
        1 2 3       N3 partition(even?) => (2     L1) => (1 3   L2)
        1 2 3 4     N4 partition(even?) => (2 4   L2) => (1 3   L2)
        1 2 3 4 5   N5 partition(even?) => (2 4   L2) => (1 3 5 L3)
        1 2 3 4 5 6 N6 partition(even?) => (2 4 6 L3) => (1 3 5 L3)
    )

    "repr;" test (
        Str(id    L0-Int repr;:repr;) => ( "List( )" )
        Str(1     L1     repr;:repr;) => ( "List( 1 ; )" )
        Str(1 2   L2     repr;:repr;) => ( "List( 1 ; 2 ; )" )
        Str(1 2 3 L3     repr;:repr;) => ( "List( 1 ; 2 ; 3 ; )")

        Str(1     N1 repr;:repr;) => ( "Nest( 1 ;+ )" )
        Str(1 2   N2 repr;:repr;) => ( "Nest( 1 ; 2 ;+ )" )
        Str(1 2 3 N3 repr;:repr;) => ( "Nest( 1 ; 2 ; 3 ;+ )")
    )

    +Tests.end!
}

def L0-Int [ List(Int) ] { L0 }
def L0-Str [ List(Str) ] { L0 }
def None-Int [ Maybe(Int) ] { None }

def Even/Odd [ Int -- Either(Int,Int) ] { 2 divmod 0= if(Left, Right) }
def /Even [ Int -- Maybe(Int) ] { Even/Odd left?  }
def /Odd  [ Int -- Maybe(Int) ] { Even/Odd right? }
def even? [ Int -- Bool ] { /Even some? }

# mirth-test # pout # 52 tests passed.
