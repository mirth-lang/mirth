module(mirth-tests.std-list)

import(std.prelude)
import(std.list)
import(std.maybe)
import(std.either)
import(std.test)
import(std.str)

def main [ +World -- +World ] {
    +Tests.Start!

    "constructors" test (
        List-L0-Int => ( LIST( ) )
        1 Nil Cons => ( LIST( 1 ; ) )
        1 2 Nil Cons Cons => ( LIST( 1 ; 2 ; ) )
        1 2 3 Nil Cons Cons Cons => ( LIST( 1 ; 2 ; 3 ; ) )

        List-L0-Int => ( LIST( ) )
        1 List.L1 => ( LIST( 1 ; ) )
        1 2 List.L2 => ( LIST( 1 ; 2 ; ) )
        1 2 3 List.L3 => ( LIST( 1 ; 2 ; 3 ; ) )
        1 2 3 4 List.L4 => ( LIST( 1 ; 2 ; 3 ; 4 ; ) )
        1 2 3 4 5 List.L5 => ( LIST( 1 ; 2 ; 3 ; 4 ; 5 ; ) )
        1 2 3 4 5 6 List.L6 => ( LIST( 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; ) )
        1 2 3 4 5 6 7 List.L7 => ( LIST( 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; ) )
        1 2 3 4 5 6 7 8 List.L8 => ( LIST( 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ; ) )

        1 List+.L1 => ( LIST+( 1 ;+ ) )
        1 2 List+.L2 => ( LIST+( 1 ; 2 ;+ ) )
        1 2 3 List+.L3 => ( LIST+( 1 ; 2 ; 3 ;+ ) )
        1 2 3 4 List+.L4 => ( LIST+( 1 ; 2 ; 3 ; 4 ;+ ) )
        1 2 3 4 5 List+.L5 => ( LIST+( 1 ; 2 ; 3 ; 4 ; 5 ;+ ) )
        1 2 3 4 5 6 List+.L6 => ( LIST+( 1 ; 2 ; 3 ; 4 ; 5 ; 6 ;+ ) )
        1 2 3 4 5 6 7 List+.L7 => ( LIST+( 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ;+ ) )
        1 2 3 4 5 6 7 8 List+.L8 => ( LIST+( 1 ; 2 ; 3 ; 4 ; 5 ; 6 ; 7 ; 8 ;+ ) )
    )

    "empty?" test (
        List.L0 empty? => ( True )
        1 List.L1 empty? => ( False )
        1 2 List.L2 empty? => ( False )
        1 2 3 List.L3 empty? => ( False )
    )

    "single?" test (
        List-L0-Int single? => ( None )
        1 List.L1 single? => ( 1 Some )
        1 2 List.L2 single? => ( None )
        1 2 3 List.L3 single? => ( None )

        1 List+.L1 single? => ( 1 Some )
        1 2 List+.L2 single? => ( None )
        1 2 3 List+.L3 single? => ( None )
    )

    ">L1?" test (
        List-L0-Int >L1? => ( None )
        1 List.L1 >L1? => ( 1 L1 Some )
        1 2 List.L2 >L1? => ( None )
        1 2 3 List.L3 >L1? => ( None )

        1 List+.L1 >L1? => ( 1 L1 Some )
        1 2 List+.L2 >L1? => ( None )
        1 2 3 List+.L3 >L1? => ( None )
    )

    ">L2?" test (
        List-L0-Int >L2? => ( None )
        1 List.L1 >L2? => ( None )
        1 2 List.L2 >L2? => ( 1 2 L2 Some )
        1 2 3 List.L3 >L2? => ( None )

        1 List+.L1 >L2? => ( None )
        1 2 List+.L2 >L2? => ( 1 2 L2 Some )
        1 2 3 List+.L3 >L2? => ( None )
    )

    ">L3?" test (
        List-L0-Int >L3? => ( None )
        1 List.L1 >L3? => ( None )
        1 2 List.L2 >L3? => ( None )
        1 2 3 List.L3 >L3? => ( 1 2 3 L3 Some )

        1 List+.L1 >L3? => ( None )
        1 2 List+.L2 >L3? => ( None )
        1 2 3 List+.L3 >L3? => ( 1 2 3 L3 Some )
    )

    "len" test (
        List.L0 len => ( 0u )
        1 List.L1 len => ( 1u )
        2 3 List.L2 len => ( 2u )
        4 5 6 List.L3 len => ( 3u )

        7 List+.L1 len => ( 1u )
        8 9 List+.L2 len => ( 2u )
        8 7 6 List+.L3 len => ( 3u )
    )

    ">List" test (
        1 List+.L1 >List => ( 1 List.L1 )
        1 2 List+.L2 >List => ( 1 2 List.L2 )
        1 2 3 List+.L3 >List => ( 1 2 3 List.L3 )
    )

    ">List+?" test (
        List-L0-Int >List+? => ( None )
        1 List.L1 >List+? => ( 1 List+.L1 Some )
        1 2 List.L2 >List+? => ( 1 2 List+.L2 Some )
        1 2 3 List.L3 >List+? => ( 1 2 3 List+.L3 Some )
    )

    "cons" test (
        0 List.L0 cons => ( 0 List+.L1 )
        0 1 List.L1 cons => ( 0 1 List+.L2 )
        0 1 2 List.L2 cons => ( 0 1 2 List+.L3 )
        0 1 2 3 List.L3 cons => ( 0 1 2 3 List+.L4 )

        0 1 List+.L1 cons => ( 0 1 List+.L2 )
        0 1 2 List+.L2 cons => ( 0 1 2 List+.L3 )
        0 1 2 3 List+.L3 cons => ( 0 1 2 3 List+.L4 )
    )

    "List.snoc" test (
        List.L0 0 List.snoc => ( 0 List+.L1 )
        11 List.L1 0 List.snoc => ( 11 0 List+.L2 )
        21 22 List.L2 0 List.snoc => ( 21 22 0 List+.L3 )
        31 32 33 List.L3 0 List.snoc => ( 31 32 33 0 List+.L4 )
    )

    "List+.snoc" test (
        11 List+.L1 0 List+.snoc => ( 11 0 List+.L2 )
        21 22 List+.L2 0 List+.snoc => ( 21 22 0 List+.L3 )
        31 32 33 List+.L3 0 List+.snoc => ( 31 32 33 0 List+.L4 )
    )

    "uncons" test (
        List-L0-Int uncons
            => ( List.L0 )
            => ( None )
        11 List.L1 uncons
            => ( List.L0 )
            => ( 11 Some )
        21 22 List.L2 uncons
            => ( 22 List.L1 )
            => ( 21 Some )
        31 32 33 List.L3 uncons
            => ( 32 33 List.L2 )
            => ( 31 Some )

        11 List+.L1 uncons
            => ( List.L0 )
            => ( 11 )
        21 22 List+.L2 uncons
            => ( 22 List.L1 )
            => ( 21 )
        31 32 33 List+.L3 uncons
            => ( 32 33 List.L2 )
            => ( 31 )
    )

    "unsnoc" test (
        LIST( 10 ; 20 ; 30 ; ) unsnoc
            => ( 30 Some )
            => ( 10 20 List.L2 )
        LIST+( 11 ;+ 21 ; 31 ; ) unsnoc
            => ( 31 )
            => ( 11 21 List.L2 )
    )

    "cat" test (
        List-L0-Int         List.L0 cat => (             List.L0 )
        1     List.L1       List.L0 cat => ( 1           List.L1 )
        1 2   List.L2       List.L0 cat => ( 1 2         List.L2 )
        1 2 3 List.L3       List.L0 cat => ( 1 2 3       List.L3 )
              List.L0 9     List.L1 cat => (       9     List.L1 )
        1     List.L1 9     List.L1 cat => ( 1     9     List.L2 )
        1 2   List.L2 9     List.L1 cat => ( 1 2   9     List.L3 )
        1 2 3 List.L3 9     List.L1 cat => ( 1 2 3 9     List.L4 )
              List.L0 9 8   List.L2 cat => (       9 8   List.L2 )
        1     List.L1 9 8   List.L2 cat => ( 1     9 8   List.L3 )
        1 2   List.L2 9 8   List.L2 cat => ( 1 2   9 8   List.L4 )
        1 2 3 List.L3 9 8   List.L2 cat => ( 1 2 3 9 8   List.L5 )
              List.L0 9 8 7 List.L3 cat => (       9 8 7 List.L3 )
        1     List.L1 9 8 7 List.L3 cat => ( 1     9 8 7 List.L4 )
        1 2   List.L2 9 8 7 List.L3 cat => ( 1 2   9 8 7 List.L5 )
        1 2 3 List.L3 9 8 7 List.L3 cat => ( 1 2 3 9 8 7 List.L6 )

              List.L0 9     List+.L1 cat => (       9     List+.L1 )
        1     List.L1 9     List+.L1 cat => ( 1     9     List+.L2 )
        1 2   List.L2 9     List+.L1 cat => ( 1 2   9     List+.L3 )
        1 2 3 List.L3 9     List+.L1 cat => ( 1 2 3 9     List+.L4 )
              List.L0 9 8   List+.L2 cat => (       9 8   List+.L2 )
        1     List.L1 9 8   List+.L2 cat => ( 1     9 8   List+.L3 )
        1 2   List.L2 9 8   List+.L2 cat => ( 1 2   9 8   List+.L4 )
        1 2 3 List.L3 9 8   List+.L2 cat => ( 1 2 3 9 8   List+.L5 )
              List.L0 9 8 7 List+.L3 cat => (       9 8 7 List+.L3 )
        1     List.L1 9 8 7 List+.L3 cat => ( 1     9 8 7 List+.L4 )
        1 2   List.L2 9 8 7 List+.L3 cat => ( 1 2   9 8 7 List+.L5 )
        1 2 3 List.L3 9 8 7 List+.L3 cat => ( 1 2 3 9 8 7 List+.L6 )
    )
    "cat+" test (
        1     List+.L1       List.L0 cat+ => ( 1           List+.L1 )
        1 2   List+.L2       List.L0 cat+ => ( 1 2         List+.L2 )
        1 2 3 List+.L3       List.L0 cat+ => ( 1 2 3       List+.L3 )
        1     List+.L1 9     List.L1 cat+ => ( 1     9     List+.L2 )
        1 2   List+.L2 9     List.L1 cat+ => ( 1 2   9     List+.L3 )
        1 2 3 List+.L3 9     List.L1 cat+ => ( 1 2 3 9     List+.L4 )
        1     List+.L1 9 8   List.L2 cat+ => ( 1     9 8   List+.L3 )
        1 2   List+.L2 9 8   List.L2 cat+ => ( 1 2   9 8   List+.L4 )
        1 2 3 List+.L3 9 8   List.L2 cat+ => ( 1 2 3 9 8   List+.L5 )
        1     List+.L1 9 8 7 List.L3 cat+ => ( 1     9 8 7 List+.L4 )
        1 2   List+.L2 9 8 7 List.L3 cat+ => ( 1 2   9 8 7 List+.L5 )
        1 2 3 List+.L3 9 8 7 List.L3 cat+ => ( 1 2 3 9 8 7 List+.L6 )

        1     List+.L1 9     List+.L1 cat+ => ( 1     9     List+.L2 )
        1 2   List+.L2 9     List+.L1 cat+ => ( 1 2   9     List+.L3 )
        1 2 3 List+.L3 9     List+.L1 cat+ => ( 1 2 3 9     List+.L4 )
        1     List+.L1 9 8   List+.L2 cat+ => ( 1     9 8   List+.L3 )
        1 2   List+.L2 9 8   List+.L2 cat+ => ( 1 2   9 8   List+.L4 )
        1 2 3 List+.L3 9 8   List+.L2 cat+ => ( 1 2 3 9 8   List+.L5 )
        1     List+.L1 9 8 7 List+.L3 cat+ => ( 1     9 8 7 List+.L4 )
        1 2   List+.L2 9 8 7 List+.L3 cat+ => ( 1 2   9 8 7 List+.L5 )
        1 2 3 List+.L3 9 8 7 List+.L3 cat+ => ( 1 2 3 9 8 7 List+.L6 )
    )

    "first" test (
        List-L0-Int first => ( None )
        1 List.L1 first => ( 1 Some )
        2 3 List.L2 first => ( 2 Some )
        4 5 6 List.L3 first => ( 4 Some )

        7 List+.L1 first => ( 7 )
        8 9 List+.L2 first => ( 8 )
        10 11 12 List+.L3 first => ( 10 )
    )

    "last" test (
        List-L0-Int last => ( None )
        1 List.L1 last => ( 1 Some )
        1 2 List.L2 last => ( 2 Some )
        1 2 3 List.L3 last => ( 3 Some )

        1 List+.L1 last => ( 1 )
        1 2 List+.L2 last => ( 2 )
        1 2 3 List+.L3 last => ( 3 )
    )

    "reverse" test (
        List-L0-Int reverse => ( List.L0 )
        1 List.L1 reverse => ( 1 List.L1 )
        1 2 List.L2 reverse => ( 2 1 List.L2 )
        1 2 3 List.L3 reverse => ( 3 2 1 List.L3 )

        1 List+.L1 reverse => ( 1 List+.L1 )
        1 2 List+.L2 reverse => ( 2 1 List+.L2 )
        1 2 3 List+.L3 reverse => ( 3 2 1 List+.L3 )
    )

    "map" test (
        List-L0-Int map(1+) => ( List.L0 )
        1 List.L1 map(1+) => ( 2 List.L1 )
        1 2 List.L2 map(1+) => ( 2 3 List.L2 )
        1 2 3 List.L3 map(1+) => ( 2 3 4 List.L3 )

        1 List+.L1 map(1+) => ( 2 List+.L1 )
        1 2 List+.L2 map(1+) => ( 2 3 List+.L2 )
        1 2 3 List+.L3 map(1+) => ( 2 3 4 List+.L3 )
    )

    "for" test (
        ""   List-L0-Int for(show cat) => ( "" )
        "" 1     List.L1 for(show cat) => ( "1" )
        "" 1 2   List.L2 for(show cat) => ( "12" )
        "" 1 2 3 List.L3 for(show cat) => ( "123" )

        "" 4     List+.L1 for(show cat) => ( "4" )
        "" 4 5   List+.L2 for(show cat) => ( "45" )
        "" 4 5 6 List+.L3 for(show cat) => ( "456" )

        ""   List-L0-Int for(show cat, "," cat) => ( "" )
        "" 1     List.L1 for(show cat, "," cat) => ( "1" )
        "" 1 2   List.L2 for(show cat, "," cat) => ( "1,2" )
        "" 1 2 3 List.L3 for(show cat, "," cat) => ( "1,2,3" )

        "" 4     List+.L1 for(show cat, "," cat) => ( "4" )
        "" 4 5   List+.L2 for(show cat, "," cat) => ( "4,5" )
        "" 4 5 6 List+.L3 for(show cat, "," cat) => ( "4,5,6" )

        "" 4       List+.L1 for(show, cat) => ( "4" ) => ( ""    )
        "" 4 5     List+.L2 for(show, cat) => ( "5" ) => ( "4"   )
        "" 4 5 6   List+.L3 for(show, cat) => ( "6" ) => ( "45"  )
        "" 4 5 6 7 List+.L4 for(show, cat) => ( "7" ) => ( "456" )
    )

    "reverse-for" test (
        ""   List-L0-Int reverse-for(show cat) => ( "" )
        "" 1     List.L1 reverse-for(show cat) => ( "1" )
        "" 1 2   List.L2 reverse-for(show cat) => ( "21" )
        "" 1 2 3 List.L3 reverse-for(show cat) => ( "321" )

        "" 4     List+.L1 reverse-for(show cat) => ( "4" )
        "" 4 5   List+.L2 reverse-for(show cat) => ( "54" )
        "" 4 5 6 List+.L3 reverse-for(show cat) => ( "654" )
    )

    "fold" test (
        List-L0-Str         fold(cat) => ( None )
        "1"         List.L1 fold(cat) => ( "1" Some )
        "1" "2"     List.L2 fold(cat) => ( "12" Some )
        "1" "2" "3" List.L3 fold(cat) => ( "123" Some )

        "1"         List+.L1 fold(cat) => ( "1" )
        "1" "2"     List+.L2 fold(cat) => ( "12" )
        "1" "2" "3" List+.L3 fold(cat) => ( "123" )
    )

    "filter" test (
        List-L0-Int filter(0>) => (List.L0)
        0 List.L1 filter(0>) => (List.L0)
        0 1 List.L2 filter(0>) => (1 List.L1)
        0 1 -1 List.L3 filter(0>) => (1 List.L1)
        0 1 -1 2 List.L4 filter(0>) => (1 2 List.L2)
        0 1 -1 2 -2 List.L5 filter(0>) => (1 2 List.L2)
        0 1 -1 2 -2 3 List.L6 filter(0>) => (1 2 3 List.L3)
        0 1 -1 2 -2 3 -3 List.L7 filter(0>) => (1 2 3 List.L3)

        0 List+.L1 filter(0>) => (List.L0)
        0 1 List+.L2 filter(0>) => (1 List.L1)
        0 1 -1 List+.L3 filter(0>) => (1 List.L1)
        0 1 -1 2 List+.L4 filter(0>) => (1 2 List.L2)
        0 1 -1 2 -2 List+.L5 filter(0>) => (1 2 List.L2)
        0 1 -1 2 -2 3 List+.L6 filter(0>) => (1 2 3 List.L3)
        0 1 -1 2 -2 3 -3 List+.L7 filter(0>) => (1 2 3 List.L3)
    )

    "flatmap" test (
        List-L0-Int flatmap(List.L1) => (List.L0)
        1 List.L1 flatmap(List.L1) => (1 List.L1)
        1 2 List.L2 flatmap(List.L1) => (1 2 List.L2)
        1 2 3 List.L3 flatmap(List.L1) => (1 2 3 List.L3)

        List-L0-Int flatmap(dup List.L2) => (List.L0)
        1 List.L1 flatmap(dup List.L2) => (1 1 List.L2)
        1 2 List.L2 flatmap(dup List.L2) => (1 1 2 2 List.L4)
        1 2 3 List.L3 flatmap(dup List.L2) => (1 1 2 2 3 3 List.L6)

        1 List+.L1 flatmap(dup List.L2) => (1 1 List.L2)
        1 2 List+.L2 flatmap(dup List.L2) => (1 1 2 2 List.L4)
        1 2 3 List+.L3 flatmap(dup List.L2) => (1 1 2 2 3 3 List.L6)
    )

    "filter-some" test (
        List-L0-Int     filter-some(drop None) => (List-L0-Int)
        1       List.L1 filter-some(drop None) => (List-L0-Int)
        1 2     List.L2 filter-some(drop None) => (List-L0-Int)
        1 2 3   List.L3 filter-some(drop None) => (List-L0-Int)
        1 2 3 4 List.L4 filter-some(drop None) => (List-L0-Int)

        List-L0-Int     filter-some(drop 9 Some) => (List.L0)
        1       List.L1 filter-some(drop 9 Some) => (9 List.L1)
        1 2     List.L2 filter-some(drop 9 Some) => (9 9 List.L2)
        1 2 3   List.L3 filter-some(drop 9 Some) => (9 9 9 List.L3)
        1 2 3 4 List.L4 filter-some(drop 9 Some) => (9 9 9 9 List.L4)

        List-L0-Int     filter-some(/Even) => (List.L0)
        1       List.L1 filter-some(/Even) => (List.L0)
        1 2     List.L2 filter-some(/Even) => (1 List.L1)
        1 2 3   List.L3 filter-some(/Even) => (1 List.L1)
        1 2 3 4 List.L4 filter-some(/Even) => (1 2 List.L2)

        List-L0-Int     filter-some(/Odd) => (List.L0)
        1       List.L1 filter-some(/Odd) => (0 List.L1)
        1 2     List.L2 filter-some(/Odd) => (0 List.L1)
        1 2 3   List.L3 filter-some(/Odd) => (0 1 List.L2)
        1 2 3 4 List.L4 filter-some(/Odd) => (0 1 List.L2)

        1       List+.L1 filter-some(/Even) => (List.L0)
        1 2     List+.L2 filter-some(/Even) => (1 List.L1)
        1 2 3   List+.L3 filter-some(/Even) => (1 List.L1)
        1 2 3 4 List+.L4 filter-some(/Even) => (1 2 List.L2)

        1       List+.L1 filter-some(/Odd) => (0 List.L1)
        1 2     List+.L2 filter-some(/Odd) => (0 List.L1)
        1 2 3   List+.L3 filter-some(/Odd) => (0 1 List.L2)
        1 2 3 4 List+.L4 filter-some(/Odd) => (0 1 List.L2)
    )

    "find-some" test (
        List-L0-Int     find-some(drop None) => (None-Int)
        1       List.L1 find-some(drop None) => (None-Int)
        1 2     List.L2 find-some(drop None) => (None-Int)
        1 2 3   List.L3 find-some(drop None) => (None-Int)
        1 2 3 4 List.L4 find-some(drop None) => (None-Int)

        List-L0-Int     find-some(drop 9 Some) => (None)
        1       List.L1 find-some(drop 9 Some) => (9 Some)
        1 2     List.L2 find-some(drop 9 Some) => (9 Some)
        1 2 3   List.L3 find-some(drop 9 Some) => (9 Some)
        1 2 3 4 List.L4 find-some(drop 9 Some) => (9 Some)

        List-L0-Int     find-some(/Even) => (None)
        1       List.L1 find-some(/Even) => (None)
        1 2     List.L2 find-some(/Even) => (1 Some)
        1 2 3   List.L3 find-some(/Even) => (1 Some)
        1 2 3 4 List.L4 find-some(/Even) => (1 Some)

        List-L0-Int     find-some(/Odd) => (None)
        1       List.L1 find-some(/Odd) => (0 Some)
        1 2     List.L2 find-some(/Odd) => (0 Some)
        1 2 3   List.L3 find-some(/Odd) => (0 Some)
        1 2 3 4 List.L4 find-some(/Odd) => (0 Some)

        1       List+.L1 find-some(/Even) => (None)
        1 2     List+.L2 find-some(/Even) => (1 Some)
        1 2 3   List+.L3 find-some(/Even) => (1 Some)
        1 2 3 4 List+.L4 find-some(/Even) => (1 Some)

        1       List+.L1 find-some(/Odd) => (0 Some)
        1 2     List+.L2 find-some(/Odd) => (0 Some)
        1 2 3   List+.L3 find-some(/Odd) => (0 Some)
        1 2 3 4 List+.L4 find-some(/Odd) => (0 Some)
    )

    "reverse-find-some" test (
        List-L0-Int     reverse-find-some(drop None) => (None-Int)
        1       List.L1 reverse-find-some(drop None) => (None-Int)
        1 2     List.L2 reverse-find-some(drop None) => (None-Int)
        1 2 3   List.L3 reverse-find-some(drop None) => (None-Int)
        1 2 3 4 List.L4 reverse-find-some(drop None) => (None-Int)

        List-L0-Int     reverse-find-some(drop 9 Some) => (None)
        1       List.L1 reverse-find-some(drop 9 Some) => (9 Some)
        1 2     List.L2 reverse-find-some(drop 9 Some) => (9 Some)
        1 2 3   List.L3 reverse-find-some(drop 9 Some) => (9 Some)
        1 2 3 4 List.L4 reverse-find-some(drop 9 Some) => (9 Some)

        List-L0-Int     reverse-find-some(/Even) => (None)
        1       List.L1 reverse-find-some(/Even) => (None)
        1 2     List.L2 reverse-find-some(/Even) => (1 Some)
        1 2 3   List.L3 reverse-find-some(/Even) => (1 Some)
        1 2 3 4 List.L4 reverse-find-some(/Even) => (2 Some)

        List-L0-Int     reverse-find-some(/Odd) => (None)
        1       List.L1 reverse-find-some(/Odd) => (0 Some)
        1 2     List.L2 reverse-find-some(/Odd) => (0 Some)
        1 2 3   List.L3 reverse-find-some(/Odd) => (1 Some)
        1 2 3 4 List.L4 reverse-find-some(/Odd) => (1 Some)

        1       List+.L1 reverse-find-some(/Even) => (None)
        1 2     List+.L2 reverse-find-some(/Even) => (1 Some)
        1 2 3   List+.L3 reverse-find-some(/Even) => (1 Some)
        1 2 3 4 List+.L4 reverse-find-some(/Even) => (2 Some)

        1       List+.L1 reverse-find-some(/Odd) => (0 Some)
        1 2     List+.L2 reverse-find-some(/Odd) => (0 Some)
        1 2 3   List+.L3 reverse-find-some(/Odd) => (1 Some)
        1 2 3 4 List+.L4 reverse-find-some(/Odd) => (1 Some)
    )

    "find" test (
        List-L0-Int     find(2 >) => (None)
        1       List.L1 find(2 >) => (None)
        1 2     List.L2 find(2 >) => (None)
        1 2 3   List.L3 find(2 >) => (3 Some)
        1 2 3 4 List.L4 find(2 >) => (3 Some)

        1       List+.L1 find(2 >) => (None)
        1 2     List+.L2 find(2 >) => (None)
        1 2 3   List+.L3 find(2 >) => (3 Some)
        1 2 3 4 List+.L4 find(2 >) => (3 Some)
    )

    "reverse-find" test (
        List-L0-Int     reverse-find(2 >) => (None)
        1       List.L1 reverse-find(2 >) => (None)
        1 2     List.L2 reverse-find(2 >) => (None)
        1 2 3   List.L3 reverse-find(2 >) => (3 Some)
        1 2 3 4 List.L4 reverse-find(2 >) => (4 Some)

        1       List+.L1 reverse-find(2 >) => (None)
        1 2     List+.L2 reverse-find(2 >) => (None)
        1 2 3   List+.L3 reverse-find(2 >) => (3 Some)
        1 2 3 4 List+.L4 reverse-find(2 >) => (4 Some)
    )

    "any" test (
        List-L0-Int     has(2 >) => (False)
        1       List.L1 has(2 >) => (False)
        1 2     List.L2 has(2 >) => (False)
        1 2 3   List.L3 has(2 >) => (True)
        1 2 3 4 List.L4 has(2 >) => (True)

        1       List+.L1 has(2 >) => (False)
        1 2     List+.L2 has(2 >) => (False)
        1 2 3   List+.L3 has(2 >) => (True)
        1 2 3 4 List+.L4 has(2 >) => (True)
    )

    "all" test (
        List-L0-Int     all(2 <) => (True)
        1       List.L1 all(2 <) => (True)
        1 2     List.L2 all(2 <) => (False)
        1 2 3   List.L3 all(2 <) => (False)
        1 2 3 4 List.L4 all(2 <) => (False)

        1       List+.L1 all(2 <) => (True)
        1 2     List+.L2 all(2 <) => (False)
        1 2 3   List+.L3 all(2 <) => (False)
        1 2 3 4 List+.L4 all(2 <) => (False)
    )

    "collect" test (
        collect(None) => ( List-L0-Int )
        1 2 3 List.L3 collect(unsnoc) => ( 3 2 1 List.L3 ) => ( List.L0 )
        1 2 3 List.L3 collect(uncons swap) => ( 1 2 3 List.L3 ) => ( List.L0 )
        1 2 3 4 List.L4 collect(uncons swap bind(/Odd)) => ( 0 List.L1 ) => ( 3 4 List.L2 )
        1 3 2 4 List.L4 collect(uncons swap bind(/Odd)) => ( 0 1 List.L2 ) => ( 4 List.L1 )
    )

    "collect-while" test (
        collect-while(False, 1) => ( List.L0 )
        1 collect-while(dup 0>, sip:1-) => ( 1 List.L1 ) => ( 0 )
        3 collect-while(dup 0>, sip:1-) => ( 3 2 1 List.L3 ) => ( 0 )
    )

    "Int.range" test (
        0 0 range => ( 0 List.L1 )
        0 1 range => ( 0 1 List.L2 )
        0 2 range => ( 0 1 2 List.L3 )
        0 3 range => ( 0 1 2 3 List.L4 )
        1 0 range => ( List.L0 )
        1 1 range => ( 1 List.L1 )
        1 2 range => ( 1 2 List.L2 )
        1 3 range => ( 1 2 3 List.L3 )
        2 0 range => ( List.L0 )
        2 1 range => ( List.L0 )
        2 2 range => ( 2 List.L1 )
        2 3 range => ( 2 3 List.L2 )
        3 0 range => ( List.L0 )
        3 1 range => ( List.L0 )
        3 2 range => ( List.L0 )
        3 3 range => ( 3 List.L1 )
    )

    "Int.to:" test (
        0 to: 0 => ( 0 List.L1 )
        0 to: 1 => ( 0 1 List.L2 )
        0 to: 2 => ( 0 1 2 List.L3 )
        0 to: 3 => ( 0 1 2 3 List.L4 )
        1 to: 0 => ( List.L0 )
        1 to: 1 => ( 1 List.L1 )
        1 to: 2 => ( 1 2 List.L2 )
        1 to: 3 => ( 1 2 3 List.L3 )
        2 to: 0 => ( List.L0 )
        2 to: 1 => ( List.L0 )
        2 to: 2 => ( 2 List.L1 )
        2 to: 3 => ( 2 3 List.L2 )
        3 to: 0 => ( List.L0 )
        3 to: 1 => ( List.L0 )
        3 to: 2 => ( List.L0 )
        3 to: 3 => ( 3 List.L1 )
    )

    "Int.from:" test (
        0 from: 0 => ( 0 List.L1 )
        0 from: 1 => ( List.L0 )
        0 from: 2 => ( List.L0 )
        0 from: 3 => ( List.L0 )
        1 from: 0 => ( 0 1 List.L2 )
        1 from: 1 => ( 1 List.L1 )
        1 from: 2 => ( List.L0 )
        1 from: 3 => ( List.L0 )
        2 from: 0 => ( 0 1 2 List.L3 )
        2 from: 1 => ( 1 2 List.L2 )
        2 from: 2 => ( 2 List.L1 )
        2 from: 3 => ( List.L0 )
        3 from: 0 => ( 0 1 2 3 List.L4 )
        3 from: 1 => ( 1 2 3 List.L3 )
        3 from: 2 => ( 2 3 List.L2 )
        3 from: 3 => ( 3 List.L1 )
    )

    ">+ +>" test (
        List.L0 >+ +> => ( List-L0-Int )
        1 List.L1 >+ +> => ( 1 List.L1 )
        1 2 List.L2 >+ +> => ( 1 2 List.L2 )
        1 2 3 List.L3 >+ +> => ( 1 2 3 List.L3 )

        1 List+.L1 >+ +> => ( 1 List+.L1 )
        1 2 List+.L2 >+ +> => ( 1 2 List+.L2 )
        1 2 3 List+.L3 >+ +> => ( 1 2 3 List+.L3 )
    )

    "push!" test (
        id    List.L0 >+ 9 push! +> => (       9 List.L1 )
        1     List.L1 >+ 9 push! +> => ( 1     9 List.L2 )
        1 2   List.L2 >+ 9 push! +> => ( 1 2   9 List.L3 )
        1 2 3 List.L3 >+ 9 push! +> => ( 1 2 3 9 List.L4 )
        id    List.L0 >+ 9 push! 8 push! +> => (       9 8 List.L2 )
        1     List.L1 >+ 9 push! 8 push! +> => ( 1     9 8 List.L3 )
        1 2   List.L2 >+ 9 push! 8 push! +> => ( 1 2   9 8 List.L4 )
        1 2 3 List.L3 >+ 9 push! 8 push! +> => ( 1 2 3 9 8 List.L5 )
        id    List.L0 >+ 9 push! 8 push! 7 push! +> => (       9 8 7 List.L3 )
        1     List.L1 >+ 9 push! 8 push! 7 push! +> => ( 1     9 8 7 List.L4 )
        1 2   List.L2 >+ 9 push! 8 push! 7 push! +> => ( 1 2   9 8 7 List.L5 )
        1 2 3 List.L3 >+ 9 push! 8 push! 7 push! +> => ( 1 2 3 9 8 7 List.L6 )

        1     List+.L1 >+ 9 push! +> => ( 1     9 List+.L2 )
        1 2   List+.L2 >+ 9 push! +> => ( 1 2   9 List+.L3 )
        1 2 3 List+.L3 >+ 9 push! +> => ( 1 2 3 9 List+.L4 )
        1     List+.L1 >+ 9 push! 8 push! +> => ( 1     9 8 List+.L3 )
        1 2   List+.L2 >+ 9 push! 8 push! +> => ( 1 2   9 8 List+.L4 )
        1 2 3 List+.L3 >+ 9 push! 8 push! +> => ( 1 2 3 9 8 List+.L5 )
        1     List+.L1 >+ 9 push! 8 push! 7 push! +> => ( 1     9 8 7 List+.L4 )
        1 2   List+.L2 >+ 9 push! 8 push! 7 push! +> => ( 1 2   9 8 7 List+.L5 )
        1 2 3 List+.L3 >+ 9 push! 8 push! 7 push! +> => ( 1 2 3 9 8 7 List+.L6 )
    )

    ";" test (
        id    List.L0 >+ 9 ; +> => (       9 List.L1 )
        1     List.L1 >+ 9 ; +> => ( 1     9 List.L2 )
        1 2   List.L2 >+ 9 ; +> => ( 1 2   9 List.L3 )
        1 2 3 List.L3 >+ 9 ; +> => ( 1 2 3 9 List.L4 )
        id    List.L0 >+ 9 ; 8 ; +> => (       9 8 List.L2 )
        1     List.L1 >+ 9 ; 8 ; +> => ( 1     9 8 List.L3 )
        1 2   List.L2 >+ 9 ; 8 ; +> => ( 1 2   9 8 List.L4 )
        1 2 3 List.L3 >+ 9 ; 8 ; +> => ( 1 2 3 9 8 List.L5 )
        id    List.L0 >+ 9 ; 8 ; 7 ; +> => (       9 8 7 List.L3 )
        1     List.L1 >+ 9 ; 8 ; 7 ; +> => ( 1     9 8 7 List.L4 )
        1 2   List.L2 >+ 9 ; 8 ; 7 ; +> => ( 1 2   9 8 7 List.L5 )
        1 2 3 List.L3 >+ 9 ; 8 ; 7 ; +> => ( 1 2 3 9 8 7 List.L6 )

        1     List+.L1 >+ 9 ; +> => ( 1     9 List+.L2 )
        1 2   List+.L2 >+ 9 ; +> => ( 1 2   9 List+.L3 )
        1 2 3 List+.L3 >+ 9 ; +> => ( 1 2 3 9 List+.L4 )
        1     List+.L1 >+ 9 ; 8 ; +> => ( 1     9 8 List+.L3 )
        1 2   List+.L2 >+ 9 ; 8 ; +> => ( 1 2   9 8 List+.L4 )
        1 2 3 List+.L3 >+ 9 ; 8 ; +> => ( 1 2 3 9 8 List+.L5 )
        1     List+.L1 >+ 9 ; 8 ; 7 ; +> => ( 1     9 8 7 List+.L4 )
        1 2   List+.L2 >+ 9 ; 8 ; 7 ; +> => ( 1 2   9 8 7 List+.L5 )
        1 2 3 List+.L3 >+ 9 ; 8 ; 7 ; +> => ( 1 2 3 9 8 7 List+.L6 )
    )

    "push+!" test (
        id    List.L0 >+ 9 push+! +> => (       9 List+.L1 )
        1     List.L1 >+ 9 push+! +> => ( 1     9 List+.L2 )
        1 2   List.L2 >+ 9 push+! +> => ( 1 2   9 List+.L3 )
        1 2 3 List.L3 >+ 9 push+! +> => ( 1 2 3 9 List+.L4 )
        id    List.L0 >+ 9 push+! 8 push! +> => (       9 8 List+.L2 )
        1     List.L1 >+ 9 push+! 8 push! +> => ( 1     9 8 List+.L3 )
        1 2   List.L2 >+ 9 push+! 8 push! +> => ( 1 2   9 8 List+.L4 )
        1 2 3 List.L3 >+ 9 push+! 8 push! +> => ( 1 2 3 9 8 List+.L5 )
        id    List.L0 >+ 9 push+! 8 push! 7 push! +> => (       9 8 7 List+.L3 )
        1     List.L1 >+ 9 push+! 8 push! 7 push! +> => ( 1     9 8 7 List+.L4 )
        1 2   List.L2 >+ 9 push+! 8 push! 7 push! +> => ( 1 2   9 8 7 List+.L5 )
        1 2 3 List.L3 >+ 9 push+! 8 push! 7 push! +> => ( 1 2 3 9 8 7 List+.L6 )

        id    List.L0 >+ 9 push! 8 push+! +> => (       9 8 List+.L2 )
        1     List.L1 >+ 9 push! 8 push+! +> => ( 1     9 8 List+.L3 )
        1 2   List.L2 >+ 9 push! 8 push+! +> => ( 1 2   9 8 List+.L4 )
        1 2 3 List.L3 >+ 9 push! 8 push+! +> => ( 1 2 3 9 8 List+.L5 )
        id    List.L0 >+ 9 push! 8 push+! 7 push! +> => (       9 8 7 List+.L3 )
        1     List.L1 >+ 9 push! 8 push+! 7 push! +> => ( 1     9 8 7 List+.L4 )
        1 2   List.L2 >+ 9 push! 8 push+! 7 push! +> => ( 1 2   9 8 7 List+.L5 )
        1 2 3 List.L3 >+ 9 push! 8 push+! 7 push! +> => ( 1 2 3 9 8 7 List+.L6 )

        id    List.L0 >+ 9 push! 8 push! 7 push+! +> => (       9 8 7 List+.L3 )
        1     List.L1 >+ 9 push! 8 push! 7 push+! +> => ( 1     9 8 7 List+.L4 )
        1 2   List.L2 >+ 9 push! 8 push! 7 push+! +> => ( 1 2   9 8 7 List+.L5 )
        1 2 3 List.L3 >+ 9 push! 8 push! 7 push+! +> => ( 1 2 3 9 8 7 List+.L6 )
    )

    ";+" test (
        id    List.L0 >+ 9 ;+ +> => (       9 List+.L1 )
        1     List.L1 >+ 9 ;+ +> => ( 1     9 List+.L2 )
        1 2   List.L2 >+ 9 ;+ +> => ( 1 2   9 List+.L3 )
        1 2 3 List.L3 >+ 9 ;+ +> => ( 1 2 3 9 List+.L4 )
        id    List.L0 >+ 9 ;+ 8 ; +> => (       9 8 List+.L2 )
        1     List.L1 >+ 9 ;+ 8 ; +> => ( 1     9 8 List+.L3 )
        1 2   List.L2 >+ 9 ;+ 8 ; +> => ( 1 2   9 8 List+.L4 )
        1 2 3 List.L3 >+ 9 ;+ 8 ; +> => ( 1 2 3 9 8 List+.L5 )
        id    List.L0 >+ 9 ;+ 8 ; 7 ; +> => (       9 8 7 List+.L3 )
        1     List.L1 >+ 9 ;+ 8 ; 7 ; +> => ( 1     9 8 7 List+.L4 )
        1 2   List.L2 >+ 9 ;+ 8 ; 7 ; +> => ( 1 2   9 8 7 List+.L5 )
        1 2 3 List.L3 >+ 9 ;+ 8 ; 7 ; +> => ( 1 2 3 9 8 7 List+.L6 )

        id    List.L0 >+ 9 ; 8 ;+ +> => (       9 8 List+.L2 )
        1     List.L1 >+ 9 ; 8 ;+ +> => ( 1     9 8 List+.L3 )
        1 2   List.L2 >+ 9 ; 8 ;+ +> => ( 1 2   9 8 List+.L4 )
        1 2 3 List.L3 >+ 9 ; 8 ;+ +> => ( 1 2 3 9 8 List+.L5 )
        id    List.L0 >+ 9 ; 8 ;+ 7 ; +> => (       9 8 7 List+.L3 )
        1     List.L1 >+ 9 ; 8 ;+ 7 ; +> => ( 1     9 8 7 List+.L4 )
        1 2   List.L2 >+ 9 ; 8 ;+ 7 ; +> => ( 1 2   9 8 7 List+.L5 )
        1 2 3 List.L3 >+ 9 ; 8 ;+ 7 ; +> => ( 1 2 3 9 8 7 List+.L6 )

        id    List.L0 >+ 9 ; 8 ; 7 ;+ +> => (       9 8 7 List+.L3 )
        1     List.L1 >+ 9 ; 8 ; 7 ;+ +> => ( 1     9 8 7 List+.L4 )
        1 2   List.L2 >+ 9 ; 8 ; 7 ;+ +> => ( 1 2   9 8 7 List+.L5 )
        1 2 3 List.L3 >+ 9 ; 8 ; 7 ;+ +> => ( 1 2 3 9 8 7 List+.L6 )
    )

    "pop!" test (
        List-L0-Int   >+ pop! +> => (     List.L0 ) => ( None )
        1     List.L1 >+ pop! +> => (     List.L0 ) => ( 1 Some )
        1 2   List.L2 >+ pop! +> => ( 1   List.L1 ) => ( 2 Some )
        1 2 3 List.L3 >+ pop! +> => ( 1 2 List.L2 ) => ( 3 Some )

        1     List+.L1 >+ pop! +> => (     List.L0 ) => ( 1 )
        1 2   List+.L2 >+ pop! +> => ( 1   List.L1 ) => ( 2 )
        1 2 3 List+.L3 >+ pop! +> => ( 1 2 List.L2 ) => ( 3 )
    )

    "==" test (
        id    List.L0       List.L0 ==:Int.== => ( True )
        1     List.L1       List.L0 ==:== => ( False )
        1 2   List.L2       List.L0 ==:== => ( False )
        1 2 3 List.L3       List.L0 ==:== => ( False )
        id    List.L0 1     List.L1 ==:== => ( False )
        1     List.L1 1     List.L1 ==:== => ( True )
        1 2   List.L2 1     List.L1 ==:== => ( False )
        1 2 3 List.L3 1     List.L1 ==:== => ( False )
        id    List.L0 9     List.L1 ==:== => ( False )
        1     List.L1 9     List.L1 ==:== => ( False )
        1 2   List.L2 9     List.L1 ==:== => ( False )
        1 2 3 List.L3 9     List.L1 ==:== => ( False )
        id    List.L0 1 2   List.L2 ==:== => ( False )
        1     List.L1 1 2   List.L2 ==:== => ( False )
        1 2   List.L2 1 2   List.L2 ==:== => ( True )
        1 2 3 List.L3 1 2   List.L2 ==:== => ( False )
        id    List.L0 9 2   List.L2 ==:== => ( False )
        1     List.L1 9 2   List.L2 ==:== => ( False )
        1 2   List.L2 9 2   List.L2 ==:== => ( False )
        1 2 3 List.L3 9 2   List.L2 ==:== => ( False )
        id    List.L0 1 9   List.L2 ==:== => ( False )
        1     List.L1 1 9   List.L2 ==:== => ( False )
        1 2   List.L2 1 9   List.L2 ==:== => ( False )
        1 2 3 List.L3 1 9   List.L2 ==:== => ( False )
        id    List.L0 1 2 3 List.L3 ==:== => ( False )
        1     List.L1 1 2 3 List.L3 ==:== => ( False )
        1 2   List.L2 1 2 3 List.L3 ==:== => ( False )
        1 2 3 List.L3 1 2 3 List.L3 ==:== => ( True )
        id    List.L0 9 2 3 List.L3 ==:== => ( False )
        1     List.L1 9 2 3 List.L3 ==:== => ( False )
        1 2   List.L2 9 2 3 List.L3 ==:== => ( False )
        1 2 3 List.L3 9 2 3 List.L3 ==:== => ( False )
        id    List.L0 1 9 3 List.L3 ==:== => ( False )
        1     List.L1 1 9 3 List.L3 ==:== => ( False )
        1 2   List.L2 1 9 3 List.L3 ==:== => ( False )
        1 2 3 List.L3 1 9 3 List.L3 ==:== => ( False )
        id    List.L0 1 2 9 List.L3 ==:== => ( False )
        1     List.L1 1 2 9 List.L3 ==:== => ( False )
        1 2   List.L2 1 2 9 List.L3 ==:== => ( False )
        1 2 3 List.L3 1 2 9 List.L3 ==:== => ( False )

        1     List+.L1 1     List+.L1 ==:== => ( True )
        1 2   List+.L2 1     List+.L1 ==:== => ( False )
        1 2 3 List+.L3 1     List+.L1 ==:== => ( False )
        1     List+.L1 9     List+.L1 ==:== => ( False )
        1 2   List+.L2 9     List+.L1 ==:== => ( False )
        1 2 3 List+.L3 9     List+.L1 ==:== => ( False )
        1     List+.L1 1 2   List+.L2 ==:== => ( False )
        1 2   List+.L2 1 2   List+.L2 ==:== => ( True )
        1 2 3 List+.L3 1 2   List+.L2 ==:== => ( False )
        1     List+.L1 9 2   List+.L2 ==:== => ( False )
        1 2   List+.L2 9 2   List+.L2 ==:== => ( False )
        1 2 3 List+.L3 9 2   List+.L2 ==:== => ( False )
        1     List+.L1 1 9   List+.L2 ==:== => ( False )
        1 2   List+.L2 1 9   List+.L2 ==:== => ( False )
        1 2 3 List+.L3 1 9   List+.L2 ==:== => ( False )
        1     List+.L1 1 2 3 List+.L3 ==:== => ( False )
        1 2   List+.L2 1 2 3 List+.L3 ==:== => ( False )
        1 2 3 List+.L3 1 2 3 List+.L3 ==:== => ( True )
        1     List+.L1 9 2 3 List+.L3 ==:== => ( False )
        1 2   List+.L2 9 2 3 List+.L3 ==:== => ( False )
        1 2 3 List+.L3 9 2 3 List+.L3 ==:== => ( False )
        1     List+.L1 1 9 3 List+.L3 ==:== => ( False )
        1 2   List+.L2 1 9 3 List+.L3 ==:== => ( False )
        1 2 3 List+.L3 1 9 3 List+.L3 ==:== => ( False )
        1     List+.L1 1 2 9 List+.L3 ==:== => ( False )
        1 2   List+.L2 1 2 9 List+.L3 ==:== => ( False )
        1 2 3 List+.L3 1 2 9 List+.L3 ==:== => ( False )
    )

    "lookup" test (
        0 id    List.L0 lookup:Int.== => (   None )  0 id    List.L0 lookup:Int.<= => (   None )
        0 1     List.L1 lookup:Int.== => (   None )  0 1     List.L1 lookup:Int.<= => ( 1 Some )
        0 1 2   List.L2 lookup:Int.== => (   None )  0 1 2   List.L2 lookup:Int.<= => ( 1 Some )
        0 1 2 3 List.L3 lookup:Int.== => (   None )  0 1 2 3 List.L3 lookup:Int.<= => ( 1 Some )
        1 id    List.L0 lookup:Int.== => (   None )  1 id    List.L0 lookup:Int.<= => (   None )
        1 1     List.L1 lookup:Int.== => ( 1 Some )  1 1     List.L1 lookup:Int.<= => ( 1 Some )
        1 1 2   List.L2 lookup:Int.== => ( 1 Some )  1 1 2   List.L2 lookup:Int.<= => ( 1 Some )
        1 1 2 3 List.L3 lookup:Int.== => ( 1 Some )  1 1 2 3 List.L3 lookup:Int.<= => ( 1 Some )
        2 id    List.L0 lookup:Int.== => (   None )  2 id    List.L0 lookup:Int.<= => (   None )
        2 1     List.L1 lookup:Int.== => (   None )  2 1     List.L1 lookup:Int.<= => (   None )
        2 1 2   List.L2 lookup:Int.== => ( 2 Some )  2 1 2   List.L2 lookup:Int.<= => ( 2 Some )
        2 1 2 3 List.L3 lookup:Int.== => ( 2 Some )  2 1 2 3 List.L3 lookup:Int.<= => ( 2 Some )
        3 id    List.L0 lookup:Int.== => (   None )  3 id    List.L0 lookup:Int.<= => (   None )
        3 1     List.L1 lookup:Int.== => (   None )  3 1     List.L1 lookup:Int.<= => (   None )
        3 1 2   List.L2 lookup:Int.== => (   None )  3 1 2   List.L2 lookup:Int.<= => (   None )
        3 1 2 3 List.L3 lookup:Int.== => ( 3 Some )  3 1 2 3 List.L3 lookup:Int.<= => ( 3 Some )
        4 id    List.L0 lookup:Int.== => (   None )  4 id    List.L0 lookup:Int.<= => (   None )
        4 1     List.L1 lookup:Int.== => (   None )  4 1     List.L1 lookup:Int.<= => (   None )
        4 1 2   List.L2 lookup:Int.== => (   None )  4 1 2   List.L2 lookup:Int.<= => (   None )
        4 1 2 3 List.L3 lookup:Int.== => (   None )  4 1 2 3 List.L3 lookup:Int.<= => (   None )

        0 1     List+.L1 lookup:Int.== => (   None )  0 1     List+.L1 lookup:Int.<= => ( 1 Some )
        0 1 2   List+.L2 lookup:Int.== => (   None )  0 1 2   List+.L2 lookup:Int.<= => ( 1 Some )
        0 1 2 3 List+.L3 lookup:Int.== => (   None )  0 1 2 3 List+.L3 lookup:Int.<= => ( 1 Some )
        1 1     List+.L1 lookup:Int.== => ( 1 Some )  1 1     List+.L1 lookup:Int.<= => ( 1 Some )
        1 1 2   List+.L2 lookup:Int.== => ( 1 Some )  1 1 2   List+.L2 lookup:Int.<= => ( 1 Some )
        1 1 2 3 List+.L3 lookup:Int.== => ( 1 Some )  1 1 2 3 List+.L3 lookup:Int.<= => ( 1 Some )
        2 1     List+.L1 lookup:Int.== => (   None )  2 1     List+.L1 lookup:Int.<= => (   None )
        2 1 2   List+.L2 lookup:Int.== => ( 2 Some )  2 1 2   List+.L2 lookup:Int.<= => ( 2 Some )
        2 1 2 3 List+.L3 lookup:Int.== => ( 2 Some )  2 1 2 3 List+.L3 lookup:Int.<= => ( 2 Some )
        3 1     List+.L1 lookup:Int.== => (   None )  3 1     List+.L1 lookup:Int.<= => (   None )
        3 1 2   List+.L2 lookup:Int.== => (   None )  3 1 2   List+.L2 lookup:Int.<= => (   None )
        3 1 2 3 List+.L3 lookup:Int.== => ( 3 Some )  3 1 2 3 List+.L3 lookup:Int.<= => ( 3 Some )
        4 1     List+.L1 lookup:Int.== => (   None )  4 1     List+.L1 lookup:Int.<= => (   None )
        4 1 2   List+.L2 lookup:Int.== => (   None )  4 1 2   List+.L2 lookup:Int.<= => (   None )
        4 1 2 3 List+.L3 lookup:Int.== => (   None )  4 1 2 3 List+.L3 lookup:Int.<= => (   None )
    )

    "reverse-lookup" test (
        0 id    List.L0 reverse-lookup:Int.== => (   None )  0 id    List.L0 reverse-lookup:Int.<= => (   None )
        0 1     List.L1 reverse-lookup:Int.== => (   None )  0 1     List.L1 reverse-lookup:Int.<= => ( 1 Some )
        0 1 2   List.L2 reverse-lookup:Int.== => (   None )  0 1 2   List.L2 reverse-lookup:Int.<= => ( 2 Some )
        0 1 2 3 List.L3 reverse-lookup:Int.== => (   None )  0 1 2 3 List.L3 reverse-lookup:Int.<= => ( 3 Some )
        1 id    List.L0 reverse-lookup:Int.== => (   None )  1 id    List.L0 reverse-lookup:Int.<= => (   None )
        1 1     List.L1 reverse-lookup:Int.== => ( 1 Some )  1 1     List.L1 reverse-lookup:Int.<= => ( 1 Some )
        1 1 2   List.L2 reverse-lookup:Int.== => ( 1 Some )  1 1 2   List.L2 reverse-lookup:Int.<= => ( 2 Some )
        1 1 2 3 List.L3 reverse-lookup:Int.== => ( 1 Some )  1 1 2 3 List.L3 reverse-lookup:Int.<= => ( 3 Some )
        2 id    List.L0 reverse-lookup:Int.== => (   None )  2 id    List.L0 reverse-lookup:Int.<= => (   None )
        2 1     List.L1 reverse-lookup:Int.== => (   None )  2 1     List.L1 reverse-lookup:Int.<= => (   None )
        2 1 2   List.L2 reverse-lookup:Int.== => ( 2 Some )  2 1 2   List.L2 reverse-lookup:Int.<= => ( 2 Some )
        2 1 2 3 List.L3 reverse-lookup:Int.== => ( 2 Some )  2 1 2 3 List.L3 reverse-lookup:Int.<= => ( 3 Some )
        3 id    List.L0 reverse-lookup:Int.== => (   None )  3 id    List.L0 reverse-lookup:Int.<= => (   None )
        3 1     List.L1 reverse-lookup:Int.== => (   None )  3 1     List.L1 reverse-lookup:Int.<= => (   None )
        3 1 2   List.L2 reverse-lookup:Int.== => (   None )  3 1 2   List.L2 reverse-lookup:Int.<= => (   None )
        3 1 2 3 List.L3 reverse-lookup:Int.== => ( 3 Some )  3 1 2 3 List.L3 reverse-lookup:Int.<= => ( 3 Some )
        4 id    List.L0 reverse-lookup:Int.== => (   None )  4 id    List.L0 reverse-lookup:Int.<= => (   None )
        4 1     List.L1 reverse-lookup:Int.== => (   None )  4 1     List.L1 reverse-lookup:Int.<= => (   None )
        4 1 2   List.L2 reverse-lookup:Int.== => (   None )  4 1 2   List.L2 reverse-lookup:Int.<= => (   None )
        4 1 2 3 List.L3 reverse-lookup:Int.== => (   None )  4 1 2 3 List.L3 reverse-lookup:Int.<= => (   None )

        0 1     List+.L1 reverse-lookup:Int.== => (   None )  0 1     List+.L1 reverse-lookup:Int.<= => ( 1 Some )
        0 1 2   List+.L2 reverse-lookup:Int.== => (   None )  0 1 2   List+.L2 reverse-lookup:Int.<= => ( 2 Some )
        0 1 2 3 List+.L3 reverse-lookup:Int.== => (   None )  0 1 2 3 List+.L3 reverse-lookup:Int.<= => ( 3 Some )
        1 1     List+.L1 reverse-lookup:Int.== => ( 1 Some )  1 1     List+.L1 reverse-lookup:Int.<= => ( 1 Some )
        1 1 2   List+.L2 reverse-lookup:Int.== => ( 1 Some )  1 1 2   List+.L2 reverse-lookup:Int.<= => ( 2 Some )
        1 1 2 3 List+.L3 reverse-lookup:Int.== => ( 1 Some )  1 1 2 3 List+.L3 reverse-lookup:Int.<= => ( 3 Some )
        2 1     List+.L1 reverse-lookup:Int.== => (   None )  2 1     List+.L1 reverse-lookup:Int.<= => (   None )
        2 1 2   List+.L2 reverse-lookup:Int.== => ( 2 Some )  2 1 2   List+.L2 reverse-lookup:Int.<= => ( 2 Some )
        2 1 2 3 List+.L3 reverse-lookup:Int.== => ( 2 Some )  2 1 2 3 List+.L3 reverse-lookup:Int.<= => ( 3 Some )
        3 1     List+.L1 reverse-lookup:Int.== => (   None )  3 1     List+.L1 reverse-lookup:Int.<= => (   None )
        3 1 2   List+.L2 reverse-lookup:Int.== => (   None )  3 1 2   List+.L2 reverse-lookup:Int.<= => (   None )
        3 1 2 3 List+.L3 reverse-lookup:Int.== => ( 3 Some )  3 1 2 3 List+.L3 reverse-lookup:Int.<= => ( 3 Some )
        4 1     List+.L1 reverse-lookup:Int.== => (   None )  4 1     List+.L1 reverse-lookup:Int.<= => (   None )
        4 1 2   List+.L2 reverse-lookup:Int.== => (   None )  4 1 2   List+.L2 reverse-lookup:Int.<= => (   None )
        4 1 2 3 List+.L3 reverse-lookup:Int.== => (   None )  4 1 2 3 List+.L3 reverse-lookup:Int.<= => (   None )
    )

    "member" test (
        0 id    List.L0 member:Int.== => ( False )  0 id    List.L0 member:Int.<= => ( False )
        0 1     List.L1 member:Int.== => ( False )  0 1     List.L1 member:Int.<= => ( True  )
        0 1 2   List.L2 member:Int.== => ( False )  0 1 2   List.L2 member:Int.<= => ( True  )
        0 1 2 3 List.L3 member:Int.== => ( False )  0 1 2 3 List.L3 member:Int.<= => ( True  )
        1 id    List.L0 member:Int.== => ( False )  1 id    List.L0 member:Int.<= => ( False )
        1 1     List.L1 member:Int.== => ( True  )  1 1     List.L1 member:Int.<= => ( True  )
        1 1 2   List.L2 member:Int.== => ( True  )  1 1 2   List.L2 member:Int.<= => ( True  )
        1 1 2 3 List.L3 member:Int.== => ( True  )  1 1 2 3 List.L3 member:Int.<= => ( True  )
        2 id    List.L0 member:Int.== => ( False )  2 id    List.L0 member:Int.<= => ( False )
        2 1     List.L1 member:Int.== => ( False )  2 1     List.L1 member:Int.<= => ( False )
        2 1 2   List.L2 member:Int.== => ( True  )  2 1 2   List.L2 member:Int.<= => ( True  )
        2 1 2 3 List.L3 member:Int.== => ( True  )  2 1 2 3 List.L3 member:Int.<= => ( True  )
        3 id    List.L0 member:Int.== => ( False )  3 id    List.L0 member:Int.<= => ( False )
        3 1     List.L1 member:Int.== => ( False )  3 1     List.L1 member:Int.<= => ( False )
        3 1 2   List.L2 member:Int.== => ( False )  3 1 2   List.L2 member:Int.<= => ( False )
        3 1 2 3 List.L3 member:Int.== => ( True  )  3 1 2 3 List.L3 member:Int.<= => ( True  )
        4 id    List.L0 member:Int.== => ( False )  4 id    List.L0 member:Int.<= => ( False )
        4 1     List.L1 member:Int.== => ( False )  4 1     List.L1 member:Int.<= => ( False )
        4 1 2   List.L2 member:Int.== => ( False )  4 1 2   List.L2 member:Int.<= => ( False )
        4 1 2 3 List.L3 member:Int.== => ( False )  4 1 2 3 List.L3 member:Int.<= => ( False )

        0 1     List+.L1 member:Int.== => ( False )  0 1     List+.L1 member:Int.<= => ( True  )
        0 1 2   List+.L2 member:Int.== => ( False )  0 1 2   List+.L2 member:Int.<= => ( True  )
        0 1 2 3 List+.L3 member:Int.== => ( False )  0 1 2 3 List+.L3 member:Int.<= => ( True  )
        1 1     List+.L1 member:Int.== => ( True  )  1 1     List+.L1 member:Int.<= => ( True  )
        1 1 2   List+.L2 member:Int.== => ( True  )  1 1 2   List+.L2 member:Int.<= => ( True  )
        1 1 2 3 List+.L3 member:Int.== => ( True  )  1 1 2 3 List+.L3 member:Int.<= => ( True  )
        2 1     List+.L1 member:Int.== => ( False )  2 1     List+.L1 member:Int.<= => ( False )
        2 1 2   List+.L2 member:Int.== => ( True  )  2 1 2   List+.L2 member:Int.<= => ( True  )
        2 1 2 3 List+.L3 member:Int.== => ( True  )  2 1 2 3 List+.L3 member:Int.<= => ( True  )
        3 1     List+.L1 member:Int.== => ( False )  3 1     List+.L1 member:Int.<= => ( False )
        3 1 2   List+.L2 member:Int.== => ( False )  3 1 2   List+.L2 member:Int.<= => ( False )
        3 1 2 3 List+.L3 member:Int.== => ( True  )  3 1 2 3 List+.L3 member:Int.<= => ( True  )
        4 1     List+.L1 member:Int.== => ( False )  4 1     List+.L1 member:Int.<= => ( False )
        4 1 2   List+.L2 member:Int.== => ( False )  4 1 2   List+.L2 member:Int.<= => ( False )
        4 1 2 3 List+.L3 member:Int.== => ( False )  4 1 2 3 List+.L3 member:Int.<= => ( False )
    )

    "difference" test (
        id      List.L0       List.L0 difference:Int.== => (     List.L0 )
        1       List.L1       List.L0 difference:== => ( 1       List.L1 )
        1 2     List.L2       List.L0 difference:== => ( 1 2     List.L2 )
        1 2 3   List.L3       List.L0 difference:== => ( 1 2 3   List.L3 )
        1 2 3 4 List.L4       List.L0 difference:== => ( 1 2 3 4 List.L4 )
        id      List.L0 1     List.L1 difference:== => (         List.L0 )
        1       List.L1 1     List.L1 difference:== => (         List.L0 )
        1 2     List.L2 1     List.L1 difference:== => (   2     List.L1 )
        1 2 3   List.L3 1     List.L1 difference:== => (   2 3   List.L2 )
        1 2 3 4 List.L4 1     List.L1 difference:== => (   2 3 4 List.L3 )
        id      List.L0   2   List.L1 difference:== => (         List.L0 )
        1       List.L1   2   List.L1 difference:== => ( 1       List.L1 )
        1 2     List.L2   2   List.L1 difference:== => ( 1       List.L1 )
        1 2 3   List.L3   2   List.L1 difference:== => ( 1   3   List.L2 )
        1 2 3 4 List.L4   2   List.L1 difference:== => ( 1   3 4 List.L3 )
        id      List.L0 1 2   List.L2 difference:== => (         List.L0 )
        1       List.L1 1 2   List.L2 difference:== => (         List.L0 )
        1 2     List.L2 1 2   List.L2 difference:== => (         List.L0 )
        1 2 3   List.L3 1 2   List.L2 difference:== => (     3   List.L1 )
        1 2 3 4 List.L4 1 2   List.L2 difference:== => (     3 4 List.L2 )
        id      List.L0 2 1   List.L2 difference:== => (         List.L0 )
        1       List.L1 2 1   List.L2 difference:== => (         List.L0 )
        1 2     List.L2 2 1   List.L2 difference:== => (         List.L0 )
        1 2 3   List.L3 2 1   List.L2 difference:== => (     3   List.L1 )
        1 2 3 4 List.L4 2 1   List.L2 difference:== => (     3 4 List.L2 )
        id      List.L0     3 List.L1 difference:== => (         List.L0 )
        1       List.L1     3 List.L1 difference:== => ( 1       List.L1 )
        1 2     List.L2     3 List.L1 difference:== => ( 1 2     List.L2 )
        1 2 3   List.L3     3 List.L1 difference:== => ( 1 2     List.L2 )
        1 2 3 4 List.L4     3 List.L1 difference:== => ( 1 2   4 List.L3 )
        id      List.L0 1   3 List.L2 difference:== => (         List.L0 )
        1       List.L1 1   3 List.L2 difference:== => (         List.L0 )
        1 2     List.L2 1   3 List.L2 difference:== => (   2     List.L1 )
        1 2 3   List.L3 1   3 List.L2 difference:== => (   2     List.L1 )
        1 2 3 4 List.L4 1   3 List.L2 difference:== => (   2   4 List.L2 )
        id      List.L0 3   1 List.L2 difference:== => (         List.L0 )
        1       List.L1 3   1 List.L2 difference:== => (         List.L0 )
        1 2     List.L2 3   1 List.L2 difference:== => (   2     List.L1 )
        1 2 3   List.L3 3   1 List.L2 difference:== => (   2     List.L1 )
        1 2 3 4 List.L4 3   1 List.L2 difference:== => (   2   4 List.L2 )
        id      List.L0 1 2 3 List.L3 difference:== => (         List.L0 )
        1       List.L1 1 2 3 List.L3 difference:== => (         List.L0 )
        1 2     List.L2 1 2 3 List.L3 difference:== => (         List.L0 )
        1 2 3   List.L3 1 2 3 List.L3 difference:== => (         List.L0 )
        1 2 3 4 List.L4 1 2 3 List.L3 difference:== => (       4 List.L1 )
    )

    "union" test (
        id      List.L0       List.L0 union:Int.== => (     List.L0 )
        1       List.L1       List.L0 union:== => ( 1       List.L1 )
        1 2     List.L2       List.L0 union:== => ( 1 2     List.L2 )
        1 2 3   List.L3       List.L0 union:== => ( 1 2 3   List.L3 )
        1 2 3 4 List.L4       List.L0 union:== => ( 1 2 3 4 List.L4 )
        id      List.L0 1     List.L1 union:== => ( 1       List.L1 )
        1       List.L1 1     List.L1 union:== => ( 1       List.L1 )
        1 2     List.L2 1     List.L1 union:== => ( 1 2     List.L2 )
        1 2 3   List.L3 1     List.L1 union:== => ( 1 2 3   List.L3 )
        1 2 3 4 List.L4 1     List.L1 union:== => ( 1 2 3 4 List.L4 )
        id      List.L0   2   List.L1 union:== => (   2     List.L1 )
        1       List.L1   2   List.L1 union:== => ( 1 2     List.L2 )
        1 2     List.L2   2   List.L1 union:== => ( 1 2     List.L2 )
        1 2 3   List.L3   2   List.L1 union:== => ( 1 2 3   List.L3 )
        1 2 3 4 List.L4   2   List.L1 union:== => ( 1 2 3 4 List.L4 )
        id      List.L0 1 2   List.L2 union:== => ( 1 2     List.L2 )
        1       List.L1 1 2   List.L2 union:== => ( 1 2     List.L2 )
        1 2     List.L2 1 2   List.L2 union:== => ( 1 2     List.L2 )
        1 2 3   List.L3 1 2   List.L2 union:== => ( 1 2 3   List.L3 )
        1 2 3 4 List.L4 1 2   List.L2 union:== => ( 1 2 3 4 List.L4 )
        id      List.L0 2 1   List.L2 union:== => ( 2 1     List.L2 )
        1       List.L1 2 1   List.L2 union:== => ( 1 2     List.L2 )
        1 2     List.L2 2 1   List.L2 union:== => ( 1 2     List.L2 )
        1 2 3   List.L3 2 1   List.L2 union:== => ( 1 2 3   List.L3 )
        1 2 3 4 List.L4 2 1   List.L2 union:== => ( 1 2 3 4 List.L4 )
        id      List.L0     3 List.L1 union:== => (     3   List.L1 )
        1       List.L1     3 List.L1 union:== => ( 1   3   List.L2 )
        1 2     List.L2     3 List.L1 union:== => ( 1 2 3   List.L3 )
        1 2 3   List.L3     3 List.L1 union:== => ( 1 2 3   List.L3 )
        1 2 3 4 List.L4     3 List.L1 union:== => ( 1 2 3 4 List.L4 )
        id      List.L0 1   3 List.L2 union:== => ( 1   3   List.L2 )
        1       List.L1 1   3 List.L2 union:== => ( 1   3   List.L2 )
        1 2     List.L2 1   3 List.L2 union:== => ( 1 2 3   List.L3 )
        1 2 3   List.L3 1   3 List.L2 union:== => ( 1 2 3   List.L3 )
        1 2 3 4 List.L4 1   3 List.L2 union:== => ( 1 2 3 4 List.L4 )
        id      List.L0 3   1 List.L2 union:== => ( 3   1   List.L2 )
        1       List.L1 3   1 List.L2 union:== => ( 1   3   List.L2 )
        1 2     List.L2 3   1 List.L2 union:== => ( 1 2 3   List.L3 )
        1 2 3   List.L3 3   1 List.L2 union:== => ( 1 2 3   List.L3 )
        1 2 3 4 List.L4 3   1 List.L2 union:== => ( 1 2 3 4 List.L4 )
        id      List.L0 1 2 3 List.L3 union:== => ( 1 2 3   List.L3 )
        1       List.L1 1 2 3 List.L3 union:== => ( 1 2 3   List.L3 )
        1 2     List.L2 1 2 3 List.L3 union:== => ( 1 2 3   List.L3 )
        1 2 3   List.L3 1 2 3 List.L3 union:== => ( 1 2 3   List.L3 )
        1 2 3 4 List.L4 1 2 3 List.L3 union:== => ( 1 2 3 4 List.L4 )
    )

    "unions" test (
        id       List.L0 unions:Int.== => ( List.L0 )
        List.L0       List.L1 unions:Int.== => ( List.L0 )
        List.L0 List.L0    List.L2 unions:Int.== => ( List.L0 )
        List.L0 List.L0 List.L0 List.L3 unions:Int.== => ( List.L0 )

        1 List.L1      List.L1 unions:== => ( 1 List.L1 )
        1 List.L1 1 List.L1 List.L2 unions:== => ( 1 List.L1 )
        1 List.L1 2 List.L1 List.L2 unions:== => ( 1 2 List.L2 )
        2 List.L1 1 List.L1 List.L2 unions:== => ( 2 1 List.L2 )

        1 2 List.L2 3 4 List.L2 5 6 List.L2 List.L3 unions:== => ( 1 2 3 4 5 6 List.L6 )
        1 2 List.L2 3 4 List.L2 2 4 List.L2 List.L3 unions:== => ( 1 2 3 4     List.L4 )
    )

    "map2" test (
        id    List.L0   List.L0 map2(Int.2* +) => (         List.L0 )
        1     List.L1   List.L0 map2(Int.2* +) => (         List.L0 )
        1 2   List.L2   List.L0 map2(Int.2* +) => (         List.L0 )
        1 2 3 List.L3   List.L0 map2(Int.2* +) => (         List.L0 )
        id    List.L0 4     List.L1 map2(2* +) => (         List.L0 )
        1     List.L1 4     List.L1 map2(2* +) => ( 9       List.L1 )
        1 2   List.L2 4     List.L1 map2(2* +) => ( 9       List.L1 )
        1 2 3 List.L3 4     List.L1 map2(2* +) => ( 9       List.L1 )
        id    List.L0 4 5   List.L2 map2(2* +) => (         List.L0 )
        1     List.L1 4 5   List.L2 map2(2* +) => ( 9       List.L1 )
        1 2   List.L2 4 5   List.L2 map2(2* +) => ( 9 12    List.L2 )
        1 2 3 List.L3 4 5   List.L2 map2(2* +) => ( 9 12    List.L2 )
        id    List.L0 4 5 6 List.L3 map2(2* +) => (         List.L0 )
        1     List.L1 4 5 6 List.L3 map2(2* +) => ( 9       List.L1 )
        1 2   List.L2 4 5 6 List.L3 map2(2* +) => ( 9 12    List.L2 )
        1 2 3 List.L3 4 5 6 List.L3 map2(2* +) => ( 9 12 15 List.L3 )

        1     List+.L1 4     List+.L1 map2(2* -) => ( -7       List+.L1 )
        1 2   List+.L2 4     List+.L1 map2(2* -) => ( -7       List+.L1 )
        1 2 3 List+.L3 4     List+.L1 map2(2* -) => ( -7       List+.L1 )
        1     List+.L1 4 5   List+.L2 map2(2* -) => ( -7       List+.L1 )
        1 2   List+.L2 4 5   List+.L2 map2(2* -) => ( -7 -8    List+.L2 )
        1 2 3 List+.L3 4 5   List+.L2 map2(2* -) => ( -7 -8    List+.L2 )
        1     List+.L1 4 5 6 List+.L3 map2(2* -) => ( -7       List+.L1 )
        1 2   List+.L2 4 5 6 List+.L3 map2(2* -) => ( -7 -8    List+.L2 )
        1 2 3 List+.L3 4 5 6 List+.L3 map2(2* -) => ( -7 -8 -9 List+.L3 )
    )

    "take-while" test (
        id        List.L0 take-while(2 <=) => (     List.L0 )
        1         List.L1 take-while(2 <=) => ( 1   List.L1 )
        1 2       List.L2 take-while(2 <=) => ( 1 2 List.L2 )
        1 2 3     List.L3 take-while(2 <=) => ( 1 2 List.L2 )
        1 2 3 2   List.L4 take-while(2 <=) => ( 1 2 List.L2 )
        1 2 3 2 1 List.L5 take-while(2 <=) => ( 1 2 List.L2 )

        1         List+.L1 take-while(2 <=) => ( 1   List.L1 )
        1 2       List+.L2 take-while(2 <=) => ( 1 2 List.L2 )
        1 2 3     List+.L3 take-while(2 <=) => ( 1 2 List.L2 )
        1 2 3 2   List+.L4 take-while(2 <=) => ( 1 2 List.L2 )
        1 2 3 2 1 List+.L5 take-while(2 <=) => ( 1 2 List.L2 )
    )

    "partition-either" test (
        id      List-L0-Int partition-either(Even/Odd) => (      List.L0) => (      List.L0)
        1           List.L1 partition-either(Even/Odd) => (0     List.L1) => (      List.L0)
        1 2         List.L2 partition-either(Even/Odd) => (0     List.L1) => (1     List.L1)
        1 2 3       List.L3 partition-either(Even/Odd) => (0 1   List.L2) => (1     List.L1)
        1 2 3 4     List.L4 partition-either(Even/Odd) => (0 1   List.L2) => (1 2   List.L2)
        1 2 3 4 5   List.L5 partition-either(Even/Odd) => (0 1 2 List.L3) => (1 2   List.L2)
        1 2 3 4 5 6 List.L6 partition-either(Even/Odd) => (0 1 2 List.L3) => (1 2 3 List.L3)

        1           List+.L1 partition-either(Even/Odd) => (0     List.L1) => (      List.L0)
        1 2         List+.L2 partition-either(Even/Odd) => (0     List.L1) => (1     List.L1)
        1 2 3       List+.L3 partition-either(Even/Odd) => (0 1   List.L2) => (1     List.L1)
        1 2 3 4     List+.L4 partition-either(Even/Odd) => (0 1   List.L2) => (1 2   List.L2)
        1 2 3 4 5   List+.L5 partition-either(Even/Odd) => (0 1 2 List.L3) => (1 2   List.L2)
        1 2 3 4 5 6 List+.L6 partition-either(Even/Odd) => (0 1 2 List.L3) => (1 2 3 List.L3)
    )

    "partition" test (
        id      List-L0-Int partition(even?) => (      List.L0) => (      List.L0)
        1           List.L1 partition(even?) => (      List.L0) => (1     List.L1)
        1 2         List.L2 partition(even?) => (2     List.L1) => (1     List.L1)
        1 2 3       List.L3 partition(even?) => (2     List.L1) => (1 3   List.L2)
        1 2 3 4     List.L4 partition(even?) => (2 4   List.L2) => (1 3   List.L2)
        1 2 3 4 5   List.L5 partition(even?) => (2 4   List.L2) => (1 3 5 List.L3)
        1 2 3 4 5 6 List.L6 partition(even?) => (2 4 6 List.L3) => (1 3 5 List.L3)

        1           List+.L1 partition(even?) => (      List.L0) => (1     List.L1)
        1 2         List+.L2 partition(even?) => (2     List.L1) => (1     List.L1)
        1 2 3       List+.L3 partition(even?) => (2     List.L1) => (1 3   List.L2)
        1 2 3 4     List+.L4 partition(even?) => (2 4   List.L2) => (1 3   List.L2)
        1 2 3 4 5   List+.L5 partition(even?) => (2 4   List.L2) => (1 3 5 List.L3)
        1 2 3 4 5 6 List+.L6 partition(even?) => (2 4 6 List.L3) => (1 3 5 List.L3)
    )

    "show;" test (
        Str(id    List.L0 show;:Int.show;) => ( "LIST( )" )
        Str(1     List.L1 show;:show;) => ( "LIST( 1 ; )" )
        Str(1 2   List.L2 show;:show;) => ( "LIST( 1 ; 2 ; )" )
        Str(1 2 3 List.L3 show;:show;) => ( "LIST( 1 ; 2 ; 3 ; )")

        Str(1     List+.L1 show;:show;) => ( "LIST+( 1 ;+ )" )
        Str(1 2   List+.L2 show;:show;) => ( "LIST+( 1 ; 2 ;+ )" )
        Str(1 2 3 List+.L3 show;:show;) => ( "LIST+( 1 ; 2 ; 3 ;+ )")
    )

    +Tests.end!
}

def List-L0-Int [ List(Int) ] { List.L0 }
def List-L0-Str [ List(Str) ] { List.L0 }
def None-Int [ Maybe(Int) ] { None }

def Even/Odd [ Int -- Either(Int,Int) ] { 2 /% 0= if(Left, Right) }
def /Even [ Int -- Maybe(Int) ] { Even/Odd left?  }
def /Odd  [ Int -- Maybe(Int) ] { Even/Odd right? }
def even? [ Int -- Bool ] { /Even some? }

# mirth-test # pout # 55 tests passed.
