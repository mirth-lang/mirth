module(test.external-labelled-output)

import(std.prelude)
import(std.world)
import(std.ctypes)
import(std.str)

data(+Resource1, +Resource1 -> CInt)
data(+Resource2, +Resource2 -> CInt)

external(
    foo [
        +foo:+Resource1
        --
        +foo:+Resource1 +Resource2  # labelled outputs in "external" are considered pass-through arguments
    ],
    "int foo(int x) { return x + 1; }"
)

external(
    bar [
        +bar:+Resource2
        --
        +bar:+Resource2
    ]

    "#include <stdio.h>"
    "void bar(int y) { printf(\"%d (in bar)\\n\", y); fflush(stdout); }"
)

def(main, +World -- +World,
    "foo" print
    10 CInt +Resource1 >+foo
    foo   /+Resource2 >Int print("+Resource2: " ; show;)
    +foo> /+Resource1 >Int print("+Resource1: " ; show;)

    "bar" print
    30 CInt +Resource2 >+bar
    bar
    +bar> /+Resource2 >Int print("+Resource2: " ; show;)
)

# mirth-test # pout # foo
# mirth-test # pout # +Resource2: 11
# mirth-test # pout # +Resource1: 10
# mirth-test # pout # bar
# mirth-test # pout # 30 (in bar)
# mirth-test # pout # +Resource2: 30
