module std.ctypes

import std.prelude
import std.str

inline patch CChar {
    def >Int [ CChar -- Int ] { >I64 >Int }
    def >I64 [ CChar -- I64 ] { CChar -> id }
    def >I32 [ CChar -- I32 ] { >I64 >I32-unsafe }
    def >I16 [ CChar -- I16 ] { >I64 >I16-unsafe }
    def >I8  [ CChar -- I8  ] { >I64 >I8-unsafe }
    def >U64 [ CChar -- U64 ] { >Int >U64-wrap }
    def >U32 [ CChar -- U32 ] { >Int >U32-wrap }
    def >U16 [ CChar -- U16 ] { >Int >U16-wrap }
    def >U8  [ CChar -- U8  ] { >Int >U8-wrap  }

    def Int.>CChar [ Int -- CChar ] { >I64-clamp CChar }
    def I64.>CChar [ I64 -- CChar ] { CChar }
    def I32.>CChar [ I32 -- CChar ] { >I64 CChar }
    def I16.>CChar [ I16 -- CChar ] { >I64 CChar }
    def  I8.>CChar [ I8  -- CChar ] { >I64 CChar }
    def U64.>CChar [ U64 -- CChar ] { >Int >CChar }
    def U32.>CChar [ U32 -- CChar ] { >U64 >CChar }
    def U16.>CChar [ U16 -- CChar ] { >U64 >CChar }
    def  U8.>CChar [ U8  -- CChar ] { >U64 >CChar }

    def repr; [ CChar +Str -- +Str ] { CChar -> repr; " CChar"; }
}

inline patch CIChar {
    def >Int [ CIChar -- Int ] { >I64 >Int }
    def >I64 [ CIChar -- I64 ] { CIChar -> id }
    def >I32 [ CIChar -- I32 ] { >I64 >I32-unsafe }
    def >I16 [ CIChar -- I16 ] { >I64 >I16-unsafe }
    def >I8  [ CIChar -- I8  ] { >I64 >I8-unsafe  }

    def Int.>CIChar [ Int -- CIChar ] { >I64-unsafe >CIChar }
    def I64.>CIChar [ I64 -- CIChar ] { CIChar }
    def I32.>CIChar [ I32 -- CIChar ] { >I64 >CIChar }
    def I16.>CIChar [ I16 -- CIChar ] { >I64 >CIChar }
    def  I8.>CIChar [ I8  -- CIChar ] { >I64 >CIChar }

    def repr; [ CIChar +Str -- +Str ] { CIChar -> repr; " CIChar"; }
}

inline patch CUChar {
    def >Int [ CUChar -- Int ] { >U64 >Int }
    def >Nat [ CUChar -- Nat ] { >U64 >Nat }
    def >U64 [ CUChar -- U64 ] { CUChar -> id }
    def >U32 [ CUChar -- U32 ] { >U64 >U32-wrap }
    def >U16 [ CUChar -- U16 ] { >U64 >U16-wrap }
    def >U8  [ CUChar -- U8  ] { >U64 >U8-wrap  }

    def Int.>CUChar [ Int -- CUChar ] { >U64-wrap CUChar }
    def Nat.>CUChar [ Nat -- CUChar ] { >U64-wrap CUChar }
    def U64.>CUChar [ U64 -- CUChar ] { CUChar }
    def U32.>CUChar [ U32 -- CUChar ] { >U64 CUChar }
    def U16.>CUChar [ U16 -- CUChar ] { >U64 CUChar }
    def  U8.>CUChar [  U8 -- CUChar ] { >U64 CUChar }

    def repr; [ CUChar +Str -- +Str ] { CUChar -> repr; " CUChar"; }
}

inline patch CShort {
    def >Int [ CShort -- Int ] { >I64 >Int }
    def >I64 [ CShort -- I64 ] { CShort -> id }
    def >I32 [ CShort -- I32 ] { >I64 >I32-unsafe }
    def >I16 [ CShort -- I16 ] { >I64 >I16-unsafe }

    def Int.>CShort [ Int -- CShort ] { >I64-clamp CShort }
    def I64.>CShort [ I64 -- CShort ] { CShort }
    def I32.>CShort [ I32 -- CShort ] { >I64 CShort }
    def I16.>CShort [ I16 -- CShort ] { >I64 CShort }

    def repr; [ CShort +Str -- +Str ] { CShort -> repr; " CShort"; }
}

inline patch CUShort {
    def >Int [ CUShort -- Int ] { >Nat >Int }
    def >Nat [ CUShort -- Nat ] { >U64 >Nat }
    def >U64 [ CUShort -- U64 ] { CUShort -> id }
    def >U32 [ CUShort -- U32 ] { >U64 >U32-wrap }
    def >U16 [ CUShort -- U16 ] { >U64 >U16-wrap }

    def Int.>CUShort [ Int -- CUShort ] { >U64-wrap CUShort }
    def Nat.>CUShort [ Nat -- CUShort ] { >U64-wrap CUShort }
    def U64.>CUShort [ U64 -- CUShort ] { CUShort }
    def U32.>CUShort [ U32 -- CUShort ] { >U64 CUShort }
    def U16.>CUShort [ U16 -- CUShort ] { >U64 CUShort }

    def repr; [ CUShort +Str -- +Str ] { CUShort -> repr; " CUShort"; }
}

inline patch CInt {
    def >Int [ CInt -- Int ] { >I64 >Int }
    def >I64 [ CInt -- I64 ] { CInt -> id }
    def >I32 [ CInt -- I32 ] { >I64 >I32-unsafe }

    def Int.>CInt [ Int -- CInt ] { >I64-unsafe CInt }
    def I64.>CInt [ I64 -- CInt ] { CInt }
    def I32.>CInt [ I32 -- CInt ] { >I64 CInt }

    def Nat.>CInt [ Nat -- CInt ] { >Int >CInt }

    def 0=  [ CInt -- Bool ] { CInt -> 0=  }
    def 0<  [ CInt -- Bool ] { CInt -> 0<  }
    def 0<= [ CInt -- Bool ] { CInt -> 0<= }
    def 0>  [ CInt -- Bool ] { CInt -> 0>  }
    def 0>= [ CInt -- Bool ] { CInt -> 0>= }
    def 0<> [ CInt -- Bool ] { CInt -> 0<> }

    def repr; [ CInt +Str -- +Str ] { CInt -> repr; " CInt"; }
}

inline patch CUInt {
    def >Int [ CUInt -- Int ] { >U64 >Int }
    def >Nat [ CUInt -- Nat ] { >U64 >Nat }
    def >U64 [ CUInt -- U64 ] { CUInt -> id }
    def >U32 [ CUInt -- U32 ] { >U64 >U32-wrap }

    def Int.>CUInt [ Int -- CUInt ] { >U64-wrap CUInt }
    def Nat.>CUInt [ Nat -- CUInt ] { >U64-wrap CUInt }
    def U64.>CUInt [ U64 -- CUInt ] { CUInt }
    def U32.>CUInt [ U32 -- CUInt ] { >U64 CUInt }

    def repr; [ CUInt +Str -- +Str ] { CUInt -> repr; " CUInt"; }
}

inline patch CLong {
    def >Int [ CLong -- Int ] { >I64 >Int }
    def >I64 [ CLong -- I64 ] { CLong -> id }

    def Int.>CLong [ Int -- CLong ] { >I64-unsafe CLong }
    def I64.>CLong [ I64 -- CLong ] { CLong }

    def repr; [ CLong +Str -- +Str ] { CLong -> repr; " CLong"; }
}

inline patch CULong {
    def >Int [ CULong -- Int ] { >U64 >Int }
    def >Nat [ CULong -- Nat ] { >U64 >Nat }
    def >U64 [ CULong -- U64 ] { CULong -> id }

    def Int.>CULong [ Int -- CULong ] { >U64-wrap CULong }
    def Nat.>CULong [ Nat -- CULong ] { >U64-wrap CULong }
    def U64.>CULong [ U64 -- CULong ] { CULong }

    def repr; [ CULong +Str -- +Str ] { CULong -> repr; " CULong"; }
}

inline patch CLongLong {
    def >Int [ CLongLong -- Int ] { >I64 >Int }
    def >I64 [ CLongLong -- I64 ] { CLongLong -> id }

    def Int.>CLongLong [ Int -- CLongLong ] { >I64-unsafe CLongLong }
    def I64.>CLongLong [ I64 -- CLongLong ] { CLongLong }

    def repr; [ CLongLong +Str -- +Str ] { CLongLong -> repr; " CLongLong"; }
}

inline patch CULongLong {
    def >Int [ CULongLong -- Int ] { >U64 >Int }
    def >Nat [ CULongLong -- Nat ] { >U64 >Nat }
    def >U64 [ CULongLong -- U64 ] { CULongLong -> id }

    def Int.>CULongLong [ Int -- CULongLong ] { >U64-wrap CULongLong }
    def Nat.>CULongLong [ Nat -- CULongLong ] { >U64-wrap CULongLong }
    def U64.>CULongLong [ U64 -- CULongLong ] { CULongLong }

    def repr; [ CULongLong +Str -- +Str ] { CULongLong -> repr; " CULongLong"; }
}

inline patch CISize {
    def >Int [ CISize -- Int ] { >I64 >Int }
    def >I64 [ CISize -- I64 ] { CISize -> id }
    def >ISize [ CISize -- ISize ] { >Int >ISize }

    def Int.>CISize [ Int -- CISize ] { >I64-unsafe CISize }
    def I64.>CISize [ I64 -- CISize ] { CISize }
    def ISize.>CISize [ ISize -- CISize ] { >Int >I64-unsafe CISize }

    def repr; [ CISize +Str -- +Str ] { CISize -> repr; " CISize"; }
}

inline patch CUSize {
    def >Int [ CUSize -- Int ] { >U64 >Int }
    def >Nat [ CUSize -- Nat ] { >U64 >Nat }
    def >U64 [ CUSize -- U64 ] { CUSize -> id }
    def >USize [ CUSize -- USize ] { >Nat >USize }

    def Int.>CUSize [ Int -- CUSize ] { >U64-wrap CUSize }
    def Nat.>CUSize [ Nat -- CUSize ] { >U64-wrap CUSize }
    def U64.>CUSize [ U64 -- CUSize ] { CUSize }
    def USize.>CUSize [ USize -- CUSize ] { >Nat >U64-wrap CUSize }

    def repr; [ CUSize +Str -- +Str ] { CUSize -> repr; " CUSize"; }
}

inline patch CIntPtr {
    def >Int [ CIntPtr -- Int ] { >I64 >Int }
    def >I64 [ CIntPtr -- I64 ] { CIntPtr -> id }

    def Int.>CIntPtr [ Int -- CIntPtr ] { >I64-unsafe CIntPtr }
    def I64.>CIntPtr [ I64 -- CIntPtr ] { CIntPtr }

    def repr; [ CIntPtr +Str -- +Str ] { CIntPtr -> repr; " CIntPtr"; }
}

inline patch CUIntPtr {
    def >Int [ CUIntPtr -- Int ] { >U64 >Int }
    def >Nat [ CUIntPtr -- Nat ] { >U64 >Nat }
    def >U64 [ CUIntPtr -- U64 ] { CUIntPtr -> id }

    def Int.>CUIntPtr [ Int -- CUIntPtr ] { >U64-wrap CUIntPtr }
    def Nat.>CUIntPtr [ Nat -- CUIntPtr ] { >U64-wrap CUIntPtr }
    def U64.>CUIntPtr [ U64 -- CUIntPtr ] { CUIntPtr }

    def repr; [ CUIntPtr +Str -- +Str ] { CUIntPtr -> repr; " CUIntPtr"; }
}

inline patch CPtr {
    def /CPtr [ CPtr(t) -- Ptr ] { CPtr -> id }
    def >Ptr [ CPtr(t) -- Ptr ] { CPtr -> id }
    def cast [ CPtr(a) -- CPtr(b) ] { CPtr -> CPtr }
    def Ptr.>CPtr [ Ptr -- CPtr(t) ] { CPtr }

    def repr; [ CPtr(t) +Str -- +Str ] { drop "<Ptr> CPtr"; }
}

inline patch CConst {
    def /CConst [ CConst(a) -- a ] { CConst -> id }

    def repr; (f {repr;}) [ (a +Str -- +Str) CConst(a) +Str -- +Str ] { CConst -> f " CConst"; }
}

inline patch CRestrict {
    def /CRestrict [ CRestrict(a) -- a ] { CRestrict -> id }

    def repr; (f {repr;}) [ (a +Str -- +Str) CRestrict(a) +Str -- +Str ] { CRestrict -> f " CRestrict"; }
}

inline patch CVolatile {
    def /CVolatile [ CVolatile(a) -- a ] { CVolatile -> id }

    def repr; (f {repr;}) [ (a +Str -- +Str) CVolatile(a) +Str -- +Str ] { CVolatile -> f " CVolatile"; }
}

inline struct CStr {
    CPtr(CConst(CChar))
    --
    def >CPtr [ CStr -- CPtr(CConst(CChar)) ] { /CStr }
    def >Ptr [ CStr -- Ptr ] { /CStr /CPtr }
    def >Str [ CStr +Unsafe -- Str +Unsafe ] { Str.CloneCStr }

    def Ptr.>CStr [ Ptr -- CStr ] { CPtr CStr }
    def CPtr.>CStr [ CPtr(CConst(CChar)) -- CStr ] { CStr }

    def repr; [ CStr +Str -- +Str ] { CStr -> repr; " CStr"; }

    external num-bytes -> strlen [ CStr +Unsafe -- CUSize +Unsafe ]
}
