module std.ctypes

import std.prelude

inline(

    def(CChar.>Int, CChar -- Int, CChar -> >Int)
    def(CIChar.>Int, CIChar -- Int, CIChar -> >Int)
    def(CShort.>Int, CShort -- Int, CShort -> >Int)
    def(CInt.>Int, CInt -- Int, CInt -> >Int)
    def(CLong.>Int, CLong -- Int, CLong -> >Int)
    def(CLongLong.>Int, CLongLong -- Int, CLongLong -> >Int)
    def(CISize.>Int, CISize -- Int, CISize -> >Int)
    def(CIntPtr.>Int, CIntPtr -- Int, CIntPtr -> >Int)

    def(CUChar.>Int, CUChar -- Int, CUChar -> >Int)
    def(CUShort.>Int, CUShort -- Int, CUShort -> >Int)
    def(CUInt.>Int, CUInt -- Int, CUInt -> >Int)
    def(CULong.>Int, CULong -- Int, CULong -> >Int)
    def(CULongLong.>Int, CULongLong -- Int, CULongLong -> >Int)
    def(CUSize.>Int, CUSize -- Int, CUSize -> >Int)
    def(CUIntPtr.>Int, CUIntPtr -- Int, CUIntPtr -> >Int)

    def(CUChar.>Nat, CUChar -- Nat, >Int Nat.Unsafe)
    def(CUShort.>Nat, CUShort -- Nat, >Int Nat.Unsafe)
    def(CUInt.>Nat, CUInt -- Nat, >Int Nat.Unsafe)
    def(CULong.>Nat, CULong -- Nat, >Int Nat.Unsafe)
    def(CULongLong.>Nat, CULongLong -- Nat, >Int Nat.Unsafe)
    def(CUSize.>Nat, CUSize -- Nat, >Int Nat.Unsafe)
    def(CUIntPtr.>Nat, CUIntPtr -- Nat, >Int Nat.Unsafe)

    max-mirth-revision 2025_01_26_004 {
        def Int.>IntLike  { }
        def Int.>UIntLike { }
    }
    min-mirth-revision 2025_01_27_001 {
        def Int.>IntLike  { >I64-unsafe }
        def Int.>UIntLike { >U64-wrap   }
    }

    def Int.>CChar     { >IntLike CChar     }
    def Int.>CIChar    { >IntLike CIChar    }
    def Int.>CShort    { >IntLike CShort    }
    def Int.>CInt      { >IntLike CInt      }
    def Int.>CLong     { >IntLike CLong     }
    def Int.>CLongLong { >IntLike CLongLong }
    def Int.>CISize    { >IntLike CISize    }
    def Int.>CIntPtr   { >IntLike CIntPtr   }

    def Int.>CUChar     { >UIntLike CUChar     }
    def Int.>CUShort    { >UIntLike CUShort    }
    def Int.>CUInt      { >UIntLike CUInt      }
    def Int.>CULong     { >UIntLike CULong     }
    def Int.>CULongLong { >UIntLike CULongLong }
    def Int.>CUSize     { >UIntLike CUSize     }
    def Int.>CUIntPtr   { >UIntLike CUIntPtr   }

    def(CUSize.>USize, CUSize -- USize, >Nat >USize)

    def(CPtr./CPtr, CPtr(t) -- Ptr, CPtr -> id)
    def(CConst./CConst, CConst(t) -- t, CConst -> id)
    def(CRestrict./CRestrict, CRestrict(t) -- t, CRestrict -> id)
    def(CVolatile./CVolatile, CVolatile(t) -- t, CVolatile -> id)

    def(CPtr.cast, CPtr(a) -- CPtr(b), CPtr -> CPtr)
    def(CPtr.>Ptr, CPtr(a) -- Ptr, CPtr -> id)
    def(Ptr.>CPtr, Ptr -- CPtr(a), CPtr)

    data(CStr, CStr -> CPtr(CConst(CChar)))

    def(Ptr.>CStr, Ptr -- CStr, CPtr CStr)
    def(CPtr.>CStr, CPtr(CConst(CChar)) -- CStr, CStr)
    def(CStr.>CPtr, CStr -- CPtr(CConst(CChar)), CStr -> id)
    def(CStr.>Ptr, CStr -- Ptr, >CPtr /CPtr)
    def(CStr.>Str, CStr +Unsafe -- Str +Unsafe, Str.CloneCStr)
    external(CStr.num-bytes -> strlen [ +Unsafe CStr -- +Unsafe CUSize ])
)
