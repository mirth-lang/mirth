module(std.stack)

import(std.prelude)
import(std.maybe)

data(Stack(t),
    STACK_NIL,
    STACK_CONS -> t Stack(t))
def(Stack.push!, t Mut(Stack(t)) --,
    modify(STACK_CONS))
def(Stack.pop!, Mut(Stack(t)) -- Maybe(t),
    modify(uncons))
def(Stack.head, Stack(t) -- Maybe(t),
    STACK_NIL -> NONE,
    STACK_CONS -> drop SOME)
def(Stack.cons, t Stack(t) -- Stack(t),
    STACK_CONS)
def(Stack.uncons, Stack(t) -- Maybe(t) Stack(t),
    STACK_NIL -> NONE STACK_NIL,
    STACK_CONS -> dip(SOME))
def(Stack.reset!, Mut(Stack(t)) --,
    STACK_NIL swap !)
def(Stack.is-empty, Stack(t) -- Bool,
    STACK_NIL -> T,
    STACK_CONS -> drop2 F)
