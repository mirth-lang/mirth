module std.world

import std.prelude
import std.str
import std.path
import std.buffer
import std.ctypes
import std.file
import std.input
import std.output

def +World.print- [ Str +World -- +World ] {
    stdout-file with-data:unsafe:write-bytes! drop2 close-file!
}
def +World.trace- [ Str +World -- +World ] {
    stderr-file with-data:unsafe:write-bytes! drop2 close-file!
}

def +World.print [ Str +World -- +World ] { "\n" cat print- }
def +World.trace [ Str +World -- +World ] { "\n" cat trace- }

def +World.print(f) [ (*a +World +Str -- *b +World +Str) *a +World -- *b +World ] {
    Str(f "\n";) print-
}
def +World.trace(f) [ (*a +World +Str -- *b +World +Str) *a +World -- *b +World ] {
    Str(f "\n";) trace-
}

def +World.stdin(f) [ (*a +World +Input -- *b +World +Input) *a +World -- *b +World ] {
    stdin-file input(f)
    expect!(is-stdin?, "expected stdin leaving +World.stdin(f) but got different file")
    close-file!
}

def +World.stdout(f) [ (*a +World +Output -- *b +World +Output) *a +World -- *b +World ] {
    stdout-file output(f)
    expect!(is-stdout?, "expected stdout leaving +World.stdout(f) but got different file")
    close-file!
}

def +World.stderr(f) [ (*a +World +Output -- *b +World +Output) *a +World -- *b +World ] {
    stderr-file output(f)
    expect!(is-stderr?, "expected stderr leaving +World.stderr(f) but got different file")
    close-file!
}

########
# STAT #
########

external(posix-stat -> stat [+Unsafe CStr Ptr -- +Unsafe CInt])
def +World.is-directory? [ +World Path -- +World Bool ] {
    256u >USize +Buffer.new
    >Str with-cstr(
        base unsafe(posix-stat) >Int
        0= if(base rdip:unsafe(st_mode@) S_ISDIR, False)
    ) rdrop
}

def S_IFMT   [ U16 ] { 0xF000u16 }
def S_IFDIR  [ U16 ] { 0x4000u16 }
def S_IFBLK  [ U16 ] { 0x6000u16 }
def S_IFREG  [ U16 ] { 0x8000u16 }
def S_IFLNK  [ U16 ] { 0xA000u16 }
def S_IFSOCK [ U16 ] { 0xC000u16 }

def S_ISDIR [ U16 -- Bool ] { S_IFMT and S_IFDIR == }

def st_mode@ [ Ptr +World +Unsafe -- U16 +World +Unsafe ] {
    rdip:running-os match(
        Linux -> 24u, # .. this is all terrible and brittle
        Windows -> 6u,
        Mac -> rdip:running-arch Arch.ARM64 == if(4u, 8u),
        _ -> drop 8u
    ) >UOffset swap uoffset @U16
}
