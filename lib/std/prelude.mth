module(std.prelude)

import(std.maybe)
import(std.str)

############################################
# not re-exported because of optimisations #
############################################
# def(dip, (*a -- *b) *a c -- *b c, prim.core.dip)
# def(if, (*a -- *b, *a -- *b) *a Bool -- *b, prim.core.if)
# def(while, (*a -- *a Bool, *a -- *a) *a -- *a, prim.core.while)
############################################

##################################################
# not re-exported because they're special syntax #
##################################################
# match
# lambda
##################################################

# Re-exported primitives.
alias(id, prim-id)
alias(??, prim-debug)
alias(swap, prim-swap)
alias(dup, prim-dup)
alias(drop, prim-drop)
alias(run, prim-run)

alias(rswap, prim-rswap)
alias(rdip(f), prim-rdip)

alias(Int.+, prim-int-add)
alias(Int.-, prim-int-sub)
alias(Int.*, prim-int-mul)
alias(Int./, prim-int-div)
alias(Int.%, prim-int-mod)
alias(Int.&, prim-int-and)
alias(Int.|, prim-int-or)
alias(Int.^, prim-int-xor)
alias(Int.<<, prim-int-shl)
alias(Int.>>, prim-int-shr)
inline:def(Int./%, Int Int -- Int Int, dup2 % dip(/))

inline(
    alias(Bool.if(f,g), prim-if)
    def(Bool.&&, Bool Bool -- Bool, if(id, drop False))
    def(Bool.||, Bool Bool -- Bool, if(drop True, id))
    def(Bool.not, Bool -- Bool, if(False, True))
    def(Bool.or(p),  (*a -- *a Bool) *a Bool -- *a Bool, if(True, p))
    def(Bool.or(p,d), (*a -- *b Bool, *a -- *b) *a Bool -- *b Bool, if(d True, p))
    def(Bool.and(p), (*a -- *a Bool) *a Bool -- *a Bool, if(p, False))
    def(Bool.and(p,d), (*a -- *b Bool, *a -- *b) *a Bool -- *b Bool, if(p, d False))
    def(Bool.==, Bool Bool -- Bool, if(id, not))
    def(Bool.show, Bool -- Str, if("True", "False"))
    def(Bool.show;, Bool +Str -- +Str, show ;)
    def(Bool.then(f), (*a -- *a) *a Bool -- *a, if(f, id))
    def(Bool.else(f), (*a -- *a) *a Bool -- *a, if(id, f))
)

data(OS,
    OS_UNKNOWN,
    OS_WINDOWS,
    OS_LINUX,
    OS_MACOS)

def(Int.>OS, Int -- OS, dup 1 3 in-range if(OS.from-tag-unsafe, drop OS_UNKNOWN))
inline(
    def(OS.>Int, OS -- Int, tag)
    def(OS.==, OS OS -- Bool, both(>Int) ==)
    def(RUNNING_OS, OS, prim-sys-os >OS)
)

data(Arch,
    ARCH_UNKNOWN,
    ARCH_I386,
    ARCH_AMD64,
    ARCH_ARM64)

def(Int.>Arch, Int -- Arch, dup 1 3 in-range if(Arch.from-tag-unsafe, drop ARCH_UNKNOWN))
inline(
    def(Arch.>Int, Arch -- Int, tag)
    def(Arch.==, Arch Arch -- Bool, both(>Int) ==)
    def(RUNNING_ARCH, Arch, prim-sys-arch >Arch)
)

alias(argc, prim-sys-argc)
alias(argv, prim-sys-argv)

alias(posix-read!, prim-posix-read)
alias(posix-write!, prim-posix-write)
def(posix-open!, Str Int Int -- Int,
    rotl dup dip(
        prim-str-base rotr
        prim-posix-open
    ) drop)
alias(posix-close!, prim-posix-close)
alias(posix-exit!, prim-posix-exit)

inline(
    def(rotr, a b c -- c a b, swap dip(swap))
    def(rotl, a b c -- b c a, dip(swap) swap)

    def(rrotr, +a +b +c -- +c +a +b, rswap rdip(rswap))
    def(rrotl, +a +b +c -- +b +c +a, rdip(rswap) rswap)

    def(over, a b -- a b a, dip(dup) swap)
    def(over2, a b1 b2 -- a b1 b2 a, dip(over) swap)
    def(over3, a b1 b2 b3 -- a b1 b2 b3 a, dip(over2) swap)
    def(over4, a b1 b2 b3 b4 -- a b1 b2 b3 b4 a, dip(over3) swap)

    def(tuck, a b -- b a b, dup dip(swap))

    def(nip, a b -- b, dip(drop))

    def(dup2, a b   -- a b    a b  , over over)
    def(dup3, a b c -- a b c  a b c, dup dip(dip(dup2) rotr))

    def(dip?(f), (*a -- *a Bool) *a c -- *a c Bool, dip(f) swap)
    def(dip'(f), (*a x -- *b y) *a c x -- *b c y, swap dip(f) swap)

    def(dip2(f), (*a -- *b) *a c1 c2 -- *b c1 c2,
        dip(dip(f)))
    def(dip3(f), (*a -- *b) *a c1 c2 c3 -- *b c1 c2 c3,
        dip(dip(dip(f))))

    def(rdip'(f), (*a +r1 -- *b +r2) *a +c +r1 -- *b +c +r2,
        rswap rdip(f) rswap)

    def(rdip2(f), (*a -- *b) *a +c1 +c2 -- *b +c1 +c2,
        rdip(rdip(f)))
    def(rdip3(f), (*a -- *b) *a +c1 +c2 +c3 -- *b +c1 +c2 +c3,
        rdip(rdip(rdip(f))))

    def(sip(f), (*a x -- *b) *a x -- *b x,
        dup dip(f))
    def(sip2(f), (*a x1 x2 -- *b) *a x1 x2 -- *b x1 x2,
        dup2 dip(dip(f)))

    def(both(f), (a -- b) a a -- b b, dip(f) f)

    def(on2(f,g),
            (*a x1 -- *b x2,
             *b y1 -- *c y2)
            *a x1 y1 -- *c x2 y2,
        dip(f) dip'(g))
    def(on3(f,g,h),
            (*a x1 -- *b x2,
             *b y1 -- *c y2,
             *c z1 -- *d z2)
            *a x1 y1 z1 -- *d x2 y2 z2,
        dip:on2(f,g) dip':dip'(h))
    def(on4(f,g,h,i),
            (*a x1 -- *b x2,
             *b y1 -- *c y2,
             *c z1 -- *d z2,
             *d w1 -- *e w2)
            *a x1 y1 z1 w1 -- *e x2 y2 z2 w2,
        dip:on3(f,g,h) dip':dip':dip'(i))

    def(on2(f), (*a x -- *a y) *a x x -- *a y y, on2(f,f))
    def(on3(f), (*a x -- *a y) *a x x x -- *a y y y, on3(f,f,f))
    def(on4(f), (*a x -- *a y) *a x x x x -- *a y y y y, on4(f,f,f,f))

    def(at2(f,g),
            (*a x1 -- *b,
             *b y1 -- *c)
            *a x1 y1 -- *c,
        dip(f) g)
    def(at3(f,g,h),
            (*a x1 -- *b,
             *b y1 -- *c,
             *c z1 -- *d)
            *a x1 y1 z1 -- *d,
        dip:at2(f,g) h)
    def(at4(f,g,h,i),
            (*a x1 -- *b,
             *b y1 -- *c,
             *c z1 -- *d,
             *d w1 -- *e)
            *a x1 y1 z1 w1 -- *e,
        dip:at3(f,g,h) i)

    def(at2(f), (*a x -- *a) *a x x -- *a, at2(f,f))
    def(at3(f), (*a x -- *a) *a x x x -- *a, at3(f,f,f))
    def(at4(f), (*a x -- *a) *a x x x x -- *a, at4(f,f,f,f))

    def(drop2, a b --, drop drop)
    def(drop3, a b c --, drop drop drop)
    def(drop4, a b c d --, drop drop drop drop)

    def(rot4r, a b c d -- d a b c, swap dip(rotr))
    def(rot4l, a b c d -- b c d a, dip(rotl) swap)

    def(rrot4r, +a +b +c +d -- +d +a +b +c, rswap rdip(rrotr))
    def(rrot4l, +a +b +c +d -- +b +c +d +a, rdip(rrotl) rswap)

    def(repeat(f), (*a -- *a) *a Nat -- *a,
        while(dup 0>, dip(f) 1-) drop)

    def(count(f), (*a Nat -- *a) *a Nat -- *a,
        0 >Nat swap repeat(dup dip(f) 1+) drop)
    def(countdown(f), (*a Nat -- *a) *a Nat -- *a,
        dup swap repeat(1- dup dip(f)) drop)

    def(U8_MAX, Int, 0xFF)
    def(U16_MAX, Int, 0xFFFF)
    def(U32_MAX, Int, 0xFFFFFFFF)

    def(I8_MAX, Int, 0x7F)
    def(I16_MAX, Int, 0x7FFF)
    def(I32_MAX, Int, 0x7FFFFFFF)

    def(U8_MIN, Int, 0)
    def(U16_MIN, Int, 0)
    def(U32_MIN, Int, 0)

    def(I8_MIN, Int, -0x80)
    def(I16_MIN, Int, -0x8000)
    def(I32_MIN, Int, -0x80000000)

    data(Comparison, LT, EQ, GT)
    def(Comparison.lt?, Comparison -- Bool, LT -> True, EQ -> False, GT -> False)
    def(Comparison.le?, Comparison -- Bool, LT -> True, EQ -> True, GT -> False)
    def(Comparison.eq?, Comparison -- Bool, LT -> False, EQ -> True, GT -> False)
    def(Comparison.ge?, Comparison -- Bool, LT -> False, EQ -> True, GT -> True)
    def(Comparison.gt?, Comparison -- Bool, LT -> False, EQ -> False, GT -> True)
    def(Comparison.ne?, Comparison -- Bool, LT -> True, EQ -> False, GT -> True)

    alias(Int.==, prim-int-eq)
    alias(Int.<, prim-int-lt)
    def(Int.>,  Int Int -- Bool, swap <)
    def(Int.>=, Int Int -- Bool, < not)
    def(Int.<=, Int Int -- Bool, swap < not)
    def(Int.<>, Int Int -- Bool, == not)
    def(Int.compare, Int Int -- Comparison, dup2 == if(drop2 EQ, < if(LT, GT)))
)
def(Int.max, Int Int -- Int, dup2 < if(nip, drop))
def(Int.min, Int Int -- Int, dup2 < if(drop, nip))
def(Int.in-range, Int Int Int -- Bool, dip(over dip(>=)) <= &&)

inline(
    def(Int.show, Int -- Str, prim-int-to-str)
    def(Int.show;, Int +Str -- +Str, show ;)

    def(Str.compare, Str Str -- Comparison, prim-str-cmp 0 compare)
    def(Str.==, Str Str -- Bool, compare eq?)
    def(Str.<,  Str Str -- Bool, compare lt?)
    def(Str.>,  Str Str -- Bool, compare gt?)
    def(Str.<=, Str Str -- Bool, compare le?)
    def(Str.>=, Str Str -- Bool, compare ge?)
    def(Str.<>, Str Str -- Bool, compare ne?)
)
def(Str.max, Str Str -- Str, dup2 < if(nip, drop))
def(Str.min, Str Str -- Str, dup2 < if(drop, nip))

inline(
    def-missing(prim-int-succ, Int -- Int, 1 +)
    def-missing(prim-int-pred, Int -- Int, 1 -)
    def-missing(prim-int-negate, Int -- Int, -1 *)
    alias(Int.1+, prim-int-succ)
    alias(Int.1-, prim-int-pred)
    alias(Int.negate, prim-int-negate)
    alias(Int.succ, prim-int-succ)
    alias(Int.pred, prim-int-pred)
    def(Int.2*, Int -- Int, 2 *)
    def(Int.2/, Int -- Int, 2 /)
    def(Int.0=, Int -- Bool, 0 ==)
    def(Int.0<, Int -- Bool, 0 <)
    def(Int.0>, Int -- Bool, 0 >)
    def(Int.0<=, Int -- Bool, 0 <=)
    def(Int.0>=, Int -- Bool, 0 >=)
    def(Int.0<>, Int -- Bool, 0 <>)

    alias(Ptr.null, prim-ptr-nil)
    alias(Ptr.==, prim-ptr-eq)
    def(Ptr.is-null, Ptr -- Bool, Ptr.null ==)
    def(Ptr.sizeof, -- Size, prim-ptr-size >Size)

    data(+Unsafe, +Unsafe)
    def(unsafe(f), (*a +Unsafe -- *b +Unsafe) *a -- *b,
        +Unsafe f /+Unsafe)

    ||| Add byte offset to Ptr.
    def(Ptr.offset, Offset Ptr +Unsafe -- Ptr +Unsafe, dip(>Int) prim-ptr-add)

    def(Ptr.@Ptr, Ptr +Unsafe -- Ptr +Unsafe, prim-ptr-get)
    def(Ptr.!Ptr, Ptr Ptr +Unsafe -- +Unsafe, prim-ptr-set)

    def(Ptr.@U8,  Ptr +Unsafe -- U8  +Unsafe, prim-u8-get)
    def(Ptr.@U16, Ptr +Unsafe -- U16 +Unsafe, prim-u16-get)
    def(Ptr.@U32, Ptr +Unsafe -- U32 +Unsafe, prim-u32-get)
    def(Ptr.@U64, Ptr +Unsafe -- U64 +Unsafe, prim-u64-get)
    def(Ptr.@I8,  Ptr +Unsafe -- I8  +Unsafe, prim-i8-get)
    def(Ptr.@I16, Ptr +Unsafe -- I16 +Unsafe, prim-i16-get)
    def(Ptr.@I32, Ptr +Unsafe -- I32 +Unsafe, prim-i32-get)
    def(Ptr.@I64, Ptr +Unsafe -- I64 +Unsafe, prim-i64-get)

    def(Ptr.!U8,  U8  Ptr +Unsafe -- +Unsafe, prim-u8-set)
    def(Ptr.!U16, U16 Ptr +Unsafe -- +Unsafe, prim-u16-set)
    def(Ptr.!U32, U32 Ptr +Unsafe -- +Unsafe, prim-u32-set)
    def(Ptr.!U64, U64 Ptr +Unsafe -- +Unsafe, prim-u64-set)
    def(Ptr.!I8,  I8  Ptr +Unsafe -- +Unsafe, prim-i8-set)
    def(Ptr.!I16, I16 Ptr +Unsafe -- +Unsafe, prim-i16-set)
    def(Ptr.!I32, I32 Ptr +Unsafe -- +Unsafe, prim-i32-set)
    def(Ptr.!I64, I64 Ptr +Unsafe -- +Unsafe, prim-i64-set)

    def(Ptr.alloc, Size +Unsafe -- Ptr +Unsafe, >Int prim-ptr-alloc)
    def(Ptr.realloc, Ptr Size +Unsafe -- Ptr +Unsafe, >Int prim-ptr-realloc)
    def(Ptr.free, Ptr +Unsafe -- +Unsafe, prim-ptr-free)
    def(Ptr.copy, Ptr Size Ptr +Unsafe -- +Unsafe, dip(>Int) prim-ptr-copy)
    def(Ptr.fill, U8 Size Ptr +Unsafe -- +Unsafe, dip(>Int dip(>Int)) prim-ptr-fill)
    def(Ptr.erase, Size Ptr +Unsafe -- +Unsafe, dip2(0 >U8) fill)

    def(U8.>Int,  U8  -- Int, Int>U8-unsafe -> id)
    def(U16.>Int, U16 -- Int, Int>U16-unsafe -> id)
    def(U32.>Int, U32 -- Int, Int>U32-unsafe -> id)
    def(U64.>Int-unsafe, U64 -- Int, Int>U64-unsafe -> id)
    def(U64.>Int?, U64 -- Maybe(Int), Int>U64-unsafe -> dup 0 >= if(Some, drop None))
    def(U64.>Int!, U64 -- Int, >Int? unwrap-or("U64 cannot be safely represented by Int" panic!))

    def(I8.>Int,  I8  -- Int, Int>I8-unsafe -> id)
    def(I16.>Int, I16 -- Int, Int>I16-unsafe -> id)
    def(I32.>Int, I32 -- Int, Int>I32-unsafe -> id)
    def(I64.>Int, I64 -- Int, Int>I64-unsafe -> id)

    def(Int.>U8-unsafe,  Int -- U8,  Int>U8-unsafe )
    def(Int.>U16-unsafe, Int -- U16, Int>U16-unsafe)
    def(Int.>U32-unsafe, Int -- U32, Int>U32-unsafe)
    def(Int.>U64-unsafe, Int -- U64, Int>U64-unsafe)
    def(Int.>I8-unsafe,  Int -- I8,  Int>I8-unsafe )
    def(Int.>I16-unsafe, Int -- I16, Int>I16-unsafe)
    def(Int.>I32-unsafe, Int -- I32, Int>I32-unsafe)
    def(Int.>I64-unsafe, Int -- I64, Int>I64-unsafe)

    def(Int.>U8%,  Int --  U8,  U8_MAX & >U8-unsafe)
    def(Int.>U16%, Int -- U16, U16_MAX & >U16-unsafe)
    def(Int.>U32%, Int -- U32, U32_MAX & >U32-unsafe)
    def(Int.>U64%, Int -- U64,           >U64-unsafe)
)

def(Int.>U8?,  Int -- Maybe( U8), dup U8_MIN  U8_MAX  .in-range if(Int>U8-unsafe Some, drop None))
def(Int.>U16?, Int -- Maybe(U16), dup U16_MIN U16_MAX .in-range if(Int>U16-unsafe Some, drop None))
def(Int.>U32?, Int -- Maybe(U32), dup U32_MIN U32_MAX .in-range if(Int>U32-unsafe Some, drop None))
def(Int.>U64?, Int -- Maybe(U64), dup 0 >= if(Int>U64-unsafe Some, drop None))
def(Int.>U8,  Int --  U8, >U8?  unwrap-or( "U8 out of bounds" panic!))
def(Int.>U16, Int -- U16, >U16? unwrap-or("U16 out of bounds" panic!))
def(Int.>U32, Int -- U32, >U32? unwrap-or("U32 out of bounds" panic!))
def(Int.>U64, Int -- U64, >U64? unwrap-or("U64 out of bounds" panic!))

def(Int.>I8?,  Int -- Maybe( I8), dup I8_MIN  I8_MAX  .in-range if(Int>I8-unsafe Some, drop None))
def(Int.>I16?, Int -- Maybe(I16), dup I16_MIN I16_MAX .in-range if(Int>I16-unsafe Some, drop None))
def(Int.>I32?, Int -- Maybe(I32), dup I32_MIN I32_MAX .in-range if(Int>I32-unsafe Some, drop None))
def(Int.>I64?, Int -- Maybe(I64), Int>I64-unsafe Some)
def(Int.>I8,  Int -- I8,  >I8?  unwrap-or( "I8 out of bounds" panic!))
def(Int.>I16, Int -- I16, >I16? unwrap-or("I16 out of bounds" panic!))
def(Int.>I32, Int -- I32, >I32? unwrap-or("I32 out of bounds" panic!))
def(Int.>I64, Int -- I64, Int>I64-unsafe)

inline(
    def(U8.|,   U8  U8 --  U8, both(>Int) | >U8-unsafe)
    def(U16.|, U16 U16 -- U16, both(>Int) | >U16-unsafe)
    def(U32.|, U32 U32 -- U32, both(>Int) | >U32-unsafe)
    def(U64.|, U64 U64 -- U64, both(>Int-unsafe) | >U64-unsafe)

    def(U8.&,   U8  U8 --  U8, both(>Int) & >U8-unsafe)
    def(U16.&, U16 U16 -- U16, both(>Int) & >U16-unsafe)
    def(U32.&, U32 U32 -- U32, both(>Int) & >U32-unsafe)
    def(U64.&, U64 U64 -- U64, both(>Int-unsafe) & >U64-unsafe)

    def(U8.^,   U8  U8 --  U8, both(>Int) ^ >U8-unsafe)
    def(U16.^, U16 U16 -- U16, both(>Int) ^ >U16-unsafe)
    def(U32.^, U32 U32 -- U32, both(>Int) ^ >U32-unsafe)
    def(U64.^, U64 U64 -- U64, both(>Int-unsafe) ^ >U64-unsafe)

    def(U8.==,  U8  U8  -- Bool, both(>Int) ==)
    def(U16.==, U16 U16 -- Bool, both(>Int) ==)
    def(U32.==, U32 U32 -- Bool, both(>Int) ==)
    def(U64.==, U64 U64 -- Bool, both(>Int-unsafe) ==)
    def(I8.==,  I8  I8  -- Bool, both(>Int) ==)
    def(I16.==, I16 I16 -- Bool, both(>Int) ==)
    def(I32.==, I32 I32 -- Bool, both(>Int) ==)
    def(I64.==, I64 I64 -- Bool, both(>Int) ==)
)

#######
# NAT #
#######

data(Nat, NatUnsafe -> Int)

def(Int.>Nat, Int -- Nat, expect!(dup 0< not, "tried to create negative Nat" panic!) NatUnsafe)
inline (
    def(Nat.>Int, Nat -- Int, NatUnsafe -> id)

    def(Nat.>U8,  Nat -- U8,  >Int >U8)
    def(Nat.>U16, Nat -- U16, >Int >U16)
    def(Nat.>U32, Nat -- U32, >Int >U32)
    def(Nat.>U64, Nat -- U64, >Int >U64-unsafe)

    def(U8.>Nat,  U8  -- Nat, >Int NatUnsafe)
    def(U16.>Nat, U16 -- Nat, >Int NatUnsafe)
    def(U32.>Nat, U32 -- Nat, >Int NatUnsafe)
    def(U64.>Nat, U64 -- Nat, >Int-unsafe NatUnsafe)

    def(Nat.+, Nat Nat -- Nat, both(>Int) + NatUnsafe)
    def(Nat.-, Nat Nat -- Nat, both(>Int) - >Nat)
    def(Nat.*, Nat Nat -- Nat, both(>Int) * NatUnsafe)
    def(Nat./, Nat Nat -- Nat, both(>Int) / NatUnsafe)
    def(Nat.%, Nat Nat -- Nat, both(>Int) % NatUnsafe)
    def(Nat./%, Nat Nat -- Nat Nat, both(>Int) /% both(NatUnsafe))
    def(Nat.&, Nat Nat -- Nat, both(>Int) & NatUnsafe)
    def(Nat.|, Nat Nat -- Nat, both(>Int) | NatUnsafe)
    def(Nat.^, Nat Nat -- Nat, both(>Int) ^ NatUnsafe)
    def(Nat.<<, Nat Nat -- Nat, both(/NatUnsafe) << NatUnsafe)
    def(Nat.>>, Nat Nat -- Nat, both(/NatUnsafe) >> NatUnsafe)

    def(Nat.1+, Nat -- Nat, >Int 1+ NatUnsafe)
    def(Nat.1-, Nat -- Nat, >Int 1- >Nat)
    def(Nat.2*, Nat -- Nat, >Int 2* NatUnsafe)
    def(Nat.2/, Nat -- Nat, >Int 2/ NatUnsafe)

    def(Nat.compare, Nat Nat -- Comparison, both(>Int) compare)
    def(Nat.==, Nat Nat -- Bool, both(>Int) ==)
    def(Nat.<, Nat Nat -- Bool, both(>Int) <)
    def(Nat.>, Nat Nat -- Bool, both(>Int) >)
    def(Nat.<=, Nat Nat -- Bool, both(>Int) <=)
    def(Nat.>=, Nat Nat -- Bool, both(>Int) >=)
    def(Nat.<>, Nat Nat -- Bool, both(>Int) <>)
    def(Nat.0>, Nat -- Bool, >Int 0>)
    def(Nat.0=, Nat -- Bool, >Int 0=)
    def(Nat.max, Nat Nat -- Nat, both(>Int) max NatUnsafe)
    def(Nat.min, Nat Nat -- Nat, both(>Int) min NatUnsafe)
    def(Nat.show, Nat -- Str, >Int show)
    def(Nat.show;, Nat +Str -- +Str, >Int show;)
)

data(Size, Size -> Nat)
inline(
    def(Nat.>Size, Nat -- Size, Size)
    def(Size.>Nat, Size -- Nat, /Size)
    def(Size.>Int, Size -- Int, >Nat >Int)
    def(Int.>Size, Int -- Size, >Nat >Size)
    def(Size.+, Size Size -- Size, both(>Nat) + >Size)
    def(Size.-, Size Size -- Size, both(>Nat) - >Size)
    def(Size.1+, Size -- Size, >Nat 1+ >Size)
    def(Size.1-, Size -- Size, >Nat 1- >Size)
    def(Size.2*, Size -- Size, >Nat 2* >Size)
    def(Size.2/, Size -- Size, >Nat 2/ >Size)
    def(Size.==, Size Size -- Bool, both(>Nat) ==)
    def(Size.<, Size Size -- Bool, both(>Nat) <)
    def(Size.>, Size Size -- Bool, both(>Nat) >)
    def(Size.<=, Size Size -- Bool, both(>Nat) <=)
    def(Size.>=, Size Size -- Bool, both(>Nat) >=)
    def(Size.<>, Size Size -- Bool, both(>Nat) <>)
    def(Size.0=, Size -- Bool, >Nat 0=)
    def(Size.0>, Size -- Bool, >Nat 0>)
    def(Size.show, Size -- Str, >Int show)
    def(Size.show;, Size +Str -- +Str, >Int show;)
)
def(Size.max, Size Size -- Size, dup2 >= if(drop, nip))
def(Size.min, Size Size -- Size, dup2 <= if(drop, nip))

data(Offset, Offset -> Int)
inline(
    def(Int.>Offset, Int -- Offset, Offset)
    def(Offset.>Int, Offset -- Int, /Offset)
    def(Nat.>Offset, Nat -- Offset, >Int >Offset)
    def(Size.>Offset, Size -- Offset, >Nat >Offset)
    def(Offset.>Nat, Offset -- Nat, >Int >Nat)
    def(Offset.>Size, Offset -- Size, >Nat >Size)
    def(Offset.+, Offset Offset -- Offset, both(>Int) + >Offset)
    def(Offset.-, Offset Offset -- Offset, both(>Int) - >Offset)
    def(Offset.1+, Offset -- Offset, >Int 1+ >Offset)
    def(Offset.1-, Offset -- Offset, >Int 1- >Offset)
    def(Offset.==, Offset Offset -- Bool, both(>Int) ==)
    def(Offset.>, Offset Offset -- Bool, both(>Int) >)
    def(Offset.<, Offset Offset -- Bool, both(>Int) <)
    def(Offset.>=, Offset Offset -- Bool, both(>Int) >=)
    def(Offset.<=, Offset Offset -- Bool, both(>Int) <=)
    def(Offset.<>, Offset Offset -- Bool, both(>Int) <>)
    def(Offset.0=, Offset -- Bool, >Int 0=)
    def(Offset.0<, Offset -- Bool, >Int 0<)
    def(Offset.0>, Offset -- Bool, >Int 0>)
    def(Offset.show, Offset -- Str, >Int show)
)
def(Offset.max, Offset Offset -- Offset, dup2 >= if(drop, nip))
def(Offset.min, Offset Offset -- Offset, dup2 <= if(drop, nip))

##########
# TUPLES #
##########

alias(pack-cons, prim-pack-cons)
alias(pack-uncons, prim-pack-uncons)

alias(pack0, prim-pack-nil)
def(pack1, a -- [a], dip(pack0) pack-cons)
def(pack2, a b -- [a b], dip(pack1) pack-cons)
def(pack3, a b c -- [a b c], dip(pack2) pack-cons)
def(pack4, a b c d -- [a b c d], dip(pack3) pack-cons)
def(pack5, a b c d e -- [a b c d e], dip(pack4) pack-cons)

inline:def(unpack0, [] --, drop)
def(unpack1, [a] -- a, pack-uncons nip)
def(unpack2, [a b] -- a b, pack-uncons dip(unpack1))
def(unpack3, [a b c] -- a b c, pack-uncons dip(unpack2))
def(unpack4, [a b c d] -- a b c d, pack-uncons dip(unpack3))
def(unpack5, [a b c d e] -- a b c d e, pack-uncons dip(unpack4))

def(pack-cons==(aeq,beq), ([*a] [*a] -- Bool, b b -- Bool) [*a b] [*a b] -- Bool,
    dip:pack-uncons pack-uncons dip:swap
    dip2:aeq rotl if(beq, drop2 False))

def(pack0==, [] [] -- Bool, drop2 False)
def(pack1==(aeq), (a a -- Bool) [a] [a] -- Bool,
    on2:unpack1 aeq)
def(pack2==(aeq,beq), (a a -- Bool, b b -- Bool) [a b] [a b] -- Bool,
    pack-cons==(pack1==(aeq), beq))
def(pack3==(aeq,beq,ceq), (a a -- Bool, b b -- Bool, c c -- Bool)
        [a b c] [a b c] -- Bool,
    pack-cons==(pack2==(aeq,beq), ceq))
def(pack4==(aeq,beq,ceq,deq),
        (a a -- Bool, b b -- Bool, c c -- Bool, d d -- Bool)
        [a b c d] [a b c d] -- Bool,
    pack-cons==(pack3==(aeq,beq,ceq), deq))

def(pack2-show;-contents(f,g), (a +Str -- +Str, b +Str -- +Str) [a b] +Str -- +Str,
    unpack2 dip(f) " " ; g)
def(pack3-show;-contents(f,g,h), (a +Str -- +Str, b +Str -- +Str, c +Str -- +Str) [a b c] +Str -- +Str,
    pack-uncons dip(pack2-show;-contents(f,g)) " " ; h)
def(pack4-show;-contents(f,g,h,i), (a +Str -- +Str, b +Str -- +Str, c +Str -- +Str, d +Str -- +Str) [a b c d] +Str -- +Str,
    pack-uncons dip(pack3-show;-contents(f,g,h)) " " ; i)

def(pack2-show;(f,g), (a +Str -- +Str, b +Str -- +Str) [a b] +Str -- +Str,
    pack2-show;-contents(f,g) " pack2" ;)
def(pack3-show;(f,g,h), (a +Str -- +Str, b +Str -- +Str, c +Str -- +Str) [a b c] +Str -- +Str,
    pack3-show;-contents(f,g,h) " pack3" ;)
def(pack4-show;(f,g,h,i), (a +Str -- +Str, b +Str -- +Str, c +Str -- +Str, d +Str -- +Str) [a b c d] +Str -- +Str,
    pack4-show;-contents(f,g,h,i) " pack4" ;)

alias(@, prim-mut-get)
alias(!, prim-mut-set)
alias(mut-is-set, prim-mut-is-set)
def(modify(f), (*a t -- *b t) *a Mut(t) -- *b, dup dip(@ f) !)
def(memoize(f), (*a -- *a t) *a Mut(t) -- *a t,
    dup mut-is-set if(
        @,
        dip(f dup) !
    ))
def(@?, Mut(t) -- Maybe(t),
    dup mut-is-set if(@ Some, drop None))

def(panic!, *a Str -- *b, prim-panic)
def(expect!(f,g), (*a -- *a Bool, *a -- *b Str) *a -- *a,
    f if(id, g panic!))
def(assert!(f,g), (*a -- *a Bool, *a -- *b Str) *a -- *a,
    expect!(f,g "assertion failed: " swap prim-str-cat))
def(todo!, *a -- *b, "TODO" panic!)
