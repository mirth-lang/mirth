module std.prelude

import std.maybe
import std.str
import std.byte
import std.list
import std.number

alias id prim-id
alias ?? prim-debug
alias swap prim-swap
alias dup prim-dup
alias drop prim-drop
alias run prim-run

alias rswap prim-rswap
alias rdip(f) prim-rdip
alias dip(f) prim-dip
alias while(f,g) prim-while

alias Bool.if(f,g) prim-if
alias Bool.and prim-bool-and
alias Bool.or  prim-bool-or
alias Bool.not prim-bool-not
inline def Bool.= [ Bool Bool -- Bool ] { if(id,not) }
inline def Bool.or(p) [ (*a -- *a Bool) *a Bool -- *a Bool ] { if(True, p) }
inline def Bool.and(p) [ (*a -- *a Bool) *a Bool -- *a Bool ] { if(p, False) }
inline def Bool.then(f) [ (*a -- *a) *a Bool -- *a ] { if(f, id) }
inline def Bool.else(f) [ (*a -- *a) *a Bool -- *a ] { if(id, f) }

inline def or(f,g) [ (*x a -- *x Bool, *x a -- *x Bool) *x a -- *x Bool ] {
    dup dip(f) swap if(drop True, g)
}
inline def and(f,g) [ (*x a -- *x Bool, *x a -- *x Bool) *x a -- *x Bool ] {
    dup dip(f) swap if(g, drop False)
}
inline def while(f) [ (*x -- *x Bool) *x -- *x ] {
    True while(dup, drop f) drop
}

||| The opposite of `while(f, g)` – repeat until True
inline def until(f, g) [ (*x -- *x Bool, *x -- *x) *x -- *x ] {
    while(f not, g)
}

||| The opposite of `while(f)` – repeat until True
inline def until(f) [ (*x -- *x Bool)  *x -- *x ] {
    False while(dup not, drop f) drop
}

||| Do either `g` or `h` based on predicate `f`, preserving the top of the stack
|||
|||   @value if("world" =,
|||     print("hello "; ;),
|||     print("goodbye "; ;)
|||   )
inline def if(f, g, h) [ (*a b -- *a Bool, *a b -- *c, *a b -- *c) *a b -- *c ] {
    dup dip:f swap if(g, h)
}

inline def or(f,g,h) { or(f,or(g,h)) }
inline def or(f,g,h,i) { or(f,or(g,or(h,i))) }
inline def and(f,g,h) { and(f,and(g,h)) }
inline def and(f,g,h,i) { and(f,and(g,and(h,i))) }

def(Bool.repr;, Bool +Str -- +Str, if("True", "False") ;)

alias Bool.True  prim-bool-true
alias Bool.False prim-bool-false

alias True  Bool.True
alias False Bool.False

alias Yes True
alias No  False

inline {
    def-type(EnumValue,I64)
    def Int.>EnumValue-unsafe [ Int -- EnumValue ] { >I64-unsafe }
    def I64.>EnumValue [ I64 -- EnumValue ] { }

    def-type(TableIndex,U64)
    def Int.>TableIndex-clamp [ Int -- TableIndex ] { >U64-clamp }
    def U64.>TableIndex [ U64 -- TableIndex ] { }
}

data OS {
    0 Unknown
    1 Windows
    2 Linux
    3 Mac
    --
    inline {
        def Min [ OS ] { 0 >EnumValue-unsafe OS.from-enum-value-unsafe }
        def Max [ OS ] { 3 >EnumValue-unsafe OS.from-enum-value-unsafe }
        def +World.running-os [ +World -- +World OS ] { prim-sys-os >OS }
        def >Int [ OS -- Int ] { enum-value >Int }
        def = [ OS OS -- Bool ] { on2:>Int = }
    }
    def I64.>OS [ I64 -- OS ] { >Int >OS }
    def Int.>OS [ Int -- OS ] {
        dup OS.Min OS.Max on2:>Int in-range if(
            >EnumValue-unsafe OS.from-enum-value-unsafe,
            drop OS.Unknown
        )
    }
    def is-windows? { OS.Windows = }
    def is-linux? { OS.Linux = }
    def is-macos? { OS.Mac = }
    def path-separator {
        is-windows? if("\\", "/")
    }
    def byte-is-path-separator? [ Byte OS -- Bool ] {
        { Windows -> or(Byte.B'/' =, Byte.B'\' =) }
        { Linux -> Byte.B'/' = }
        { Mac -> Byte.B'/' = }
        { Unknown -> Byte.B'/' = }
    }
}

data Arch {
    0 Unknown
    1 I386
    2 AMD64
    3 ARM64
    --
    inline {
        def Min [ Arch ] { 0i64 >EnumValue Arch.from-enum-value-unsafe }
        def Max [ Arch ] { 3i64 >EnumValue Arch.from-enum-value-unsafe }
        def +World.running-arch [ +World -- +World Arch ] { prim-sys-arch >Arch }
        def >Int [ Arch -- Int ] { enum-value >Int }
        def =  [ Arch Arch -- Bool ] { on2:>Int = }
        def <> [ Arch Arch -- Bool ] { on2:>Int <> }
    }
    def I64.>Arch [ I64 -- Arch ] { >Int >Arch }
    def Int.>Arch [ Int -- Arch ] {
        dup Arch.Min Arch.Max on2:>Int in-range if(
            >EnumValue-unsafe Arch.from-enum-value-unsafe,
            drop Arch.Unknown
        )
    }
}

# TODO: require +World for these
inline def argc [ -- Int ] { prim-sys-argc >Int }
inline def argv [ -- Ptr ] { prim-sys-argv }

inline {
    def rotr [ a b c -- c a b ] { swap dip(swap) }
    def rotl [ a b c -- b c a ] { dip(swap) swap }

    def rot4r [ a b c d -- d a b c ] { swap dip(rotr) }
    def rot4l [ a b c d -- b c d a ] { dip(rotl) swap }

    def rrotr [ +a +b +c -- +c +a +b ] { rswap rdip(rswap) }
    def rrotl [ +a +b +c -- +b +c +a ] { rdip(rswap) rswap }

    def rrot4r [ +a +b +c +d -- +d +a +b +c ] { rswap rdip(rrotr) }
    def rrot4l [ +a +b +c +d -- +b +c +d +a ] { rdip(rrotl) rswap }

    def swap2 [ a b c d -- c d a b ] { dip(rotr) rotr }

    def over  [ a b           -- a b           a ] { dip(dup)   swap }
    def over2 [ a b1 b2       -- a b1 b2       a ] { dip(over)  swap }
    def over3 [ a b1 b2 b3    -- a b1 b2 b3    a ] { dip(over2) swap }
    def over4 [ a b1 b2 b3 b4 -- a b1 b2 b3 b4 a ] { dip(over3) swap }

    def tuck [ a b -- b a b ] { dup dip(swap) }

    def nip [ a b -- b ] { dip(drop) }

    def dup2 [ a b -- a b a b ] { over over }
    def dup3 [ a b c -- a b c a b c ] { dup dip(dip(dup2) rotr) }

    def dip2(f) [ (*a -- *b) *a c1 c2 -- *b c1 c2 ] { dip(dip(f)) }
    def dip3(f) [ (*a -- *b) *a c1 c2 c3 -- *b c1 c2 c3 ] { dip(dip2(f)) }
    def dip4(f) [ (*a -- *b) *a c1 c2 c3 c4 -- *b c1 c2 c3 c4 ] { dip(dip3(f)) }
    def dip5(f) [ (*a -- *b) *a c1 c2 c3 c4 c5 -- *b c1 c2 c3 c4 c5 ] { dip(dip4(f)) }

    def rdip_(f) [ (*a +r1 -- *b +r2) *a +c +r1 -- *b +c +r2 ] { rswap rdip(f) rswap }
    def rdip2(f) [ (*a -- *b) *a +c1 +c2 -- *b +c1 +c2 ] { rdip(rdip(f)) }
    def rdip3(f) [ (*a -- *b) *a +c1 +c2 +c3 -- *b +c1 +c2 +c3 ] { rdip(rdip2(f)) }

    def sip(f)  [ (*a x     -- *b) *a x     -- *b x     ] { dup  dip(f)  }
    def sip2(f) [ (*a x1 x2 -- *b) *a x1 x2 -- *b x1 x2 ] { dup2 dip2(f) }

    def dip_(f) [ (*a x -- *b y) *a c x -- *b c y ] { swap dip(f) swap }
    def sip_(f) [ (*a x -- *b y) *a   x -- *b x y ] { dup  dip(f) swap }

    def both(f) [ (a -- b) a a -- b b ] { dip(f) f }

    def on2(f,g) [
        ( *a x1 -- *b x2
        , *b y1 -- *c y2
        ) *a x1 y1 -- *c x2 y2 ]
        { dip(f) dip_(g) }
    def on3(f,g,h) [
        ( *a x1 -- *b x2
        , *b y1 -- *c y2
        , *c z1 -- *d z2
        ) *a x1 y1 z1 -- *d x2 y2 z2 ]
        { dip:on2(f,g) dip_:dip_(h) }
    def on4(f,g,h,i) [
        ( *a x1 -- *b x2
        , *b y1 -- *c y2
        , *c z1 -- *d z2
        , *d w1 -- *e w2
        ) *a x1 y1 z1 w1 -- *e x2 y2 z2 w2 ]
        { dip:on3(f,g,h) dip_:dip_:dip_(i) }

    def on2(f) [ (*a x -- *a y) *a x x     -- *a y y     ] { on2(f,f)     }
    def on3(f) [ (*a x -- *a y) *a x x x   -- *a y y y   ] { on3(f,f,f)   }
    def on4(f) [ (*a x -- *a y) *a x x x x -- *a y y y y ] { on4(f,f,f,f) }

    def drop2 [ a b         -- ] { drop drop                     }
    def drop3 [ a b c       -- ] { drop drop drop                }
    def drop4 [ a b c d     -- ] { drop drop drop drop           }
    def drop5 [ a b c d e   -- ] { drop drop drop drop drop      }
    def drop6 [ a b c d e f -- ] { drop drop drop drop drop drop }

    def rdrop2 (rd1 {rdrop}, rd2 {rdrop}) [ ( +a --, +b -- ) +a +b -- ] { rd2 rd1 }
    def rdrop3 (rd1 {rdrop}, rd2 {rdrop}, rd3 {rdrop}) [ ( +a --, +b --, +c -- ) +a +b +c -- ] { rd3 rd2 rd1 }

    def flip3 [ a b c   --   c b a ] { >x1 >x2 >x3     x1> x2> x3>     }
    def flip4 [ a b c d -- d c b a ] { >x1 >x2 >x3 >x4 x1> x2> x3> x4> }

    def repeat(f)    [ (*a -- *a)     *a Nat -- *a ] { while(dup 0>, dip(f) pred) drop }
    def count(f)     [ (*a Nat -- *a) *a Nat -- *a ] { 0u  swap repeat(dup dip(f) 1+)   drop }
    def countdown(f) [ (*a Nat -- *a) *a Nat -- *a ] { dup swap repeat(pred dup dip(f)) drop }
}

data Comparison {
    -1 LT
    0 EQ
    +1 GT
    --
    inline {
        def eq? [ Comparison -- Bool ] { enum-value 0=  }
        def lt? [ Comparison -- Bool ] { enum-value 0<  }
        def le? [ Comparison -- Bool ] { enum-value 0>= }
        def gt? [ Comparison -- Bool ] { enum-value 0>  }
        def ge? [ Comparison -- Bool ] { enum-value 0>= }
        def ne? [ Comparison -- Bool ] { enum-value 0<> }
    }
    def reverse [ Comparison -- Comparison ] {
        { LT -> Comparison.GT }
        { EQ -> Comparison.EQ }
        { GT -> Comparison.LT }
    }
    def repr; [ +Str Comparison -- +Str ] { LT -> "LT";, EQ -> "EQ";, GT -> "GT"; }
}

data PartialComparison {
    -1 LT
     0 EQ
    +1 GT
     2 NC
    --
    def eq? [ PartialComparison -- Bool ] { EQ -> Yes, _ -> drop No }
    def lt? [ PartialComparison -- Bool ] { LT -> Yes, _ -> drop No }
    def le? [ PartialComparison -- Bool ] { EQ -> Yes, LT -> Yes, _ -> drop No }
    def gt? [ PartialComparison -- Bool ] { GT -> Yes, _ -> drop No }
    def ge? [ PartialComparison -- Bool ] { EQ -> Yes, GT -> Yes, _ -> drop No }
    def ne? [ PartialComparison -- Bool ] { eq? not }
    def nc? [ PartialComparison -- Bool ] { NC -> Yes, _ -> drop No }
    def reverse [ PartialComparison -- PartialComparison ] {
        { LT -> PartialComparison.GT }
        { EQ -> PartialComparison.EQ }
        { GT -> PartialComparison.LT }
        { NC -> PartialComparison.NC }
    }
    def repr; [ +Str PartialComparison -- +Str ] {
        { LT -> "LT"; }
        { EQ -> "EQ"; }
        { GT -> "GT"; }
        { NC -> "NC"; }
    }
}

def compare-via-eq-lt (eq {=}, lt {<}) [ (a a -- Bool, a a -- Bool) a a -- Comparison ] {
    dup2 eq if(drop2 Comparison.EQ, lt if(Comparison.LT, Comparison.GT))
}
def partial-compare-via-eq-lt (eq {=}, lt {<}) [ (a a -- Bool, a a -- Bool) a a -- PartialComparison ] {
    dup2 eq if(
        drop2 PartialComparison.EQ,
        dup2 lt if(
            drop2 PartialComparison.LT,
            swap lt if(PartialComparison.GT, PartialComparison.NC)
        )
    )
}

inline {
    def div (f {divmod}) [ ( a b -- c d ) a b -- c ] { f drop }
    def mod (f {divmod}) [ ( a b -- c d ) a b -- d ] { f nip  }

    def == (eq {=})  [ (*z a b -- *z c) *z a b -- *z c ] { eq }
    def >  (lt {<})  [ (*z a b -- *z c) *z b a -- *z c ] { swap lt }
    def >= (le {<=}) [ (*z a b -- *z c) *z b a -- *z c ] { swap le }
    def <> (eq {=}, f {not})  [ (*z a b -- *z c, *z c -- *z d) *z a b -- *z d ] { eq f }

    def 0=       (eq  {=       }) [ (*z a Nat -- *z b) *z a -- *z b ] { 0u eq }
    def 0<       (lt  {<       }) [ (*z a Nat -- *z b) *z a -- *z b ] { 0u lt }
    def 0<=      (le  {<=      }) [ (*z a Nat -- *z b) *z a -- *z b ] { 0u le }
    def 0>       (gt  {>       }) [ (*z a Nat -- *z b) *z a -- *z b ] { 0u gt }
    def 0>=      (ge  {>=      }) [ (*z a Nat -- *z b) *z a -- *z b ] { 0u ge }
    def 0<>      (ne  {<>      }) [ (*z a Nat -- *z b) *z a -- *z b ] { 0u ne }
    def 0compare (cmp {.compare}) [ (*z a Nat -- *z b) *z a -- *z b ] { 0u cmp }
    def 0min     (min {.min    }) [ (*z a Nat -- *z b) *z a -- *z b ] { 0u min }
    def 0max     (max {.max    }) [ (*z a Nat -- *z b) *z a -- *z b ] { 0u max }

    def 1+ (f {+}) [ (*z a Nat -- *z b) *z a -- *z b ] { 1u f }
    def 1- (f {-}) [ (*z a Nat -- *z b) *z a -- *z b ] { 1u f }

    def 2* (f {*}) [ (*z a Nat -- *z b) *z a -- *z b ] { 2u f }
    def 2/ (f {/}) [ (*z a Nat -- *z b) *z a -- *z b ] { 2u f }
    def 2divmod (f {divmod}) [ (*z a Nat -- *z b) *z a -- *z b ] { 2u f }
    def 2div    (f {2divmod}) [ (*z a -- *z c d) *z a -- *z c ] { f drop }
    def 2mod    (f {2divmod}) [ (*z a -- *z c d) *z a -- *z d ] { f nip  }

    def max-via-lt (lt {<}) [ (a a -- Bool) a a -- a ] { dup2      lt if(nip, drop) }
    def min-via-lt (lt {<}) [ (a a -- Bool) a a -- a ] { dup2 swap lt if(nip, drop) }
    def in-range (le1 {<=}, le2 {<=}) [ (b a -- Bool, a b -- Bool) a b b -- Bool ] {
        dip(swap dup dip:le1) rotl if(le2, drop2 False)
    }
}

def clamp-via-lt (lt {<}) [ (a a -- Bool) a a a -- a ] { dip(max-via-lt:lt) min-via-lt:lt }

###########
# Numbers #
###########
# These types are defined here but fleshed out in std.number

||| Natural numbers, i.e. non-negative integers, starting from 0.
data Nat { Unsafe [ Int ] }

||| Rational numbers.
data Rat { Unsafe [ Int Nat ] }

||| Size in bytes.
struct Size { Int }

||| Byte offset into a structure or buffer.
struct Offset { Int }

inline {
    def 0u [ Nat ] { 0 Nat.Unsafe }
    def 1u [ Nat ] { 1 Nat.Unsafe }
    def 2u [ Nat ] { 2 Nat.Unsafe }
    def 3u [ Nat ] { 3 Nat.Unsafe }
    def 4u [ Nat ] { 4 Nat.Unsafe }
    def 5u [ Nat ] { 5 Nat.Unsafe }
    def 6u [ Nat ] { 6 Nat.Unsafe }
    def 7u [ Nat ] { 7 Nat.Unsafe }
    def 8u [ Nat ] { 8 Nat.Unsafe }
    def 9u [ Nat ] { 9 Nat.Unsafe }
    def 10u [ Nat ] { 10 Nat.Unsafe }
    def 11u [ Nat ] { 11 Nat.Unsafe }
    def 12u [ Nat ] { 12 Nat.Unsafe }
    def 13u [ Nat ] { 13 Nat.Unsafe }
    def 14u [ Nat ] { 14 Nat.Unsafe }
    def 15u [ Nat ] { 15 Nat.Unsafe }
    def 16u [ Nat ] { 16 Nat.Unsafe }
    def 24u [ Nat ] { 24 Nat.Unsafe }
    def 32u [ Nat ] { 32 Nat.Unsafe }
    def 36u [ Nat ] { 36 Nat.Unsafe }
    def 64u [ Nat ] { 64 Nat.Unsafe }
    def 128u [ Nat ] { 128 Nat.Unsafe }
    def 255u [ Nat ] { 255 Nat.Unsafe }
    def 256u [ Nat ] { 256 Nat.Unsafe }

    def |Byte| [ Size ] { 1 Size }
    def |U8|   [ Size ] { 1 Size }
    def |U16|  [ Size ] { 2 Size }
    def |U32|  [ Size ] { 4 Size }
    def |U64|  [ Size ] { 8 Size }
    def |I8|   [ Size ] { 1 Size }
    def |I16|  [ Size ] { 2 Size }
    def |I32|  [ Size ] { 4 Size }
    def |I64|  [ Size ] { 8 Size }
    def |F32|  [ Size ] { 4 Size }
    def |F64|  [ Size ] { 8 Size }
    def |Ptr|  [ Size ] { prim-ptr-size >Int Size }
}

data +Unsafe { +Unsafe }

def unsafe(f) [ (*a +Unsafe -- *b +Unsafe) *a -- *b ] {
    +Unsafe f /+Unsafe
}

||| Nullable pointer.
data Ptr? {
    Unsafe [ Ptr ]
    --
    def None [ -- Ptr? ] { Ptr?.Null }
    def Some [ Ptr -- Ptr? ] { Ptr?.Unsafe }
    def Null [ -- Ptr? ] { prim-ptr-nil Ptr?.Unsafe }
    def null? [ Ptr? -- Bool ] { Unsafe -> prim-ptr-nil = }
    def =  [ Ptr? Ptr? -- Bool ] { both(/Unsafe) = }
    def if?(f,g) [ (*a Ptr -- *b, *a -- *b) *a Ptr? -- *b ] {
        dup null? if(drop g, /Unsafe f)
    }
    def for(f) [ (*a Ptr -- *a) *a Ptr? -- *a ] { if?(f, id) }
    def unwrap(f) [ (*a -- *a Ptr) *a Ptr? -- *a Ptr ] { if?(id, f) }
    def >Maybe [ Ptr? -- Maybe(Ptr) ] { if?(Some, None) }
}

||| Unmanaged pointer.
inline patch Ptr {
    def >Ptr? [ Ptr -- Ptr? ] { Ptr?.Unsafe }

    def +  (f{ptr+ }) [ ( *c a ptr:Ptr -- *c b ) *c a Ptr -- *c b ] { >ptr f }
    def -  (f{ptr- }) [ ( *c a ptr:Ptr -- *c b ) *c a Ptr -- *c b ] { >ptr f }
    def =  (f{ptr= }) [ ( *c a ptr:Ptr -- *c b ) *c a Ptr -- *c b ] { >ptr f }
    def <  (f{ptr< }) [ ( *c a ptr:Ptr -- *c b ) *c a Ptr -- *c b ] { >ptr f }
    def <= (f{ptr<=}) [ ( *c a ptr:Ptr -- *c b ) *c a Ptr -- *c b ] { >ptr f }

    def ptr=  [ Ptr ptr:Ptr -- Bool ] { ptr> prim-ptr-eq }
    # def ptr<  [ +Unsafe Ptr ptr:Ptr -- +Unsafe Bool ] { ptr> prim-ptr-lt }
    # def ptr<= [ +Unsafe Ptr ptr:Ptr -- +Unsafe Bool ] { ptr> prim-ptr-le }

    ||| Add byte offset to Ptr.
    def offset+ [ Ptr offset:Offset +Unsafe -- Ptr +Unsafe ] {
        dip(offset> >Int >I64-unsafe) prim-ptr-add
    }
    def size+ [ Ptr size:Size +Unsafe -- Ptr +Unsafe ] { size> >Offset + }
    # def ptr- [ Ptr ptr:Ptr -- Offset ] { ptr> prim-ptr-sub >Int >Offset }

    def @Ptr [ Ptr +Unsafe -- Ptr +Unsafe ] { prim-ptr-get }
    def !Ptr [ Ptr Ptr +Unsafe -- +Unsafe ] { prim-ptr-set }

    def @U8  [ Ptr +Unsafe -- U8  +Unsafe ] { prim-u8-get  }
    def @U16 [ Ptr +Unsafe -- U16 +Unsafe ] { prim-u16-get }
    def @U32 [ Ptr +Unsafe -- U32 +Unsafe ] { prim-u32-get }
    def @U64 [ Ptr +Unsafe -- U64 +Unsafe ] { prim-u64-get }
    def @I8  [ Ptr +Unsafe -- I8  +Unsafe ] { prim-i8-get  }
    def @I16 [ Ptr +Unsafe -- I16 +Unsafe ] { prim-i16-get }
    def @I32 [ Ptr +Unsafe -- I32 +Unsafe ] { prim-i32-get }
    def @I64 [ Ptr +Unsafe -- I64 +Unsafe ] { prim-i64-get }
    def @F32 [ Ptr +Unsafe -- F32 +Unsafe ] { prim-f32-get }
    def @F64 [ Ptr +Unsafe -- F64 +Unsafe ] { prim-f64-get }

    def !U8  [ U8  Ptr +Unsafe -- +Unsafe ] { prim-u8-set  }
    def !U16 [ U16 Ptr +Unsafe -- +Unsafe ] { prim-u16-set }
    def !U32 [ U32 Ptr +Unsafe -- +Unsafe ] { prim-u32-set }
    def !U64 [ U64 Ptr +Unsafe -- +Unsafe ] { prim-u64-set }
    def !I8  [ I8  Ptr +Unsafe -- +Unsafe ] { prim-i8-set  }
    def !I16 [ I16 Ptr +Unsafe -- +Unsafe ] { prim-i16-set }
    def !I32 [ I32 Ptr +Unsafe -- +Unsafe ] { prim-i32-set }
    def !I64 [ I64 Ptr +Unsafe -- +Unsafe ] { prim-i64-set }
    def !F32 [ F32 Ptr +Unsafe -- +Unsafe ] { prim-f32-set }
    def !F64 [ F64 Ptr +Unsafe -- +Unsafe ] { prim-f64-set }

    def alloc   [     Size +Unsafe -- Ptr +Unsafe ] { >Int >U64-wrap prim-ptr-alloc   }
    def realloc [ Ptr Size +Unsafe -- Ptr +Unsafe ] { >Int >U64-wrap prim-ptr-realloc }
    def copy    [ Ptr Size Ptr +Unsafe -- +Unsafe ] { dip(>Int >U64-wrap) prim-ptr-copy }
    def fill    [ U8  Size Ptr +Unsafe -- +Unsafe ] { dip(>Int >U64-wrap) prim-ptr-fill }

    def free    [ Ptr +Unsafe -- +Unsafe ] { prim-ptr-free }
    def erase   [ Size Ptr +Unsafe -- +Unsafe ] { dip2(0u8) fill }
}

##########
# TUPLES #
##########

inline(
    def(pack0,           -- [         ], prim-tup-pack0)
    def(pack1, a         -- [a        ], prim-tup-pack1)
    def(pack2, a b       -- [a b      ], prim-tup-pack2)
    def(pack3, a b c     -- [a b c    ], prim-tup-pack3)
    def(pack4, a b c d   -- [a b c d  ], prim-tup-pack4)
    def(pack5, a b c d e -- [a b c d e], prim-tup-pack5)

    def(unpack0, [         ] --          , prim-tup-unpack0)
    def(unpack1, [a        ] -- a        , prim-tup-unpack1)
    def(unpack2, [a b      ] -- a b      , prim-tup-unpack2)
    def(unpack3, [a b c    ] -- a b c    , prim-tup-unpack3)
    def(unpack4, [a b c d  ] -- a b c d  , prim-tup-unpack4)
    def(unpack5, [a b c d e] -- a b c d e, prim-tup-unpack5)

    def(pack0=, [] [] -- Bool, drop2 False)
    def(pack1=(aeq{=}), (a a -- Bool) [a] [a] -- Bool,
        on2:unpack1 aeq)
    def(pack2=(aeq{=},beq{=}), (a a -- Bool, b b -- Bool) [a b] [a b] -- Bool,
        dip:unpack2 unpack2 dip:swap
        beq if(aeq, drop2 False))
    def(pack3=(aeq{=},beq{=},ceq{=}), (a a -- Bool, b b -- Bool, c c -- Bool)
            [a b c] [a b c] -- Bool,
        dip:unpack3 unpack3 dip2:rotr dip:swap
        ceq if(beq if(aeq, drop2 False), drop4 False))
    def(pack4=(aeq{=},beq{=},ceq{=},deq{=}),
            (a a -- Bool, b b -- Bool, c c -- Bool, d d -- Bool)
            [a b c d] [a b c d] -- Bool,
        dip:unpack4 unpack4 dip3:rot4r dip2:rotr dip:swap
        deq if(ceq if(beq if(aeq, drop2 False), drop4 False), drop2 drop4 False))

    def(pack2-repr;-contents(f{repr;},g{repr;}), (a +Str -- +Str, b +Str -- +Str) [a b] +Str -- +Str,
        unpack2 dip(f) " " ; g)
    def(pack3-repr;-contents(f{repr;},g{repr;},h{repr;}), (a +Str -- +Str, b +Str -- +Str, c +Str -- +Str) [a b c] +Str -- +Str,
        unpack3 dip2(f) " " ; dip(g) " " ; h)
    def(pack4-repr;-contents(f{repr;},g{repr;},h{repr;},i{repr;}),
        (a +Str -- +Str, b +Str -- +Str, c +Str -- +Str, d +Str -- +Str) [a b c d] +Str -- +Str,
        unpack4 dip3(f) " " ; dip2(g) " " ; dip(h) " " ; i)

    def(pack2-repr;(f{repr;},g{repr;}), (a +Str -- +Str, b +Str -- +Str) [a b] +Str -- +Str,
        pack2-repr;-contents(f,g) " pack2" ;)
    def(pack3-repr;(f{repr;},g{repr;},h{repr;}), (a +Str -- +Str, b +Str -- +Str, c +Str -- +Str) [a b c] +Str -- +Str,
        pack3-repr;-contents(f,g,h) " pack3" ;)
    def(pack4-repr;(f{repr;},g{repr;},h{repr;},i{repr;}), (a +Str -- +Str, b +Str -- +Str, c +Str -- +Str, d +Str -- +Str) [a b c d] +Str -- +Str,
        pack4-repr;-contents(f,g,h,i) " pack4" ;)
)

inline(
    alias(@, prim-mut-get)
    alias(!, prim-mut-set)
    alias(mut-is-set, prim-mut-is-set)
    def(modify(f), (*a t -- *b t) *a Mut(t) -- *b, dup dip(@ f) !)
    def(memoize(f), (*a -- *a t) *a Mut(t) -- *a t,
        dup mut-is-set if(
            @,
            dip(f dup) !
        ))
)
def(@?, Mut(t) -- Maybe(t),
    dup mut-is-set if(@ Some, drop None))

inline def panic! [*a Str -- *b] { prim-panic }

inline def panic!(s) [(*a +Str -- *b +Str) *a -- *b] {
    Str(s) panic!
}

def(impossible!, *a -- *b, "Impossible! The impossible has occured!" panic!)
def(expect!(f,g), (*a -- *a Bool, *a -- *b Str) *a -- *a,
    f if(id, g panic!))
def(assert!(f,g), (*a -- *a Bool, *a -- *b Str) *a -- *a,
    expect!(f,g "assertion failed: " swap prim-str-cat))
