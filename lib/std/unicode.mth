module(std.unicode)
import(std.prelude)
import(std.world)
import(std.str)

||| A unicode codepoint
data Codepoint {
    Unsafe [ U32 ]
    --
    inline def Max [ Codepoint ] { 0u32 Codepoint.Unsafe }
    inline def Min [ Codepoint ] { 0x10FFFFu32 Codepoint.Unsafe }
    inline def Replacement [ Codepoint ] { 0xFFFDu32 Codepoint.Unsafe }
    def Codepoint [ U32 -- Codepoint ] {
        dup Codepoint.Min Codepoint.Max on2:>U32 in-range if(
            Codepoint.Unsafe,
            drop Codepoint.Replacement
        )
    }

    inline def >U32 [ Codepoint -- U32 ] { /Unsafe }
    inline def compare [ Codepoint Codepoint -- Comparison ] { on2:>U32 compare }
    inline def == [ Codepoint Codepoint -- Bool ] { on2:>U32 == }
    inline def <  [ Codepoint Codepoint -- Bool ] { on2:>U32 <  }
    inline def <= [ Codepoint Codepoint -- Bool ] { on2:>U32 <= }
    inline def >  [ Codepoint Codepoint -- Bool ] { on2:>U32 >  }
    inline def >= [ Codepoint Codepoint -- Bool ] { on2:>U32 >= }
    inline def <> [ Codepoint Codepoint -- Bool ] { on2:>U32 <> }

    ||| How many utf-16 words are needed to encode this codepoint (always either
    ||| 1 or 2)
    def size-utf-16 [ Codepoint -- USize ] {
        >U32 0xFFFFu32 > if(2u, 1u) >USize
    }

    ||| Encode the codepoint and append it to the string
    def emit; [ +Str Codepoint -- +Str ] {
        >U32
        dup 0x80u32 < if(>U8-wrap >Byte push-byte-unsafe!,
            dup 0x800u32 < if(
                dup 6u32 rshift >U8-wrap 0xC0u8 or >Byte push-byte-unsafe!
                >U8-wrap 0x3Fu8 and 0x80u8 or >Byte push-byte-unsafe!,

                dup 0x010000u32 < if(
                    dup 12u32 rshift >U8-wrap 0xE0u8 or >Byte push-byte-unsafe!
                    dup 6u32 rshift >U8-wrap 0x3Fu8 and 0x80u8 or >Byte push-byte-unsafe!
                    >U8-wrap 0x3Fu8 and 0x80u8 or >Byte push-byte-unsafe!,

                    dup 18u32 rshift >U8-wrap 0x07u8 and 0xF0u8 or >Byte push-byte-unsafe!
                    dup 12u32 rshift >U8-wrap 0x3Fu8 and 0x80u8 or >Byte push-byte-unsafe!
                    dup 6u32 rshift >U8-wrap 0x3Fu8 and 0x80u8 or >Byte push-byte-unsafe!
                    >U8-wrap 0x3Fu8 and 0x80u8 or >Byte push-byte-unsafe!
                )
            )
        )
    }

    def repr; [ +Str Codepoint -- +Str ] {
        >U32 repr; " Codepoint" ;
    }
}

||| Convert a u32 into a codepoint without verifying it
alias(U32.>Codepoint-unsafe, Codepoint.Unsafe)

||| Convert an Int into a codepoint without verifying it
def Int.>Codepoint-unsafe { >U32-wrap Codepoint.Unsafe }


struct +CodepointsForState {
    index:UOffset ptr:Ptr len:UOffset
    --
    def peek [ +CodepointsForState -- +CodepointsForState U8 ] {
        index ptr unsafe(uoffset @U8)
    }
    def next! [ +CodepointsForState -- +CodepointsForState U8 ] {
        peek index:1+
    }
}

||| Iterate over each unicode codepoint in a string
def Str.codepoints-for(f) [ (*a Codepoint -- *a) *a Str -- *a ] {
    with-data(
        >UOffset >len >ptr 0u >UOffset >index +CodepointsForState
        while(index len <,
            peek 0x80u8 and 0= if(
                next! >U32 >Codepoint-unsafe rdip:f,

                peek 0xE0u8 and 0xC0u8 == if(
                    next! 0x1Fu8 and >U32 6u32 lshift
                    next! 0x3Fu8 and >U32 or >Codepoint-unsafe rdip:f,

                    peek 0xF0u8 and 0xE0u8 == if(
                        next! 0x0Fu8 and >U32    6u32 lshift
                        next! 0x3Fu8 and >U32 or 6u32 lshift
                        next! 0x3Fu8 and >U32 or >Codepoint-unsafe rdip:f,

                        next! 0x07u8 and >U32    6u32 lshift
                        next! 0x3Fu8 and >U32 or 6u32 lshift
                        next! 0x3Fu8 and >U32 or 6u32 lshift
                        next! 0x3Fu8 and >U32 or >Codepoint-unsafe rdip:f
                    )
                )
            )
        )
        /+CodepointsForState index> drop ptr> drop len> drop
    )
}

||| How many utf-16 words long this string would be if it were re-encoded
|||
||| Unicode codepoints 0xFFFF and below are encoded as one word, and all above
||| are encoded as two.
def Str.num-utf-16 [ Str -- USize ] {
    dip(0u >USize) codepoints-for(size-utf-16 +)
}

||| How many unicode codepoints this string contains
def Str.num-codepoints [ Str -- USize ] {
    # TODO: this doesn't actually need to fully decode the string to work
    dip(0u >USize) codepoints-for(drop 1+)
}
