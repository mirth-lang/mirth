module std.array

import std.prelude
import std.str
import std.maybe

||| An array of values, tightly packed in linear memory.
||| The array grows from left to right, and access to a
||| particular location takes constant time.
patch Array {
    ||| Empty array.
    def Nil [ Array(a) ] { prim-array-nil }

    ||| Create an array with n copies of the given value.
    def New [ a Nat -- Array(a) ] { >U64-clamp prim-array-new }

    ||| Build an array, piece by piece via `+ArrayBuilder`, and give
    ||| a fill value. For example, `Array(10 ; 20 ; 30 ; 0)`
    ||| creates an array with three `Int` elements `10`, `20`, `30`,
    ||| and a fill value of `0`.
    def Array(f) [ ( +ArrayBuilder(a) |- *x -- *y ) *x -- *y Array(a) ] {
        +Array(f) freeze
    }

    ||| Prepare array for mutation, turning it into a linear resource.
    def thaw [ Array(a) -- +Array(a) ] {
        prim-array-thaw +Array.Unsafe
    }

    ||| Get the number of elements in this array.
    def len [ Array(a) -- Nat ] { prim-array-len >Nat }

    ||| Concatenate two arrays. If the first array is unique and has enough
    ||| space to absorb the second array's elements, this is done in-place
    ||| in the first array.
    def cat [ Array(a) Array(a) -- Array(a) ] { prim-array-cat }

    ||| Is this array empty?
    def empty? [ Array(a) -- Bool ] { len 0= }

    ||| Does this array contain a single element?
    ||| If so, return that element.
    ||| Else return None.
    def single? [ Array(a) -- Maybe(a) ] {
        dup len 1 = if(
            0u swap get Some,
            drop None
        )
    }

    ||| Does this array contain exactly two elements?
    ||| If so, return those two elements as a pair.
    ||| Else return None.
    def pair? [ Array(a) -- Maybe([a a]) ] {
        dup len 2 = if(
            dup 1u swap get dip(0u swap get) pack2 Some,
            drop None
        )
    }

    ||| Get a value from an array at the given index.
    ||| If the index is out of bounds, return None.
    def get? [ Nat Array(a) -- Maybe(a) ] {
        dup2 len < if(
            get Some,
            drop2 None
        )
    }

    ||| Get a value from an array at the given index.
    ||| If the index is out of bounds, panic.
    def get [ Nat Array(a) -- a ] { swap >U64-clamp prim-array-get }

    ||| Set an array value at a given index.
    ||| If the index is out of bounds, panic.
    def set [ a Nat Array(a) -- Array(a) ] { swap >U64-clamp rotl prim-array-set }

    ||| Get a value from an array at the given index from the right.
    ||| If the index is out of bounds, return None.
    def get-right? [ Nat Array(a) -- Maybe(a) ] {
        dup2 len < if(get-right Some, drop2 None)
    }

    ||| Get a value from an array at the given index from the right.
    ||| If the index is out of bounds, panic.
    def get-right [ Nat Array(a) -- a ] {
        sip(len swap - >Nat-else("Array access out of bounds." panic!)) get
    }

    ||| Set a value from an array at the given index from the right.
    def set-right [ a Nat Array(a) -- Array(a) ] {
        sip(len swap - >Nat-else("Array access out of bounds." panic!)) set
    }

    ||| Push a value at the end of the array, expanding the array.
    def push [ a Array(a) -- Array(a) ] { swap prim-array-push }

    ||| Push two values at the end of the array, expanding the array.
    def push2 [ a a Array(a) -- Array(a) ] { thaw push2! freeze }

    ||| Push three values at the end of the array, expanding the array.
    def push3 [ a a a Array(a) -- Array(a) ] { thaw push3! freeze }

    ||| Push four values at the end of the array, expanding the array.
    def push4 [ a a a a Array(a) -- Array(a) ] { thaw push4! freeze }

    ||| Push five values at the end of the array, expanding the array.
    def push5 [ a a a a a Array(a) -- Array(a) ] { thaw push5! freeze }

    ||| Pop a value from the end of the array.
    ||| If the array is empty, panic.
    def pop [ Array(a) -- a Array(a) ] { prim-array-pop swap }

    ||| Pop two values from the end of the array.
    ||| If the array has fewer than two elements, panic.
    def pop2 [ Array(a) -- a a Array(a) ] { thaw pop2! freeze }

    ||| Pop three values from the end of the array.
    ||| If the array has fewer than three elements, panic.
    def pop3 [ Array(a) -- a a a Array(a) ] { thaw pop3! freeze }

    ||| Pop four values from the end of the array.
    ||| If the array has fewer than four elements, panic.
    def pop4 [ Array(a) -- a a a a Array(a) ] { thaw pop4! freeze }

    ||| Pop five values from the end of the array.
    ||| If the array has fewer than five elements, panic.
    def pop5 [ Array(a) -- a a a a a Array(a) ] { thaw pop5! freeze }

    ||| Expand array up to the given length, using the given value.
    ||| This is a no-op if the array is big enough already.
    def expand [ a Nat Array(a) -- Array(a) ] {
        dip:>U64-clamp
        swap rotl prim-array-expand
    }

    ||| Push n copies of a value at the end of the array.
    ||| Like `Array.expand` but takes the number of copies to push, not the final length.
    def push-many [ a Nat Array(a) -- Array(a) ] {
        sip(len +) expand
    }

    ||| Get a slice of an array between two indices.
    ||| This slice is inclusive of the first index, but exclusive of the last index.
    ||| So for example, `1u 2u @array slice` returns an array containing only the
    ||| element at index `1u`, but not the element at index `2u`.
    ||| And `1u 1u @array slice` returns an empty array.
    def slice [ Nat Nat Array(a) -- Array(a) ] {
        tuck dip2(len min)
        dup dip(len min over - >U64-clamp)
        dip2:>U64-clamp
        rotr prim-array-slice
    }

    ||| Get a prefix up to a certain index (exclusive).
    ||| If the index is greater than len, returns the whole array.
    def prefix [ Nat Array(a) -- Array(a) ] { dip2:0u slice }

    ||| Get a suffix, from a starting index.
    ||| If the index is greater than len, returns an empty array.
    def suffix [ Nat Array(a) -- Array(a) ] { sip:len slice }

    ||| Split array in two at a certain index index.
    ||| This is the same as getting the prefix and suffix at the same index.
    def split [ Nat Array(a) -- Array(a) Array(a) ] {
        dup2 suffix dip:prefix
    }

    ||| Reverse the array.
    def reverse [ Array(a) -- Array(a) ] {
        >array
        @array len \n
        @n 2u div count (
            @n over sub-clamp @array:swap-index
        )
        array>
    }

    ||| Swap the elements at the given indexes.
    ||| If either index is out of bounds, panic.
    def swap-index [ Nat Nat Array(a) -- Array(a) ] {
        >array \j \i
        @i @array get
        @j @array get
        @i @array:set
        @j @array:set
        array>
    }

    ||| Sort the array.
    def sort(lt{<}) [ *x |- (a a -- Bool) Array(a) -- Array(a) ] {
        0u swap sip:len sort-slice:lt
    }

    ||| Sort the array by some key function.
    def sort-by(key, lt{<}) [
        *x |- (a -- b, b b -- Bool) Array(a) -- Array(a)
    ] {
        sort(on2:key lt)
    }

    ||| Sort the array between two indices [i,j).
    ||| This is an unstable quicksort that uses the center as pivot.
    ||| Worst case is O(n^2) time, but O(n log n) is the typical case.
    def sort-slice(lt{<}) [
        *x |- (a a -- Bool) Nat Nat Array(a) -- Array(a)
    ] {
        >array
        0u 0u Array.New \stack
        @stack:push2
        while(
            @stack empty? not,
            @stack:pop2 \j \i
            @i 1+ @j < then(
                @i @i @j + 2u div @array:swap-index
                @i @array get \pivot
                @i 1+ \ki
                @j \kj
                while(@ki @kj <,
                    @ki @array get @pivot lt if(
                        @ki:succ,
                        @kj:pred
                        @ki @kj @array:swap-index
                    )
                )
                @ki:pred
                @i @ki @array:swap-index
                @i @ki @stack:push2
                @kj @j @stack:push2
            )
        )
        array>
    }

    ||| Iterate over every element of the array.
    def for(f) [ *x |- (a --) Array(a) -- ] {
        \array
        @array len count(@array get f)
    }

    ||| Iterate over every element of the array, with a second action
    ||| to perform between every element. AKA fence-post iteration.
    def for(f,g) [ *x |- (a --, --) Array(a) --] {
        \array
        @array len count(
            dup 0> then(dip:g)
            @array get f
        )
    }

    ||| Create a new array by applying a function
    ||| to each element of the original array.
    def map(f) [ *x |- (a -- b) Array(a) -- Array(b) ] {
        Array(for(f ;))
    }

    ||| Emit a text representation for the array.
    def repr; (f{repr;}) [ *x +Str |- (a --) Array(a) -- ] {
        "Array( " ;
        for(f " ; ";)
        ")" ;
    }

    ||| Check two arrays for equality. Equality means they have the
    ||| same length, and corresponding elements are equal.
    def = (f{=}) [ *x |- ( a a -- Bool ) Array(a) Array(a) -- Bool ] {
        and2(on2:len =,
            \array2 \array1
            0u \i
            True \result
            while(
                @result
                @i @array1 len < and,
                @i @array1 get
                @i @array2 get f
                !result
                @i:1+
            )
            @result
        )
    }

    ||| Use the array base pointer. This operation will panic if the array is not flat data,
    ||| i.e. the array elements must not be reference counted / garbage collected,
    ||| and it will panic if the array is empty (rather than return a NULL pointer).
    ||| Only access elements within the array bounds, i.e. with index < len, and
    ||| only use the pointer to read unless you can guarantee that you own all
    ||| references to this specific array. It is recommended you go through +Array
    ||| instead, if you need a pointer to owned array.
    def with-base(f) [ +Unsafe |- (*x Ptr -- *y) *x Array(a) -- *y Array(a) ] {
        sip(prim-array-base f)
    }
}

||| Unique array.
data +Array(a) {
    ||| Safety: Array should have unique reference.
    Unsafe [ Array(a) ]
    --
    ||| Empty array.
    def Nil [ +Array(a) ] { Array.Nil +Array.Unsafe }

    ||| Create an array that is n copies of an element.
    def New [ a Nat -- +Array(a) ] { Array.New +Array.Unsafe }

    ||| Build an array element by element.
    def +Array(f) [ (+ArrayBuilder(a) |- *x -- *y) *x -- *y +Array(a) ] {
        +ArrayBuilder.None f finish-array!
    }

    ||| Freeze the array resource into an immutable value.
    def freeze [ +Array(a) -- Array(a) ] { /Unsafe }

    ||| Destroy this resource.
    def rdrop [ +Array(a) -- ] { freeze drop }

    ||| Create a copy of this resource.
    def rdup [ +Array(a) -- +Array(a) +Array(a) ] { array@ thaw }

    ||| Copy the underlying array as a value.
    def array@ [ +Array(a) |- Array(a) ] { array:dup }

    ||| Access underlying array as a value. This freezes the array resource,
    ||| uses it as a value, and then thaws it once more. This is safe against
    ||| potentially non-linear transformations of the array.
    def array(f) [ (Array(a) |- *x -- *y) +Array(a) |- *x -- *y ] { freeze f thaw }

    ||| Get length of array.
    def len@ [ +Array(a) |- Nat ] { array:sip:len }

    ||| Get value at certain index.
    ||| If index is greater than length, panic.
    def value@ [ +Array(a) |- Nat -- a ] { array:sip:get }

    ||| Set value at certain index.
    ||| If index is greater than length, panic.
    def value! [ +Array(a) |- a Nat -- ] { array:set }

    ||| Modify the value at a certain index.
    def value(f) [ +Array(a) |- (*x a -- *y a) *x Nat -- *y ] {
        sip(value@ f) value!
    }

    ||| Replace the value at a certain index, returning the previous value.
    ||| Panic if the index is out of bounds ( 0 .. len-1 ).
    def replace! [ +Array(a) |- a Nat -- a ] { dup value@ dip:value! }

    ||| Insert a value at a certain index, shifting all other values up.
    ||| If the index is greater than length, the array is expanded until
    ||| the index equals the length, and then the value is pushed at the
    ||| end.
    def insert! [ +Array(a) |- a Nat -- ] {
        while(dup len@ <, sip:replace! 1+)
        value!
    }

    ||| Swap values at two indexes. If both indices are the same, this is a no-op.
    ||| If either index is out of bounds, expand the array until they are not.
    def swap! [ +Array(a) |- Nat Nat -- ] { dip(sip:value@) swap dip(replace!) value! }

    ||| Concatenate the given array to the end of this array.
    def cat! [ +Array(a) |- Array(a) -- ] { array(swap cat) }

    ||| Get a slice of the array between two indices.
    def slice@ [ +Array(a) |- Nat Nat -- Array(a) ] { array:sip:slice }

    ||| Get a prefix of the array up to a certain index.
    def prefix@ [ +Array(a) |- Nat -- Array(a) ] { array:sip:prefix }

    ||| Get a suffix of the array starting from a certain index.
    def suffix@ [ +Array(a) |- Nat -- Array(a) ] { array:sip:suffix }

    ||| Drop all array values after the given index, resulting in a
    ||| truncated array of the given length (if there are enough elements).
    def truncate! [ +Array(a) |- Nat -- ] { array:prefix }

    ||| Increase size of the array until it is at least as big
    ||| as the given length.
    def expand! [ +Array(a) |- a Nat -- ] { array:expand }

    ||| Set the length of the array, truncating or expanding
    ||| the array as necessary.
    def resize! [ +Array(a) |- a Nat -- ] {
        dup len@ < if(nip truncate!, expand!)
    }

    ||| Split the array in two at a given index.
    ||| If the index is out of bounds, the second array will be empty.
    def split! [ +Array(a) Nat -- +Array(a) +Array(a) ] { freeze split dip:thaw thaw }

    ||| Push at the end of the array, expanding the array as needed.
    def push!  [ +Array(a) |- a -- ] { array:push }

    ||| Push two elements to the end of the array, expanding the array as needed.
    def push2! [ +Array(a) |- a a -- ] { dip:push! push! }

    ||| Push three elements to the end of the array, expanding the array as needed.
    def push3! [ +Array(a) |- a a a -- ] { dip:push2! push! }

    ||| Push four elements to the end of the array, expanding the array as needed.
    def push4! [ +Array(a) |- a a a a -- ] { dip:push3! push! }

    ||| Push five elements to the end of the array, expanding the array as needed.
    def push5! [ +Array(a) |- a a a a a -- ] { dip:push4! push! }

    ||| Pop an element from the end of the array.
    ||| If the array is empty, panic.
    def pop! [ +Array(a) |- a ] { array:pop }

    ||| Pop two elements from the end of the array.
    ||| If the array does not have enough elements, panic.
    def pop2! [ +Array(a) |- a a ] { pop! dip:pop! }

    ||| Pop three values from the end of the array.
    ||| If the array does not have enough values, panic.
    def pop3! [ +Array(a) |- a a a ] { pop! dip:pop2! }

    ||| Pop four values from the end of the array.
    ||| If the array does not have enough values, panic.
    def pop4! [ +Array(a) |- a a a a ] { pop! dip:pop3! }

    ||| Pop five values from the end of the array.
    ||| If the array does not have enough values, panic.
    def pop5! [ +Array(a) |- a a a a a ] { pop! dip:pop4! }

    ||| Get base pointer to array data. This operation only works when the array has
    ||| flat data that is not subject to garbage collection / reference counting,
    ||| like Bool, U8, U16, U32, U64, I8, I16, I32, I64, F32, F64, Ptr, enums,
    ||| and single-field structs containing flat data. Attempting to use it in
    ||| other situations will result in a panic. Only access elements within
    ||| the given size, and only write to the array while you hold ownership.
    def base [ +Unsafe +Array(a) |- Ptr ] { array:with-base:id }
}

struct +ArrayBuilder(a) {
    +array: +Array(a)
    --
    def None [ +ArrayBuilder(a) ] { +Array.Nil >+array +ArrayBuilder }
    def finish-array! [ +ArrayBuilder(a) -- +Array(a) ] {
        /+ArrayBuilder +array>
    }
    def ; [ +ArrayBuilder(a) |- a -- ] {
        +array:push!
    }
}
