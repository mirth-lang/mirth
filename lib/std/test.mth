||| Unit testing harness. This library defines the [+Tests] and [+Test] resources,
||| which are used to build unit tests & help locate failures. To write tests,
||| follow this example:
|||
|||     def main [ +World -- +World ] {
|||         +Tests.Start!
|||         "addition" test (
|||             10 20 + => ( 30 )
|||             2 2 + => ( 4 )
|||         )
|||         "subtraction" test (
|||             10 20 - => ( -10 )
|||             2 2 - => ( 0 )
|||         )
|||         "swap" test (
|||             10 20 swap
|||                 => ( 10 )
|||                 => ( 20 )
|||         )
|||         +Tests.end!
|||     }
|||
||| Here's a breakdown:
|||
||| 1. Use [+Tests.start!] and [+Tests.end!] to delimit your tests.
|||    A summary will be printed, like "9 tests passed" or "1 of 9 tests failed".
|||    If any tests failed, the program will exit, with exit code 1.
|||
||| 2. Use [+Tests.test] to define a test, e.g. `"name" test(...)".
|||    The "name" is just a string name that will be useful to locate the
|||    test if it fails. The body `...` of the test has type signature
|||    `+Test -- +Test`. You can access the world by using the `world(f)` lens,
|||    e.g. `world(print)`.
|||
||| 3. Within a test, use `=>(f)` to pop a value off the stack and test it.
|||    If the value is different from what is expected, the test has failed
|||    and a message will be printed, like "expected 1, got 0".
|||    Note that the test will continue running even after it fails.
|||
||| If there are multiple values to test on the stack, you can use `=>`
||| several times, popping one value off each time. For example:
|||
|||     1 2 3
|||         => ( 3 )
|||         => ( 2 )
|||         => ( 1 )
|||
||| `=>` requires the verbs `=` and `repr;` be defined for the
||| type being tested. You can also pass different versions
||| explicitly:
|||
|||     "Hello" => ( "hello", dip(lower) = )
|||     [True] => ( [True], on2:run =, drop "<function>" )
module std.test

import std.prelude
import std.list
import std.world
import std.str
import std.maybe
import std.byte
import std.posix

||| The testing harness.
||| Construct it with [+Tests.start!].
||| Run a test with [+Tests.test(f)].
||| Destruct it with [+Tests.end!].
struct +Tests {
    num-tests: Nat   ||| Number of tests so far.
    num-failed: Nat  ||| Number of tests failed so far.
    --

    def +Tests(f) [ +World |- ( +Tests |- ) ] {
        +Tests.Start! f end!
    }

    ||| Create a test resource.
    def Start! [ +Tests ] {
        0u >num-tests
        0u >num-failed
        +Tests
    }

    ||| End the tests. This prints the number of tests
    ||| passed and failed to stdout.
    def end! [ +World |- +Tests -- ] {
        num-failed 0> if(
            print(num-failed int; " out of " ;
                  num-tests int; " tests failed." ;)
            1 posix-exit!,

            print(num-tests int; " tests passed.";)
        )
        /+Tests ldrop
    }

    ||| Run a test. You pass the test name on the stack, and
    ||| the body of the test as a parameter. For instance,
    |||
    |||     "my test" test (
    |||         1 1 + => (2)
    |||         2 2 + => (4)
    |||     )
    |||
    ||| Note the test name `"my test"` is only shown if the test fails.
    ||| As demonstrated here, you can run multiple checks within a test.
    def test(f) [ *x |- (+Test -- +Test) Str +Tests -- +Tests ]  {
        >test-name
        False >test-failed
        >+tests
        +Test
        f
        /+Test
        +tests>
        test-name> drop
        test-failed> then(num-failed:1+)
        num-tests: 1+
    }
}

||| A single test within the broader [+Tests] resource.
||| You can use [Int.=>], [Str.=>], & co within the test, to make a check.
||| You can use the [+Test.world] lens to access the world.
struct +Test {
    test-name: Str      ||| Name of this test.
    test-failed: Bool   ||| Did this test fail?
    +tests: +Tests      ||| The test harness.
    --
    ||| Declare that the test has failed.
    ||| Output `"<test name> test failed"` and set the [+Test.test-failed] flag.
    ||| If the test already failed before, do nothing instead.
    def fail! [ +World +Test |- ] {
        test-failed else(
            True test-failed!
            test-name print(repr; " test failed" ;)
        )
    }

    ||| Check two values for equality. If they're equal, do nothing.
    ||| If they're different, mark the test as failed (see [fail!])
    ||| and print the values.
    |||
    ||| We usually use `=>` instead of check-equals!
    def check-equals! (feq {=}, fshow {repr;}) [
        *x +World |-
            (a a -- Bool, a +Str -- +Str)
            a a +Test -- +Test
    ] {
        dup2 feq if(
            drop2,
            fail!
            print (
                "  expected: " ; fshow "\n" ;
                "       got: " ; fshow "\n" ;
            )
        )
    }

    ||| A convenient syntax for writing unit tests.
    ||| Evaluates the first argument and tests it against
    ||| the top of the stack.
    |||
    |||     10 20 + => (30)
    |||     1 2 3 => (3)
    |||           => (2)
    |||           => (1)
    |||
    def =>(f, feq {=}, fshow {repr;}) [
        *x +World |-
            (-- a, a a -- Bool, a +Str -- +Str)
            a +Test -- +Test
    ] {
        f check-equals!(feq, fshow)
    }
}
