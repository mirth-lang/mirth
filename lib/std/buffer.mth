module std.buffer

import std.prelude
import std.str
import std.byte
import std.array

struct +Buffer {
    +Array(U8)
    --
    def +array [ +Buffer -- +Array(U8) ] { /+Buffer }
    def +array(f) [ (+Array(U8) |- *x -- *y) +Buffer |- *x -- *y ] { /+Buffer f +Buffer }

    def New [ Size -- +Buffer ] { dip:0u8 >Nat-clamp +Array.New +Buffer }
    def rdrop [ +Buffer -- ] { /+Buffer rdrop }
    def size [ +Buffer |- Size ] { +array:len@ >Size }
    def base [ +Buffer |- Ptr  ] { +array:unsafe:base }

    ||| Resive buffer to given size.
    def resize! [ +Buffer |- Size -- ] { >Nat-clamp +array:resize! }

    ||| Resize buffer only if the new size is larger,
    ||| and resize by a factor of at least two.
    def expand! [ +Buffer |- Size -- ] {
        dup size > if(size 2 * max resize!, drop)
    }

    def erase-span! [ +Buffer |- Offset Size -- ] {
        clamp-span! swap base unsafe(+ erase)
    }

    def clamp-offset! [ +Buffer |- Offset -- Offset ] {
        0 Offset
        size offset
        clamp
    }

    def clamp-span! [ +Buffer |- Offset Size -- Offset Size ] {
        0 bytes max over + >endix >index
        @index:clamp-offset!
        @endix:clamp-offset!
        @index endix> index> - >Size
    }

    def prepare-span! [ +Buffer |- Offset Size -- Offset ] {
        over >Size + expand!
    }

    def prepare-aligned-span! [ +Buffer |- Nat Size -- Offset ] {
        dup dip(* >Offset) prepare-span!
    }

    def with-span!(f) [ ( *a Ptr -- *b ) +Buffer |- *a Offset Size -- *b ] {
        prepare-span! base unsafe:+ rdip:f
    }
    def with-aligned-span!(f)  [ ( *a Ptr -- *b ) +Buffer |- *a Nat Size -- *b ] {
        prepare-aligned-span! base unsafe:+ rdip:f
    }

    def u8@  [ +Buffer |- Offset -- U8  ] { |U8|  with-span!         (unsafe:@U8 ) }
    def u16@ [ +Buffer |- Nat    -- U16 ] { |U16| with-aligned-span! (unsafe:@U16) }
    def u32@ [ +Buffer |- Nat    -- U32 ] { |U32| with-aligned-span! (unsafe:@U32) }
    def u64@ [ +Buffer |- Nat    -- U64 ] { |U64| with-aligned-span! (unsafe:@U64) }
    def i8@  [ +Buffer |- Offset -- I8  ] { |I8|  with-span!         (unsafe:@I8 ) }
    def i16@ [ +Buffer |- Nat    -- I16 ] { |I16| with-aligned-span! (unsafe:@I16) }
    def i32@ [ +Buffer |- Nat    -- I32 ] { |I32| with-aligned-span! (unsafe:@I32) }
    def i64@ [ +Buffer |- Nat    -- I64 ] { |I64| with-aligned-span! (unsafe:@I64) }
    def f32@ [ +Buffer |- Nat    -- F32 ] { |F32| with-aligned-span! (unsafe:@F32) }
    def f64@ [ +Buffer |- Nat    -- F64 ] { |F64| with-aligned-span! (unsafe:@F64) }

    def u8!  [ +Buffer |- U8  Offset -- ] { |U8|  with-span!         (unsafe:!U8 ) }
    def u16! [ +Buffer |- U16 Nat    -- ] { |U16| with-aligned-span! (unsafe:!U16) }
    def u32! [ +Buffer |- U32 Nat    -- ] { |U32| with-aligned-span! (unsafe:!U32) }
    def u64! [ +Buffer |- U64 Nat    -- ] { |U64| with-aligned-span! (unsafe:!U64) }
    def i8!  [ +Buffer |- I8  Offset -- ] { |I8|  with-span!         (unsafe:!I8 ) }
    def i16! [ +Buffer |- I16 Nat    -- ] { |I16| with-aligned-span! (unsafe:!I16) }
    def i32! [ +Buffer |- I32 Nat    -- ] { |I32| with-aligned-span! (unsafe:!I32) }
    def i64! [ +Buffer |- I64 Nat    -- ] { |I64| with-aligned-span! (unsafe:!I64) }
    def f32! [ +Buffer |- F32 Nat    -- ] { |F32| with-aligned-span! (unsafe:!F32) }
    def f64! [ +Buffer |- F64 Nat    -- ] { |F64| with-aligned-span! (unsafe:!F64) }

    def byte@ [ +Buffer |- Offset -- Byte ] { u8@ >Byte }
    def byte! [ +Buffer |- Byte Offset -- ] { dip:>U8 u8! }

    def str@ [ +Buffer |- Offset Size -- Str ] { tuck with-span!(swap unsafe:Str.ClonePtrSlice) }
    def str! [ +Buffer |- Str Offset -- ] { over num-bytes with-span!(unsafe:!Str) }
}
