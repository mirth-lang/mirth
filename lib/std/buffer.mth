module(std.buffer)

import(std.prelude)
import(std.str)
import(std.byte)

data(+Buffer, +Buffer ->
    size: Size
    base: Ptr)

def(+Buffer.new, Size -- +Buffer,
    >size
    @size unsafe(Ptr.alloc) >base +Buffer
    0 >Offset size erase-span!)

def(+Buffer.resize!, Size +Buffer -- +Buffer,
    size >old-size
    size! size base:unsafe(swap Ptr.realloc)
    @old-size size < if(
        @old-size >Offset
        size old-size> -
        erase-span!,
        old-size> drop
    ))

||| Resize buffer only if the new size is larger,
||| and resize by a factor of at least two.
def(+Buffer.expand!, Size +Buffer -- +Buffer,
    dup size > if(size 2* max resize!, drop))

def(+Buffer.rdrop, +Buffer -- ,
    /+Buffer
    base> unsafe(free)
    size> drop)

def(+Buffer.erase-span!, Offset Size +Buffer -- +Buffer,
    dup2 check-span! swap base unsafe(offset erase))

def(+Buffer.check-span!, Offset Size +Buffer -- +Buffer,
    over 0< or(dup2 >Offset + size >Offset >)
    then("memory access out of bounds" panic!) drop2)

def(+Buffer.check-span-align!, Offset Size +Buffer -- +Buffer,
    dup2 check-span!
    dip(>Int) >Int % 0= else("memory access unaligned" panic!))

def(+Buffer.@U8, Offset +Buffer -- U8 +Buffer,
    dup 1 >Size check-span-align! base unsafe(offset Ptr.@U8))
def(+Buffer.@U16, Offset +Buffer -- U16 +Buffer,
    dup 2 >Size check-span-align! base unsafe(offset Ptr.@U16))
def(+Buffer.@U32, Offset +Buffer -- U32 +Buffer,
    dup 4 >Size check-span-align! base unsafe(offset Ptr.@U32))
def(+Buffer.@U64, Offset +Buffer -- U64 +Buffer,
    dup 8 >Size check-span-align! base unsafe(offset Ptr.@U64))

def(+Buffer.@I8, Offset +Buffer -- I8 +Buffer,
    dup 1 >Size check-span-align! base unsafe(offset Ptr.@I8))
def(+Buffer.@I16, Offset +Buffer -- I16 +Buffer,
    dup 2 >Size check-span-align! base unsafe(offset Ptr.@I16))
def(+Buffer.@I32, Offset +Buffer -- I32 +Buffer,
    dup 4 >Size check-span-align! base unsafe(offset Ptr.@I32))
def(+Buffer.@I64, Offset +Buffer -- I64 +Buffer,
    dup 8 >Size check-span-align! base unsafe(offset Ptr.@I64))

def(+Buffer.!U8, U8 Offset +Buffer -- +Buffer,
    dup 1 >Size check-span-align! base unsafe(offset Ptr.!U8))
def(+Buffer.!U16, U16 Offset +Buffer -- +Buffer,
    dup 2 >Size check-span-align! base unsafe(offset Ptr.!U16))
def(+Buffer.!U32, U32 Offset +Buffer -- +Buffer,
    dup 4 >Size check-span-align! base unsafe(offset Ptr.!U32))
def(+Buffer.!U64, U64 Offset +Buffer -- +Buffer,
    dup 8 >Size check-span-align! base unsafe(offset Ptr.!U64))

def(+Buffer.!I8, I8 Offset +Buffer -- +Buffer,
    dup 1 >Size check-span-align! base unsafe(offset Ptr.!I8))
def(+Buffer.!I16, I16 Offset +Buffer -- +Buffer,
    dup 2 >Size check-span-align! base unsafe(offset Ptr.!I16))
def(+Buffer.!I32, I32 Offset +Buffer -- +Buffer,
    dup 4 >Size check-span-align! base unsafe(offset Ptr.!I32))
def(+Buffer.!I64, I64 Offset +Buffer -- +Buffer,
    dup 8 >Size check-span-align! base unsafe(offset Ptr.!I64))

def(+Buffer.!Byte, Byte Offset +Buffer -- +Buffer,
    dip(>U8) !U8)

def(+Buffer.!Str, Str Offset +Buffer -- +Buffer,
    dup2 swap num-bytes check-span!
    base unsafe(offset !Str+ drop))

def(+Buffer.@Str, Offset Size +Buffer -- Str +Buffer,
    dup2 check-span!
    base unsafe(swap dip(offset) Str.ClonePtrSlice))
