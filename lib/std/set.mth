module(std.set)

import(std.prelude)
import(std.buffer)

||| Represents a set as a bit string.
data(+Set(t), +Set -> [t -- Nat] +Buffer)
def(+Set.~Buffer(f), (*a +Buffer -- *b +Buffer) *a +Set(t) -- *b +Set(t),
    /+Set dip(f) +Set)
def(+Set.index, t +Set(t) -- Nat +Set(t),
    /+Set dup rdip(dip(run)) +Set)

def(SET_INITIAL_SIZE, Size, 256 >Size)

def(+Set.new(f), (t -- Nat) -- +Set(t), [f] SET_INITIAL_SIZE +Buffer.new +Set)
def(+Set.rdrop, +Set(t) --, /+Set drop rdrop)

def(+Set.offset-mask, t +Set(t) -- Offset U8 +Set(t),
    index 8 >Nat /% over 1+ >Size ~Buffer(expand!)
    dip(>Offset) 1 >Nat swap << >U8)

def(+Set.member?, t +Set(t) -- Bool +Set(t),
    offset-mask ~Buffer(swap @U8) & >Int 0 <>)
def(+Set.insert!, t +Set(t) -- +Set(t),
    offset-mask ~Buffer(over @U8 | swap !U8))
def(+Set.remove!, t +Set(t) -- +Set(t),
    offset-mask 0xFF >U8 ^ ~Buffer(over @U8 & swap !U8))
