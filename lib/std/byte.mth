module std.byte

import std.prelude
import std.maybe
import std.str
import std.list

data Byte {
    0x00 BNUL,    BSOH,    BSTX,   BETX,     BEOT,   BENQ,     BACK, BBEL,
    0x08 BBS,     BHT,     BLF,    BVT,      BFF,    BCR,      BSO,  BSI,
    0x10 BDLE,    BDC1,    BDC2,   BDC3,     BDC4,   BNAK,     BSYN, BETB,
    0x18 BCAN,    BEM,     BSUB,   BESC,     BFS,    BGS,      BRS,  BUS,
    0x20 BSPACE,  B'!',    BQUOTE, BHASH,    B'$',   B'%',     B'&', BTICK,
    0x28 BLPAREN, BRPAREN, B'*',   B'+',     BCOMMA, B'-',     BDOT, B'/',
    0x30 B'0',    B'1',    B'2',   B'3',     B'4',   B'5',     B'6', B'7',
    0x38 B'8',    B'9',    BCOLON, B';',     B'<',   B'=',     B'>', B'?',
    0x40 B'@',    B'A',    B'B',   B'C',     B'D',   B'E',     B'F', B'G',
    0x48 B'H',    B'I',    B'J',   B'K',     B'L',   B'M',     B'N', B'O',
    0x50 B'P',    B'Q',    B'R',   B'S',     B'T',   B'U',     B'V', B'W',
    0x58 B'X',    B'Y',    B'Z',   BLSQUARE, B'\',   BRSQUARE, B'^', B'_',
    0x60 B'`',    B'a',    B'b',   B'c',     B'd',   B'e',     B'f', B'g',
    0x68 B'h',    B'i',    B'j',   B'k',     B'l',   B'm',     B'n', B'o',
    0x70 B'p',    B'q',    B'r',   B's',     B't',   B'u',     B'v', B'w',
    0x78 B'x',    B'y',    B'z',   BLCURLY,  B'|',   BRCURLY,  B'~', BDEL,

    0x80 Bx80 Bx81 Bx82 Bx83 Bx84 Bx85 Bx86 Bx87
    0x88 Bx88 Bx89 Bx8A Bx8B Bx8C Bx8D Bx8E Bx8F
    0x90 Bx90 Bx91 Bx92 Bx93 Bx94 Bx95 Bx96 Bx97
    0x98 Bx98 Bx99 Bx9A Bx9B Bx9C Bx9D Bx9E Bx9F
    0xA0 BxA0 BxA1 BxA2 BxA3 BxA4 BxA5 BxA6 BxA7
    0xA8 BxA8 BxA9 BxAA BxAB BxAC BxAD BxAE BxAF
    0xB0 BxB0 BxB1 BxB2 BxB3 BxB4 BxB5 BxB6 BxB7
    0xB8 BxB8 BxB9 BxBA BxBB BxBC BxBD BxBE BxBF
    0xC0 BxC0 BxC1 BxC2 BxC3 BxC4 BxC5 BxC6 BxC7
    0xC8 BxC8 BxC9 BxCA BxCB BxCC BxCD BxCE BxCF
    0xD0 BxD0 BxD1 BxD2 BxD3 BxD4 BxD5 BxD6 BxD7
    0xD8 BxD8 BxD9 BxDA BxDB BxDC BxDD BxDE BxDF
    0xE0 BxE0 BxE1 BxE2 BxE3 BxE4 BxE5 BxE6 BxE7
    0xE8 BxE8 BxE9 BxEA BxEB BxEC BxED BxEE BxEF
    0xF0 BxF0 BxF1 BxF2 BxF3 BxF4 BxF5 BxF6 BxF7
    0xF8 BxF8 BxF9 BxFA BxFB BxFC BxFD BxFE BxFF

    --

    inline (
        def >Int [ Byte -- Int ] { enum-value >Int }
        def >Nat [ Byte -- Nat ] { >Int >Nat-unsafe }
        def >U8  [ Byte -- U8  ] { >Int >U8-wrap  }
        def >U16 [ Byte -- U16 ] { >Int >U16-wrap }
        def >U32 [ Byte -- U32 ] { >Int >U32-wrap }
        def >U64 [ Byte -- U64 ] { >Int >U64-wrap }

        def Int.>Byte-if(f,g) [ (*a Byte -- *b, *a Int -- *b) *a Int -- *b ] { >U8-if(>Byte f, g) }
        def Int.>Byte-else(f) [ (*a Int -- *a Byte) *a Int -- *a Byte ] { >Byte-if(id, f) }
        def Int.>Byte? [ Int -- Maybe(Byte) ] { >Byte-if(Some, drop None) }
        def Int.>Byte-wrap [ Int -- Byte ] { >U8-wrap >Byte }
        def Int.>Byte-clamp [ Int -- Byte ] { >U8-clamp >Byte }

        ||| Convert Int to Byte. Valid only if Int is between 0 and 255 inclusive.
        def Int.>Byte-unsafe [ Int -- Byte ] { >EnumValue-unsafe Byte.from-enum-value-unsafe }
        def U8.>Byte [ U8 -- Byte ] { >Int >Byte-unsafe }

        def compare  [ Byte Byte -- Comparison ] { on2:>U8 .compare }
        def == [ Byte Byte -- Bool ] { on2:>U8 == }
        def <  [ Byte Byte -- Bool ] { on2:>U8 <  }
        def <= [ Byte Byte -- Bool ] { on2:>U8 <= }
        def >  [ Byte Byte -- Bool ] { on2:>U8 >  }
        def >= [ Byte Byte -- Bool ] { on2:>U8 >= }
        def <> [ Byte Byte -- Bool ] { on2:>U8 <> }

        def Ptr.@Byte [ Ptr +Unsafe -- Byte +Unsafe ] { @U8 >Byte }
        def Ptr.!Byte [ Byte Ptr +Unsafe -- +Unsafe ] { dip(>U8) !U8 }

        def is-upper [ Byte -- Bool ] { Byte.B'A' Byte.B'Z' in-range }
        def is-lower [ Byte -- Bool ] { Byte.B'a' Byte.B'z' in-range }
        def is-digit [ Byte -- Bool ] { Byte.B'0' Byte.B'9' in-range }
        def is-alpha [ Byte -- Bool ] { or(is-upper, is-lower) }
        def is-alnum [ Byte -- Bool ] { or(is-digit, is-alpha) }
        def is-printable [ Byte -- Bool ] { Byte.B'!' Byte.B'~' in-range }
        def is-octdigit [ Byte -- Bool ] { Byte.B'0' Byte.B'7' in-range }
        def is-hexdigit [ Byte -- Bool ] {
            or(
                is-digit,
                Byte.B'A' Byte.B'F' in-range,
                Byte.B'a' Byte.B'f' in-range
            )
        }
        def is-ascii [ Byte -- Bool ] { Byte.BNUL Byte.BDEL in-range }
        def is-upper-or-underscore [ Byte -- Bool ] {
            dup on2(is-upper, Byte.B'_' ==) or
        }
        def is-sign [ Byte -- Bool ] {
            dup on2(Byte.B'-' ==, Byte.B'+' ==) or
        }

        def emit-unsafe; [ +Str Byte -- +Str ] { push-byte-unsafe! }
        def emit-ascii;  [ +Str Byte -- +Str ] { push-byte-ascii!  }
    )

    def to-str-unsafe [ Byte -- Str ] {
        L1 Str.from-bytes-unsafe
    }

    def to-ascii-str [ Byte -- Maybe(Str) ] {
        dup Byte.BNUL Byte.BDEL in-range if(
            to-str-unsafe Some,
            drop None
        )
    }

    def is-string-end [ Byte -- Bool ] {
        { BQUOTE -> True }
        { BLF -> True }
        { BNUL -> True }
        { _ -> drop False }
    }

    def to-lower [ Byte -- Byte ] {
        dup is-upper then(>U8 0x20u8 add-wrap >Byte)
    }

    def to-upper [ Byte -- Byte ] {
        dup is-lower then(>U8 0x20u8 sub-wrap >Byte)
    }

    def OneHexDigit [ U8 -- Byte ] {
        dup 9u8 > if(55u8, 48u8) add-wrap >Byte
    }

    def to-hexdigits [ Byte -- Byte Byte ] {
        >U8
        dup 4u8 rshift Byte.OneHexDigit
        swap 0xFu8 and Byte.OneHexDigit
    }

    def is-name-byte [ Byte -- Bool ] {
        { BLPAREN -> False }
        { BRPAREN -> False }
        { BLSQUARE -> False }
        { BRSQUARE -> False }
        { BLCURLY -> False }
        { BRCURLY -> False }
        { BCOMMA -> False }
        { BQUOTE -> False }
        { BCOLON -> False }
        { BDEL -> False }
        { _ -> Byte.BSPACE > }
    }

    def zencode [ Byte -- Str ] { str:zencode; }
    def zencode; [ +Str Byte -- +Str ] {
        ||| Encode byte as a readable string of alphanumeric or underscore characters.
        ||| Alphanumeric ASCII characters other than 'z' and 'Z' are left as is.
        ||| Otherwise, they are encoded as a string beginning with 'z' or 'Z'.

        # Important invariant: No string here should be the prefix of another.
        # With this invariant we can ensure that the z-encoding of any string
        # is unique. To help enforce the invariant, keep these cases in
        # lexicographical order.

        { B'&' -> "ZAmp"; } { B'?' -> "ZAsk"; } { B'@' -> "ZAt"; }
        { B'\' -> "ZBSlash"; } { B'!' -> "ZBang"; }
        { B'^' -> "ZCaret"; } { BCOLON -> "ZColon"; } { BCOMMA -> "ZComma"; }
        { B'/' -> "ZDiv"; } { B'$' -> "ZDollar"; } { BDOT -> "ZDot"; }
        { B'=' -> "ZEqual"; }
        { BHASH -> "ZHash"; }
        { BLCURLY  -> "ZLCurly"; }
        { BLPAREN  -> "ZLParen"; }
        { BLSQUARE -> "ZLSquare"; }
        { B'<'  -> "ZLess"; }
        { B'%' -> "ZMod"; }
        { B'*' -> "ZMul"; }
        { B'|' -> "ZPipe"; }
        { B'+' -> "ZPlus"; }
        { BQUOTE -> "ZQuote"; }
        { BRCURLY  -> "ZRCurly"; }
        { BRPAREN  -> "ZRParen"; }
        { BRSQUARE -> "ZRSquare"; }
        { B';' -> "ZThen"; }
        { BTICK -> "ZTick"; }
        { B'~' -> "ZTilde"; }
        { B'>' -> "ZTo"; }

        { B'Z' -> "ZZ"; } { B'-'  -> "Z_"; }
        { B'z' -> "zz"; } { B'_' -> "z_"; }

        { _ -> dup is-alnum if(emit-unsafe; , "Z"; int; "U";) }
    }

    def int; [ +Str Byte -- +Str ] {
        >Int int;
    }
}
