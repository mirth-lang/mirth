module std.file

import std.prelude
import std.path
import std.str
import std.world
import std.input
import std.output
import std.posix
import std.ctypes
import std.maybe
import std.result

data IOError {
    OpenFailed [ Path Errno ]
    CreateFailed [ Path Errno ]
    CreateUnsupported [ Path ]
    CloseFailed [ Errno ]
    ReadFailed [ Errno ]
    WriteFailed [ Size Errno ]
    --
    def message; [ +World +Str IOError -- +World +Str ] {
        { OpenFailed -> "Failed to open "; dip:path; ": "; rdip:posix-strerror! ; }
        { CreateFailed -> "Failed to create "; dip:path; ": "; rdip:posix-strerror! ; }
        { CreateUnsupported -> "Failed to create "; path; ": Unsupported platform"; }
        { CloseFailed -> "Close file failed: "; rdip:posix-strerror! ; }
        { ReadFailed -> "Failed to read from file: "; rdip:posix-strerror! ;}
        { WriteFailed -> "Failed to write to file: "; rdip:posix-strerror! ; drop}
    }
    def message [ +World IOError -- +World Str ] {
        str:message;
    }

}

struct +File {
    +fd: +FileDescriptor
    owned: Bool
    --
    def is-stdin?  [ +File -- +File Bool ] { +fd:is-stdin?  }
    def is-stdout? [ +File -- +File Bool ] { +fd:is-stdout? }
    def is-stderr? [ +File -- +File Bool ] { +fd:is-stderr? }

    ||| Close an open file.
    ||| This function does not close stdin, stdout, stderr file handles.
    def close-file! [ +World +File -- +World Maybe(IOError) ] {
        /+File owned> if(
            posix-close! >Maybe(unsafe:posix-errno! IOError.CloseFailed),
            +fd> rdrop-unsafe None
        )
    }

    def read-file! [ +File -- Str +File ] {
        +Input.start!
        read-file!
        end!
    }

    inline (
        def input(f) [ (*a +Input -- *b +Input) *a +File -- *b +File ] {
            +Input.start! f +Input.end!
        }

        def output(f) [ (*a +Output -- *b +Output) *a +File -- *b +File ] {
            +Output.start! f +Output.end!
        }
    )
}

def +World.open-file! [ Path +World -- +World +Result(IOError, +File) ] {
    dup >path
    OpenFlags.None >flags
    FileMode.None >mode
    posix-open! +if(
        drop >+fd True >owned +File +Ok,
        unsafe:posix-errno! IOError.OpenFailed +Err
    )
}

def +World.create-file! [ Path +World -- +World +Result(IOError, +File) ] {
    create-file-flags if?(
        >flags
        dup >path
        FileMode.Default >mode
        posix-open! +if(
            drop >+fd True >owned +File +Ok,
            unsafe:posix-errno! IOError.CreateFailed +Err
        ),
        IOError.CreateUnsupported +Err
    )
}

def +World.stdin-file  [ +World -- +World +File ] { +FileDescriptor.Stdin  >+fd False >owned +File }
def +World.stdout-file [ +World -- +World +File ] { +FileDescriptor.Stdout >+fd False >owned +File }
def +World.stderr-file [ +World -- +World +File ] { +FileDescriptor.Stderr >+fd False >owned +File }

def +World.create-file-flags [ +World -- +World Maybe(OpenFlags) ] {
    running-os match(
        { Mac -> 0x601 >CInt OpenFlags Some } # O_WRONLY = 0x1, O_CREAT = 0x200, O_TRUNC = 0x400
        { Linux -> 0x241 >CInt OpenFlags Some } # O_WRONLY = 0x1, O_CREAT = 0x40, O_TRUNC = 0x200
        { Windows -> 0x301 >CInt OpenFlags Some } # O_WRONLY = 0x1, O_CREAT|O_TRUNC = 0x300
        { Unknown -> None }
    )
}

||| Write some bytes to an open file.
|||
||| This function will continue trying to write until either all bytes
||| have been written, or an error has occured, whichever comes first.
|||
||| Returns: (# of bytes written) (whether the operation was succesful)
||| So the possible outcomes are:
|||
||| * Nothing has been written and an error occured when trying to write. [ 0 False ]
||| * Something was written but an error occured before everything could be written. [ m False ]
||| * Everything was written and no error occured. [ n True ]
||| * Stuck in a loop trying to write but no bytes are being written and no error occurs.
def +File.write-bytes! [ ptr:Ptr size:Size +File +Unsafe -- Result(IOError, Size) +File +Unsafe ] {
    0 bytes Ok >result
    while(
        @size 0B>,

        @result: match (
            { Err -> Err 0 bytes !size }
            { Ok ->
                with-fd(
                    @ptr >ptr
                    @size >size
                    posix-write!
                )
                match {
                    { Ok ->
                        dup +
                        dup offset @ptr:+
                        @size(swap -)
                        Ok
                    }
                    { Err ->
                        IOError.WriteFailed Err
                        0 bytes !size
                    }
                }
            }
        )
    )
    size> ptr> drop2
    result>
}

# def +File.with-fd(f) [ (*a +fd:+FileDescriptor -- *b +fd:+FileDescriptor) *a +File -- *b +File ] {
#     +fd(!+fd(f))
# }

def +File.with-fd(f) [ (*a +fd:+FileDescriptor +Unsafe -- *b +fd:+FileDescriptor +Unsafe ) *a +File +Unsafe -- *b +File +Unsafe ] {
    rswap +fd(!+fd(f)) rswap
}

||| Read from an open file into a buffer.
|||
||| Returns: (# of bytes read) (whether an error has occurred).
||| The possible outcomes are:
|||
||| * File was read from succesfully. [ n True ]
||| * An error has occurred while trying to read. [ 0 False ]
def(+File.read-bytes!, ptr:Ptr size:Size +File +Unsafe -- Result(IOError, Size) +File +Unsafe,
    with-fd:posix-read!
    if(Ok, IOError.ReadFailed Err))

def +World.read-path! [ +World |- Path -- Result(IOError, Str) ] {
    open-file! +if(
        read-file! close-file! if?(nip Err, Ok),
        Err
    )
}
