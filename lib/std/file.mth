module(std.file)

import(std.prelude)
import(std.path)
import(std.str)
import(std.world)
import(std.input)
import(std.output)
import(std.posix)
import(std.ctypes)

data(+File, +File ->
    file-descriptor: Int
    owned: Bool)

data(+File?, +FileOk -> +File, +FileErr -> Str)
def(+File?.unwrap!, +File? -- +File,
    +FileOk -> id,
    +FileErr -> panic!)

def(+World.open-file!, Path +World -- +World +File?,
    dup >Str 0 0 posix-open!
    dup 0> if(
        nip >file-descriptor True >owned +File +FileOk,
        drop Str("failed to open file: " ; >Str show;) +FileErr
    ))

def(+World.create-file!, Path +World -- +World +File?,
    dup >Str
    O_WRONLY|O_CREAT|O_TRUNC
    0o666 posix-open!
    dup 0> if(
        nip >file-descriptor True >owned +File +FileOk,
        drop Str("failed to create file: " ; >Str show;) +FileErr
    ))

def(+World.stdin-file, +World -- +World +File,
    0 >file-descriptor False >owned +File)
def(+World.stdout-file, +World -- +World +File,
    1 >file-descriptor False >owned +File)
def(+World.stderr-file, +World -- +World +File,
    2 >file-descriptor False >owned +File)

def(+File.is-stdin?,  +File -- +File Bool, file-descriptor 0=)
def(+File.is-stdout?, +File -- +File Bool, file-descriptor 1 ==)
def(+File.is-stderr?, +File -- +File Bool, file-descriptor 2 ==)

def(O_WRONLY|O_CREAT|O_TRUNC, Int,
    RUNNING_OS match(
        OS_MACOS -> 0x601, # O_WRONLY = 0x1, O_CREAT = 0x200, O_TRUNC = 0x400
        OS_LINUX -> 0x241, # O_WRONLY = 0x1, O_CREAT = 0x40, O_TRUNC = 0x200
        OS_WINDOWS -> 0x301, # O_WRONLY = 0x1, O_CREAT|O_TRUNC = 0x300
        OS_UNKNOWN -> "O_WRONLY|O_CREAT|O_TRUNC on unknown os" panic!
    ))

def(+File.close-file!, +World +File -- +World,
    /+File owned> if(
        file-descriptor> posix-close!
        expect!(dup 0< not, "failed to close file")
        drop,

        file-descriptor> drop
    ))

def(+File.unsafe-write!, Ptr Size +File -- +File,
    dip2(file-descriptor) dup dip(>Int posix-write!)
    dip(expect!(dup 0< not, "write failed") >Size)
    expect!(dup2 ==, "write output fewer bytes than expected")
    drop2)

def(+File.unsafe-read!, Ptr Size +File -- Size +File,
    dip2(file-descriptor) >Int posix-read!
    expect!(dup 0< not, "read failed")
    >Size)

def(+File.read-file!, +File -- Str +File,
    +Input.start!
    read-file!
    end!)

inline (
    def(+File.input(f), (*a +Input -- *b +Input) *a +File -- *b +File,
        file-descriptor dip(
            +Input.start! f +Input.end!
        )
        expect!(dup file-descriptor ==, "file descriptor changed unexpectedly during +File.input(f)")
        drop)

    def(+File.output(f), (*a +Output -- *b +Output) *a +File -- *b +File,
        file-descriptor dip(
            +Output.start! f +Output.end!
        )
        expect!(dup file-descriptor ==, "file descriptor changed unexpectedly during +File.output(f)")
        drop)
)
