module std.file

import std.prelude
import std.path
import std.str
import std.world
import std.input
import std.output
import std.posix
import std.ctypes
import std.maybe
import std.result

struct +File {
    file-descriptor: Int
    owned: Bool
    --
    def is-stdin?  [ +File -- +File Bool ] { file-descriptor 0 == }
    def is-stdout? [ +File -- +File Bool ] { file-descriptor 1 == }
    def is-stderr? [ +File -- +File Bool ] { file-descriptor 2 == }

    ||| Close an open file.
    ||| This function does not close stdin, stdout, stderr file handles.
    def close-file! [ +World +File -- +World ] {
        /+File owned> if(
            file-descriptor> posix-close!
            expect!(dup 0 >=, "Error while closing file.")
            drop,
            file-descriptor> drop
        )
    }

    def read-file! [ +File -- Str +File ] {
        +Input.start!
        read-file!
        end!
    }

    inline (
        def input(f) [ (*a +Input -- *b +Input) *a +File -- *b +File ] {
            +Input.start! f +Input.end!
        }

        def output(f) [ (*a +Output -- *b +Output) *a +File -- *b +File ] {
            +Output.start! f +Output.end!
        }
    )
}

def +World.open-file! [ Path +World -- +World +Result(Str, +File) ] {
    dup >Str 0 0 posix-open!
    dup 0> if(
        nip >file-descriptor True >owned +File +Ok,
        drop Str("Failed to open file: " ; >Str show;) +Err
    )
}

def +World.create-file! [ Path +World -- +World +Result(Str, +File) ] {
    dup >Str
    create-file-flags if?(
        0o666 posix-open!
        dup 0> if(
            nip >file-descriptor True >owned +File +Ok,
            drop Str("Failed to create file: " ; >Str show;) +Err
        ),
        drop2 "Don't know how to create file on unknown OS." +Err
    )
}

def +World.stdin-file  [ +World -- +World +File ] { 0 >file-descriptor False >owned +File }
def +World.stdout-file [ +World -- +World +File ] { 1 >file-descriptor False >owned +File }
def +World.stderr-file [ +World -- +World +File ] { 2 >file-descriptor False >owned +File }

def +World.create-file-flags [ +World -- +World Maybe(Int) ] {
    running-os match(
        { Mac -> 0x601 Some } # O_WRONLY = 0x1, O_CREAT = 0x200, O_TRUNC = 0x400
        { Linux -> 0x241 Some } # O_WRONLY = 0x1, O_CREAT = 0x40, O_TRUNC = 0x200
        { Windows -> 0x301 Some } # O_WRONLY = 0x1, O_CREAT|O_TRUNC = 0x300
        { Unknown -> None }
    )
}

||| Write some bytes to an open file.
|||
||| This function will continue trying to write until either all bytes
||| have been written, or an error has occured, whichever comes first.
|||
||| Returns: (# of bytes written) (whether the operation was succesful)
||| So the possible outcomes are:
|||
||| * Nothing has been written and an error occured when trying to write. [ 0 False ]
||| * Something was written but an error occured before everything could be written. [ m False ]
||| * Everything was written and no error occured. [ n True ]
||| * Stuck in a loop trying to write but no bytes are being written and no error occurs.
def +Unsafe.write-bytes! [ Ptr USize +File +Unsafe -- USize Bool +File +Unsafe ] {
    >slice-size >slice-base
    True >success
    0u >USize >wrote-bytes
    while(
        @slice-size 0> @success &&,

        rdip:file-descriptor @slice-base @slice-size >Int posix-write!
        >USize-if (
            dup @wrote-bytes:+
            dup >UOffset @slice-base:uoffset
            @slice-size(swap - >USize-if(id, drop 0u >USize)),

            drop False !success
        )
    )
    slice-size> slice-base> drop2
    wrote-bytes> success>
}

||| Read from an open file into a buffer.
|||
||| Returns: (# of bytes read) (whether an error has occurred).
||| The possible outcomes are:
|||
||| * File was read from succesfully. [ n True ]
||| * An error has occurred while trying to read. [ 0 False ]
def(+Unsafe.read-bytes!, Ptr USize +File +Unsafe -- USize Bool +File +Unsafe,
    dip2(rdip:file-descriptor) >Int posix-read!
    >USize-if(True, drop 0u >USize False))
