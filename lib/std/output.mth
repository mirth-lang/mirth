module std.output

import std.prelude
import std.str
import std.byte
import std.buffer
import std.file

def OUTPUT_BUFFER_SIZE [ USize ] { 4096 >Nat-clamp >USize }

struct +Output {
    size: USize
    +file: +File
    +buffer: +Buffer
    --

    def start! [ +File -- +Output ] {
        >+file
        0u >USize >size
        OUTPUT_BUFFER_SIZE +Buffer.new >+buffer
        +Output
    }

    def end! [ +Output -- +File ] {
        flush! /+Output
        size> drop
        +buffer> rdrop
        +file>
    }

    def flush! [ +Output -- +Output ] {
        +buffer:base size +file:unsafe:write-bytes! drop2
        0u >USize size!
    }

    def offset [ +Output -- +Output UOffset ] {
        size >UOffset
    }

    def capacity-total [ +Output -- USize +Output ] { +buffer:size }
    def capacity-remaining [ +Output -- USize +Output ] { capacity-total size - >USize-if(id, drop 0u >USize) }
    def full? [ +Output -- Bool +Output ] { capacity-remaining 0= }

    def put [ Str +Output -- +Output ] {
        dup num-bytes capacity-remaining > if(
            flush! dup num-bytes capacity-total >= if(
                with-data(+file:unsafe:write-bytes! drop2),
                put
            ),

            dup offset +buffer:!Str
            num-bytes size:+
        )
    }

    def put-byte [ Byte +Output -- +Output ] {
        full? then(flush!)
        offset +buffer:!Byte
        size:1+
    }

    def line [ +Output -- +Output ] {
        Byte.BLF put-byte
    }

    def put-line [ Str +Output -- +Output ] {
        put line
    }
}
