module(std.output)

import(std.prelude)
import(std.str)
import(std.byte)
import(std.buffer)
import(std.file)

def(OUTPUT_BUFFER_SIZE, USize, 4096 .u >USize)
data(+Output, +Output ->
    size: USize
    +file: +File
    +buffer: +Buffer)

def(+Output.start!, +File -- +Output,
    >+file
    0u >USize >size
    OUTPUT_BUFFER_SIZE +Buffer.new >+buffer
    +Output)

def(+Output.end!, +Output -- +File,
    flush! /+Output
    size> drop
    +buffer> rdrop
    +file>)

def(+Output.flush!, +Output -- +Output,
    +buffer:base size +file:unsafe:write-bytes! drop2
    0u >USize size!)

def(+Output.offset, +Output -- +Output UOffset, size >UOffset)

def(+Output.capacity-total, +Output -- USize +Output, +buffer:size)
def(+Output.capacity-remaining, +Output -- USize +Output, capacity-total size - >USize(id, drop 0u >USize))
def(+Output.full?, +Output -- Bool +Output, capacity-remaining 0=)

def(+Output.put, Str +Output -- +Output,
    dup num-bytes capacity-remaining > if(
        flush! dup num-bytes capacity-total >= if(
            with-data(+file:unsafe:write-bytes! drop2),
            put
        ),

        dup offset +buffer:!Str
        num-bytes size:+
    ))

def(+Output.put-byte, Byte +Output -- +Output,
    full? then(flush!)
    offset +buffer:!Byte
    size:1+)

def(+Output.line, +Output -- +Output, BLF put-byte)

def(+Output.put-line, Str +Output -- +Output, put line)
