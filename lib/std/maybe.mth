module(std.maybe)

import(std.prelude)
import(std.list)
import(std.str)

data Maybe(t) {
    0 None
    1 Some [ t ]
}

inline (
    def Maybe.none? [ Maybe(t) -- Bool ] { enum-value 0 == }
    def Maybe.some? [ Maybe(t) -- Bool ] { enum-value 1 == }
    def Maybe.>Bool [ Maybe(t) -- Bool ] { some? }
    def Maybe.not [ Maybe(t) -- Bool ] { none? }
    def Maybe.if(f,g) { some? if(f,g) }
    def Maybe.then(f) { some? then(f) }
    def Maybe.else(f) { none? then(f) }
    def Maybe.and(f)  { some? and(f) }
    def Maybe.or(f)   { some? or(f) }

    def Maybe.if-some(f,g)  { { Some -> f    } { None -> g     } }
    def Maybe.or-some(f)    { { Some -> Some } { None -> f     } }
    def Maybe.unwrap(f)     { { Some -> id } { None -> f } }
)

def Maybe.>List [ Maybe(t) -- List(t) ] {
    { None -> L0 }
    { Some -> L1 }
}

def Maybe.==(eq) [ (*c a a -- *c Bool) *c Maybe(a) Maybe(a) -- *c Bool ] {
    { None -> none? }
    { Some -> swap if-some(swap eq, drop False) }
}

def Maybe.compare(cmp) [ (*c a a -- *c Comparison) *c Maybe(a) Maybe(a) -- *c Comparison ] {
    { None -> match {
        { None -> EQ }
        { Some -> drop GT }
    } }
    { Some -> swap match {
        { None -> drop LT }
        { Some -> swap cmp }
    }}
}

def Maybe.map(f)  { { Some -> f Some } { None -> None  } }
def Maybe.bind(f) { { Some -> f      } { None -> None  } }
def Maybe.for(f)  { { Some -> f      } { None -> id    } }
def Maybe.has(f)  { { Some -> f      } { None -> False } }
def Maybe.all(f)  { { Some -> f      } { None -> True  } }

def Maybe.filter(f) [ (*a b -- *a Bool) *a Maybe(b) -- *a Maybe(b) ] {
    { Some -> dup dip(f) swap if(Some, drop None) }
    { None -> None }
}

inline (
    def while-some(f,g) [ (*a -- *a Maybe(b), *a b -- *a) *a -- *a ] {
        while(f if-some(g True, False))
    }

    def while-none(f,g) [ (*a -- *a Maybe(b), *a -- *a) *a -- *a b ] {
        None while(drop f dup if(False, dip:g True))
        unwrap(impossible!)
    }
)

def Maybe.map2(f) [ (*c x y -- *c z) *c Maybe(x) Maybe(y) -- *c Maybe(z) ] {
    { None -> drop None }
    { Some ->
        swap match {
            { None -> drop None }
            { Some -> swap f Some }
        }
    }
}

def Maybe.zip [ Maybe(x) Maybe(y) -- Maybe([x y]) ] { map2(pack2) }

def Maybe.show;(f) [ (t +Str -- +Str) Maybe(t) +Str -- +Str ] {
    { None -> "None" ; }
    { Some -> f " Some" ; }
}

def Maybe.show(f) [ (t +Str -- +Str) Maybe(t) -- Str ] {
    Str( show;(f) )
}
