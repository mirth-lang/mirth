module(std.maybe)

import(std.prelude)
import(std.list)
import(std.str)

inline (
    data (Maybe(t), None, Some -> t)

    def Maybe.none? [ Maybe(t) -- Bool ] {
        { None -> True }
        { Some -> drop False }
    }
    def Maybe.some? [ Maybe(t) -- Bool ] {
        { None -> False }
        { Some -> drop True }
    }
    def Maybe.>Bool [ Maybe(t) -- Bool ] {
        some?
    }
    def Maybe.>List [ Maybe(t) -- List(t) ] {
        { None -> L0 }
        { Some -> L1 }
    }
    def Maybe.==(eq) [ (*c a a -- *c Bool) *c Maybe(a) Maybe(a) -- *c Bool ] {
        { None -> none? }
        { Some -> swap if-some(swap eq, drop False) }
    }

    def Maybe.if(f,g) { { Some -> drop f     } { None -> g     } }
    def Maybe.then(f) { { Some -> drop f     } { None -> id    } }
    def Maybe.else(g) { { Some -> drop       } { None -> g     } }
    def Maybe.and(f)  { { Some -> drop f     } { None -> False } }
    def Maybe.or(f)   { { Some -> drop True  } { None -> f     } }
    def Maybe.not     { { Some -> drop False } { None -> True  } }

    def Maybe.if-some(f,g)  { { Some -> f    } { None -> g     } }
    def Maybe.or-some(f)    { { Some -> Some } { None -> f     } }

    def Maybe.unwrap(f)     { { Some -> id } { None -> f } }
    def Maybe.unwrap        { unwrap("tried to unwrap None" panic!) }

    def Maybe.map(f)  { { Some -> f Some } { None -> None  } }
    def Maybe.bind(f) { { Some -> f      } { None -> None  } }
    def Maybe.for(f)  { { Some -> f      } { None -> id    } }
    def Maybe.has(f)  { { Some -> f      } { None -> False } }
    def Maybe.all(f)  { { Some -> f      } { None -> True  } }

    def Maybe.filter(f) [ (*a b -- *a Bool) *a Maybe(b) -- *a Maybe(b) ] {
        { Some -> dup dip(f) swap if(Some, drop None) }
        { None -> None }
    }

    def while-some(f,g) [ (*a -- *a Maybe(b), *a b -- *a) *a -- *a ] {
        f while(dup some?, unwrap g f) drop
    }

    def while-none(f,g) [ (*a -- *a Maybe(b), *a -- *a) *a -- *a b ] {
        f while(dup none?, drop g f) unwrap
    }

    def Maybe.map2(f) [ (*c x y -- *c z) *c Maybe(x) Maybe(y) -- *c Maybe(z) ] {
        { None -> drop None }
        { Some ->
            swap match {
                { None -> drop None }
                { Some -> swap f Some }
            }
        }
    }

    def Maybe.zip [ Maybe(x) Maybe(y) -- Maybe([x y]) ] { map2(pack2) }

    def Maybe.show;(f) [ (t +Str -- +Str) Maybe(t) +Str -- +Str ] {
        { None -> "None" ; }
        { Some -> f " Some" ; }
    }

    def Maybe.show(f) [ (t +Str -- +Str) Maybe(t) -- Str ] {
        Str( show;(f) )
    }
)
