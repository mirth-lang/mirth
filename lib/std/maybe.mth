module std.maybe

import std.prelude
import std.list
import std.str

alias Some Maybe.Some
alias None Maybe.None
alias +Some +Maybe.+Some
alias +None +Maybe.+None

data Maybe(t) {
    0 None
    1 Some [ t ]
    --
    inline (
        def len [ Maybe(t) -- Nat ] { enum-value Nat.NatUnsafe }
        def none? [ Maybe(t) -- Bool ] { enum-value 0 == }
        def some? [ Maybe(t) -- Bool ] { enum-value 1 == }
        def >Bool [ Maybe(t) -- Bool ] { some? }
        def not [ Maybe(t) -- Bool ] { none? }
    )
    def if(f,g) { some? if(f,g) }
    def then(f) { some? then(f) }
    def else(f) { some? else(f) }
    def and(f)  { some? and(f) }
    def or(f)   { some? or(f) }

    def if?(f,g) [ (*a b -- *c, *a -- *c) *a Maybe(b) -- *c          ] { { Some -> f  } { None -> g    } }
    def then?(f) [ (*a b -- *a)           *a Maybe(b) -- *a          ] { { Some -> f  } { None -> id   } }
    def else?(f) [ (*a   -- *a b)         *a Maybe(b) -- *a b        ] { { Some -> id } { None -> f    } }
    def and?(f)  [ (*a b -- *a Maybe(c))  *a Maybe(b) -- *a Maybe(c) ] { { Some -> f  } { None -> None } }
    def or?(f)   [ (*a   -- *a Maybe(b))  *a Maybe(b) -- *a Maybe(b) ] { { None -> f  } { _    -> id   } }

    def unwrap(f)     { { Some -> id   } { None -> f } }
    def >List {
        { None -> List.L0 }
        { Some -> List.L1 }
    }

    def == (eq {==}) [ (*c a a -- *c Bool) *c Maybe(a) Maybe(a) -- *c Bool ] {
        { None -> none? }
        { Some -> swap if?(swap eq, drop False) }
    }

    def compare (cmp {compare}) [ (*c a a -- *c Comparison) *c Maybe(a) Maybe(a) -- *c Comparison ] {
        { None -> match {
            { None -> Comparison.EQ }
            { Some -> drop Comparison.GT }
        } }
        { Some -> swap match {
            { None -> drop Comparison.LT }
            { Some -> swap cmp }
        }}
    }

    def map(f)  { { Some -> f Some } { None -> None  } }
    def bind(f) { { Some -> f      } { None -> None  } }
    def for(f)  { { Some -> f      } { None -> id    } }
    def has(f)  { { Some -> f      } { None -> False } }
    def all(f)  { { Some -> f      } { None -> True  } }

    def filter(f) [ (*a b -- *a Bool) *a Maybe(b) -- *a Maybe(b) ] {
        { Some -> dup dip(f) swap if(Some, drop None) }
        { None -> None }
    }

    def map2(f) [ (*c x y -- *c z) *c Maybe(x) Maybe(y) -- *c Maybe(z) ] {
        { None -> drop None }
        { Some ->
            swap match {
                { None -> drop None }
                { Some -> swap f Some }
            }
        }
    }

    def zip [ Maybe(x) Maybe(y) -- Maybe([x y]) ] { map2(pack2) }

    def show;(f {show;}) [ (t +Str -- +Str) Maybe(t) +Str -- +Str ] {
        { None -> "None" ; }
        { Some -> f " Some" ; }
    }

    def show(f {show;}) [ (t +Str -- +Str) Maybe(t) -- Str ] {
        Str( show;(f) )
    }
}

data +Maybe(+t) {
    0 +None
    1 +Some [ +t ]
    --
    def +none? [ +Maybe(+t) -- +Maybe(+t) Bool ] { +None -> Yes +None, +Some -> No  +Some }
    def +some? [ +Maybe(+t) -- +Maybe(+t) Bool ] { +None -> No  +None, +Some -> Yes +Some }

    def +if(f,g) [ (*a +b -- *c, *a -- *c)   *a +Maybe(+b) -- *c            ] { { +Some -> f  } { +None -> g     } }
    def +then(f) [ (*a +b -- *a)             *a +Maybe(+b) -- *a            ] { { +Some -> f  } { +None -> id    } }
    def +else(f) [ (*a    -- *a +b)          *a +Maybe(+b) -- *a +b         ] { { +Some -> id } { +None -> f     } }
    def +and(f)  [ (*a +b -- *a +Maybe(+c))  *a +Maybe(+b) -- *a +Maybe(+c) ] { { +Some -> f  } { +None -> +None } }
    def +or(f)   [ (*a    -- *a +Maybe(+b))  *a +Maybe(+b) -- *a +Maybe(+b) ] { { +None -> f  } { +Some -> +Some } }

    def +map(f)  { { +Some -> f +Some } { +None -> +None  } }
    def +bind(f) { { +Some -> f       } { +None -> +None  } }
    def +for(f)  { { +Some -> f       } { +None -> id     } }
    def +has(f)  [ (*a +b -- *a +b Bool) *a +Maybe(+b) -- *a +Maybe(+b) Bool ] { { +Some -> f +Some } { +None -> +None False  } }
    def +all(f)  [ (*a +b -- *a +b Bool) *a +Maybe(+b) -- *a +Maybe(+b) Bool ] { { +Some -> f +Some } { +None -> +None True   } }
}

def while-some(f,g) [ (*a -- *a Maybe(b), *a b -- *a) *a -- *a ] {
    while(f if?(g True, False))
}

def while-none(f,g) [ (*a -- *a Maybe(b), *a -- *a) *a -- *a b ] {
    None while(drop f dup if(False, dip:g True))
    unwrap(impossible!)
}

inline def Bool.>Maybe (f) [ ( *a -- *a b ) *a Bool -- *a Maybe(b) ] {
    if(f Some, None)
}
