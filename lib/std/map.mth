module std.map

import std.prelude
import std.list
import std.maybe

||| Key-value map, implemented as linear search list.
||| TODO: switch to a comparison-based ordered map.
|||   https://github.com/mirth-lang/mirth/issues/237

struct KeyValuePair(k,v) {
    key: k
    value: v
    --
    def map(f) [ (*c1 v1 -- *c2 v2) *c1 KeyValuePair(k,v1) -- *c2 KeyValuePair(k,v2) ] {
        /KeyValuePair ldip(key, @value:f) KeyValuePair
    }

    def map-pair(f) [ (*c1 k1 v1 -- *c2 k2 v2) *c1 KeyValuePair(k1,v1) -- *c2 KeyValuePair(k2,v2) ] {
        /KeyValuePair
        @key:@value:f
        KeyValuePair
    }

    def pair [ KeyValuePair(k,v) -- k v ] {
        /KeyValuePair
        key> value>
    }

    def Pair [ k v -- KeyValuePair(k,v) ] {
        >value >key
        KeyValuePair
    }
}

struct Map(k,v) {
    pairs: List(KeyValuePair(k,v))
    --
    def Nil { L0 >pairs Map }
    def len { pairs len }
    def keys { pairs map(key) }
    def values { pairs map(value) }
    def insert [ KeyValuePair(k,v) Map(k,v) -- Map(k,v) ] { pairs:cons }
    def lookup-pair(keq {=}) [ (*c k k -- *c Bool) *c k Map(k,v) -- *c Maybe(KeyValuePair(k,v)) ] {
        pairs lookup(.key keq)
    }
    def lookup(keq {=}) [ (*c k k -- *c Bool) *c k Map(k,v) -- *c Maybe(v) ] {
        lookup-pair(keq) map(value)
    }

    def empty? [ Map(k,v) -- Bool ] { pairs empty? }

    ||| Extract an entry by key.
    ||| Returns the entry (if it exists), and the map with the entry removed.
    def extract(keq{=}) [
        (*c k k -- *c Bool)
        *c k Map(k,v) -- *c k Maybe(v) Map(k,v)
    ] {
        pairs extract(key dip:dup swap dip:keq swap) >pairs Map
        dip:map:value
    }

    ||| Modify an entry, potentially deleting it or altering the key.
    def modify-entry(f, keq{=}) [
        (*c1 k Maybe(v) -- *c2 k Maybe(v),
         *c1 k k -- *c1 Bool)
         *c1 k Map(k,v) -- *c2 Map(k,v)
    ] {
        extract(keq) dip(f) swap if?(
            >value swap >key KeyValuePair swap pairs:cons,
            nip
        )
    }

    ||| Create or update an entry.
    def create-or-update(f,g,keq{=}) [
        (*c1 -- *c2 v,
         *c1 v -- *c2 v,
         *c1 k k -- *c1 Bool)
         *c1 k Map(k,v) -- *c2 Map(k,v)
    ] {
        modify-entry(
            if?(dip_(g), dip(f) swap) Some,
            keq
        )
    }

    def map(f) [ *c |- (v1 -- v2) Map(k,v1) -- Map(k,v2) ] {
        /Map @pairs:map:map(f) Map
    }

    def map-pairs(f) [ *c |- (k1 v1 -- k2 v2) Map(k1,v1) -- Map(k2,v2) ] {
        /Map @pairs:map:map-pair(f) Map
    }

    def for(f) [ *c |- (v --) Map(k,v) -- ] {
        pairs for(value f)
    }

    def for-pairs(f) [ *c |- (k v --) Map(k,v) -- ] {
        pairs for(pair f)
    }

    def reverse-for-pairs(f) [ *c |- (k v --) Map(k,v) -- ] {
        pairs reverse-for(pair f)
    }

    def filter(f) [ *c |- (v -- Bool) Map(k,v) -- Map(k,v) ] {
        pairs:filter(value f)
    }
}

struct +KeyValuePair(k, +v) {
    key: k
    +value: +v
    --
    def init [ k +v -- +KeyValuePair(k,+v) ] {
        >key >+value +KeyValuePair
    }
    def +for(f) [ (*a +v -- *b) *a +KeyValuePair(k, +v) -- *b ] {
        /+KeyValuePair key> drop +value> f
    }

    def rdrop(del {rdrop}) { +for(del) }

    def ==(eq{==}) [
        (*a +v +v -- *a +v +v Bool)
        *a +KeyValuePair(k, +v) +KeyValuePair(k, +v) -- *a +KeyValuePair(k, +v) +KeyValuePair(k, +v) Bool
    ] {
        !+a:+value:@+a:+value:eq
    }
}

struct +Map(k, +v) {
    +pairs: +List(+KeyValuePair(k, +v))
    --
    def init [ -- +Map(k,+v) ] {
        +List.+Nil >+pairs +Map
    }


    ||| Insert a key-value pair into the resource map
    ||| Shadows previous entries for the same key but does not delete them
    def +insert [ +KeyValuePair(k,+v) +Map(k,+v) -- +Map(k,+v) ] { +pairs:+Cons }

    ||| Inserts the key and value returned by `f` into the map.
    def +insert(f) [ (*a -- *b k +v) *a +Map(k,+v) -- *b +Map(k,+v) ] {
        rdip(f +KeyValuePair.init) +insert
    }

    ||| Removes all instances of the given key in the map
    def +delete (del {rdrop}, keq {==}) [
        (*c +v -- *c, *c k k -- *c Bool)
        *c k +Map(k, +v) -- *c +Map(k, +v)
    ] {
        +pairs:+filter-for(dup dip_(key rdip:keq), dip:+for:del) drop
    }

    ||| Either calls `f` on the first pair in the map that matches the key, or calls `g`
    def +find-pair(f, g, keq {==}) [
        (*c +KeyValuePair(k, +v) -- *d +KeyValuePair(k, +v), *c -- *d, *c k k -- *c Bool)
        *c k +Map(k, +v) -- *d +Map(k, +v)
    ] {
        +pairs:+find(dup dip_(key rdip:keq), drop f, drop g)
    }


    ||| Either calls `f` on the value in the map that matches the key, or calls `g`
    def +find(f, g, keq {==}) [
        (*c +v -- *d +v, *c -- *d, *c k k -- *c Bool)
        *c k +Map(k, +v) -- *d +Map(k, +v)
    ] {
        +find-pair(+value:f, g, keq)
    }

    ||| Find the first value in the map that matches the key (if any), replacing it with the returned resource
    def +upsert(f, keq {==}) [
        (*c +Maybe(+v) -- *d +v, *c k k -- *c Bool)
        *c k +Map(k, +v) -- *d +Map(k, +v)
    ] {
        sip:+find(+Some f rdip:+None, +None f +Some, keq) rswap
        +for(dup >key >+value +KeyValuePair rswap +insert) drop
    }

    def rdrop(f {rdrop}) [(*c +v -- *c) *c +Map(k,+v) -- *c] {
        /+Map +pairs> rdrop:rdrop:f
    }

}
