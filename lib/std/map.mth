module(std.map)

import(std.prelude)
import(std.list)
import(std.maybe)

||| Key-value map, implemented as linear search list.
||| TODO: switch to a comparison-based ordered map.
|||   https://github.com/mirth-lang/mirth/issues/237

struct KeyValuePair(k,v) {
    key: k
    value: v
}

struct Map(k,v) {
    pairs: List(KeyValuePair(k,v))
    --
    def Nil { List.L0 >pairs Map }
    def len { pairs len }
    def keys { pairs map(key) }
    def values { pairs map(value) }
    def insert [ KeyValuePair(k,v) Map(k,v) -- Map(k,v) ] { pairs:Cons }
    def lookup-pair(keq {==}) [ (*c k k -- *c Bool) *c k Map(k,v) -- *c Maybe(KeyValuePair(k,v)) ] {
        pairs lookup(.key keq)
    }
    def lookup(keq {==}) [ (*c k k -- *c Bool) *c k Map(k,v) -- *c Maybe(v) ] {
        lookup-pair(keq) map(value)
    }
}
