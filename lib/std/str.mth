module(std.str)

import(std.prelude)
import(std.list)
import(std.maybe)
import(std.byte)
import(std.buffer)
import(std.ctypes)

alias(Str.cat, prim-str-cat)
inline(
    def(Str.num-bytes, Str -- Size, prim-str-num-bytes >Size)
    def(Str.empty?, Str -- Bool, num-bytes 0=)
)

||| Copy string bytes to second argument without adding 0 at end.
||| Return first unwritten location in second argument.
def(Str.copy-partial!, Str Ptr +Unsafe -- Ptr +Unsafe,
    swap with-data(
        rotl
        dup2 dip(>Offset) offset
        dip(copy)
    ))

inline(
    def(Str.copy, Ptr Size +Unsafe -- Str +Unsafe, >Int prim-str-copy)
    def(Str.copy-cstr, CStr +Unsafe -- Str +Unsafe, sip:>Ptr num-bytes >Size Str.copy)
)

data(+Str, +Str -> Str)
def(Str.thaw, Str -- +Str, +Str)
def(+Str.freeze, +Str -- Str, +Str -> id)
def(+Str.rdrop, +Str --, +Str -> drop)

def(Str(f), (*a +Str -- *b +Str) *a -- *b Str, "" thaw f freeze)
inline:def(+Str.;, Str +Str -- +Str, push-str!)


def(+Str.dup!, +Str -- Str +Str,
    +Str -> dup dip(+Str))

def(+Str.num-bytes?, +Str -- Size +Str,
    +Str -> dup num-bytes dip(+Str))

def(Str.last-byte, Str -- Byte,
    sip(num-bytes >Offset 1-) Str.byte@)

def(+Str.last-byte, +Str -- Byte +Str,
    +Str.num-bytes? >Offset 1- +Str.byte@)

def(+Str.byte@, Offset +Str -- Byte +Str,
    +Str.dup! Str.byte@)

def(offset-in-bounds, Offset Size -- Bool,
    dip(>Int 0) >Int in-range)

def(Str.byte@, Offset Str -- Byte,
    with-data(
        dip(over) offset-in-bounds if(
            unsafe(offset @Byte),
            drop2 BNUL
        )
    ))

def(+Str.empty?, +Str -- Bool +Str,
    +Str -> dup +Str Str.empty?)

def(+Str.clear!, +Str -- +Str,
    +Str -> drop "" +Str)

def(+Str.push-byte-unsafe!, Byte +Str -- +Str,
    to-str-unsafe push-str!)

def(+Str.push-byte-ascii!, Byte +Str -- +Str,
    to-ascii-str unwrap push-str!)

||| Append the given string into STR_BUF. If the string is
||| too large it gets truncated.
def(+Str.push-str!, Str +Str -- +Str,
    +Str -> swap cat +Str)

def(Str.with-data(f), (*a Ptr Size -- *b) *a Str -- *b,
    dup dip(dup dip(prim-str-base) num-bytes f) drop)

||| Traverse string bytes.
def(Str.bytes-for(f), (*a Byte -- *a) *a Str -- *a,
    with-data(>Nat repeat(
        dup dip(unsafe(@Byte) f 1 >Offset) unsafe(offset)
    ) drop))

def(Str.first-byte, Str -- Maybe(Byte),
    with-data(
        0> if(
            unsafe(@Byte) Some,
            drop None
        )
    ))

||| Drop n bytes from the beginning of a string
||| this is unsafe because it can break utf8
def(Str.drop-bytes, Size Str +Unsafe -- Str +Unsafe,
    dup2 num-bytes >= if(
       drop2 "",
       with-data(
          dip(over) swap -
          dip(dip(>Offset) offset)
          Str.copy
       )
    ))

def(Str.from-bytes-unsafe, List(Byte) -- Str,
    dup len >Size +Buffer.new
    dip(0 >Offset) for(>U8 over !U8 1+) drop
    base size unsafe(Str.copy)
    rdrop)

def(Str.with-cstr(f), (*a CStr -- *b) *a Str -- *b,
    with-data(
        >Offset over unsafe(offset @U8) >Int
        0= else("tried to use Str as CStr, but Str is not zero terminated" panic!)
        CPtr CStr f
    ))

def(clamp-slice-offset-size, Offset Size Size -- Offset Size,
    swap dip(tuck >Offset min tuck >Size -) min)

def(Str.slice, Offset Size Str +Unsafe -- Str +Unsafe,
    with-data(
        swap dip(clamp-slice-offset-size)
        swap dip(offset) Str.copy
    ))

def(Str.drop-slice, Offset Str +Unsafe -- Str +Unsafe,
    rdip:thaw +Str.drop-slice rdip:rdrop)

def(Str.take-slice, Size Str +Unsafe -- Str +Unsafe,
    rdip:thaw +Str.take-slice rdip:rdrop)

def(+Str.slice, Offset Size +Str +Unsafe -- Str +Str +Unsafe,
    rdip(+Str.dup!) slice)

def(+Str.offset-slice, Offset Offset +Str +Unsafe -- Str +Str +Unsafe,
    dup2 < if(
        over - >Size +Str.slice,
        drop2 ""
    ))

def(+Str.take-slice, Size +Str +Unsafe -- Str +Str +Unsafe,
    0 >Offset swap +Str.slice)

def(+Str.drop-slice, Offset +Str +Unsafe -- Str +Str +Unsafe,
    rdip(+Str.num-bytes? ) +Str.slice)

||| Find the first occurence of a string in the str buf, returning its index.
def(+Str.find, Str +Str -- Maybe(Offset) +Str,
    None swap 0 while(
        over num-bytes over >Size +
        +Str.num-bytes? <= if(
            dup2 >Offset over num-bytes unsafe(+Str.slice) == if(
                rotl drop dup >Offset Some rotr False,
                True
            ),
            False
        ),
        1+
    ) drop2)

inline:
def(+Str.split-byte(p), (*a Byte -- *a Bool) *a +Str -- *a List+(Str) +Str,
    LIST+( 0 >Offset dup while(
        dup rdip(+Str.num-bytes?) >Offset <,
        tuck dip2(rdip(byte@ rdip(p))) rotl if(
            tuck rdip:unsafe(+Str.offset-slice)
            ; 1+ dup,
            1+
        )
    ) rdip:unsafe(+Str.offset-slice) ;+))

def(+Str.split-byte, Byte +Str -- List+(Str) +Str,
    split-byte(over ==) nip)

inline:
def(Str.split-byte(p), (*a Byte -- *a Bool) *a Str -- *a List+(Str),
    thaw +Str.split-byte(p) rdrop)

def(Str.split-byte, Byte Str -- List+(Str),
    thaw +Str.split-byte rdrop)

def(+Str.find-last-byte(p), (*a Byte -- *a Bool) *a +Str -- *a Maybe(Offset) +Str,
    num-bytes? >Offset None while(
        dup none? and(over 0>),
        drop 1- sip(byte@ rdip(p)) swap if(dup Some, None)
    ) nip)

def(Str.split-last-byte(p), (*a Byte -- *a Bool) *a Str -- *a Str Maybe(Str),
    thaw find-last-byte(p) freeze swap map(unsafe(
        swap dup2 dip:1+ drop-slice
        dip(dip:>Size take-slice)
    )))

def(+Str.push-show-byte!, +Str escape-hex:Bool Byte -- escape-hex:Bool +Str,
    BQUOTE -> "\\\"" ; False !escape-hex,
    B'\' -> "\\\\" ; False !escape-hex,
    BLF -> "\n" ; False !escape-hex,
    BCR -> "\r" ; False !escape-hex,
    BHT -> "\t" ; False !escape-hex,
    _ ->
        dup BSPACE B'~' in-range and(@escape-hex and(dup is-hexdigit) not) if(
            push-byte-ascii!
            False !escape-hex,
            "\\x" ; to-hexdigits
            at2:push-byte-ascii!
            True !escape-hex
        )
    )

def(Str.show;, Str +Str -- +Str,
    "\"" ; False >escape-hex bytes-for(push-show-byte!) escape-hex> drop "\"" ;)
