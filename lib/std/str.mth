module std.str

import std.prelude
import std.list
import std.maybe
import std.byte
import std.buffer
import std.ctypes

alias(Str.cat, prim-str-cat)
inline(
    def Str.num-bytes [ Str -- USize ] { prim-str-num-bytes Nat.NatUnsafe >USize }
    def Str.empty? [ Str -- Bool ] { num-bytes 0= }
)

||| Copy string bytes to pointer location (without adding 0 at end).
||| Return first unwritten location in second argument.
def Ptr.!Str+ [ Str Ptr +Unsafe -- Ptr +Unsafe ] {
    dup2 dip(num-bytes >UOffset)
    uoffset dip(!Str)
}

||| Copy string bytes to pointer location.
def Ptr.!Str [ Str Ptr +Unsafe -- +Unsafe ] {
    swap with-data(rotl copy)
}

inline(
    def(Str.ClonePtrSlice, Ptr USize +Unsafe -- Str +Unsafe, >Int prim-str-copy)
    def(Str.CloneCStr, CStr +Unsafe -- Str +Unsafe, sip:>Ptr num-bytes >USize Str.ClonePtrSlice)
)

data(+Str, +Str -> Str)

inline (
    def(Str.thaw, Str -- +Str, +Str)
    def(+Str.freeze, +Str -- Str, +Str -> id)
    def(+Str.rdrop, +Str --, +Str -> drop)
    def(+Str.;, Str +Str -- +Str, push-str!)
    def(+Str.dup!, +Str -- Str +Str, +Str -> dup dip(+Str))
    def(+Str.num-bytes?, +Str -- USize +Str,
        +Str -> dup num-bytes dip(+Str))
)
def(Str(f), (*a +Str -- *b +Str) *a -- *b Str, "" thaw f freeze)

def Str.last-byte [ Str -- Byte ] {
    dup num-bytes 1- >UOffset-if (
        swap Str.byte@,
        drop2 Byte.BNUL
    )
}

def(+Str.last-byte, +Str -- Byte +Str,
    dup! Str.last-byte)

def(+Str.byte@, UOffset +Str -- Byte +Str,
    +Str.dup! Str.byte@)

def(offset-in-bounds, UOffset USize -- Bool,
    dip(>Int 0) >Int in-range)

def(Str.byte@, UOffset Str -- Byte,
    with-data(
        dip(over) offset-in-bounds if(
            unsafe(uoffset @Byte),
            drop2 Byte.BNUL
        )
    ))

def(+Str.empty?, +Str -- Bool +Str,
    +Str -> dup +Str Str.empty?)

def(+Str.clear!, +Str -- +Str,
    +Str -> drop "" +Str)

||| Push any byte to the end of the string buffer.
||| This is unsafe because it breaks UTF-8 encoding when pushing a non-ascii byte.
||| So it's up to you to ensure a valid encoding is swiftly restored.
def +Str.push-byte-unsafe! [ Byte +Str -- +Str ] {
    to-str-unsafe push-str!
}

||| Push an ascii byte to the end of the string buffer.
||| Ignores non-ascii bytes.
def +Str.push-byte-ascii! [ Byte +Str -- +Str ] {
    to-ascii-str for(push-str!)
}

||| Append the given string into the string buffer.
def +Str.push-str! [ Str +Str -- +Str ] {
    +Str -> swap cat +Str
}

||| Access the string's byte data. This function ensures the
||| string won't be garbage collected while inspecting its data.
def Str.with-data(f) [ (*a Ptr USize -- *b) *a Str -- *b ] {
    dup dip(dup dip(prim-str-base) num-bytes f) drop
}

||| Traverse a string's bytes.
def Str.bytes-for(f) [ (*a Byte -- *a) *a Str -- *a ] {
    with-data(
        >Nat repeat(
            dup dip(unsafe(@Byte) f 1u >UOffset) unsafe(uoffset)
        ) drop
    )
}

||| Get the string's first byte.
||| Returns None if the string is empty.
def Str.first-byte [ Str -- Maybe(Byte) ] {
    with-data(
        0> if(
            unsafe(@Byte) Some,
            drop None
        )
    )
}

||| Drop n bytes from the beginning of a string.
||| This is unsafe because it can break UTF-8.
||| Returns an empty string if the string has fewer than n bytes.
def(Str.drop-bytes, USize Str +Unsafe -- Str +Unsafe,
    with-data(
        dip(over) swap - >USize-if (
            dip(dip(>UOffset) uoffset)
            Str.ClonePtrSlice,
            drop3 ""
        )
    ))

def(Str.from-bytes-unsafe, List(Byte) -- Str,
    dup len >USize +Buffer.new
    dip(0u >UOffset) for(>U8 over !U8 1+) drop
    base size unsafe(Str.ClonePtrSlice)
    rdrop)

def(Str.with-cstr(f), (*a CStr -- *b) *a Str -- *b,
    with-data(
        >UOffset over unsafe(uoffset @U8) >Int
        0= else("tried to use Str as CStr, but Str is not zero terminated" panic!)
        CPtr CStr f
    ))

def(clamp-slice-offset-size, UOffset USize USize -- UOffset USize,
    swap dip(tuck >UOffset min tuck >USize -)
    swap >USize-if(min, drop2 0u >USize))

def(Str.slice, UOffset USize Str +Unsafe -- Str +Unsafe,
    with-data(
        swap dip(clamp-slice-offset-size)
        swap dip(uoffset) Str.ClonePtrSlice
    ))

def(Str.drop-slice, UOffset Str +Unsafe -- Str +Unsafe,
    rdip:thaw +Str.drop-slice rdip:rdrop)

def(Str.take-slice, USize Str +Unsafe -- Str +Unsafe,
    rdip:thaw +Str.take-slice rdip:rdrop)

def(+Str.slice, UOffset USize +Str +Unsafe -- Str +Str +Unsafe,
    rdip(+Str.dup!) slice)

def +Str.offset-slice [ UOffset UOffset +Str +Unsafe -- Str +Str +Unsafe ] {
    over - >USize-if( +Str.slice, drop2 "" )
}

def(+Str.take-slice, USize +Str +Unsafe -- Str +Str +Unsafe,
    0u >UOffset swap +Str.slice)

def(+Str.drop-slice, UOffset +Str +Unsafe -- Str +Str +Unsafe,
    rdip(+Str.num-bytes? ) +Str.slice)

||| Find the first occurence of a string in the str buf, returning its index.
def +Str.find [ Str +Str -- Maybe(UOffset) +Str ] {
    None swap 0u while(
        over num-bytes over >USize +
        +Str.num-bytes? <= if(
            dup2 >UOffset over num-bytes unsafe(+Str.slice) == if(
                rotl drop dup >UOffset Some rotr False,
                True
            ),
            False
        ),
        1+
    ) drop2
}

def(+Str.split-byte(p), (*a Byte -- *a Bool) *a +Str -- *a List+(Str) +Str,
    LIST+( 0u >UOffset dup while(
        dup rdip(+Str.num-bytes?) >UOffset <,
        tuck dip2(rdip(byte@ rdip(p))) rotl if(
            tuck rdip:unsafe(+Str.offset-slice)
            ; 1+ dup,
            1+
        )
    ) rdip:unsafe(+Str.offset-slice) ;+))

def(+Str.split-byte, Byte +Str -- List+(Str) +Str,
    split-byte(over ==) nip)

def(Str.split-byte(p), (*a Byte -- *a Bool) *a Str -- *a List+(Str),
    thaw +Str.split-byte(p) rdrop)

def(Str.split-byte, Byte Str -- List+(Str),
    thaw +Str.split-byte rdrop)

def(+Str.find-last-byte(p), (*a Byte -- *a Bool) *a +Str -- *a Maybe(UOffset) +Str,
    num-bytes? >UOffset None while(
        dup none? and(over 0>),
        drop pred sip(byte@ rdip(p)) swap if(dup Some, None)
    ) nip)

def(Str.split-last-byte(p), (*a Byte -- *a Bool) *a Str -- *a Str Maybe(Str),
    thaw find-last-byte(p) freeze swap map(unsafe(
        swap dup2 dip:1+ drop-slice
        dip(dip:>USize take-slice)
    )))

def(+Str.push-show-byte!, +Str escape-hex:Bool Byte -- escape-hex:Bool +Str,
    BQUOTE -> "\\\"" ; False !escape-hex,
    B'\' -> "\\\\" ; False !escape-hex,
    BLF -> "\n" ; False !escape-hex,
    BCR -> "\r" ; False !escape-hex,
    BHT -> "\t" ; False !escape-hex,
    _ ->
        dup Byte.BSPACE Byte.B'~' in-range and(@escape-hex and(dup is-hexdigit) not) if(
            push-byte-ascii!
            False !escape-hex,
            "\\x" ; to-hexdigits
            dip:push-byte-ascii!
            push-byte-ascii!
            True !escape-hex
        )
    )

def(Str.show;, Str +Str -- +Str,
    "\"" ; False >escape-hex bytes-for(push-show-byte!) escape-hex> drop "\"" ;)


||| Convert the initial portion of a string into a 32-bit float.
||| Returns the F32 and the rest of the string.
inline def Str.parse-f32 [ Str -- F32 Str ] { prim-str-to-f32 }

||| Convert the initial portion of a string into a 64-bit float.
||| Returns the F64 and the rest of the string.
inline def Str.parse-f64 [ Str -- F64 Str ] { prim-str-to-f64 }

||| Try to parse a string (in its entirety) as a 32-bit float.
def Str.>F32? [ Str -- Maybe(F32) ] {
    dup empty? if(drop None, parse-f32 empty? if(Some, drop None))
}

||| Try to parse a full string (in its entirety) as a 64-bit float.
def Str.>F64? [ Str -- Maybe(F64) ] {
    dup empty? if(drop None, parse-f64 empty? if(Some, drop None))
}
