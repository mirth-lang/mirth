module std.str

import std.prelude
import std.list
import std.maybe
import std.byte
import std.buffer
import std.ctypes


inline patch Str {
    def compare [ Str Str -- Comparison ] { prim-str-cmp Comparison.from-enum-value-unsafe }
    alias =  prim-str-eq
    alias <  prim-str-lt
    alias <= prim-str-le
}

alias(Str.cat, prim-str-cat)
inline(
    def Str.num-bytes [ Str -- Size ] { prim-str-num-bytes >Size }
    def Str.empty? [ Str -- Bool ] { num-bytes 0B= }
)

||| Copy string bytes to pointer location (without adding 0 at end).
||| Return first unwritten location in second argument.
def Ptr.!Str+ [ Str Ptr +Unsafe -- Ptr +Unsafe ] {
    over num-bytes over + dip(!Str)
}

||| Copy string bytes to pointer location.
def Ptr.!Str [ Str Ptr +Unsafe -- +Unsafe ] {
    swap with-data(rotl copy)
}

inline def(Str.ClonePtrSlice, Ptr Size +Unsafe -- Str +Unsafe, >Int >U64-wrap prim-str-copy)

inline(
    def(Str.CloneCStr, CStr +Unsafe -- Str +Unsafe, sip:>Ptr num-bytes Str.ClonePtrSlice)
)

data(+Str, +Str -> Str)

inline (
    def(Str.thaw, Str -- +Str, +Str)
    def(+Str.freeze, +Str -- Str, +Str -> id)
    def(+Str.rdrop, +Str --, +Str -> drop)
    def(+Str.;, Str +Str -- +Str, push-str!)
    def(+Str.dup!, +Str -- Str +Str, +Str -> dup dip(+Str))
    def(+Str.num-bytes?, +Str -- Size +Str,
        +Str -> dup num-bytes dip(+Str))
)
def Str.Str(f) [ (*a +Str -- *b +Str) *a -- *b Str ] { "" +Str f /+Str }
def str(f) [ (*a x +Str -- *a +Str) *a x -- *a Str ] { Str(f) }

def Str.last-byte [ Str -- Byte ] {
    dup num-bytes 1B- offset swap byte@
}

def(+Str.last-byte, +Str -- Byte +Str,
    dup! Str.last-byte)

def(+Str.byte@, Offset +Str -- Byte +Str,
    +Str.dup! Str.byte@)

def offset-in-bounds [ Offset Size -- Bool ] {
    0 Offset swap offset in-range
}

def(Str.byte@, Offset Str -- Byte,
    with-data(
        dip(over) offset-in-bounds if(
            unsafe(+ @Byte),
            drop2 Byte.BNUL
        )
    ))

def(+Str.empty?, +Str -- Bool +Str,
    +Str -> dup +Str Str.empty?)

def(+Str.clear!, +Str -- +Str,
    +Str -> drop "" +Str)

||| Push any byte to the end of the string buffer.
||| This is unsafe because it breaks UTF-8 encoding when pushing a non-ascii byte.
||| So it's up to you to ensure a valid encoding is swiftly restored.
def +Str.push-byte-unsafe! [ Byte +Str -- +Str ] {
    to-str-unsafe push-str!
}

||| Push an ascii byte to the end of the string buffer.
||| Ignores non-ascii bytes.
def +Str.push-byte-ascii! [ Byte +Str -- +Str ] {
    to-ascii-str for(push-str!)
}

||| Append the given string into the string buffer.
def +Str.push-str! [ Str +Str -- +Str ] {
    +Str -> swap cat +Str
}

||| Access the string's byte data. This function ensures the
||| string won't be garbage collected while inspecting its data.
def Str.with-data(f) [ (*a Ptr Size -- *b) *a Str -- *b ] {
    dup dip(dup dip(prim-str-base) num-bytes f) drop
}

||| Traverse a string's bytes.
def Str.bytes-for(f) [ (*a Byte -- *a) *a Str -- *a ] {
    with-data(
        >Int >Nat-clamp repeat(
            dup dip(unsafe(@Byte) f 1 >Offset) unsafe(+)
        ) drop
    )
}

||| Get the string's first byte.
||| Returns None if the string is empty.
def Str.first-byte [ Str -- Maybe(Byte) ] {
    with-data(
        0B> if(
            unsafe(@Byte) Some,
            drop None
        )
    )
}

||| Drop n bytes from the beginning of a string.
||| This is unsafe because it can break UTF-8.
||| Returns an empty string if the string has fewer than n bytes.
def(Str.drop-bytes, Size Str +Unsafe -- Str +Unsafe,
    with-data(
        dip(over) swap - dup 0B>= if (
            dip(+)
            Str.ClonePtrSlice,
            drop3 ""
        )
    ))

def(Str.from-bytes-unsafe, List(Byte) -- Str,
    dup len >Size +Buffer.new
    dip(0 Offset) for(>U8 over !U8 1B+) drop
    base size unsafe(Str.ClonePtrSlice)
    rdrop)

def(Str.with-cstr(f), (*a CStr -- *b) *a Str -- *b,
    with-data(
        over unsafe(+ @U8) 0= else("tried to use Str as CStr, but Str is not zero terminated" panic!)
        CPtr CStr f
    ))

def(clamp-slice-offset-size, Offset Size Size -- Offset Size,
    offset dup >hi >hi
    0 Offset dup >lo >lo
    over + offset-clamp dip:offset-clamp
    over - >Size 0 bytes max)

def(Str.slice, Offset Size Str +Unsafe -- Str +Unsafe,
    with-data(
        swap dip(clamp-slice-offset-size)
        swap dip(+) Str.ClonePtrSlice
    ))

def Str.drop-slice [ +Unsafe |- Offset Str -- Str ] {
    thaw drop-slice rdrop
}

def Str.take-slice [ +Unsafe |- Size Str -- Str ] {
    thaw take-slice rdrop
}

def +Str.slice [ +Str +Unsafe |- Offset Size -- Str ] {
    dup! Str.slice
}

def +Str.offset-slice [ +Str +Unsafe |- Offset Offset -- Str ] {
    over - >Size slice
}

def +Str.take-slice [ +Str +Unsafe |- Size -- Str ] {
    0 Offset swap slice
}

def +Str.drop-slice [ +Str +Unsafe |- Offset -- Str ] {
    0 Offset max num-bytes? slice
}

||| Find the first occurence of a string in the str buf, returning its index.
def +Str.find [ +Str |- Str -- Maybe(Offset) ] {
    None swap 0 Offset while(
        over num-bytes over +
        +Str.num-bytes? <= if(
            dup2 over num-bytes unsafe(+Str.slice) = if(
                rotl drop dup Some rotr False,
                True
            ),
            False
        ),
        1B+
    ) drop2
}

def(+Str.split-byte(p), (*a Byte -- *a Bool) *a +Str -- *a Nest(Str) +Str,
    Nest( 0 Offset dup while(
        dup rdip(+Str.num-bytes?) offset <,
        tuck dip2(rdip(byte@ rdip(p))) rotl if(
            tuck rdip:unsafe(+Str.offset-slice)
            +Lister.; 1B+ dup,
            1B+
        )
    ) rdip:unsafe(+Str.offset-slice) ;+))

def(+Str.split-byte, Byte +Str -- Nest(Str) +Str,
    split-byte(over =) nip)

def(Str.split-byte(p), (*a Byte -- *a Bool) *a Str -- *a Nest(Str),
    thaw +Str.split-byte(p) rdrop)

def(Str.split-byte, Byte Str -- Nest(Str),
    thaw +Str.split-byte rdrop)

def(+Str.find-last-byte(p), (*a Byte -- *a Bool) *a +Str -- *a Maybe(Offset) +Str,
    num-bytes? offset None while(
        dup none? and(over 0B>),
        drop 1B- sip(byte@ rdip(p)) swap if(dup Some, None)
    ) nip)

def(Str.split-last-byte(p), (*a Byte -- *a Bool) *a Str -- *a Str Maybe(Str),
    thaw find-last-byte(p) freeze swap map(unsafe(
        swap dup2 dip:1B+ drop-slice
        dip(dip:>Size take-slice)
    )))

def(+Str.push-repr-byte!, +Str escape-hex:Bool Byte -- escape-hex:Bool +Str,
    BQUOTE -> "\\\"" ; False !escape-hex,
    B'\' -> "\\\\" ; False !escape-hex,
    BLF -> "\n" ; False !escape-hex,
    BCR -> "\r" ; False !escape-hex,
    BHT -> "\t" ; False !escape-hex,
    _ ->
        dup Byte.BSPACE Byte.B'~' in-range and(@escape-hex and(dup is-hexdigit) not) if(
            push-byte-ascii!
            False !escape-hex,
            "\\x" ; to-hexdigits
            dip:push-byte-ascii!
            push-byte-ascii!
            True !escape-hex
        )
    )

def(Str.repr;, Str +Str -- +Str,
    "\"" ; False \escape-hex bytes-for(push-repr-byte!) "\"" ;)

def Str.zencode; [ +Str Str -- +Str ] { bytes-for(zencode;) }
def Str.zencode  [ Str -- Str ] { str:zencode; }

||| Convert the initial portion of a string into a 32-bit float.
||| Returns the F32 and the rest of the string.
inline def Str.parse-f32 [ Str -- F32 Str ] { prim-str-to-f32 }

||| Convert the initial portion of a string into a 64-bit float.
||| Returns the F64 and the rest of the string.
inline def Str.parse-f64 [ Str -- F64 Str ] { prim-str-to-f64 }

||| Try to parse a string (in its entirety) as a 32-bit float.
def Str.>F32? [ Str -- Maybe(F32) ] {
    dup empty? if(drop None, parse-f32 empty? if(Some, drop None))
}

||| Try to parse a full string (in its entirety) as a 64-bit float.
def Str.>F64? [ Str -- Maybe(F64) ] {
    dup empty? if(drop None, parse-f64 empty? if(Some, drop None))
}

def +Str.first-byte  [ +Str |- Byte ] { 0 Offset byte@ }
def +Str.second-byte [ +Str |- Byte ] { 1 Offset byte@ }
def +Str.third-byte  [ +Str |- Byte ] { 2 Offset byte@ }

def +Str.first-two-bytes [ +Str +Unsafe |- Str ] { 2 bytes +Str.take-slice }
def +Str.last-two-bytes  [ +Str +Unsafe |- Str ] { rdip:num-bytes? 2 bytes - offset +Str.drop-slice }

def +Str.drop-first-byte [ +Str +Unsafe |- Str ] { 1 Offset +Str.drop-slice }
def +Str.drop-first-two-bytes [ +Str +Unsafe |- Str ] { 2 Offset +Str.drop-slice }
def +Str.drop-last-byte [ +Str +Unsafe |- Str ] { rdip:num-bytes? 1B- +Str.take-slice }
def +Str.drop-last-two-bytes [ +Str +Unsafe |- Str ] { rdip:num-bytes? 2 bytes - +Str.take-slice }
