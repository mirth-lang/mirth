module std.either

import std.prelude
import std.maybe
import std.str

alias Left Either.Left
alias Right Either.Right
alias +Left +Either.+Left
alias +Right +Either.+Right

data Either(a,b) {
    Left  [ a ]
    Right [ b ]

    --

    def left? [ Either(a,b) -- Maybe(a) ] {
        { Left -> Some }
        { Right -> drop None }
    }

    def right? [ Either(a,b) -- Maybe(b) ] {
        { Left -> drop None }
        { Right -> Some }
    }

    def map(g) [ (*x b1 -- *x b2) *x Either(a,b1) -- *x Either(a,b2) ] {
        { Left -> Left }
        { Right -> g Right }
    }

    def map(f,g) [ (*x a1 -- *y a2, *x b1 -- *y b2) *x Either(a1,b1) -- *y Either(a2,b2) ] {
        { Left -> f Left }
        { Right -> g Right }
    }

    def for(g) [ (*x b -- *x) *x Either(a,b) -- *x ] {
        { Left -> drop }
        { Right -> g }
    }


    def either(f,g) [ (*x a -- *y, *x b -- *y) *x Either(a,b) -- *y ] {
        { Left -> f }
        { Right -> g }
    }

    def bind(g) [ (*x b1 -- *x Either(a,b2)) *x Either(a,b1) -- *x Either(a,b2) ] {
        { Left -> Left }
        { Right -> g }
    }

    ||| Map Rights into Lefts, and then unwrap
    def left(f) [ (*x b -- *x a) *x Either(a, b) -- *x a] {
        { Left -> id }
        { Right -> f }
    }

    ||| Map Lefts into Rights, then unwrap
    def right(f) [ (*x a -- *x b) *x Either(a,b) -- *x b ] {
        { Left -> f }
        { Right -> id }
    }

    ||| Turn left values into right ones if the predicate matches
    def right?(predicate,f) [ (*x a -- *x Bool, *x a -- *x b) *x Either(a,b) -- *x Either(a,b) ] {
        { Left -> dup dip:predicate swap if(f Right,Left) }
        { Right -> Right }
    }

    ||| Turn left values into right ones if `value eq` is true
    def case(value, f, eq {=}) [ (*x a -- *x a a, *x -- *x b, *x a a -- *x Bool) *x Either(a,b) -- *x Either(a,b) ] {
        right?(value eq, drop f)
    }


    def repr;(f {repr;}, g {repr;}) [ (a +Str -- +Str, b +Str -- +Str) Either(a,b) +Str -- +Str ] {
        { Left -> f " Left" ; }
        { Right -> g " Right" ; }
    }
}

data +Either(+a, +b) {
    +Left  [ +a ]
    +Right [ +b ]
    --
    def +for(f,g) [ (*x +a -- *y, *x +b -- *y) *x +Either(+a,+b) -- *y] {
        { +Left -> f }
        { +Right -> g }
    }
    def +map(f,g) [ (*x +a1 -- *y +a2, *x +b1 -- *y +b2) *x +Either(+a1,+b1) -- *y +Either(+a2,+b2) ] {
        { +Left -> f +Left }
        { +Right -> g +Right }
    }
    def +map-left(f) [ (*x +a1 -- *x +a2) *x +Either(+a1,+b) -- *x +Either(+a2,+b) ] {
        { +Left -> f +Left }
        { +Right -> +Right }
    }
    def +map-right(f) [ (*x +b1 -- *x +b2) *x +Either(+a,+b1) -- *x +Either(+a,+b2) ] {
        { +Left -> +Left }
        { +Right -> f +Right }
    }

    def rdrop(f {rdrop}, g {rdrop}) [
        (*x +a -- *y, *x +b -- *y)
        *x +Either(+a,+b) -- *y
    ] {
        { +Left -> f }
        { +Right -> g }
    }

    def rdup(f {rdup}, g {rdup}) [
        (*x +a -- *y +a +a, *x +b -- *y +b +b)
        *x +Either(+a,+b) -- *y +Either(+a,+b) +Either(+a,+b)
    ] {
        { +Left -> f rdip:+Left +Left }
        { +Right -> g rdip:+Right +Right }
    }
}

def while-left(f) [ (*c a -- *c Either(a,b)) *c a -- *c b ] {
    Left while-some(dup left?, nip f)
    right? unwrap(impossible!)
}

def while-right(f) [ (*c b -- *c Either(a,b)) *c b -- *c a ] {
    Right while-some(dup right?, nip f)
    left? unwrap(impossible!)
}



||| Wrap a value as a Left to be used with `Either.case`:
|||
|||     switch(
|||         case("value-1", 1)
|||         case("value-2", 2)
|||         case("value-3", 3),
|||         drop 4
|||     )
def switch(f, default) [ (*x Either(a, b) -- *x Either(a, b), *x a -- *x b) *x a -- *x b ] {
    Left f right(default)
}
