module std.either

import std.prelude
import std.maybe

data Either(a,b) {
    Left  [ a ]
    Right [ b ]

    --

    def left? [ Either(a,b) -- Maybe(a) ] {
        { Left -> Some }
        { Right -> drop None }
    }

    def right? [ Either(a,b) -- Maybe(b) ] {
        { Left -> drop None }
        { Right -> Some }
    }

    def map(g) [ (*x b1 -- *x b2) *x Either(a,b1) -- *x Either(a,b2) ] {
        { Left -> Left }
        { Right -> g Right }
    }

    def map(f,g) [ (*x a1 -- *y a2, *x b1 -- *y b2) *x Either(a1,b1) -- *y Either(a2,b2) ] {
        { Left -> f Left }
        { Right -> g Right }
    }

    def for(g) [ (*x b -- *x) *x Either(a,b) -- *x ] {
        { Left -> drop }
        { Right -> g }
    }

    def either(f,g) [ (*x a -- *y, *x b -- *y) *x Either(a,b) -- *y ] {
        { Left -> f }
        { Right -> g }
    }

    def bind(g) [ (*x b1 -- *x Either(a,b2)) *x Either(a,b1) -- *x Either(a,b2) ] {
        { Left -> Left }
        { Right -> g }
    }
}

def while-left(f) [ (*c a -- *c Either(a,b)) *c a -- *c b ] {
    Left while-some(dup left?, nip f)
    right? unwrap(impossible!)
}

def while-right(f) [ (*c b -- *c Either(a,b)) *c b -- *c a ] {
    Right while-some(dup right?, nip f)
    left? unwrap(impossible!)
}
