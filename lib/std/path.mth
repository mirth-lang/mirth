module(std.path)

import(std.prelude)
import(std.byte)
import(std.str)
import(std.list)
import(std.maybe)

data(Path, Path -> Str)
inline(
    def(Str.>Path, Str -- Path, Path)
    def(Path.>Str, Path -- Str, Path -> id)
    def(Path.==, Path Path -- Bool, both(>Str) ==)
    def(Path.empty?, Path -- Bool, >Str empty?)
)

def(PATH_SEPARATOR, Str, RUNNING_OS OS_WINDOWS == if("\\", "/"))
def(Path.join-with, Path Str Path -- Path,
    over2 empty? if(
        dip(drop2),
        dip2(>Str) dip(cat) >Str cat >Path
    ))

def(Path.join, Path Path -- Path, dip(PATH_SEPARATOR) join-with)
def(Path.join-unix, Path Path -- Path, dip("/") join-with)

def(Byte.is-path-separator?, Byte -- Bool,
    B'/' -> True,
    B'\' -> RUNNING_OS OS_WINDOWS ==,
    _ -> drop False)

def(Path.split, Path -- List+(Str),
    /Path split-byte(is-path-separator?))

def(Path.split-last, Path -- Path Maybe(Str),
    /Path split-last-byte(is-path-separator?) dip(Path))

def(Path.show;, Path +Str -- +Str, /Path show; " Path" ;)
def(Path.path;, Path +Str -- +Str, /Path ;)
