module std.path

import std.prelude
import std.byte
import std.str
import std.list
import std.maybe

struct Path {
    Str
    --
    inline {
        def Str.>Path { Path }
        def >Str { /Path }
        def == { on2:>Str == }
        def <  { on2:>Str <  }
        def <= { on2:>Str <= }
        def >  { on2:>Str >  }
        def >= { on2:>Str >= }
        def <> { on2:>Str <> }
        def compare { on2:>Str compare }
        def empty?  { >Str empty? }
    }

    def join-with [ Path Str Path -- Path ] {
        dip(dip:>Str cat) >Str cat >Path
    }

    def join [ +World Path Path -- +World Path ] { dip(running-os path-separator) join-with }
    def join-unix [ Path Path -- Path ] { dip("/") join-with }

    def split [ +World Path -- +World Nest(Str) ] {
        /Path split-byte(running-os byte-is-path-separator?)
    }

    def split-last [ +World Path -- +World Path Maybe(Str) ] {
        /Path split-last-byte(running-os byte-is-path-separator?) dip(Path)
    }

    def str; [ +Str Path -- +Str ] { /Path ; }
    def repr; [ +Str Path -- +Str ] { /Path repr; " Path" ; }
    def path; [ Path +Str -- +Str ] { /Path ; }

    def normalize [ +World Path -- +World Path ] { split uncons dip(Path) for(Path join) }
    def parent [ +World Path -- +World Path ] {
        split-last else(".." Path join)
    }

}
