module(std.lazy)

import(std.prelude)
import(std.maybe)

data(Lazy(t),
    LazyReady -> b,
    LazyDelay -> a [a -- b],
    LazyWait)

def(ready, a -- Lazy(a),
    LazyReady)
def(ready2, a b -- Lazy([a b]),
    pack2 LazyReady)

def(delay(f), (a -- b) a -- Lazy(b), [f] LazyDelay)
def(delay0(f), (-- b) -- Lazy(b), 0 delay(drop f))
def(delay2(f), (a1 a2 -- b) a1 a2 -- Lazy(b),
    pack2 delay(unpack2 f))
def(delay3(f), (a1 a2 a3 -- b) a1 a2 a3 -- Lazy(b),
    pack3 delay(unpack3 f))
def(delay4(f), (a1 a2 a3 a4 -- b) a1 a2 a3 a4 -- Lazy(b),
    pack4 delay(unpack4 f))

def(Lazy.force!, Mut(Lazy(a)) -- a,
    dup @ match(
        LazyReady -> nip,
        LazyDelay ->
            rotl LazyWait over !
            dip(run dup LazyReady) !,
        LazyWait ->
            "recursive thunk dependency" panic!
    ))
def(Lazy.force-or!(f), (*x -- *x a) *x Mut(Lazy(a)) -- *x a,
    dup @ match(
        LazyWait -> drop f,
        _ -> drop force!
    ))
def(Lazy.try-force!, Mut(Lazy(a)) -- Maybe(a),
    dup @ match(
        LazyWait -> drop None,
        _ -> drop force! Some
    ))

def(Lazy.force2!, Mut(Lazy([a b])) -- a b,
    force! unpack2)

def(Lazy.force-or2!(f), (*x -- *x a b) *x Mut(Lazy([a b])) -- *x a b,
    force-or!(f pack2) unpack2)
