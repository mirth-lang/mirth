module std.input

import std.prelude
import std.byte
import std.maybe
import std.str
import std.buffer
import std.world
import std.file

#########
# Input #
#########

def INPUT_BUFFER_SIZE [ Size ] { 0x2000 bytes }

struct +InputOpenState {
    length: Size
    offset: Offset
    +file:   +File
    +buffer: +Buffer
    --
    def end! [ +InputOpenState -- +File ] {
        /+InputOpenState +file> ldrop
    }

    def refill-buffer! [ +InputOpenState -- +Input ] {
        +buffer(base >ptr size >size) +file:unsafe:read-bytes! ok? filter(0B>) if?(
            length!
            0 >Offset offset!
            +Input.Open,

            end! +Input.Done
        )
    }

    ||| Refill input buffer if empty.
    def prepare-for-more! [ +InputOpenState -- +Input ] {
        length 0B= if(refill-buffer!, +Input.Open)
    }
}

data +Input {
    Open [ +InputOpenState ]
    Done [ +File ]
    --
    def start! [ +File -- +Input ] {
        >+file
        INPUT_BUFFER_SIZE +Buffer.new >+buffer
        0 bytes >length
        0 Offset >offset
        +InputOpenState refill-buffer!
    }

    def stop! [ +Input -- +Input ] {
        end! +Input.Done
    }

    def end! [ +Input -- +File ] {
        { Open -> end! }
        { Done -> id }
    }

    def done? [ +Input -- Bool +Input ] {
        { Open -> False +Input.Open }
        { Done -> True +Input.Done }
    }

    ||| Return the current char in the input buffer.
    ||| Returns NUL if the file is already exhausted.
    def peek [ +Input -- Byte +Input ] {
        { Open -> offset +buffer:@U8 >Byte +Input.Open }
        { Done -> Byte.BNUL +Input.Done }
    }

    ||| Move to next char in input buffer.
    ||| Does nothing if the file is already exhausted.
    def move! [ +Input -- +Input ] {
        { Open -> length:1B- offset:1B+ prepare-for-more! }
        { Done -> +Input.Done }
    }

    ||| Read a chunk of input.
    def read-chunk! [ +Input -- Maybe(Str) +Input ] {
        { Open ->
            offset length +buffer:@Str Some
            refill-buffer! }
        { Done ->
            None +Input.Done }
    }

    ||| Read the whole file.
    def read-file! [ +Input -- Str +Input ] {
        "" while-some(read-chunk!, cat)
    }
}
