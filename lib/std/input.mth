module(std.input)

import(std.prelude)
import(std.byte)
import(std.maybe)
import(std.str)
import(std.buffer)
import(std.posix)
import(std.file)

#########
# Input #
#########

data(+InputOpenState, +InputOpenState ->
    length: Size
    offset: Offset
    +File
    +Buffer)

def(+InputOpenState.~File(f), (*a +File -- *b +File) *a +InputOpenState -- *b +InputOpenState,
    /+InputOpenState length> offset> dip2(rdip(f)) >offset >length +InputOpenState)
def(+InputOpenState.~Buffer(f), (*a +Buffer -- *b +Buffer) *a +InputOpenState -- *b +InputOpenState,
    /+InputOpenState length> offset> dip2(rdip'(f)) >offset >length +InputOpenState)

data(+Input,
    +InputOpen -> +InputOpenState,
    +InputDone -> +File)

def(INPUT_BUFFER_SIZE, Size, 0x2000 >Size)

def(+Input.start!, +File -- +Input,
    INPUT_BUFFER_SIZE +Buffer.new
    0 >Size >length
    0 >Offset >offset
    +InputOpenState fill-buffer!)

def(+Input.stop!, +Input -- +Input,
    end! +InputDone)

def(+Input.end!, +Input -- +File,
    +InputOpen -> /+InputOpenState rdrop length> offset> drop2,
    +InputDone -> id)

def(+Input.done?, +Input -- Bool +Input,
    +InputOpen -> False +InputOpen,
    +InputDone -> True +InputDone)

def(+InputOpenState.fill-buffer!, +InputOpenState -- +Input,
    ~Buffer(buffer-base buffer-size)
    ~File(unsafe-read!)
    dup 0> if(
        length!
        0 >Offset offset!
        +InputOpen,
        drop +InputOpen stop!
    ))

# Return the current char in the input buffer.
# Panics if file is exhausted.
def(+Input.peek, +Input -- Byte +Input,
    +InputOpen -> offset ~Buffer(@U8 >Byte) +InputOpen,
    +InputDone -> "error: no more input" panic!)

# Move to next char in input buffer.
# Panics if file is exhausted.
def(+Input.move!, +Input -- +Input,
    +InputOpen ->
        offset:1+
        prepare-for-more!,
    +InputDone ->
        "error: no more input" panic!)

||| Refill input buffer.
def(+InputOpenState.prepare-for-more!, +InputOpenState -- +Input,
    offset length >Offset >= if(
        fill-buffer!,
        +InputOpen
    ))

||| Read a chunk of input.
def(+Input.read-chunk!, +Input -- Maybe(Str) +Input,
    +InputOpen ->
        offset
        length offset >Int >Size -
        ~Buffer(@Str)
        fill-buffer!
        Some,
    +InputDone ->
        None +InputDone)

||| Read the whole file.
def(+Input.read-file!, +Input -- Str +Input,
    "" while-some(read-chunk!, cat))
