module std.list

import std.prelude
import std.maybe
import std.either
import std.str

alias L0 List.L0
alias L1 List.L1 alias N1 Nest.N1
alias L2 List.L2 alias N2 Nest.N2
alias L3 List.L3 alias N3 Nest.N3
alias L4 List.L4 alias N4 Nest.N4
alias L5 List.L5 alias N5 Nest.N5
alias L6 List.L6 alias N6 Nest.N6
alias L7 List.L7 alias N7 Nest.N7
alias L8 List.L8 alias N8 Nest.N8

data List(t) {
    0 Nil
    1 Cons [ t List(t) ]
    --
    inline {
        def L0 [                   -- List(t) ] { List.Nil }
        def L1 [ t                 -- List(t) ] { L0 cons }
        def L2 [ t t               -- List(t) ] { L1 cons }
        def L3 [ t t t             -- List(t) ] { L2 cons }
        def L4 [ t t t t           -- List(t) ] { L3 cons }
        def L5 [ t t t t  t        -- List(t) ] { L4 cons }
        def L6 [ t t t t  t t      -- List(t) ] { L5 cons }
        def L7 [ t t t t  t t t    -- List(t) ] { L6 cons }
        def L8 [ t t t t  t t t t  -- List(t) ] { L7 cons }
    }

    def empty? [ List(t) -- Bool ] { enum-value 0= }
    def single? [ List(t) -- Maybe(t) ] { Nil -> None, Cons -> empty? if(Some, drop None) }
    def pair? [ List(t) -- Maybe([t t]) ] {
        Nil -> None,
        Cons -> match {
            Nil -> drop None,
            Cons -> match {
                Nil -> pack2 Some,
                _ -> drop3 None
            }
        }
    }

    def >Nest? [ List(t) -- Maybe(Nest(t)) ] { Cons -> >tail >head Nest Some, Nil -> None }
    def len [ List(t) -- Nat ] { 0u swap for(drop 1+) }

    def cons [ t List(t) -- List(t) ] { List.Cons }
    def cons+ [ t List(t) -- Nest(t) ] { Nest.Cons }
    def uncons [ List(t) -- Maybe(t) List(t) ] {
        { Nil -> None List.Nil }
        { Cons -> dip(Some) }
    }

    def Snoc [ List(t) t -- List(t) ] { swap reverse cons reverse }
    def snoc [ List(t) t -- List(t) ] { List.Snoc }
    def snoc+ [ List(t) t -- Nest(t) ] { swap reverse cons+ reverse }
    def unsnoc [ List(t) -- List(t) Maybe(t) ] { reverse uncons reverse swap }

    def cat [ List(t) List(t) -- List(t) ] {
        { Nil -> id }
        { _ -> swap reverse-for(swap cons) }
    }
    def cat+ [ Nest(t) List(t) -- Nest(t) ] {
        dip(uncons) cat cons+
    }

    def head [ List(x) -- Maybe(x) ] {
        { Nil -> None }
        { Cons -> drop Some }
    }
    def tail [ List(x) -- List(x) ] {
        { Nil -> List.Nil }
        { Cons -> nip }
    }
    def first [ List(t) -- Maybe(t) ] { >Nest? map(head) }
    def last  [ List(t) -- Maybe(t) ] { >Nest? map(last) }

    def drop-slice [ Nat List(x) -- List(x) ] { swap repeat(tail) }

    ||| Reverse the list.
    def reverse [ List(a) -- List(a) ] {
        List.Nil swap for(swap cons)
    }

    ||| Transform each element of the list.
    def map(f) [ (*c a -- *c b) *c List(a) -- *c List(b) ] {
        List.Mk(for(rdip(f) ;))
    }

   def if-cons(f,g) [ (*a x List(x) -- *b, *a -- *b) *a List(x) -- *b ] {
        { Cons -> f }
        { Nil -> g }
    }

    ||| Traverse the list, left to right.
    def for(f) [ (*c a -- *c) *c List(a) -- *c ] {
        while(if-cons(dip(f) True, List.Nil False)) drop
    }

    ||| Traverse the list, right to left.
    def reverse-for(f) [ (*c a -- *c) *c List(a) -- *c ] {
        reverse for(f)
    }

    ||| Traverse the list, left to right, with an action between each item.
    def for(f,g) [ (*a t -- *a, *a -- *a) *a List(t) -- *a ] {
        uncons dip:for(f) for(dip(g) f)
    }

    ||| Reduce a list via binary operation.
    def fold(g) [ (*c a a -- *c a) *c List(a) -- *c Maybe(a) ] {
        >Nest? map(fold(g))
    }

    ||| Sum together a list of numbers.
    def sum(g {+}) [ (*c a a -- *c a) *c List(a) -- *c Maybe(a)] {
        fold(g)
    }

    ||| Multiply together a list of numbers.
    def product(g {*}) [ (*c a a -- *c a) *c List(a) -- *c Maybe(a)] {
        fold(g)
    }

    ||| Filter away any list elements that don't satisfy the predicate.
    def filter(f) [ (*c a -- *c Bool) *c List(a) -- *c List(a) ] {
        List.Mk(for(dup dip:rdip(f) swap if(;, drop)))
    }

    ||| Transform each element of a list into a new list, and concatenate all these lists.
    def flatmap(f) [ (*c a -- *c List(b)) *c List(a) -- *c List(b) ] {
        List.Mk(for(rdip(f) for(;)))
    }
    alias(List.bind(f), List.flatmap)

    ||| Map each element of a list into the [Maybe] type, and collect all of the
    ||| [Some] results while discarding all of the [None] results.
    def filter-some(p) [ (*c a -- *c Maybe(b)) *c List(a) -- *c List(b) ] {
        List.Mk(for(rdip(p) for(;)))
    }

    ||| Find first element that returns [Some], if it exists.
    def find-some(f) [ (*c a -- *c Maybe(b)) *c List(a) -- *c Maybe(b) ] {
        None swap while-some(
            uncons swap,
            dip'(dip'(f)) match(
                None -> id,
                _ -> dip(drop2) List.Nil
            )
        ) drop
    }

    ||| Find last element that returns Some, if it exists.
    def reverse-find-some(f) [ (*c a -- *c Maybe(b)) *c List(a) -- *c Maybe(b) ] {
        reverse find-some(f)
    }

    ||| Find the first element that satisfies the predicate, if it exists.
    def find(f) [ (*c a -- *c Bool) *c List(a) -- *c Maybe(a) ] {
        find-some(dup dip(f) swap if(Some, drop None))
    }

    ||| Find the last element that satisfies the predicate, if it exists.
    def reverse-find(f) [ (*c a -- *c Bool) *c List(a) -- *c Maybe(a) ] {
        reverse-find-some(dup dip(f) swap if(Some, drop None))
    }

    ||| Is the predicate true for any element of the list?
    def has(f) [ (*c a -- *c Bool) *c List(a) -- *c Bool ] {
        find(f) some?
    }

    ||| Is the predicate true for all elements of the list?
    def all(f) [ (*c a -- *c Bool) *c List(a) -- *c Bool ] {
        find(f not) none?
    }

    ||| If the predicate matches all elements of the list, return the result. Otherwise return None.
    def all-some(f) [ (*c a -- *c Maybe(b)) *c List(a) -- *c Maybe(List(b)) ] {
        >rest True >ok L0 build! while-some(
            @rest:uncons,
            @rest(@ok(dip2:rdip(f))) if?(
                ; ,
                False !ok
                List.Nil !rest
            )
        )
        rest> drop
        ok> if(done! Some, rdrop None)
    }

    def ==(eq {==}) [ (*c a a -- *c Bool) *c List(a) List(a) -- *c Bool ] {
        True while (
            dip(dip(uncons) uncons dip(swap) dip2(==(eq)) rotl) &&
            over2 empty? over2 empty? && not over &&,
            id
        )
        dip(drop2)
    }

    def(lookup(p {.key ==}), (*c k a -- *c Bool) *c k List(a) -- *c Maybe(a),
        find(over dip(p) swap) nip)

    def(reverse-lookup(p {.key ==}), (*c k a -- *c Bool) *c k List(a) -- *c Maybe(a),
        reverse-find(over dip(p) swap) nip)

    def(member(p {==}), (*c k a -- *c Bool) *c k List(a) -- *c Bool,
        lookup(p) some?)

    def(difference(eq {==}), (*c a a -- *c Bool) *c List(a) List(a) -- *c List(a),
        swap filter(over dip(swap member(eq) not) swap) nip)

    def(union(eq {==}), (*c a a -- *c Bool) *c List(a) List(a) -- *c List(a),
        over dip(swap difference(eq)) swap cat)

    def(unions(eq {==}), (*c a a -- *c Bool) *c List(List(a)) -- *c List(a),
        fold(union(eq)) unwrap(List.Nil))

    def(map2(f), (*c x y -- *c z) *c List(x) List(y) -- *c List(z),
        collect(uncons dip(dip:uncons swap dip:map2:f) rotl) dip:drop2)

    def(take-while(p), (*a t -- *a Bool) *a List(t) -- *a List(t),
        collect(uncons dip:filter(p) swap) nip)

    def split-at(p) [ (*a t -- *a Bool) *a List(t) -- *a List(t) List(t) ] {
        List.Mk(
            while (
                if-cons(
                    dip:sip:rdip(p) rotl if(
                        cons False,
                        dip(;) True
                    ),
                    List.Nil False
                )
            )
        ) swap
    }

    def(partition-either(p), (*a t -- *a Either(t1,t2))
            *a List(t) -- *a List(t1) List(t2),
        List.Nil List.Nil rotl for(
            dip'(dip'(p)) match(
                Left -> rotr dip:cons,
                Right -> swap cons
            )
        ) dip(reverse) reverse)

    def(partition(p), (*a t -- *a Bool) *a List(t) -- *a List(t) List(t),
        partition-either(dup dip(p) swap if(Right, Left)))

    def(show;(f {show;}), (t +Str -- +Str) List(t) +Str -- +Str,
        "List.Mk( " ; for(f " ; " ;) ")" ;)
}

||| "Nest" is short for "Non-Empty List". It's a List that has at least one element.
struct Nest(t) {
    head: t
    tail: List(t)
    --
    def N1 [ t                 -- Nest(t) ] { L0 >tail >head Nest }
    def N2 [ t t               -- Nest(t) ] { L1 >tail >head Nest }
    def N3 [ t t t             -- Nest(t) ] { L2 >tail >head Nest }
    def N4 [ t t t t           -- Nest(t) ] { L3 >tail >head Nest }
    def N5 [ t t t t  t        -- Nest(t) ] { L4 >tail >head Nest }
    def N6 [ t t t t  t t      -- Nest(t) ] { L5 >tail >head Nest }
    def N7 [ t t t t  t t t    -- Nest(t) ] { L6 >tail >head Nest }
    def N8 [ t t t t  t t t t  -- Nest(t) ] { L7 >tail >head Nest }
    def Cons [ t List(t) -- Nest(t) ] { >tail >head Nest }
    def /Cons [ Nest(t) -- t List(t) ] { /Nest head> tail> }

    def single? [ Nest(t) -- Maybe(t) ] {
        /Nest head> tail> empty? if(Some, drop None)
    }
    def pair? [ Nest(t) -- Maybe([t t]) ] {
        uncons single? if?(pack2 Some, drop None)
    }

    def >List [ Nest(t) -- List(t) ] { /Cons cons }

    def len [ Nest(t) -- Nat ] { tail len 1+ }

    def cons [ t Nest(t) -- Nest(t) ] { >List >tail >head Nest }
    def uncons [ Nest(t) -- t List(t) ] { /Nest head> tail> }

    def Snoc [ List(t) t -- Nest(t) ] { List.snoc+ }
    def snoc [ Nest(t) t -- Nest(t) ] { dip(>List) List.snoc+ }
    def unsnoc [ Nest(t) -- List(t) t ] { reverse uncons reverse swap }

    def cat  [ List(t) Nest(t) -- Nest(t) ] { swap reverse-for(swap cons) }
    def cat+ [ Nest(t) Nest(t) -- Nest(t) ] { >List cat+ }

    def first [ Nest(t) -- t ] { head }
    def last  [ Nest(t) -- t ] { uncons for(nip) }

    ||| Reverse the list.
    def reverse [ Nest(t) -- Nest(t) ] {
        /Nest head> N1 tail> for(swap cons)
    }

    ||| Transform each element of the list.
    def map(f) [ (*c a -- *c b) *c Nest(a) -- *c Nest(b) ] {
        uncons on2(f, map(f)) cons+
    }

    ||| Traverse the list, left to right.
    def for(f) [ (*c a -- *c) *c Nest(a) -- *c ] {
        uncons dip(f) for(f)
    }

    ||| Traverse the list, right to left.
    def reverse-for(f) [ (*c a -- *c) *c Nest(a) -- *c ] {
        uncons swap dip(reverse-for(f)) f
    }

    ||| Traverse the list, left to right, with an action between each item.
    def for(f,g) [ (*a t -- *b, *b -- *a) *a Nest(t) -- *b ] {
        uncons dip(f) for(dip(g) f)
    }

    ||| Reduce a list via binary operation.
    def fold(g) [ (*c a a -- *c a) *c Nest(a) -- *c a ] {
        uncons for(g)
    }

    ||| Sum together a list of numbers.
    def sum(g {+}) [ (*c a a -- *c a) *c Nest(a) -- *c a ] {
        fold(g)
    }

    ||| Multiply together a list of numbers.
    def product(g {*}) [ (*c a a -- *c a) *c Nest(a) -- *c a ] {
        fold(g)
    }

    ||| Filter away any list elements that don't satisfy the predicate.
    def filter(f) [ (*c a -- *c Bool) *c Nest(a) -- *c List(a) ] {
        >List filter(f)
    }

    ||| Transform each element of a list into a new list, and concatenate all these lists.
    def flatmap(f) [ (*c a -- *c List(b)) *c Nest(a) -- *c List(b) ] {
        >List flatmap(f)
    }

    ||| Transform each element of a list into a new list, and concatenate all these lists.
    ||| This variant of [List.flatmap] preserves the non-emptiness of the list.
    def flatmap+(f) [ (*c a -- *c Nest(b)) *c Nest(a) -- *c Nest(b) ] {
        uncons Nest.Mk(
            dip(rdip(f) uncons dip(;+) for(;))
            for(rdip(f) for(;))
        )
    }
    alias(Nest.bind(f), Nest.flatmap+)

    ||| Map each element of a list into the [Maybe] type, and collect all of the
    ||| [Some] results while discarding all of the [None] results.
    def filter-some(p) [ (*c a -- *c Maybe(b)) *c Nest(a) -- *c List(b) ] {
        >List filter-some(p)
    }

    ||| Find first element that returns [Some], if it exists.
    def find-some(f) [ (*c a -- *c Maybe(b)) *c Nest(a) -- *c Maybe(b) ] {
        >List find-some(f)
    }

    ||| Find last element that returns Some, if it exists.
    def reverse-find-some(f) [ (*c a -- *c Maybe(b)) *c Nest(a) -- *c Maybe(b) ] {
        >List reverse-find-some(f)
    }

    ||| Find the first element that satisfies the predicate, if it exists.
    def find(f) [ (*c a -- *c Bool) *c Nest(a) -- *c Maybe(a) ] {
        find-some(dup dip(f) swap if(Some, drop None))
    }

    ||| Find the last element that satisfies the predicate, if it exists.
    def reverse-find(f) [ (*c a -- *c Bool) *c Nest(a) -- *c Maybe(a) ] {
        reverse-find-some(dup dip(f) swap if(Some, drop None))
    }

    ||| Is the predicate true for any element of the list?
    def has(f) [ (*c a -- *c Bool) *c Nest(a) -- *c Bool ] {
        find(f) some?
    }

    ||| Is the predicate true for all elements of the list?
    def all(f) [ (*c a -- *c Bool) *c Nest(a) -- *c Bool ] {
        find(f not) none?
    }

    def ==(eq {==}) [ (*c a a -- *c Bool) *c Nest(a) Nest(a) -- *c Bool ] {
        dip(>List) >List ==(eq)
    }

    def(lookup(p {.key ==}), (*c k a -- *c Bool) *c k Nest(a) -- *c Maybe(a),
        find(over dip(p) swap) nip)

    def(reverse-lookup(p {.key ==}), (*c k a -- *c Bool) *c k Nest(a) -- *c Maybe(a),
        reverse-find(over dip(p) swap) nip)

    def(member(p {==}), (*c k a -- *c Bool) *c k Nest(a) -- *c Bool,
        >List lookup(p) some?)

    def(map2(f), (*c x y -- *c z) *c Nest(x) Nest(y) -- *c Nest(z),
        dip(uncons) uncons dip(swap dip:f) rotl dip(map2(f)) swap cons+)

    def(take-while(p), (*a t -- *a Bool) *a Nest(t) -- *a List(t),
        >List take-while(p))

    def(partition-either(p), (*a t -- *a Either(t1,t2))
            *a Nest(t) -- *a List(t1) List(t2),
        >List partition-either(p))

    def(partition(p), (*a t -- *a Bool) *a Nest(t) -- *a List(t) List(t),
        partition-either(dup dip(p) swap if(Right, Left)))

    def(show;(f {show;}), (t +Str -- +Str) Nest(t) +Str -- +Str,
        "Nest.Mk( " ; unsnoc dip:for(f " ; " ;) f " ;+ )" ;)

}


||| Build a list through iteration, stopping at the first None.
def collect(f {.next swap}) [ (*a -- *a Maybe(b)) *a -- *a List(b) ] {
    List.Mk(while-some(rdip(f), ;))
}

||| Build a list through repetition, stopping when condition becomes false.
def collect-while(f,g) [ (*a -- *a Bool, *a -- *a b) *a -- *a List(b) ] {
    List.Mk(while(rdip(f), rdip(g) ;))
}

||| Count up, inclusive at both ends.
def Int.range [ Int Int -- List(Int) ] {
    collect-while(dup2 <=, over dip2:1+) dip:drop2
}

inline(
    ||| Count up, inclusive at both ends.
    ||| Same as [Int.range] but takes the lower bound from the stack,
    ||| and the upper bound from the parameter `f`.
    |||
    |||     1 to: -1 => ( L0 )
    |||     1 to: 0 => ( L0 )
    |||     1 to: 1 => ( 1 L1 )
    |||     1 to: 2 => ( 1 2 L2 )
    |||     1 to: 3 => ( 1 2 3 L3 )
    |||     1 to: 4 => ( 1 2 3 4 L4 )
    def Int.to(f) [ (*a -- *a Int) *a Int -- *a List(Int) ] {
        dip(f) swap range
    }

    ||| Count up, inclusive at both ends.
    ||| Same as [Int.range] but takes the upper bound from the stack,
    ||| and the lower bound from the parameter `f`.
    |||
    |||     0 from: 1 => ( L0 )
    |||     1 from: 1 => ( 1 L1 )
    |||     2 from: 1 => ( 1 2 L2 )
    |||     3 from: 1 => ( 1 2 3 L3 )
    |||     4 from: 1 => ( 1 2 3 4 L4 )
    def Int.from(f) [ (*a -- *a Int) *a Int -- *a List(Int) ] {
        dip(f) range
    }
)

struct +Lister(t) {
    reversed: List(t)
    --
    def +Nil [ +Lister(t) ] { L0 >reversed +Lister }
    def +Snoc [ +Lister(t) t -- +Lister(t) ] { reversed:cons }
    def rdrop [ +Lister(t) -- ] { +Lister -> reversed> drop }
    def rdup [ +Lister(t) -- +Lister(t) +Lister(t) ] { reversed >reversed +Lister }

    def copy! [ +Lister(t) -- +Lister(t) List(t) ] { reversed reverse }
    def done! [ +Lister(t) -- List(t) ] { +Lister -> reversed> reverse }
    def List.build! [ List(t) -- +Lister(t) ] { reverse >reversed +Lister }

    def push! [ t +Lister(t) -- +Lister(t) ] { reversed:cons }
    def push+! [ t +Lister(t) -- +Nester(t) ] { +Lister -> @reversed:cons+ +Nester }
    def pop!  [ +Lister(t) -- Maybe(t) +Lister(t) ] { reversed:uncons }
    def pop-all! [ +Lister(t) -- List(t) +Lister(t) ] { reversed:L0 reverse }

    inline def ;  { push!  }
    inline def ;+ { push+! }
}
struct +Nester(t) {
    reversed: Nest(t)
    --
    def +Snoc [ +Lister(t) t -- +Nester(t) ] { +Lister -> @reversed:cons+ +Nester }

    def rdrop [ +Nester(t) -- ] { +Nester -> reversed> drop }
    def rdup [ +Nester(t) -- +Nester(t) +Nester(t) ] { reversed >reversed +Nester }
    def copy! [ +Nester(t) -- +Nester(t) Nest(t) ] { reversed reverse }
    def done! [ +Nester(t) -- Nest(t) ] { +Nester -> reversed> reverse }
    def Nest.build! [ Nest(t) -- +Nester(t) ] { reverse >reversed +Nester }

    def push! [ t +Nester(t) -- +Nester(t) ] { reversed:cons }
    def pop!  [ +Nester(t) -- t +Lister(t) ] { +Nester -> @reversed:uncons +Lister }
    def pop-all! [ +Nester(t) -- Nest(t) +Lister(t) ] { +Nester -> @reversed:L0 +Lister reverse }
    inline def ; { push! }
}

def List.Mk(f) [ (*a +Lister(t) -- *b +Lister(t)) *a -- *b List(t) ] { L0 build! f done! }
def Nest.Mk(f) [ (*a +Lister(t) -- *b +Nester(t)) *a -- *b Nest(t) ] { L0 build! f done! }

data +List(+t) {
    +Nil
    +Cons [ +t +List(+t) ]
    --
    def rdrop (f {rdrop}) [ (*x +t -- *x) *x +List(+t) -- *x ] { +for(f) }
    def +for(f) [ (*x +t -- *x) *x +List(+t) -- *x ] {
        { +Nil -> id }
        { +Cons -> rdip:f +for:f }
    }
    def +map(f) [ (*x +a -- *x +b) *x +List(+a) -- *x +List(+b) ] {
        { +Nil -> +List.+Nil }
        { +Cons -> rdip:f rdip':+map:f +List.+Cons }
    }
}

struct +Nest(+t) {
    +head: +t
    +tail: +List(+t)
    --
}
