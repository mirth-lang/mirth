module(std.list)

import(std.prelude)
import(std.maybe)
import(std.either)
import(std.str)

data List(t) {
    Nil
    Cons [ t List(t) ]
}

struct List+(t) {
    head: t
    tail: List(t)
}

inline(
    def L0 [                   -- List(t) ] { Nil }
    def L1 [ t                 -- List(t) ] { Nil Cons }
    def L2 [ t t               -- List(t) ] { Nil Cons Cons }
    def L3 [ t t t             -- List(t) ] { Nil Cons Cons Cons }
    def L4 [ t t t t           -- List(t) ] { Nil Cons Cons Cons Cons }
    def L5 [ t t t t  t        -- List(t) ] { Nil Cons Cons Cons Cons Cons }
    def L6 [ t t t t  t t      -- List(t) ] { Nil Cons Cons Cons Cons Cons Cons }
    def L7 [ t t t t  t t t    -- List(t) ] { Nil Cons Cons Cons Cons Cons Cons Cons }
    def L8 [ t t t t  t t t t  -- List(t) ] { Nil Cons Cons Cons Cons Cons Cons Cons Cons }
)

def List./L0 [ List(t) -- Bool           ] { Nil -> True, _ -> drop False }
def List./L1 [ List(t) -- Maybe(t)       ] { Cons -> match(Nil -> Some, _ -> drop2 None), _ -> drop None }
def List./L2 [ List(t) -- Maybe([t t])   ] { Cons -> /L1 if-some(pack2 Some, drop None), _ -> drop None }
def List./L3 [ List(t) -- Maybe([t t t]) ] { Cons -> /L2 if-some(unpack2 pack3 Some, drop None), _ -> drop None }

def List.empty? [ List(t) -- Bool ] { Nil -> True, _ -> drop False }
def List.len [ List(t) -- Nat ] {
    0u swap for(drop 1+)
}

inline(
    def L1+ [ t                 -- List+(t) ] { L0 >tail >head List+ }
    def L2+ [ t t               -- List+(t) ] { L1 >tail >head List+ }
    def L3+ [ t t t             -- List+(t) ] { L2 >tail >head List+ }
    def L4+ [ t t t t           -- List+(t) ] { L3 >tail >head List+ }
    def L5+ [ t t t t  t        -- List+(t) ] { L4 >tail >head List+ }
    def L6+ [ t t t t  t t      -- List+(t) ] { L5 >tail >head List+ }
    def L7+ [ t t t t  t t t    -- List+(t) ] { L6 >tail >head List+ }
    def L8+ [ t t t t  t t t t  -- List+(t) ] { L7 >tail >head List+ }
    def List+.>List [ List+(t) -- List(t) ] { /List+ head> tail> Cons }
    def List+.len   [ List+(t) -- Nat     ] { tail len 1+ }
    def List+./L1+  [ List+(t) -- Maybe(t) ] { /List+ head> tail> /L0 if(Some, drop None) }
    def List+./L2+  [ List+(t) -- Maybe([t t]) ] { /List+ tail> /L1 map(@head swap pack2) head> drop }
)

def List.>List+ [ List(t) -- Maybe(List+(t)) ] {
    { Nil -> None }
    { Cons -> >tail >head List+ Some }
}

inline(
    def List.cons [ t List(t) -- List(t) ] { Cons }
    def List.cons+ [ t List(t) -- List+(t) ] { >tail >head List+ }
    def List+.cons+ [ t List+(t) -- List+(t) ] { >List cons+ }

    def List+.snoc+ [ List+(t) t -- List+(t) ] { dip(>List) List.snoc+ }
    def List.snoc+  [ List(t) t -- List+(t) ] {
        >x match {
            Nil -> x> L1+,
            Cons -> x> List.snoc cons+
        }
    }
    def List.snoc [ List(t) t -- List(t) ] {
        swap reverse cons reverse
    }
)

def List.uncons [ List(t) -- Maybe(t) List(t) ] {
    { Nil -> None Nil }
    { Cons -> dip(Some) }
}

def List+.uncons [ List+(t) -- t List(t) ] {
    /List+ head> tail>
}

def List.unsnoc [ List(t) -- List(t) Maybe(t) ] {
    reverse uncons reverse swap
}

def List+.unsnoc [ List+(t) -- List(t) t ] {
    reverse uncons reverse swap
}

def List.cat [ List(t) List(t) -- List(t) ] {
    { Nil -> id }
    { _ -> swap reverse-for(swap Cons) }
}

def List.cat+ [ List+(t) List(t) -- List+(t) ] { dip(uncons) cat cons+ }
def List+.cat [ List(t) List+(t) -- List+(t) ] { swap reverse-for(swap cons+) }
def List+.cat+ [ List+(t) List+(t) -- List+(t) ] { >List cat+ }

def List.first [ List(t) -- Maybe(t) ] { >List+ map(head) }
def List.last  [ List(t) -- Maybe(t) ] { >List+ map(last) }

def List+.first [ List+(t) -- t ] { head }
def List+.last  [ List+(t) -- t ] { uncons for(nip) }

||| Reverse the list.
def List.reverse [ List(a) -- List(a) ] {
    L0 swap for(swap Cons)
}

def List+.reverse [ List+(t) -- List+(t) ] {
    uncons dip(L1+) for(swap cons+)
}

||| Reverse the list.
inline(
    ||| Transform each element of the list.
    def List.map(f) [ (*c a -- *c b) *c List(a) -- *c List(b) ] {
        LIST(for(rdip(f) ;))
    }

    ||| Transform each element of the list.
    def List+.map(f) [ (*c a -- *c b) *c List+(a) -- *c List+(b) ] {
        uncons
        dip(f) swap
        dip(map(f)) swap
        cons+
    }

    ||| Traverse the list, left to right.
    def List.for(f) [ (*c a -- *c) *c List(a) -- *c ] {
        while-some(uncons swap, swap dip(f)) drop
    }

    ||| Traverse the list, left to right.
    def List+.for(f) [ (*c a -- *c) *c List+(a) -- *c ] {
        uncons dip(f) for(f)
    }

    ||| Traverse the list, right to left.
    def List.reverse-for(f) [ (*c a -- *c) *c List(a) -- *c ] {
        reverse for(f)
    }

    ||| Traverse the list, right to left.
    def List+.reverse-for(f) [ (*c a -- *c) *c List+(a) -- *c ] {
        uncons swap dip(reverse-for(f)) f
    }

    ||| Traverse the list, left to right, with an action between each item.
    def List.for(f,g) [ (*a t -- *a, *a -- *a) *a List(t) -- *a ] {
        uncons dip:for(f) for(dip(g) f)
    }

    ||| Traverse the list, left to right, with an action between each item.
    def List+.for(f,g) [ (*a t -- *b, *b -- *a) *a List+(t) -- *b ] {
        uncons dip(f) for(dip(g) f)
    }

    ||| Reduce a list via binary operation.
    def List.fold(g) [ (*c a a -- *c a) *c List(a) -- *c Maybe(a) ] {
        >List+ map(fold(g))
    }

    ||| Reduce a list via binary operation.
    def List+.fold(g) [ (*c a a -- *c a) *c List+(a) -- *c a ] {
        uncons for(g)
    }

    ||| Filter away any list elements that don't satisfy the predicate.
    def List.filter(f) [ (*c a -- *c Bool) *c List(a) -- *c List(a) ] {
        filter-some(dup dip(f) swap if(Some, drop None))
    }

    ||| Filter away any list elements that don't satisfy the predicate.
    def List+.filter(f) [ (*c a -- *c Bool) *c List+(a) -- *c List(a) ] {
        >List filter(f)
    }

    ||| Transform each element of a list into a new list, and concatenate all these lists.
    def List.flatmap(f) [ (*c a -- *c List(b)) *c List(a) -- *c List(b) ] {
        LIST(for(rdip(f) for(;)))
    }
    alias(List.bind(f), List.flatmap)

    ||| Transform each element of a list into a new list, and concatenate all these lists.
    def List+.flatmap(f) [ (*c a -- *c List(b)) *c List+(a) -- *c List(b) ] {
        >List flatmap(f)
    }

    ||| Transform each element of a list into a new list, and concatenate all these lists.
    ||| This variant of [List.flatmap] preserves the non-emptiness of the list.
    def List+.flatmap+(f) [ (*c a -- *c List+(b)) *c List+(a) -- *c List+(b) ] {
        uncons LIST+(
            dip(rdip(f) uncons dip(;+) for(;))
            for(rdip(f) for(;))
        )
    }
    alias(List+.bind(f), List+.flatmap+)

    ||| Map each element of a list into the [Maybe] type, and collect all of the
    ||| [Some] results while discarding all of the [None] results.
    def List.filter-some(p) [ (*c a -- *c Maybe(b)) *c List(a) -- *c List(b) ] {
        LIST(for(rdip(p) for(;)))
    }

    ||| Map each element of a list into the [Maybe] type, and collect all of the
    ||| [Some] results while discarding all of the [None] results.
    def List+.filter-some(p) [ (*c a -- *c Maybe(b)) *c List+(a) -- *c List(b) ] {
        >List filter-some(p)
    }

    ||| Find first element that returns [Some], if it exists.
    def List.find-some(f) [ (*c a -- *c Maybe(b)) *c List(a) -- *c Maybe(b) ] {
        None swap while-some(
            uncons swap,
            dip'(dip'(f)) match(
                None -> id,
                _ -> dip(drop2) Nil
            )
        ) drop
    }

    ||| Find first element that returns [Some], if it exists.
    def List+.find-some(f) [ (*c a -- *c Maybe(b)) *c List+(a) -- *c Maybe(b) ] {
        >List find-some(f)
    }

    ||| Find last element that returns Some, if it exists.
    def List.reverse-find-some(f) [ (*c a -- *c Maybe(b)) *c List(a) -- *c Maybe(b) ] {
        reverse find-some(f)
    }

    ||| Find last element that returns Some, if it exists.
    def List+.reverse-find-some(f) [ (*c a -- *c Maybe(b)) *c List+(a) -- *c Maybe(b) ] {
        >List reverse-find-some(f)
    }

    ||| Find the first element that satisfies the predicate, if it exists.
    def List.find(f) [ (*c a -- *c Bool) *c List(a) -- *c Maybe(a) ] {
        find-some(dup dip(f) swap if(Some, drop None))
    }

    ||| Find the first element that satisfies the predicate, if it exists.
    def List+.find(f) [ (*c a -- *c Bool) *c List+(a) -- *c Maybe(a) ] {
        find-some(dup dip(f) swap if(Some, drop None))
    }

    ||| Find the last element that satisfies the predicate, if it exists.
    def List.reverse-find(f) [ (*c a -- *c Bool) *c List(a) -- *c Maybe(a) ] {
        reverse-find-some(dup dip(f) swap if(Some, drop None))
    }

    ||| Find the last element that satisfies the predicate, if it exists.
    def List+.reverse-find(f) [ (*c a -- *c Bool) *c List+(a) -- *c Maybe(a) ] {
        reverse-find-some(dup dip(f) swap if(Some, drop None))
    }

    ||| Is the predicate true for any element of the list?
    def List.has(f) [ (*c a -- *c Bool) *c List(a) -- *c Bool ] {
        find(f) some?
    }

    ||| Is the predicate true for any element of the list?
    def List+.has(f) [ (*c a -- *c Bool) *c List+(a) -- *c Bool ] {
        find(f) some?
    }

    ||| Is the predicate true for all elements of the list?
    def List.all(f) [ (*c a -- *c Bool) *c List(a) -- *c Bool ] {
        find(f not) none?
    }

    ||| Is the predicate true for all elements of the list?
    def List+.all(f) [ (*c a -- *c Bool) *c List+(a) -- *c Bool ] {
        find(f not) none?
    }

    ||| If the predicate matches all elements of the list, return the result. Otherwise return None.
    def List.all-some(f) [ (*c a -- *c Maybe(b)) *c List(a) -- *c Maybe(List(b)) ] {
        >rest True >ok +L0 while-some(
            @rest:uncons,
            @rest(@ok(dip2:rdip(f))) if-some(
                ; ,
                False !ok
                L0 !rest
            )
        )
        rest> drop
        ok> if(freeze Some, rdrop None)
    }

    ||| Build a list through repetition, stopping at the first None.
    def collect(f) [ (*a -- *a Maybe(b)) *a -- *a List(b) ] {
        LIST(while-some(rdip(f), ;))
    }

    ||| Build a list through repetition, stopping when condition becomes false.
    def collect-while(f,g) [ (*a -- *a Bool, *a -- *a b) *a -- *a List(b) ] {
        LIST(while(rdip(f), rdip(g) ;))
    }
)

||| Count up, inclusive at both ends.
def Int.range [ Int Int -- List(Int) ] {
    collect-while(dup2 <=, over dip2:1+) dip:drop2
}

inline(
    ||| Count up, inclusive at both ends.
    ||| Same as [Int.range] but takes the lower bound from the stack,
    ||| and the upper bound from the parameter `f`.
    |||
    |||     1 to: -1 => ( L0 )
    |||     1 to: 0 => ( L0 )
    |||     1 to: 1 => ( 1 L1 )
    |||     1 to: 2 => ( 1 2 L2 )
    |||     1 to: 3 => ( 1 2 3 L3 )
    |||     1 to: 4 => ( 1 2 3 4 L4 )
    def Int.to(f) [ (*a -- *a Int) *a Int -- *a List(Int) ] {
        dip(f) swap range
    }

    ||| Count up, inclusive at both ends.
    ||| Same as [Int.range] but takes the upper bound from the stack,
    ||| and the lower bound from the parameter `f`.
    |||
    |||     0 from: 1 => ( L0 )
    |||     1 from: 1 => ( 1 L1 )
    |||     2 from: 1 => ( 1 2 L2 )
    |||     3 from: 1 => ( 1 2 3 L3 )
    |||     4 from: 1 => ( 1 2 3 4 L4 )
    def Int.from(f) [ (*a -- *a Int) *a Int -- *a List(Int) ] {
        dip(f) range
    }
)

struct +List(t) { List(t) }
struct +List+(t) { List+(t) }

inline(
    def +List.rdrop  [ +List (t) -- ] { +List  -> drop }
    def +List+.rdrop [ +List+(t) -- ] { +List+ -> drop }
    
    def +List.rdup  [ +List (t) -- +List (t) +List (t) ] { +List  -> dup dip(+List)  +List  }
    def +List+.rdup [ +List+(t) -- +List+(t) +List+(t) ] { +List+ -> dup dip(+List+) +List+ }

    def +L0 [       -- +List(t) ] { L0 +List }
    def +L1 [     t -- +List(t) ] { L1 +List }
    def +L2 [   t t -- +List(t) ] { swap L2 +List }
    def +L3 [ t t t -- +List(t) ] { flip3 L3 +List }

    def(List.thaw, List(t) -- +List(t), reverse +List)
    def(+List.freeze, +List(t) -- List(t), /+List reverse)
    def(+List.push!, +List(t) t -- +List(t), /+List Cons +List)
    def(+List.push+!, +List(t) t -- +List+(t), /+List cons+ +List+)
    def(+List.pop!, +List(t) -- +List(t) Maybe(t), /+List uncons +List)
    inline:def(+List.;, +List(t) t -- +List(t), +List.push!)
    inline:def(+List.;+, +List(t) t -- +List+(t), +List.push+!)

    def(List+.thaw, List+(t) -- +List+(t), reverse +List+)
    def(+List+.freeze, +List+(t) -- List+(t), /+List+ reverse)
    def(+List+.push!, +List+(t) t -- +List+(t), /+List+ cons+ +List+)
    def(+List+.pop!, +List+(t) -- +List(t) t, /+List+ uncons +List)
    inline:def(+List+.;, +List+(t) t -- +List+(t), +List+.push!)

    def(LIST(f), (*a +List(t) -- *b +List(t)) *a -- *b List(t), L0 thaw f freeze)
    def(LIST+(f), (*a +List(t) -- *b +List+(t)) *a -- *b List+(t), L0 thaw f freeze)
)

inline(
    def List.==(eq) [ (*c a a -- *c Bool) *c List(a) List(a) -- *c Bool ] {
        True while (
            dip(dip(uncons) uncons dip(swap) dip2(==(eq)) rotl) &&
            over2 empty? over2 empty? && not over &&,
            id
        )
        dip(drop2)
    }

    def List+.==(eq) [ (*c a a -- *c Bool) *c List+(a) List+(a) -- *c Bool ] {
        dip(>List) >List ==(eq)
    }
)

inline(
    def(List.lookup(p), (*c k a -- *c Bool) *c k List(a) -- *c Maybe(a),
        find(over dip(p) swap) nip)

    def(List+.lookup(p), (*c k a -- *c Bool) *c k List+(a) -- *c Maybe(a),
        find(over dip(p) swap) nip)

    def(List.reverse-lookup(p), (*c k a -- *c Bool) *c k List(a) -- *c Maybe(a),
        reverse-find(over dip(p) swap) nip)

    def(List+.reverse-lookup(p), (*c k a -- *c Bool) *c k List+(a) -- *c Maybe(a),
        reverse-find(over dip(p) swap) nip)

    def(List.member(p), (*c k a -- *c Bool) *c k List(a) -- *c Bool,
        lookup(p) some?)

    def(List+.member(p), (*c k a -- *c Bool) *c k List+(a) -- *c Bool,
        lookup(p) some?)

    def(List.difference(eq), (*c a a -- *c Bool) *c List(a) List(a) -- *c List(a),
        swap filter(over dip(swap member(eq) not) swap) nip)

    def(List.union(eq), (*c a a -- *c Bool) *c List(a) List(a) -- *c List(a),
        over dip(swap difference(eq)) swap cat)

    def(List.unions(eq), (*c a a -- *c Bool) *c List(List(a)) -- *c List(a),
        fold(union(eq)) unwrap(L0))

    def(List.map2(f), (*c x y -- *c z) *c List(x) List(y) -- *c List(z),
        collect(uncons dip(dip:uncons swap dip:map2:f) rotl) dip:drop2)
    def(List+.map2(f), (*c x y -- *c z) *c List+(x) List+(y) -- *c List+(z),
        dip(uncons) uncons dip(swap dip:f) rotl dip(map2(f)) swap cons+)

    def(List.take-while(p), (*a t -- *a Bool) *a List(t) -- *a List(t),
        collect(uncons dip:filter(p) swap) nip)
    def(List+.take-while(p), (*a t -- *a Bool) *a List+(t) -- *a List(t),
        >List take-while(p))

    def(List.partition-either(p), (*a t -- *a Either(t1,t2))
            *a List(t) -- *a List(t1) List(t2),
        L0 L0 rotl for(
            dip'(dip'(p)) match(
                Left -> rotr dip(Cons),
                Right -> swap Cons
            )
        ) dip(reverse) reverse)

    def(List+.partition-either(p), (*a t -- *a Either(t1,t2))
            *a List+(t) -- *a List(t1) List(t2),
        >List partition-either(p))

    def(List.partition(p), (*a t -- *a Bool) *a List(t) -- *a List(t) List(t),
        partition-either(dup dip(p) swap if(Right, Left)))
    def(List+.partition(p), (*a t -- *a Bool) *a List+(t) -- *a List(t) List(t),
        partition-either(dup dip(p) swap if(Right, Left)))

    def(List.show;(f), (t +Str -- +Str) List(t) +Str -- +Str,
        "LIST( " ; for(f " ; " ;) ")" ;)
    def(List+.show;(f), (t +Str -- +Str) List+(t) +Str -- +Str,
        "LIST+( " ; unsnoc dip:for(f " ; " ;) f " ;+ )" ;)
)
