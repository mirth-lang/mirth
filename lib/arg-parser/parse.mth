module arg-parser.parse

import std.prelude
import std.str
import std.list
import std.maybe
import std.result
import std.byte
import std.buffer
import std.world
import std.terminal
import std.ctypes

import arg-parser.types
import arg-parser.state

||| Print an autogenerated usage message for the parser
def(+ArgumentParser.usage, +ArgumentParser(a) -- +ArgumentParser(a) Str,
    Str(
        Sgr.Bold span("Usage: ";)
        "  "; rdip:state program-name ; " [options] ";
        rdip:argument-parser args-doc for(;)
        "\n\n";
        rdip:argument-parser options for(usage;)
        "\n";
    ))

def(ArgpOption.usage;, +ArgumentParser(a) +Str ArgpOption -- +ArgumentParser(a) +Str,
    "  " ;

    0 >col-offset
    dup flag-type match(
        Short ->
            dup is-printable then(
                @col-offset(2 +)
                "-"; dup emit-ascii;,
            ) drop,
        _ -> drop
    )

    # If we have both a short and long version of the argument we separate them
    dup flag-type has-short? and(dup name some?) then(
        ", ";
        @col-offset(2 +)
    )

    dup name for(
        dup num-bytes >Int @col-offset(2 + +)
        "--"; ;
        dup arg-doc for(
            dup num-bytes >Int @col-offset(1 + +)
            " "; ;
        )
    )

    dup doc for(
        @col-offset rdip:state longest-arg-length dup2 < if(
            swap - from: 0 for(drop " " ;),
            drop2
        )
        "    "; ;
    ) col-offset> drop

    "\n";
    drop)

||| Check if the currently parsed argument is something we accept
def(check-short-flag, +ArgumentParser(a) ArgpOption Str -- +ArgumentParser(a) ArgpOption Bool,
    over flag-type match(
        Short -> 0u >UOffset rotl byte@ ==,
        _ -> drop drop False
    ))

||| Parse a short cli flag, possibly with a argument value
def(parse-flags-where(f), (+ArgumentParser(a) ArgpOption Str -- +ArgumentParser(a) ArgpOption Bool)
        +ArgumentParser(a) Str -- +ArgumentParser(a) Maybe(ArgumentParsingError),
    argument-parser options
    find(over f nip) swap drop match(
        Some ->
            dup arg-doc match(
                Some ->
                    True state parsing?! state!
                    drop Some state option-option! state!,
                None -> flag-type state arguments swap None swap parser
                run state arguments! state!
            ) None,
        None -> ArgumentParsingError.UnknownArg Some
    ))

||| Check if the currently parsed argument is something we accept
def(check-long-flag, +ArgumentParser(a) ArgpOption Str -- +ArgumentParser(a) ArgpOption Bool,
    over name match(
        Some -> ==,
        None -> drop False
    ))

||| Parse either a short or long flag
def(parse-flags, +ArgumentParser(a) Str -- +ArgumentParser(a) Maybe(ArgumentParsingError),
    dup num-bytes 2u >USize >= and(1u >UOffset over byte@ Byte.B'-' ==) if(
        2u >USize over unsafe(drop-bytes) parse-flags-where(check-long-flag),
        1u >USize over unsafe(drop-bytes) parse-flags-where(check-short-flag)
    ) swap drop)

||| Parse a positional argument, advancing the current index
def(do-positional-option, +ArgumentParser(a) Str -- +ArgumentParser(a) Maybe(ArgumentParsingError),
    state arguments swap Some ArgpOptionType.Positional parser run
    state arguments! state! None
    state positional-index 1+ state positional-index! state!)

||| Run the argument parser
def(parse-args, a ArgumentParser(a) -- Result([ArgumentParsingError Str], a),
    >argument-parser State.init >state +ArgumentParser
    argument-parser options for(
        0 >doc-length

        dup flag-type match(
            Short -> drop doc-length> 2 + >doc-length,
            _ -> drop
        )

        dup name for(num-bytes >Int doc-length> 3 + + >doc-length)
        arg-doc for(num-bytes >Int doc-length> 1 + + >doc-length)


        doc-length> dup state longest-arg-length > if(
            state:longest-arg-length!,
            drop
        )
    )

    state State.argv for(
        dup num-bytes 1u >USize > if(
            0u >UOffset over byte@ Byte.B'-' == if(
                # if in the middle of currently parsing an option when we shouldn't be,
                # turn it off, otherwise error because need an option value
                state parsing? if(
                    drop state option-option match(
                        Some -> arg-doc match (
                            Some -> drop ArgumentParsingError.MissingArgValue Some,
                            None -> False state parsing?! state! None
                        ),
                        None -> ArgumentParsingError.MissingArgValue Some
                    ),
                    parse-flags
                ),

                # Parse the associated value for an option
                state parsing? if(
                    state option-option match(
                        Some -> dup >oo arg-doc match(
                            Some -> drop state arguments swap Some oo> flag-type parser run state:arguments! None,
                            None -> oo> drop2 ArgumentParsingError.UnknownArg Some
                        ),
                        None -> drop ArgumentParsingError.UnknownArg Some
                    ) False state:parsing?!,
                    do-positional-option
                )
            ),
            drop None
        ) for(
            Some state:error!,
        )
    )

    # Check if we are still waiting for an associated value for an option
    state parsing? then(
        ArgumentParsingError.MissingArgValue Some state error! state!
    )

    # Run the callback function one last time to let it clean up
    # and run final checks
    state arguments None ArgpOptionType.End parser run state:arguments!

    state arguments state error
    match(
        Some -> usage pack2 Err nip,
        None -> Ok
    )
    rdrop)

def(read-from-argv, +Unsafe Int -- Str +Unsafe,
    >UIndex-if (
        |Ptr| * argv uoffset @Ptr CPtr CStr >Str,
        drop ""
    ))

def(argv-to-str, -- List(Str),
    1 to(argc 1-) map(unsafe:read-from-argv))
