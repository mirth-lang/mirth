module(arg-parser.types)

import(std.prelude)
import(std.maybe)
import(std.str)
import(std.byte)
import(std.list)
import(arg-parser.parse)
import(arg-parser.state)

import(std.terminal)

data(ArgumentParser(a), ArgumentParser ->
    options:List(ArgpOption)
    parser:Maybe([ +ArgumentParser(a) a Maybe(Str) ArgpOptionType -- +ArgumentParser(a) a ])
    args-doc:Maybe(Str)
    doc:Str)

data(+ArgumentParser(a), +ArgumentParser -> argument-parser:ArgumentParser(a) state:State(a))
def(+ArgumentParser.rdrop, +ArgumentParser(a) --, /+ArgumentParser argument-parser> drop state> drop)

def(+ArgumentParser.parser, +ArgumentParser(a) -- +ArgumentParser(a)
        Maybe([ +ArgumentParser(a) a Maybe(Str) ArgpOptionType -- +ArgumentParser(a) a ]),
    argument-parser ArgumentParser.parser)

data(ArgpOptionType,
    Short -> Byte,
    LongOnly -> Str,
    Positional,
    End)

def(ArgpOptionType.has-short?, ArgpOptionType -- Bool,
    Short -> drop True,
    _ -> drop False)

data(ArgpOption, ArgpOption ->
    name:Maybe(Str)
    flag-type:ArgpOptionType
    arg-doc:Maybe(Str)
    doc:Maybe(Str)
    group:Maybe(Int))

data(ArgumentParsingError,
    MissingArgValue,
    MissingArg -> Str,
    TooManyArgs,
    TooFewArgs,
    UnknownArg)

def(ArgumentParsingError.emit;, ArgumentParsingError +Str -- +Str,
    MissingArg -> FGRed emit; "Missing argument: " ; Reset emit; ;,
    MissingArgValue -> "Missing associated value for flag option" ;,
    TooManyArgs -> "Too many positional arguments passed" ;,
    TooFewArgs -> "Too few positional arguments passed" ;,
    UnknownArg -> "Got an unknown option" ;)
