module arg-parser.types

import std.prelude
import std.maybe
import std.str
import std.byte
import std.list
import std.terminal

import arg-parser.parse
import arg-parser.state

struct ArgumentParser(a) {
    options:List(ArgpOption)
    parser:[ +ArgumentParser(a) |- a Maybe(Str) ArgpOptionType -- a ]
    args-doc:Maybe(Str)
    doc:Str
}

struct +ArgumentParser(a) {
    argument-parser: ArgumentParser(a)
    state: State(a)
    --
    def rdrop [ +ArgumentParser(a) -- ] { +ArgumentParser -> ldrop }
}

def(+ArgumentParser.parser, +ArgumentParser(a) -- +ArgumentParser(a)
        [ +ArgumentParser(a) |- a Maybe(Str) ArgpOptionType -- a ],
    argument-parser ArgumentParser.parser)

data(ArgpOptionType,
    Short -> Byte,
    LongOnly -> Str,
    Positional,
    End)

def(ArgpOptionType.has-short?, ArgpOptionType -- Bool,
    Short -> drop True,
    _ -> drop False)

data(ArgpOption, ArgpOption ->
    name:Maybe(Str)
    flag-type:ArgpOptionType
    arg-doc:Maybe(Str)
    doc:Maybe(Str)
    group:Maybe(Int))

data(ArgumentParsingError,
    MissingArgValue,
    MissingArg -> Str,
    TooManyArgs,
    TooFewArgs,
    UnknownArg)

def ArgumentParsingError.emit; [ ArgumentParsingError +Str -- +Str ] {
    { MissingArg -> Sgr.FGRed span("Missing argument: " ;) ; }
    { MissingArgValue -> "Missing associated value for flag option" ; }
    { TooManyArgs -> "Too many positional arguments passed" ; }
    { TooFewArgs -> "Too few positional arguments passed" ; }
    { UnknownArg -> "Got an unknown option" ; }
}
