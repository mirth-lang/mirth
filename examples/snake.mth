module(examples.snake)

import(examples.sdl2)
import(std.prelude)
import(std.list)
import(std.maybe)
import(std.ctypes)
import(std.buffer)

##############
# Snake Game #
##############

def main {
    +Snake.Init!
    loop!
    quit!
}

data(+Snake, +Snake ->
    +platform: +SnakePlatform
    +logic: +SnakeLogic)

data(+SnakePlatform, +SnakePlatform ->
    +SDL
    +window: +SDL_Window
    +renderer: +SDL_Renderer
    +rect-buffer: +Buffer
    +event-buffer: +Buffer
    )

def +SnakePlatform.sdl(f) { /+SnakePlatform f +SnakePlatform }

struct +SnakeLogic {
    done: Bool dead: Bool
    direction: Direction
    last-direction: Direction
    mouse: Position
    snake: List+(Position)
    points: Nat
    timer: Nat
}

data(Position, Position -> x:Int y:Int)
def Position.wrap { x(SNAKE_W %) y(SNAKE_H %) }

def Position.== [ Position Position -- Bool ] {
    /Position /Position x> x> == y> y> == &&
}

data(Direction, North, East, South, West)

def Direction.apply [ Position Direction -- Position ] {
    { North -> y:1- wrap }
    { South -> y:1+ wrap }
    { West  -> x:1- wrap }
    { East  -> x:1+ wrap }
}

def +SnakeLogic.enqueue { snake:cons+ }
def +SnakeLogic.dequeue { snake(unsnoc swap >List+ unwrap("logic error: expected snake to have more segments" panic!) ) }
def +SnakeLogic.head    { snake first }

def SNAKE_W { 20 }
def SNAKE_H { 20 }
def SNAKE_CELL_SIZE { 30 }
def SNAKE_WINDOW_W { SNAKE_W SNAKE_CELL_SIZE * }
def SNAKE_WINDOW_H { SNAKE_H SNAKE_CELL_SIZE * }
def SNAKE_WINDOW_FLAGS { SDL_WINDOW_HIDDEN }
def SNAKE_RENDERER_FLAGS { SDL_RENDERER_ACCELERATED SDL_RENDERER_PRESENTVSYNC | }

data(SnakeButton,
    Up,
    Right,
    Down,
    Left,
    Start)

def SDL_Scancode.>SnakeButton? {
    { SDL_SCANCODE_UP -> SnakeButton.Up Some }
    { SDL_SCANCODE_DOWN -> SnakeButton.Down Some }
    { SDL_SCANCODE_LEFT -> SnakeButton.Left Some }
    { SDL_SCANCODE_RIGHT -> SnakeButton.Right Some }
    { SDL_SCANCODE_SPACE -> SnakeButton.Start Some }
    { _ -> drop None }
}

def SDL_GameControllerButton.>SnakeButton? {
    { SDL_CONTROLLER_BUTTON_DPAD_UP -> SnakeButton.Up Some }
    { SDL_CONTROLLER_BUTTON_DPAD_DOWN -> SnakeButton.Down Some }
    { SDL_CONTROLLER_BUTTON_DPAD_LEFT -> SnakeButton.Left Some }
    { SDL_CONTROLLER_BUTTON_DPAD_RIGHT -> SnakeButton.Right Some }
    { SDL_CONTROLLER_BUTTON_START -> SnakeButton.Start Some }
    { _ -> drop None }
}

def +SnakeLogic.Init! [ +World -- +World +SnakeLogic ] {
    False >done
    North >direction
    North >last-direction
    Position.Random! >mouse
    Position.Center L1+ >snake
    False >dead
    0u >timer
    0u >points
    +SnakeLogic
}

def +SnakeLogic.rdrop {
    /+SnakeLogic
    points> timer> drop2
    dead> snake> drop2
    mouse> direction> drop2
    last-direction> done> drop2
}

def +SnakeLogic.reset! [ +World +SnakeLogic -- +World +SnakeLogic ] {
    rdrop +SnakeLogic.Init!
}

def +SnakePlatform.Init! [ +World -- +World +SnakePlatform ] {
    SDL_INIT_VIDEO >flags
    SDL_Init unwrap!

    "Snake!" >title
    100 >x 100 >y
    SNAKE_WINDOW_W >w
    SNAKE_WINDOW_H >h
    SNAKE_WINDOW_FLAGS >flags
    create-window! unwrap!
    >+window

    -1 >index
    SNAKE_RENDERER_FLAGS >flags
    create-renderer! unwrap!
    >+renderer

    256u >USize +Buffer.new >+event-buffer
    16u >USize +Buffer.new >+rect-buffer

    +SnakePlatform
}

def +Snake.Init! [ +World -- +World +Snake ] {
    +SnakeLogic.Init! >+logic
    +SnakePlatform.Init! >+platform
    +Snake
}

def +Snake.loop! [ +World +Snake -- +World +Snake ] {
    process-events!
    while(+logic:done not,
        present!
        10 >U32-unsafe >ticks +platform:sdl:delay!
        process-events!
        +logic:update!
    )
}

def +Snake.quit! [ +World +Snake -- +World ] {
    /+Snake +logic> rdrop +platform> quit!
}

def +SnakePlatform.quit! [ +World +SnakePlatform -- +World ] {
    /+SnakePlatform
    +event-buffer> rdrop
    +rect-buffer> rdrop
    destroy-renderer!
    destroy-window!
    quit!
}

def rgba { CInt >a CInt >b CInt >g CInt >r }
def snake-background-color { 140 100 150 255 rgba }
def snake-foreground-color { 255 255 255 255 rgba }

def +SnakePlatform.snake-rect! [ +SnakePlatform x:I32 y:I32 w:I32 h:I32 -- +SnakePlatform ] {
    h> 3u >UIndex +rect-buffer:!I32
    w> 2u >UIndex +rect-buffer:!I32
    y> 1u >UIndex +rect-buffer:!I32
    x> 0u >UIndex +rect-buffer:!I32
}

def +SnakePlatform.snake-rect-cell! [ +SnakePlatform Position -- +SnakePlatform ] {
    /Position
    x> SNAKE_CELL_SIZE * i32 >x
    y> SNAKE_CELL_SIZE * i32 >y
    SNAKE_CELL_SIZE i32 dup >w >h
    snake-rect!
}

def +Snake.present! [ +Snake -- +Snake ] {
    +platform:sdl:show-window!
    +platform:clear!
    +logic:snake for(+platform:draw-cell!)
    +logic:mouse +platform:draw-cell!
    +platform:sdl:SDL_RenderPresent
}

def +SnakePlatform.clear! [ +SnakePlatform -- +SnakePlatform ] {
    snake-background-color sdl:SDL_SetRenderDrawColor
    sdl:SDL_RenderClear
    snake-foreground-color sdl:SDL_SetRenderDrawColor
}

def +SnakePlatform.draw-cell! [ Position +SnakePlatform -- +SnakePlatform ] {
    snake-rect-cell! +rect-buffer:base >rect
    sdl:SDL_RenderFillRect
}

def +Snake.&event [ +Snake -- +Snake SDL_Event ] {
    +platform:+event-buffer:base SDL_Event
}

def +Snake.process-events! [ +World +Snake -- +World +Snake ] {
    while(&event +platform:sdl:SDL_PollEvent >Int 0>, process-event!)
}

def +Snake.process-event! [ +World +Snake -- +World +Snake ] {
    &event type@ match {
        { SDL_QUIT ->
            True +logic:done! }
        { SDL_KEYDOWN ->
            &event key repeat@ >Int 0> if(
                id,
                &event key keysym scancode@
                match(
                    SDL_SCANCODE_ESCAPE -> True +logic:done!,
                    _ -> >SnakeButton? for:+logic:press!
                )
            )
        }
        { SDL_CONTROLLERBUTTONDOWN ->
            &event cbutton button@
            >SnakeButton? for:+logic:press! }
        { _ -> drop }
    }
}

def +SnakeLogic.press! [ +World +SnakeLogic SnakeButton -- +World +SnakeLogic ] {
    { Up -> North turn! }
    { Left -> West turn! }
    { Down -> South turn! }
    { Right -> East turn! }
    { Start -> dead then(reset!) }
}

def +SnakeLogic.tick-frames { 40 .u points 5u + / 2u + }
def +SnakeLogic.tick! [ +SnakeLogic -- +SnakeLogic Bool ] {
    timer:1+
    timer tick-frames >= if(
        0u timer! True,
        False
    )
}

def +SnakeLogic.in-snake { snake member }
def +SnakeLogic.randomize-mouse! [ +World +SnakeLogic -- +World +SnakeLogic ] {
    rdip:Position.Random!
    while(dup in-snake, drop rdip:Position.Random!)
    mouse!
}

def +SnakeLogic.update! [ +World +SnakeLogic -- +World +SnakeLogic ] {
    dead not and(tick!) then(
        direction last-direction!
        head direction apply
        dup in-snake if(
            True dead! drop,

            enqueue
            head mouse == then(
                points:1+
                randomize-mouse!
            )

            snake len desired-length > then(
                dequeue drop
            )
        )
    )
}

def +SnakeLogic.desired-length { points 5u + }

external(libc-rand -> rand [+World -- +World CInt])

def Position.Random! [ +World -- +World Position ] {
    libc-rand >Int SNAKE_W % >x
    libc-rand >Int SNAKE_H % >y
    Position
}

def Position.Center {
    SNAKE_W 2/ >x
    SNAKE_H 2/ >y
    Position
}

def +SnakeLogic.turn! {
    dup last-direction flip == if(
        drop, # can't turn backwards directly
        direction!
    )
}

def Direction.>Int { enum-value }
def Direction.== { both(enum-value) == }
def Direction.flip {
    North -> South,
    West -> East,
    South -> North,
    East -> West
}
