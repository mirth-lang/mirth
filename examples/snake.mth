module(examples.snake)

import(examples.sdl2)
import(std.prelude)
import(std.list)
import(std.maybe)
import(std.ctypes)

##############
# Snake Game #
##############

def(main, +World -- +World,
    +Snake.init!
    loop!
    quit!)

data(+Snake, +Snake ->
    +platform: +SnakePlatform
    +logic: +SnakeLogic)

data(+SnakePlatform, +SnakePlatform ->
    +SDL
    +SDL_Window
    +SDL_Renderer
    +SDL_GameController?)

def(+SnakePlatform.controller?(f),
    (*a +SDL +SDL_GameController? -- *b +SDL +SDL_GameController?)
    *a +SnakePlatform -- *b +SnakePlatform,
    /+SnakePlatform
    rrotr rdip2(f) rrotl
    +SnakePlatform)

def(+SnakePlatform.renderer(f),
        (*a +SDL +SDL_Window +SDL_Renderer -- *b +SDL +SDL_Window +SDL_Renderer)
        *a +SnakePlatform -- *b +SnakePlatform,
    /+SnakePlatform
    rdip(f)
    +SnakePlatform)

def(+SnakePlatform.window(f),
        (*a +SDL +SDL_Window -- *b +SDL +SDL_Window)
        *a +SnakePlatform -- *b +SnakePlatform,
    renderer:rdip:f)

def(+SnakePlatform.sdl(f),
        (*a +SDL -- *b +SDL)
        *a +SnakePlatform -- *b +SnakePlatform,
    window:rdip:f)

buffer(SNAKE_EVENT, 0x100) # TODO: fold into +SnakePlatform, or perhaps get rid of it via SDL bindings.
buffer(SNAKE_RECT, 16) # TODO: incorporate into platform or into bindings

data(+SnakeLogic, +SnakeLogic ->
    done: Bool dead: Bool
    direction: Direction
    last-direction: Direction
    mouse: Position
    snake: List+(Position)
    points: Int
    timer: Int)

data(Position, Position -> x:Int y:Int)
def(Position.wrap, Position -- Position,
    x(SNAKE_W %) y(SNAKE_H %))

def(Position.==, Position Position -- Bool,
    dip(/Position) /Position x> x> == y> y> == &&)

data(Direction, North, East, South, West)
def(Direction.apply, Position Direction -- Position,
    North -> y:1- wrap, South -> y:1+ wrap,
    West -> x:1- wrap, East -> x:1+ wrap)

def(+SnakeLogic.enqueue, +SnakeLogic Position -- +SnakeLogic,
    snake:cons+)
def(+SnakeLogic.dequeue, +SnakeLogic -- +SnakeLogic Position,
    snake(unsnoc swap >List+ unwrap))
def(+SnakeLogic.head, +SnakeLogic -- +SnakeLogic Position,
    snake first)

def(SNAKE_W, Int, 20)
def(SNAKE_H, Int, 20)
def(SNAKE_CELL_SIZE, Int, 30)
def(SNAKE_WINDOW_W, Int, SNAKE_W SNAKE_CELL_SIZE *)
def(SNAKE_WINDOW_H, Int, SNAKE_H SNAKE_CELL_SIZE *)
def(SNAKE_WINDOW_FLAGS, SDL_WindowFlags,
    SDL_WINDOW_HIDDEN)
def(SNAKE_RENDERER_FLAGS, SDL_RendererFlags,
    SDL_RENDERER_ACCELERATED
    SDL_RENDERER_PRESENTVSYNC |)

data(SnakeButton,
    Up,
    Right,
    Down,
    Left,
    Start)

def(SDL_Scancode.>SnakeButton?, SDL_Scancode -- Maybe(SnakeButton),
    SDL_SCANCODE_UP -> SnakeButton.Up Some,
    SDL_SCANCODE_DOWN -> SnakeButton.Down Some,
    SDL_SCANCODE_LEFT -> SnakeButton.Left Some,
    SDL_SCANCODE_RIGHT -> SnakeButton.Right Some,
    SDL_SCANCODE_SPACE -> SnakeButton.Start Some,
    _ -> drop None)

def(SDL_GameControllerButton.>SnakeButton?, SDL_GameControllerButton -- Maybe(SnakeButton),
    SDL_CONTROLLER_BUTTON_DPAD_UP -> SnakeButton.Up Some,
    SDL_CONTROLLER_BUTTON_DPAD_DOWN -> SnakeButton.Down Some,
    SDL_CONTROLLER_BUTTON_DPAD_LEFT -> SnakeButton.Left Some,
    SDL_CONTROLLER_BUTTON_DPAD_RIGHT -> SnakeButton.Right Some,
    SDL_CONTROLLER_BUTTON_START -> SnakeButton.Start Some,
    _ -> drop None)

def(+SnakeLogic.init!, +World -- +World +SnakeLogic,
    False >done
    North >direction
    North >last-direction
    random-position >mouse
    center-position L1+ >snake
    False >dead
    0 >timer
    0 >points
    +SnakeLogic)

def(+SnakeLogic.rdrop, +SnakeLogic --,
    /+SnakeLogic
    points> timer> drop2
    dead> snake> drop2
    mouse> direction> drop2
    last-direction> done> drop2)

def(+SnakeLogic.reset!, +World +SnakeLogic -- +World +SnakeLogic,
    rdrop +SnakeLogic.init!)

def(+SnakePlatform.init!, +World -- +World +SnakePlatform,
    SNAKE_INIT_FLAGS +SDL.init! unwrap!

    "Snake!" >title
    100 >x 100 >y
    SNAKE_WINDOW_W >w
    SNAKE_WINDOW_H >h
    SNAKE_WINDOW_FLAGS >flags
    create-window! unwrap!

    -1 >index
    SNAKE_RENDERER_FLAGS >flags
    create-renderer! unwrap!

    rdip2(
        0 to: num-joysticks find(dup is-game-controller) match(
            Some -> game-controller-open! unwrap! +SDL_GameController?.OK!,
            None -> "no controller detected" +SDL_GameController?.ERROR!
        )
    ) rrotl

    +SnakePlatform)

def(SNAKE_INIT_FLAGS, SDL_InitFlags,
    SDL_INIT_VIDEO
    SDL_INIT_GAMECONTROLLER |)

def(+Snake.init!, +World -- +World +Snake,
    +SnakeLogic.init! >+logic
    +SnakePlatform.init! >+platform
    +Snake)

def(+Snake.loop!, +World +Snake -- +World +Snake,
    process-events!
    while(+logic:done not,
        present!
        10 ms +platform:sdl:delay!
        process-events!
        +logic:update!
    ))

def(+Snake.quit!, +World +Snake -- +World,
    /+Snake +logic> rdrop +platform> quit!)

def(+SnakePlatform.quit!, +World +SnakePlatform -- +World,
    /+SnakePlatform
    for!(rrotr rdip2(close!))
    destroy! destroy! quit!)

def-type(R, Int)
def-type(G, Int)
def-type(B, Int)
def-type(A, Int)

def(snake-background-color, R G B A,
    140 100 150 255)

def(snake-foreground-color, R G B A,
    255 255 255 255)

def-type(X, Int)
def-type(Y, Int)
def-type(W, Int)
def-type(H, Int)

def(snake-rect!, X Y W H --,
    unsafe(
        >I32 12 >Offset SNAKE_RECT offset !I32
        >I32  8 >Offset SNAKE_RECT offset !I32
        >I32  4 >Offset SNAKE_RECT offset !I32
        >I32  0 >Offset SNAKE_RECT offset !I32
    ))

def(snake-rect-cell!, Position --,
    /Position
    x> SNAKE_CELL_SIZE *
    y> SNAKE_CELL_SIZE *
    SNAKE_CELL_SIZE
    SNAKE_CELL_SIZE
    snake-rect!)

def(+Snake.present!, +Snake -- +Snake,
    +platform:window:show!
    +platform:clear!
    +logic:snake for(+platform:draw-cell!)
    +logic:mouse +platform:draw-cell!
    +platform:renderer:unsafe-ptr SDL_RenderPresent)

def(+SnakePlatform.clear!, +SnakePlatform -- +SnakePlatform,
    renderer:unsafe-ptr snake-background-color on4(CInt) SDL_SetRenderDrawColor
    renderer:unsafe-ptr SDL_RenderClear
    renderer:unsafe-ptr snake-foreground-color on4(CInt) SDL_SetRenderDrawColor)

def(+SnakePlatform.draw-cell!, +SnakePlatform Position -- +SnakePlatform,
    snake-rect-cell!
    renderer:unsafe-ptr SNAKE_RECT SDL_RenderFillRect)

def(+Snake.process-events!, +World +Snake -- +World +Snake,
    while(SNAKE_EVENT >SDL_Event SDL_PollEvent >Int 0>, process-event!))

def(+Snake.process-event!, +World +Snake -- +World +Snake,
    SNAKE_EVENT >SDL_Event type@
    dup SDL_QUIT == if(
        drop True +logic:done!,

    dup SDL_KEYDOWN == if(
        drop
        SNAKE_EVENT >SDL_Event key repeat@ >Int 0> if(
            id,
            SNAKE_EVENT >SDL_Event key keysym scancode@
            match(
                SDL_SCANCODE_ESCAPE -> True +logic:done!,
                _ -> >SnakeButton? for:+logic:press!
            )
        ),

    dup SDL_CONTROLLERBUTTONDOWN == if(
        drop
        SNAKE_EVENT >SDL_Event cbutton button@
        >SnakeButton? for:+logic:press!,

        drop
    ))))

def(+SnakeLogic.press!, +World +SnakeLogic SnakeButton -- +World +SnakeLogic,
    Up -> North turn!,
    Left -> West turn!,
    Down -> South turn!,
    Right -> East turn!,
    Start -> dead if(reset!, id))

def(+SnakeLogic.tick-frames, +SnakeLogic -- +SnakeLogic Int,
    40 points 5 + / 2 +)

def(+SnakeLogic.tick!, +SnakeLogic -- +SnakeLogic Bool,
    timer:1+
    timer tick-frames >= if(
        0 timer! True,
        False
    ))

def(+SnakeLogic.in-snake, +SnakeLogic Position -- +SnakeLogic Bool,
    snake member(==))

def(+SnakeLogic.randomize-mouse!, +World +SnakeLogic -- +World +SnakeLogic,
    rdip:random-position
    while(dup in-snake, drop rdip:random-position)
    mouse!)

def(+SnakeLogic.update!, +World +SnakeLogic -- +World +SnakeLogic,
    dead not and(tick!) then(
        direction last-direction!
        head direction apply
        dup in-snake if(
            True dead! drop,

            enqueue
            head mouse == then(
                points:1+
                randomize-mouse!
            )

            snake len desired-length > then(
                dequeue drop
            )
        )
    ))

def(+SnakeLogic.desired-length, +SnakeLogic -- +SnakeLogic Nat, points 5 + >Nat)

def-external(libc-rand -> rand, +World -- +World CInt)
def(random-position, +World -- +World Position,
    libc-rand >Int SNAKE_W % >x
    libc-rand >Int SNAKE_H % >y
    Position)
def(center-position, -- Position,
    SNAKE_W 2/ >x
    SNAKE_H 2/ >y
    Position)

def(Direction.>Int, Direction -- Int, Direction.tag)
def(Direction.==, Direction Direction -- Bool, both(tag) ==)

def(+SnakeLogic.turn!, +SnakeLogic Direction -- +SnakeLogic,
    dup flip last-direction == if(
        drop, # can't turn back directly
        direction!
    ))

def(Direction.flip, Direction -- Direction,
    North -> South,
    West -> East,
    South -> North,
    East -> West)
