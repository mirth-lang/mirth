module examples.sdl2

import std.prelude
import std.str
import std.ctypes

#################
# SDL2 Bindings #
#################

data(+SDL, +SDL)
data(+SDL?, +SDL? -> CInt)

inline (
    def +SDL?.if-ok!(f,g) [ (*a +SDL -- *b, *a Str -- *b) *a +SDL? -- *b ] {
        +SDL? -> >Int 0= if(
            +SDL f,
            +SDL get-error! /+SDL g
        )
    }
)
def +SDL?.unwrap! [ +SDL? -- +SDL ] {
    +SDL?.if-ok!(id, panic!)
}

data(+SDL_Surface, +SDL_Surface -> Ptr)

data(+SDL_Window, +SDL_Window -> Ptr)
data(+SDL_Window?, +SDL_Window? -> Ptr?)
inline (
    def +SDL_Window?.if-ok!(f,g) [
        ( *a +SDL +SDL_Window -- *b, *a +SDL Str -- *b )
        *a +SDL +SDL_Window? -- *b
    ] {
        +SDL_Window? -> if-some(+SDL_Window f, +SDL.get-error! g)
    }
)
def +SDL_Window?.unwrap! [ +SDL +SDL_Window? -- +SDL +SDL_Window ] {
    if-ok!(id, panic!)
}

data(+SDL_Renderer, +SDL_Renderer -> Ptr)
data(+SDL_Renderer?, +SDL_Renderer? -> Ptr?)
inline (
    def +SDL_Renderer?.if-ok!(f,g) [
        (*a +SDL +SDL_Renderer -- *b, *a +SDL Str -- *b)
        *a +SDL +SDL_Renderer? -- *b
    ] {
        +SDL_Renderer? -> if-some(+SDL_Renderer f, get-error! g)
    }
)
def +SDL_Renderer?.unwrap! [ +SDL +SDL_Renderer? -- +SDL +SDL_Renderer ] {
    if-ok!(id, panic!)
}

data(+SDL_Texture, +SDL_Texture -> Ptr)
data(+SDL_TextureLocked, +SDL_TextureLocked -> Ptr)
data(+SDL_Texture?, +SDL_Texture? -> Ptr?)
inline (
    def +SDL_Texture?.if-ok!(f,g) [
        (*a +SDL +SDL_Texture -- *b, *a +SDL Str -- *b)
        *a +SDL +SDL_Texture? -- *b
    ] {
        +SDL_Texture? -> if-some(+SDL_Texture f, get-error! g)
    }
)
def +SDL_Texture?.unwrap! [ +SDL +SDL_Texture? -- +SDL +SDL_Texture ] {
    if-ok!(id, panic!)
}

external(
    SDL_Init [ +World flags:SDL_InitFlags -- +World +SDL? ]
    SDL_Quit [ +World +SDL -- +World ]
    SDL_GetError [ +SDL -- +SDL CStr ]
    SDL_Delay [ +SDL ticks:U32 -- +SDL ]
    SDL_GetTicks [ +SDL -- +SDL U32 ]

    SDL_CreateWindow [ +SDL title:CStr x:CInt y:CInt w:CInt h:CInt flags:SDL_WindowFlags -- +SDL +SDL_Window? ]
    SDL_DestroyWindow [ +SDL +window:+SDL_Window -- +SDL ]
    SDL_ShowWindow [ +SDL +window:+SDL_Window -- +SDL +window:+SDL_Window ]
    SDL_HideWindow [ +SDL +window:+SDL_Window -- +SDL +window:+SDL_Window ]
    SDL_RaiseWindow [ +SDL +window:+SDL_Window -- +SDL +window:+SDL_Window ]
    SDL_GetWindowSurface [ +SDL +window:+SDL_Window -- +SDL +window:+SDL_Window +SDL_Surface ]
    SDL_UpdateWindowSurface [ +SDL +window:+SDL_Window -- +SDL +window:+SDL_Window CInt ]

    SDL_CreateRenderer [
        +SDL +window:+SDL_Window index:CInt flags:SDL_RendererFlags --
        +SDL +window:+SDL_Window +SDL_Renderer?
    ]
    SDL_DestroyRenderer [ +SDL +renderer:+SDL_Renderer -- +SDL ]

    SDL_RenderClear [+SDL +renderer:+SDL_Renderer -- +SDL +renderer:+SDL_Renderer ]
    SDL_RenderPresent [ +SDL +renderer:+SDL_Renderer -- +SDL +renderer:+SDL_Renderer ]
    SDL_SetRenderDrawColor [ +SDL +renderer:+SDL_Renderer r:CInt g:CInt b:CInt a:CInt -- +SDL +renderer:+SDL_Renderer ]
    SDL_RenderFillRect [ +SDL +renderer:+SDL_Renderer rect:Ptr -- +SDL +renderer:+SDL_Renderer ]

    SDL_CreateTexture [
        +SDL +renderer:+SDL_Renderer format:SDL_PixelFormat access:SDL_TextureAccess w:CInt h:CInt --
        +SDL +renderer:+SDL_Renderer +SDL_Texture?
    ]
    SDL_CreateTextureFromSurface [
        +SDL +renderer:+SDL_Renderer +surface:+SDL_Surface --
        +SDL +renderer:+SDL_Renderer +surface:+SDL_Surface +SDL_Texture?
    ]
    SDL_DestroyTexture [
        +SDL +texture:+SDL_Texture -- +SDL
    ]
    SDL_UpdateTexture [
        +SDL +texture:+SDL_Texture rect:Ptr pixels:Ptr pitch:CInt --
        +SDL +texture:+SDL_Texture CInt
    ]

    SDL_LockTexture [
        +SDL +texture:+SDL_Texture rect:Ptr pixels:CPtr(Ptr) pitch:CPtr(CInt) --
        +SDL +texture:+SDL_Texture CInt
    ]
    SDL_UnlockTexture [
        +SDL +texture:+SDL_Texture --
        +SDL +texture:+SDL_Texture
    ]
)

inline(
    def +SDL.init! [ +World flags:SDL_InitFlags -- +World +SDL? ] { SDL_Init }
    def +SDL.quit! [ +World +SDL -- +World ] { SDL_Quit }
    def +SDL.get-error! [ +SDL -- +SDL Str ] { SDL_GetError unsafe(Str.CloneCStr) }
    def +SDL.delay! [ +SDL ticks:U32 -- +SDL] { SDL_Delay }
    def +SDL.get-ticks! [ +SDL -- +SDL U32 ] { SDL_GetTicks }

    def +SDL.create-window! [
        +SDL title:Str x:Int y:Int w:Int h:Int flags:SDL_WindowFlags
        -- +SDL +SDL_Window?
    ] {
        title> with-cstr( >title
            @x:CInt @y:CInt @w:CInt @h:CInt
            SDL_CreateWindow
        )
    }
    def +SDL.destroy-window! [ +SDL +window:+SDL_Window -- +SDL ] { SDL_DestroyWindow }
    def +SDL.show-window! [ +SDL +window:+SDL_Window -- +SDL +window:+SDL_Window ] { SDL_ShowWindow }
    def +SDL.hide-window! [ +SDL +window:+SDL_Window -- +SDL +window:+SDL_Window ] { SDL_HideWindow }
    def +SDL.raise-window! [ +SDL +window:+SDL_Window -- +SDL +window:+SDL_Window ] { SDL_RaiseWindow }

    def +SDL.create-renderer! [
        +SDL +window:+SDL_Window index:Int flags:SDL_RendererFlags --
        +SDL +window:+SDL_Window +SDL_Renderer?
    ] {
        @index:CInt SDL_CreateRenderer
    }
    def +SDL.destroy-renderer! [ +SDL +renderer:+SDL_Renderer -- +SDL ] { SDL_DestroyRenderer }
)

data(SDL_InitFlags, SDL_InitFlags -> U32)
inline (
    def SDL_InitFlags.| {
        both(/SDL_InitFlags) | SDL_InitFlags
    }
    def SDL_INIT_TIMER          [ SDL_InitFlags ] { 0x0001 >U32-unsafe SDL_InitFlags }
    def SDL_INIT_AUDIO          [ SDL_InitFlags ] { 0x0010 >U32-unsafe SDL_InitFlags }
    def SDL_INIT_VIDEO          [ SDL_InitFlags ] { 0x0020 >U32-unsafe SDL_InitFlags }
    def SDL_INIT_JOYSTICK       [ SDL_InitFlags ] { 0x0200 >U32-unsafe SDL_InitFlags }
    def SDL_INIT_HAPTIC         [ SDL_InitFlags ] { 0x1000 >U32-unsafe SDL_InitFlags }
    def SDL_INIT_GAMECONTROLLER [ SDL_InitFlags ] { 0x2000 >U32-unsafe SDL_InitFlags }
    def SDL_INIT_EVENTS         [ SDL_InitFlags ] { 0x4000 >U32-unsafe SDL_InitFlags }
    def SDL_INIT_SENSOR         [ SDL_InitFlags ] { 0x8000 >U32-unsafe SDL_InitFlags }
    def SDL_INIT_EVERYTHING     [ SDL_InitFlags ] { 0xF231 >U32-unsafe SDL_InitFlags }
)

def(SDL_WINDOWPOS_UNDEFINED, Int, 0x1FFF 16 <<)
def(SDL_WINDOWPOS_CENTERED, Int, 0x2FFF 16 <<)

data(SDL_WindowFlags, SDL_WindowFlags -> U32)
inline (
    def SDL_WindowFlags.| [ SDL_WindowFlags SDL_WindowFlags -- SDL_WindowFlags ] {
        both(/SDL_WindowFlags) | SDL_WindowFlags
    }
    def SDL_WINDOW_FULLSCREEN         [ SDL_WindowFlags ] { 0x00000001 >U32-unsafe SDL_WindowFlags }
    def SDL_WINDOW_OPENGL             [ SDL_WindowFlags ] { 0x00000002 >U32-unsafe SDL_WindowFlags }
    def SDL_WINDOW_SHOWN              [ SDL_WindowFlags ] { 0x00000004 >U32-unsafe SDL_WindowFlags }
    def SDL_WINDOW_HIDDEN             [ SDL_WindowFlags ] { 0x00000008 >U32-unsafe SDL_WindowFlags }
    def SDL_WINDOW_BORDERLESS         [ SDL_WindowFlags ] { 0x00000010 >U32-unsafe SDL_WindowFlags }
    def SDL_WINDOW_RESIZABLE          [ SDL_WindowFlags ] { 0x00000020 >U32-unsafe SDL_WindowFlags }
    def SDL_WINDOW_MINIMIZED          [ SDL_WindowFlags ] { 0x00000040 >U32-unsafe SDL_WindowFlags }
    def SDL_WINDOW_MAXIMIZED          [ SDL_WindowFlags ] { 0x00000080 >U32-unsafe SDL_WindowFlags }
    def SDL_WINDOW_MOUSE_GRABBED      [ SDL_WindowFlags ] { 0x00000100 >U32-unsafe SDL_WindowFlags }
    def SDL_WINDOW_INPUT_GRABBED      [ SDL_WindowFlags ] { 0x00000100 >U32-unsafe SDL_WindowFlags }
    def SDL_WINDOW_INPUT_FOCUS        [ SDL_WindowFlags ] { 0x00000200 >U32-unsafe SDL_WindowFlags }
    def SDL_WINDOW_MOUSE_FOCUS        [ SDL_WindowFlags ] { 0x00000400 >U32-unsafe SDL_WindowFlags }
    def SDL_WINDOW_FOREIGN            [ SDL_WindowFlags ] { 0x00000800 >U32-unsafe SDL_WindowFlags }
    def SDL_WINDOW_FULLSCREEN_DESKTOP [ SDL_WindowFlags ] { 0x00001001 >U32-unsafe SDL_WindowFlags }
    def SDL_WINDOW_ALLOW_HIGHDPI      [ SDL_WindowFlags ] { 0x00002000 >U32-unsafe SDL_WindowFlags }
    def SDL_WINDOW_MOUSE_CAPTURE      [ SDL_WindowFlags ] { 0x00004000 >U32-unsafe SDL_WindowFlags }
    def SDL_WINDOW_ALWAYS_ON_TOP      [ SDL_WindowFlags ] { 0x00008000 >U32-unsafe SDL_WindowFlags }
    def SDL_WINDOW_SKIP_TASKBAR       [ SDL_WindowFlags ] { 0x00010000 >U32-unsafe SDL_WindowFlags }
    def SDL_WINDOW_UTILITY            [ SDL_WindowFlags ] { 0x00020000 >U32-unsafe SDL_WindowFlags }
    def SDL_WINDOW_TOOLTIP            [ SDL_WindowFlags ] { 0x00040000 >U32-unsafe SDL_WindowFlags }
    def SDL_WINDOW_POPUP_MENU         [ SDL_WindowFlags ] { 0x00080000 >U32-unsafe SDL_WindowFlags }
    def SDL_WINDOW_KEYBOARD_GRABBED   [ SDL_WindowFlags ] { 0x00100000 >U32-unsafe SDL_WindowFlags }
    def SDL_WINDOW_VULKAN             [ SDL_WindowFlags ] { 0x10000000 >U32-unsafe SDL_WindowFlags }
    def SDL_WINDOW_METAL              [ SDL_WindowFlags ] { 0x20000000 >U32-unsafe SDL_WindowFlags }
)

data(SDL_RendererFlags, SDL_RendererFlags -> U32)
inline (
    def SDL_RendererFlags.| {
        both(/SDL_RendererFlags) | SDL_RendererFlags
    }
    def SDL_RENDERER_SOFTWARE      [ SDL_RendererFlags ] { 0x00000001 >U32-unsafe SDL_RendererFlags }
    def SDL_RENDERER_ACCELERATED   [ SDL_RendererFlags ] { 0x00000002 >U32-unsafe SDL_RendererFlags }
    def SDL_RENDERER_PRESENTVSYNC  [ SDL_RendererFlags ] { 0x00000004 >U32-unsafe SDL_RendererFlags }
    def SDL_RENDERER_TARGETTEXTURE [ SDL_RendererFlags ] { 0x00000008 >U32-unsafe SDL_RendererFlags }
)

data SDL_TextureAccess {
    0x0000 SDL_TEXTUREACCESS_STATIC,
    0x0001 SDL_TEXTUREACCESS_STREAMING,
    0x0002 SDL_TEXTUREACCESS_TARGET,
}

data SDL_PixelFormat {
    0x00000000 SDL_PIXELFORMAT_UNKNOWN,
    0x11100100 SDL_PIXELFORMAT_INDEX1LSB,
    0x11200100 SDL_PIXELFORMAT_INDEX1MSB,
    0x1c100200 SDL_PIXELFORMAT_INDEX2LSB,
    0x1c200200 SDL_PIXELFORMAT_INDEX2MSB,
    0x12100400 SDL_PIXELFORMAT_INDEX4LSB,
    0x12200400 SDL_PIXELFORMAT_INDEX4MSB,
    0x13000801 SDL_PIXELFORMAT_INDEX8,
    0x14110801 SDL_PIXELFORMAT_RGB332,
    0x15120c02 SDL_PIXELFORMAT_XRGB4444,
    0x15520c02 SDL_PIXELFORMAT_XBGR4444,
    0x15130f02 SDL_PIXELFORMAT_XRGB1555,
    0x15530f02 SDL_PIXELFORMAT_XBGR1555,
    0x15321002 SDL_PIXELFORMAT_ARGB4444,
    0x15421002 SDL_PIXELFORMAT_RGBA4444,
    0x15721002 SDL_PIXELFORMAT_ABGR4444,
    0x15821002 SDL_PIXELFORMAT_BGRA4444,
    0x15331002 SDL_PIXELFORMAT_ARGB1555,
    0x15441002 SDL_PIXELFORMAT_RGBA5551,
    0x15731002 SDL_PIXELFORMAT_ABGR1555,
    0x15841002 SDL_PIXELFORMAT_BGRA5551,
    0x15151002 SDL_PIXELFORMAT_RGB565,
    0x15551002 SDL_PIXELFORMAT_BGR565,
    0x17101803 SDL_PIXELFORMAT_RGB24,
    0x17401803 SDL_PIXELFORMAT_BGR24,
    0x16161804 SDL_PIXELFORMAT_XRGB8888,
    0x16261804 SDL_PIXELFORMAT_RGBX8888,
    0x16561804 SDL_PIXELFORMAT_XBGR8888,
    0x16661804 SDL_PIXELFORMAT_BGRX8888,
    0x16362004 SDL_PIXELFORMAT_ARGB8888,
    0x16462004 SDL_PIXELFORMAT_RGBA8888,
    0x16762004 SDL_PIXELFORMAT_ABGR8888,
    0x16862004 SDL_PIXELFORMAT_BGRA8888,
    0x16172004 SDL_PIXELFORMAT_XRGB2101010,
    0x16572004 SDL_PIXELFORMAT_XBGR2101010,
    0x16372004 SDL_PIXELFORMAT_ARGB2101010,
    0x16772004 SDL_PIXELFORMAT_ABGR2101010,
    0x18103006 SDL_PIXELFORMAT_RGB48,
    0x18403006 SDL_PIXELFORMAT_BGR48,
    0x18204008 SDL_PIXELFORMAT_RGBA64,
    0x18304008 SDL_PIXELFORMAT_ARGB64,
    0x18504008 SDL_PIXELFORMAT_BGRA64,
    0x18604008 SDL_PIXELFORMAT_ABGR64,
    0x1a103006 SDL_PIXELFORMAT_RGB48_FLOAT,
    0x1a403006 SDL_PIXELFORMAT_BGR48_FLOAT,
    0x1a204008 SDL_PIXELFORMAT_RGBA64_FLOAT,
    0x1a304008 SDL_PIXELFORMAT_ARGB64_FLOAT,
    0x1a504008 SDL_PIXELFORMAT_BGRA64_FLOAT,
    0x1a604008 SDL_PIXELFORMAT_ABGR64_FLOAT,
    0x1b10600c SDL_PIXELFORMAT_RGB96_FLOAT,
    0x1b40600c SDL_PIXELFORMAT_BGR96_FLOAT,
    0x1b208010 SDL_PIXELFORMAT_RGBA128_FLOAT,
    0x1b308010 SDL_PIXELFORMAT_ARGB128_FLOAT,
    0x1b508010 SDL_PIXELFORMAT_BGRA128_FLOAT,
    0x1b608010 SDL_PIXELFORMAT_ABGR128_FLOAT,
    0x32315659 SDL_PIXELFORMAT_YV12,
    0x56555949 SDL_PIXELFORMAT_IYUV,
    0x32595559 SDL_PIXELFORMAT_YUY2,
    0x59565955 SDL_PIXELFORMAT_UYVY,
    0x55595659 SDL_PIXELFORMAT_YVYU,
    0x3231564e SDL_PIXELFORMAT_NV12,
    0x3132564e SDL_PIXELFORMAT_NV21,
    0x30313050 SDL_PIXELFORMAT_P010,
    0x2053454f SDL_PIXELFORMAT_EXTERNAL_OES,
}


# Size of SDL_Event structure.
def SDL_EVENT_SIZE [ USize ] { 56 >Nat-clamp >USize }

data(SDL_Event, SDL_Event -> Ptr)

external( SDL_PollEvent [ +SDL SDL_Event -- +SDL CInt ] )

data(SDL_EventType,
    0x0000 SDL_FIRSTEVENT,

    0x0100 SDL_QUIT,
    0x0101 SDL_APP_TERMINATING,
    0x0102 SDL_APP_LOWMEMORY,
    0x0103 SDL_APP_WILLENTERBACKGROUND,
    0x0104 SDL_APP_DIDENTERBACKGROUND,
    0x0105 SDL_APP_WILLENTERFOREGROUND,
    0x0106 SDL_APP_DIDENTERFOREGROUND,
    0x0107 SDL_LOCALECHANGED,

    0x0150 SDL_DISPLAYEVENT,

    0x0200 SDL_WINDOWEVENT,
    0x0201 SDL_SYSWMEVENT,

    0x0300 SDL_KEYDOWN,
    0x0301 SDL_KEYUP,
    0x0302 SDL_TEXTEDITING,
    0x0303 SDL_TEXTINPUT,
    0x0304 SDL_KEYMAPCHANGED,
    0x0305 SDL_TEXTEDITING_EXT,

    0x0400 SDL_MOUSEMOTION,
    0x0401 SDL_MOUSEBUTTONDOWN,
    0x0402 SDL_MOUSEBUTTONUP,
    0x0403 SDL_MOUSEWHEEL,

    0x0600 SDL_JOYAXISMOTION,
    0x0601 SDL_JOYBALLMOTION,
    0x0602 SDL_JOYHATMOTION,
    0x0603 SDL_JOYBUTTONDOWN,
    0x0604 SDL_JOYBUTTONUP,
    0x0605 SDL_JOYDEVICEADDED,
    0x0606 SDL_JOYDEVICEREMOVED,
    0x0607 SDL_JOYBATTERYUPDATED,

    0x0650 SDL_CONTROLLERAXISMOTION,
    0x0651 SDL_CONTROLLERBUTTONDOWN,
    0x0652 SDL_CONTROLLERBUTTONUP,
    0x0653 SDL_CONTROLLERDEVICEADDED,
    0x0654 SDL_CONTROLLERDEVICEREMOVED,
    0x0655 SDL_CONTROLLERDEVICEREMAPPED,
    0x0656 SDL_CONTROLLERTOUCHPADDOWN,
    0x0657 SDL_CONTROLLERTOUCHPADMOTION,
    0x0658 SDL_CONTROLLERTOUCHPADUP,
    0x0659 SDL_CONTROLLERSENSORUPDATE,
    0x0660 SDL_CONTROLLERUPDATECOMPLETE,
    0x0661 SDL_CONTROLLERSTEAMHANDLEUPDATED,

    0x0700 SDL_FINGERDOWN,
    0x0701 SDL_FINGERUP,
    0x0702 SDL_FINGERMOTION,

    0x0800 SDL_DOLLARGESTUR,
    0x0801 SDL_DOLLARRECORD,
    0x0802 SDL_MULTIGESTURE,

    0x0900 SDL_CLIPBOARDUPDATE,

    0x1000 SDL_DROPFILE,
    0x1001 SDL_DROPTEXT,
    0x1002 SDL_DROPBEGIN,
    0x1003 SDL_DROPCOMPLETE,

    0x1100 SDL_AUDIODEVICEADDED,
    0x1101 SDL_AUDIODEVICEREMOVED,

    0x1200 SDL_SENSORUPDATE,

    0x2000 SDL_RENDER_TARGETS_RESET,
    0x2001 SDL_RENDER_DEVICE_RESET,

    0x8000 SDL_USEREVENT,

    0xFFFF SDL_LASTEVENT,
)

inline(
    def SDL_EventType.>U32 [ SDL_EventType -- U32 ] { enum-value >U32-unsafe }
    def U32.>SDL_EventType [ U32 -- SDL_EventType ] { >Int SDL_EventType.from-enum-value-unsafe }
    def SDL_EventType.== [ SDL_EventType SDL_EventType -- Bool ] { both(>U32) == }
    def SDL_Event.type@ [ SDL_Event -- SDL_EventType ] { unsafe(/SDL_Event @U32) >SDL_EventType }
)

def(SDL_Event.key, SDL_Event -- SDL_KeyboardEvent, /SDL_Event SDL_KeyboardEvent)

struct SDL_KeyboardEvent {
    Ptr
    --
    inline def >Ptr [ SDL_KeyboardEvent -- Ptr ] { /SDL_KeyboardEvent }
}

def(SDL_KeyboardEvent.timestamp&, SDL_KeyboardEvent -- Ptr, /SDL_KeyboardEvent dip(4u >UOffset) unsafe(uoffset))
def(SDL_KeyboardEvent.timestamp@, SDL_KeyboardEvent -- U32, timestamp& unsafe(@U32))
def(SDL_KeyboardEvent.timestamp!, U32 SDL_KeyboardEvent --, timestamp& unsafe(!U32))
def(SDL_KeyboardEvent.windowID&, SDL_KeyboardEvent -- Ptr, /SDL_KeyboardEvent dip(8u >UOffset) unsafe(uoffset))
def(SDL_KeyboardEvent.windowID@, SDL_KeyboardEvent -- U32, windowID& unsafe(@U32))
def(SDL_KeyboardEvent.windowID!, U32 SDL_KeyboardEvent --, windowID& unsafe(!U32))
def(SDL_KeyboardEvent.state&, SDL_KeyboardEvent -- Ptr, /SDL_KeyboardEvent dip(12u >UOffset) unsafe(uoffset))
def(SDL_KeyboardEvent.state@, SDL_KeyboardEvent -- U8, state& unsafe(@U8))
def(SDL_KeyboardEvent.state!, U8 SDL_KeyboardEvent --, state& unsafe(!U8))
def(SDL_KeyboardEvent.repeat&, SDL_KeyboardEvent -- Ptr, /SDL_KeyboardEvent dip(13u >UOffset) unsafe(uoffset))
def(SDL_KeyboardEvent.repeat@, SDL_KeyboardEvent -- U8, repeat& unsafe(@U8))
def(SDL_KeyboardEvent.repeat!, U8 SDL_KeyboardEvent --, repeat& unsafe(!U8))
def(SDL_KeyboardEvent.keysym, SDL_KeyboardEvent -- SDL_Keysym,
    /SDL_KeyboardEvent dip(16u >UOffset) unsafe(uoffset) SDL_Keysym)

struct SDL_Keysym {
    Ptr
    --
    def >Ptr [ SDL_Keysym -- Ptr ] { /SDL_Keysym }
    def scancode& [ SDL_Keysym -- Ptr ] { >Ptr }
    def scancode@ [ SDL_Keysym -- SDL_Scancode ] { scancode& unsafe(@U16) >SDL_Scancode }
}

def(SDL_Event.cbutton, SDL_Event -- SDL_ControllerButtonEvent,
    /SDL_Event SDL_ControllerButtonEvent)
struct SDL_ControllerButtonEvent {
    Ptr
    --
    def >Ptr [ SDL_ControllerButtonEvent -- Ptr ] { /SDL_ControllerButtonEvent }
}

def(SDL_ControllerButtonEvent.which&, SDL_ControllerButtonEvent -- Ptr,
    dip(8u >UOffset) >Ptr unsafe(uoffset))
def(SDL_ControllerButtonEvent.which@, SDL_ControllerButtonEvent -- SDL_JoystickID,
    which& unsafe(@I32) >SDL_JoystickID)
def(SDL_ControllerButtonEvent.which!, SDL_JoystickID SDL_ControllerButtonEvent --,
    dip(>I32) which& unsafe(!I32))

def(SDL_ControllerButtonEvent.button&, SDL_ControllerButtonEvent -- Ptr,
    dip(12u >UOffset) >Ptr unsafe(uoffset))
def(SDL_ControllerButtonEvent.button@, SDL_ControllerButtonEvent -- SDL_GameControllerButton,
    button& unsafe(@I8) >SDL_GameControllerButton)
def(SDL_ControllerButtonEvent.button!, SDL_GameControllerButton SDL_ControllerButtonEvent --,
    dip(>I8) button& unsafe(!I8))

def(U16.>SDL_Scancode, U16 -- SDL_Scancode,
   >Int SDL_Scancode.from-enum-value-unsafe)

data(SDL_Scancode,
    0 SDL_SCANCODE_UNKNOWN,
    4 SDL_SCANCODE_A,
    5 SDL_SCANCODE_B,
    6 SDL_SCANCODE_C,
    7 SDL_SCANCODE_D,
    8 SDL_SCANCODE_E,
    9 SDL_SCANCODE_F,
    10 SDL_SCANCODE_G,
    11 SDL_SCANCODE_H,
    12 SDL_SCANCODE_I,
    13 SDL_SCANCODE_J,
    14 SDL_SCANCODE_K,
    15 SDL_SCANCODE_L,
    16 SDL_SCANCODE_M,
    17 SDL_SCANCODE_N,
    18 SDL_SCANCODE_O,
    19 SDL_SCANCODE_P,
    20 SDL_SCANCODE_Q,
    21 SDL_SCANCODE_R,
    22 SDL_SCANCODE_S,
    23 SDL_SCANCODE_T,
    24 SDL_SCANCODE_U,
    25 SDL_SCANCODE_V,
    26 SDL_SCANCODE_W,
    27 SDL_SCANCODE_X,
    28 SDL_SCANCODE_Y,
    29 SDL_SCANCODE_Z,

    30 SDL_SCANCODE_1,
    31 SDL_SCANCODE_2,
    32 SDL_SCANCODE_3,
    33 SDL_SCANCODE_4,
    34 SDL_SCANCODE_5,
    35 SDL_SCANCODE_6,
    36 SDL_SCANCODE_7,
    37 SDL_SCANCODE_8,
    38 SDL_SCANCODE_9,
    39 SDL_SCANCODE_0,

    40 SDL_SCANCODE_RETURN,
    41 SDL_SCANCODE_ESCAPE,
    42 SDL_SCANCODE_BACKSPACE,
    43 SDL_SCANCODE_TAB,
    44 SDL_SCANCODE_SPACE,
    45 SDL_SCANCODE_MINUS,
    46 SDL_SCANCODE_EQUALS,
    47 SDL_SCANCODE_LEFTBRACKET,
    48 SDL_SCANCODE_RIGHTBRACKET,
    49 SDL_SCANCODE_BACKSLASH,
    50 SDL_SCANCODE_NONUSHASH,
    51 SDL_SCANCODE_SEMICOLON,
    52 SDL_SCANCODE_APOSTROPHE,
    53 SDL_SCANCODE_GRAVE,
    54 SDL_SCANCODE_COMMA,
    55 SDL_SCANCODE_PERIOD,
    56 SDL_SCANCODE_SLASH,
    57 SDL_SCANCODE_CAPSLOCK,

    58 SDL_SCANCODE_F1,
    59 SDL_SCANCODE_F2,
    60 SDL_SCANCODE_F3,
    61 SDL_SCANCODE_F4,
    62 SDL_SCANCODE_F5,
    63 SDL_SCANCODE_F6,
    64 SDL_SCANCODE_F7,
    65 SDL_SCANCODE_F8,
    66 SDL_SCANCODE_F9,
    67 SDL_SCANCODE_F10,
    68 SDL_SCANCODE_F11,
    69 SDL_SCANCODE_F12,

    70 SDL_SCANCODE_PRINTSCREEN,
    71 SDL_SCANCODE_SCROLLLOCK,
    72 SDL_SCANCODE_PAUSE,
    73 SDL_SCANCODE_INSERT,
    74 SDL_SCANCODE_HOME,
    75 SDL_SCANCODE_PAGEUP,
    76 SDL_SCANCODE_DELETE,
    77 SDL_SCANCODE_END,
    78 SDL_SCANCODE_PAGEDOWN,
    79 SDL_SCANCODE_RIGHT,
    80 SDL_SCANCODE_LEFT,
    81 SDL_SCANCODE_DOWN,
    82 SDL_SCANCODE_UP,

    83 SDL_SCANCODE_NUMLOCKCLEAR,

    84 SDL_SCANCODE_KP_DIVIDE,
    85 SDL_SCANCODE_KP_MULTIPLY,
    86 SDL_SCANCODE_KP_MINUS,
    87 SDL_SCANCODE_KP_PLUS,
    88 SDL_SCANCODE_KP_ENTER,
    89 SDL_SCANCODE_KP_1,
    90 SDL_SCANCODE_KP_2,
    91 SDL_SCANCODE_KP_3,
    92 SDL_SCANCODE_KP_4,
    93 SDL_SCANCODE_KP_5,
    94 SDL_SCANCODE_KP_6,
    95 SDL_SCANCODE_KP_7,
    96 SDL_SCANCODE_KP_8,
    97 SDL_SCANCODE_KP_9,
    98 SDL_SCANCODE_KP_0,
    99 SDL_SCANCODE_KP_PERIOD,

    100 SDL_SCANCODE_NONUSBACKSLASH,
    101 SDL_SCANCODE_APPLICATION,
    102 SDL_SCANCODE_POWER,
    103 SDL_SCANCODE_KP_EQUALS,
    104 SDL_SCANCODE_F13,
    105 SDL_SCANCODE_F14,
    106 SDL_SCANCODE_F15,
    107 SDL_SCANCODE_F16,
    108 SDL_SCANCODE_F17,
    109 SDL_SCANCODE_F18,
    110 SDL_SCANCODE_F19,
    111 SDL_SCANCODE_F20,
    112 SDL_SCANCODE_F21,
    113 SDL_SCANCODE_F22,
    114 SDL_SCANCODE_F23,
    115 SDL_SCANCODE_F24,
    116 SDL_SCANCODE_EXECUTE,
    117 SDL_SCANCODE_HELP,
    118 SDL_SCANCODE_MENU,
    119 SDL_SCANCODE_SELECT,
    120 SDL_SCANCODE_STOP,
    121 SDL_SCANCODE_AGAIN,
    122 SDL_SCANCODE_UNDO,
    123 SDL_SCANCODE_CUT,
    124 SDL_SCANCODE_COPY,
    125 SDL_SCANCODE_PASTE,
    126 SDL_SCANCODE_FIND,
    127 SDL_SCANCODE_MUTE,
    128 SDL_SCANCODE_VOLUMEUP,
    129 SDL_SCANCODE_VOLUMEDOWN,

    133 SDL_SCANCODE_KP_COMMA,
    134 SDL_SCANCODE_KP_EQUALSAS400,
    135 SDL_SCANCODE_INTERNATIONAL1,
    136 SDL_SCANCODE_INTERNATIONAL2,
    137 SDL_SCANCODE_INTERNATIONAL3,
    138 SDL_SCANCODE_INTERNATIONAL4,
    139 SDL_SCANCODE_INTERNATIONAL5,
    140 SDL_SCANCODE_INTERNATIONAL6,
    141 SDL_SCANCODE_INTERNATIONAL7,
    142 SDL_SCANCODE_INTERNATIONAL8,
    143 SDL_SCANCODE_INTERNATIONAL9,
    144 SDL_SCANCODE_LANG1,
    145 SDL_SCANCODE_LANG2,
    146 SDL_SCANCODE_LANG3,
    147 SDL_SCANCODE_LANG4,
    148 SDL_SCANCODE_LANG5,
    149 SDL_SCANCODE_LANG6,
    150 SDL_SCANCODE_LANG7,
    151 SDL_SCANCODE_LANG8,
    152 SDL_SCANCODE_LANG9,
    153 SDL_SCANCODE_ALTERASE,
    154 SDL_SCANCODE_SYSREQ,
    155 SDL_SCANCODE_CANCEL,
    156 SDL_SCANCODE_CLEAR,
    157 SDL_SCANCODE_PRIOR,
    158 SDL_SCANCODE_RETURN2,
    159 SDL_SCANCODE_SEPARATOR,
    160 SDL_SCANCODE_OUT,
    161 SDL_SCANCODE_OPER,
    162 SDL_SCANCODE_CLEARAGAIN,
    163 SDL_SCANCODE_CRSEL,
    164 SDL_SCANCODE_EXSEL,

    176 SDL_SCANCODE_KP_00,
    177 SDL_SCANCODE_KP_000,
    178 SDL_SCANCODE_THOUSANDSSEPARATOR,
    179 SDL_SCANCODE_DECIMALSEPARATOR,
    180 SDL_SCANCODE_CURRENCYUNIT,
    181 SDL_SCANCODE_CURRENCYSUBUNIT,
    182 SDL_SCANCODE_KP_LEFTPAREN,
    183 SDL_SCANCODE_KP_RIGHTPAREN,
    184 SDL_SCANCODE_KP_LEFTBRACE,
    185 SDL_SCANCODE_KP_RIGHTBRACE,
    186 SDL_SCANCODE_KP_TAB,
    187 SDL_SCANCODE_KP_BACKSPACE,
    188 SDL_SCANCODE_KP_A,
    189 SDL_SCANCODE_KP_B,
    190 SDL_SCANCODE_KP_C,
    191 SDL_SCANCODE_KP_D,
    192 SDL_SCANCODE_KP_E,
    193 SDL_SCANCODE_KP_F,
    194 SDL_SCANCODE_KP_XOR,
    195 SDL_SCANCODE_KP_POWER,
    196 SDL_SCANCODE_KP_PERCENT,
    197 SDL_SCANCODE_KP_LESS,
    198 SDL_SCANCODE_KP_GREATER,
    199 SDL_SCANCODE_KP_AMPERSAND,
    200 SDL_SCANCODE_KP_DBLAMPERSAND,
    201 SDL_SCANCODE_KP_VERTICALBAR,
    202 SDL_SCANCODE_KP_DBLVERTICALBAR,
    203 SDL_SCANCODE_KP_COLON,
    204 SDL_SCANCODE_KP_HASH,
    205 SDL_SCANCODE_KP_SPACE,
    206 SDL_SCANCODE_KP_AT,
    207 SDL_SCANCODE_KP_EXCLAM,
    208 SDL_SCANCODE_KP_MEMSTORE,
    209 SDL_SCANCODE_KP_MEMRECALL,
    210 SDL_SCANCODE_KP_MEMCLEAR,
    211 SDL_SCANCODE_KP_MEMADD,
    212 SDL_SCANCODE_KP_MEMSUBTRACT,
    213 SDL_SCANCODE_KP_MEMMULTIPLY,
    214 SDL_SCANCODE_KP_MEMDIVIDE,
    215 SDL_SCANCODE_KP_PLUSMINUS,
    216 SDL_SCANCODE_KP_CLEAR,
    217 SDL_SCANCODE_KP_CLEARENTRY,
    218 SDL_SCANCODE_KP_BINARY,
    219 SDL_SCANCODE_KP_OCTAL,
    220 SDL_SCANCODE_KP_DECIMAL,
    221 SDL_SCANCODE_KP_HEXADECIMAL,

    224 SDL_SCANCODE_LCTRL,
    225 SDL_SCANCODE_LSHIFT,
    226 SDL_SCANCODE_LALT,
    227 SDL_SCANCODE_LGUI,
    228 SDL_SCANCODE_RCTRL,
    229 SDL_SCANCODE_RSHIFT,
    230 SDL_SCANCODE_RALT,
    231 SDL_SCANCODE_RGUI,

    257 SDL_SCANCODE_MODE,

    258 SDL_SCANCODE_AUDIONEXT,
    259 SDL_SCANCODE_AUDIOPREV,
    260 SDL_SCANCODE_AUDIOSTOP,
    261 SDL_SCANCODE_AUDIOPLAY,
    262 SDL_SCANCODE_AUDIOMUTE,
    263 SDL_SCANCODE_MEDIASELECT,
    264 SDL_SCANCODE_WWW,
    265 SDL_SCANCODE_MAIL,
    266 SDL_SCANCODE_CALCULATOR,
    267 SDL_SCANCODE_COMPUTER,
    268 SDL_SCANCODE_AC_SEARCH,
    269 SDL_SCANCODE_AC_HOME,
    270 SDL_SCANCODE_AC_BACK,
    271 SDL_SCANCODE_AC_FORWARD,
    272 SDL_SCANCODE_AC_STOP,
    273 SDL_SCANCODE_AC_REFRESH,
    274 SDL_SCANCODE_AC_BOOKMARKS,

    275 SDL_SCANCODE_BRIGHTNESSDOWN,
    276 SDL_SCANCODE_BRIGHTNESSUP,
    277 SDL_SCANCODE_DISPLAYSWITCH,
    278 SDL_SCANCODE_KBDILLUMTOGGLE,
    279 SDL_SCANCODE_KBDILLUMDOWN,
    280 SDL_SCANCODE_KBDILLUMUP,
    281 SDL_SCANCODE_EJECT,
    282 SDL_SCANCODE_SLEEP,
    283 SDL_SCANCODE_APP1,
    284 SDL_SCANCODE_APP2,

    285 SDL_SCANCODE_AUDIOREWIND,
    286 SDL_SCANCODE_AUDIOFASTFORWARD,

    287 SDL_SCANCODE_SOFTLEFT,
    288 SDL_SCANCODE_SOFTRIGHT,
    289 SDL_SCANCODE_CALL,
    290 SDL_SCANCODE_ENDCALL,
)
def SDL_NUM_SCANCODES { 512 }

data(SDL_JoystickID, SDL_JoystickID -> Int) # TODO: change to I32
def(SDL_JoystickID.unwrap, SDL_JoystickID -- Int, /SDL_JoystickID)
def(SDL_JoystickID.>Int, SDL_JoystickID -- Int, unwrap)
def(SDL_JoystickID.>I32, SDL_JoystickID -- I32, >Int >I32-unsafe )
def(Int.>SDL_JoystickID, Int -- SDL_JoystickID, SDL_JoystickID)
def(I32.>SDL_JoystickID, I32 -- SDL_JoystickID, >Int >SDL_JoystickID)
def(SDL_JoystickID.>, SDL_JoystickID SDL_JoystickID -- Bool, both(>Int) >)
def(SDL_JoystickID.1+, SDL_JoystickID -- SDL_JoystickID, >Int 1+ >SDL_JoystickID)
def(SDL_JoystickID.==, SDL_JoystickID SDL_JoystickID -- Bool, both(>Int) ==)

external(
    SDL_NumJoysticks        [+Unsafe      -- CInt +Unsafe]
    SDL_IsGameController    [+Unsafe CInt -- Bool +Unsafe]
    SDL_GameControllerOpen  [+Unsafe CInt -- Ptr? +Unsafe]
    SDL_GameControllerClose [+Unsafe Ptr  --      +Unsafe]
)

def(+SDL.num-joysticks, +SDL -- +SDL Int, unsafe(SDL_NumJoysticks) >Int)
def(+SDL.is-game-controller, +SDL Int -- +SDL Bool, CInt unsafe(SDL_IsGameController))

struct +SDL_GameController { unsafe-ptr:Ptr }
data(+SDL_GameController?, OK! -> +SDL_GameController, ERROR! -> Str)
def(+SDL_GameController?.unwrap!, +SDL_GameController? -- +SDL_GameController, OK! -> id, ERROR! -> panic!)
def(+SDL_GameController?.map!(f), (*a +SDL_GameController -- *a +SDL_GameController) *a +SDL_GameController? -- *a +SDL_GameController?,
    OK! -> f +SDL_GameController?.OK!,
    ERROR! -> +SDL_GameController?.ERROR!)
def(+SDL_GameController?.for!(f), (*a +SDL_GameController -- *a) *a +SDL_GameController? -- *a,
    OK! -> f,
    ERROR! -> drop)

def(+SDL.game-controller-open!, +SDL Int -- +SDL +SDL_GameController?,
    CInt unsafe(SDL_GameControllerOpen)
    if-some(
        >unsafe-ptr +SDL_GameController +SDL_GameController?.OK!,
        get-error! +SDL_GameController?.ERROR!,
    ))
def(+SDL_GameController.close!, +SDL +SDL_GameController -- +SDL,
    /+SDL_GameController unsafe-ptr> unsafe(SDL_GameControllerClose))

data(SDL_GameControllerButton,
    -1 SDL_CONTROLLER_BUTTON_INVALID,
    SDL_CONTROLLER_BUTTON_A,
    SDL_CONTROLLER_BUTTON_B,
    SDL_CONTROLLER_BUTTON_X,
    SDL_CONTROLLER_BUTTON_Y,
    SDL_CONTROLLER_BUTTON_BACK,
    SDL_CONTROLLER_BUTTON_GUIDE,
    SDL_CONTROLLER_BUTTON_START,
    SDL_CONTROLLER_BUTTON_LEFTSTICK,
    SDL_CONTROLLER_BUTTON_RIGHTSTICK,
    SDL_CONTROLLER_BUTTON_LEFTSHOULDER,
    SDL_CONTROLLER_BUTTON_RIGHTSHOULDER,
    SDL_CONTROLLER_BUTTON_DPAD_UP,
    SDL_CONTROLLER_BUTTON_DPAD_DOWN,
    SDL_CONTROLLER_BUTTON_DPAD_LEFT,
    SDL_CONTROLLER_BUTTON_DPAD_RIGHT,
    SDL_CONTROLLER_BUTTON_MISC1,
    SDL_CONTROLLER_BUTTON_PADDLE1,
    SDL_CONTROLLER_BUTTON_PADDLE2,
    SDL_CONTROLLER_BUTTON_PADDLE3,
    SDL_CONTROLLER_BUTTON_PADDLE4,
    SDL_CONTROLLER_BUTTON_TOUCHPAD,)

def(I8.>SDL_GameControllerButton, I8 -- SDL_GameControllerButton,
   >Int SDL_GameControllerButton.from-enum-value-unsafe)
def(SDL_GameControllerButton.>I8, SDL_GameControllerButton -- I8, enum-value >I8-unsafe)
def(SDL_GameControllerButton.==, SDL_GameControllerButton SDL_GameControllerButton -- Bool, both(enum-value) ==)
