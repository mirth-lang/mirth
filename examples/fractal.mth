module(examples.fractal)

import(examples.sdl2)
import(std.prelude)
import(std.world)
import(std.list)
import(std.maybe)
import(std.ctypes)
import(std.buffer)

##############
# Mandelbrot Game #
##############

def main {
    +Mandelbrot.Init!
    loop!
    quit!
}

struct +Mandelbrot {
    +platform: +FractalUI
    running: Bool
}

struct +FractalUI {
    +SDL
    +window: +SDL_Window
    +surface: +SDL_Surface
    +renderer: +SDL_Renderer
    +event-buffer: +Buffer
}

def +FractalUI.sdl(f) { /+FractalUI f +FractalUI }

def WIDTH { 800 }
def HEIGHT { 800 }
def SNAKE_WINDOW_FLAGS { SDL_WINDOW_HIDDEN }
def SNAKE_RENDERER_FLAGS { SDL_RENDERER_ACCELERATED SDL_RENDERER_PRESENTVSYNC | }

def +FractalUI.Init! [ +World -- +World +FractalUI ] {
    SDL_INIT_VIDEO >flags
    SDL_Init unwrap!

    "Mandelbrot!" >title
    100 >x 100 >y
    WIDTH >w
    HEIGHT >h
    SNAKE_WINDOW_FLAGS >flags
    create-window! unwrap!
    >+window

    -1 >index
    SNAKE_RENDERER_FLAGS >flags
    create-renderer! unwrap!
    >+renderer

    SDL_GetWindowSurface >+surface

    256u >USize +Buffer.new >+event-buffer

    +FractalUI
}

def +Mandelbrot.Init! [ +World -- +World +Mandelbrot ] {
    +FractalUI.Init! >+platform
    True >running
    +Mandelbrot
}

def +Mandelbrot.loop! [ +World +Mandelbrot -- +World +Mandelbrot ] {
    process-events!
    present!
    while(running,
        10 u32 >ticks +platform:sdl:delay!
        process-events!
    )
}

def +Mandelbrot.quit! [ +World +Mandelbrot -- +World ] {
    /+Mandelbrot running> drop +platform> quit!
}

def +FractalUI.quit! [ +World +FractalUI -- +World ] {
    /+FractalUI
    destroy-renderer!
    destroy-window!

    +event-buffer> rdrop
    +surface> /+SDL_Surface drop

    quit!
}

def rgba { CInt >a CInt >b CInt >g CInt >r }
def background-color { 0 0 0 255 rgba }

def BAIL_OUT { 2.0 }
def FLIPS { 24 }

external(
    F64.pow -> pow [ F64 F64 -- F64 ]
    F64.log10 -> log10 [ F64 -- F64 ]
    cset_pixel -> set_pixel [ +surface:+SDL_Surface CInt CInt CInt -- +surface:+SDL_Surface ]
)

def set_pixel [ +surface:+SDL_Surface Int Int Int -- +surface:+SDL_Surface ] {
    dip(dip:CInt CInt) CInt cset_pixel
}

def +Mandelbrot.plot! [ +Mandelbrot x:Int y:Int Int -- +Mandelbrot ] {
    >iterations x> y> iterations> +platform:sdl:set_pixel
}

def scale_x [ Int -- F64 ] {
    >F64
    2.47 WIDTH >F64 / *
    2.0 -
}

def scale_y [ Int -- F64 ] {
    >F64
    2.24 HEIGHT >F64 / *
    1.12 -
}

def +Mandelbrot.present! [ +World +Mandelbrot -- +World +Mandelbrot ] {
    +platform:sdl:show-window!
    +platform:clear!

    0 >py while(
        @py HEIGHT <,
        0 >px while(
            @px WIDTH <,

            @px scale_x >x0
            @py scale_y >y0

            0.0 >x
            0.0 >y

            0 >iteration
            while(
                @iteration 250 <

                @x 2.0 pow
                @y 2.0 pow +
                4.0 <= &&,

                @x 2.0 pow
                @y 2.0 pow -
                @x0 +

                2.0 @x * @y *
                @y0 +

                !y
                !x

                iteration> 1+ >iteration
            )
            x> drop
            y> drop
            x0> drop
            y0> drop
            @px >x @py >y iteration> dup 250 < if(plot!, x> drop y> drop drop)

            px> 1+ >px
        )
        px> drop
        py> 1+ >py
    )
    py> drop

    +platform:sdl:SDL_UpdateWindowSurface drop
}

def +FractalUI.clear! [ +FractalUI -- +FractalUI ] {
    background-color sdl:SDL_SetRenderDrawColor
    sdl:SDL_RenderClear
}

def +Mandelbrot.&event [ +Mandelbrot -- +Mandelbrot SDL_Event ] {
    +platform:+event-buffer:base SDL_Event
}

def +Mandelbrot.process-events! [ +World +Mandelbrot -- +World +Mandelbrot ] {
    while(&event +platform:sdl:SDL_PollEvent >Int 0>, process-event!)
}

def +Mandelbrot.process-event! [ +World +Mandelbrot -- +World +Mandelbrot ] {
    &event type@ match {
        { SDL_QUIT ->
            False running! }
        { _ -> drop }
    }
}
