module mirth.arrow

import std.prelude
import std.maybe
import std.list
import std.str

import mirth.mirth
import mirth.token
import mirth.type
import mirth.data
import mirth.match
import mirth.var
import mirth.name
import mirth.word
import mirth.prim
import mirth.external
import mirth.buffer
import mirth.table
import mirth.label

##########
# ARROWS #
##########

# Each Mirth word is represented by a morphism in some category
# (or some class of categories). We provide special support for
# the morphisms of symmetric monoidal category theory, since we
# want to manipulate multiple pieces of data, like a string diagram,
# but we do not assume commutativity (i.e. that dip(f) g = g dip(f)),
# so that we can more easily represent computational effects like IO.
# As such, we actually provide special support for premonoidal
# categories, and we're really working with ordered string diagrams.

# The representation, for now, involves building up morphisms as a
# sequence of atomic morphisms. Atomic morphisms are morphisms that
# can't be broken down into a composition. These include calling
# words, primitives, control flow, and literal values. This is a
# nested intermediate representation.

# Originally this type was called Morphism but that's hard to spell and
# to type repeatedly so now it's called Arrow :-)

struct Arrow {
    home:Home
    token-start:Token
    token-end:Token
    ctx:Ctx
    dom:StackType
    cod:StackType
    atoms:List(Atom)
    --
    def ctx-type { sip(ctx) type }
    def type { sip(dom) cod T-> }

    def to-run-var [ +Mirth |- Arrow -- Maybe(Var) ] {
        atoms single? bind(to-run-var)
    }
    def free-vars [ +Mirth |- Arrow -- List(Var) ] {
        atoms map(free-vars) unions
    }
}

struct Atom {
    home:Home
    token:Token
    ctx:Ctx
    op:Op
    args:List(Arg)
    dom:StackType
    cod:StackType
    subst:Subst
    --
    def to-run-var [ +Mirth |- Atom -- Maybe(Var) ] { op to-run-var }
    def free-vars [ +Mirth |- Atom -- List(Var) ] {
        dup args map(free-vars) unions
        swap op free-vars union
    }
}

data Arg {
    Block [ Block ]
    --
    def token { Block -> token }
    def type  { Block -> type }
    def free-vars { Block -> free-vars }
    def mangled; [ +Mirth +Str |- Arg -- ] { Block -> mangled; }
    def = [ +Mirth |- Arg Arg -- Bool ] {
        { Block -> swap match { Block -> swap =, _ -> drop2 No } }
    }
}

data PushValue {
    Str [ Str ]
    Int [ Int ]
    U8  [ U8  ]
    U16 [ U16 ]
    U32 [ U32 ]
    U64 [ U64 ]
    I8  [ I8  ]
    I16 [ I16 ]
    I32 [ I32 ]
    I64 [ I64 ]
    F32 [ F32 ]
    F64 [ F64 ]
    --
    def =  [ PushValue PushValue -- Bool ] {
        { Str -> swap match { Str -> swap =, _ -> drop2 No } }
        { Int -> swap match { Int -> swap =, _ -> drop2 No } }
        { U8  -> swap match { U8  -> swap =, _ -> drop2 No } }
        { U16 -> swap match { U16 -> swap =, _ -> drop2 No } }
        { U32 -> swap match { U32 -> swap =, _ -> drop2 No } }
        { U64 -> swap match { U64 -> swap =, _ -> drop2 No } }
        { I8  -> swap match { I8  -> swap =, _ -> drop2 No } }
        { I16 -> swap match { I16 -> swap =, _ -> drop2 No } }
        { I32 -> swap match { I32 -> swap =, _ -> drop2 No } }
        { I64 -> swap match { I64 -> swap =, _ -> drop2 No } }
        { F32 -> swap match { F32 -> swap =, _ -> drop2 No } }
        { F64 -> swap match { F64 -> swap =, _ -> drop2 No } }
    }
}

data Op {
    Prim [ Prim ]
    Word [ Word ]
    External [ External ]
    Buffer [ Buffer ]
    Field [ Field ]
    Push [ PushValue ]
    Tag [ Tag ]
    Match [ Match ]
    Lambda [ Lambda ]
    Var [ Var ]
    BlockPush [ Block ]
    BlockRun  [ Block ]
    LabelPush  [ Label ]
    LabelPop   [ Label ]
    LabelPushR [ Label ]
    LabelPopR  [ Label ]
    DataGetEnumValue  [ Data ]
    DataFromEnumValue [ Data ]
    DataGetLabel [ TagField ]
    DataSetLabel [ TagField ]
    TableToIndex [ Table ]
    TableFromIndex [ Table ]
    --
    def to-run-var [ +Mirth |- Op -- Maybe(Var) ] {
        { Var -> dup auto-run? if(Some, drop None) }
        { _ -> drop None }
    }
    def free-vars [ +Mirth |- Op -- List(Var) ] {
        { Prim -> drop List.Nil }
        { Word -> drop List.Nil }
        { External -> drop List.Nil }
        { Buffer -> drop List.Nil }
        { Field -> drop List.Nil }
        { Push -> drop List.Nil }
        { Tag -> drop List.Nil }
        { Match -> free-vars }
        { Lambda -> free-vars }
        { Var -> L1 }
        { BlockPush -> free-vars }
        { BlockRun -> free-vars }
        { LabelPush -> drop List.Nil }
        { LabelPop -> drop List.Nil }
        { LabelPushR -> drop List.Nil }
        { LabelPopR -> drop List.Nil }
        { DataGetEnumValue -> drop List.Nil }
        { DataFromEnumValue -> drop List.Nil }
        { DataGetLabel -> drop List.Nil }
        { DataSetLabel -> drop List.Nil }
        { TableToIndex -> drop List.Nil }
        { TableFromIndex -> drop List.Nil }
    }
}

data Home {
    Main [ Token ]
    Word [ Word  ]
    --
    def increment-index! [ +Mirth |- Home -- Int ] {
        { Word ->      increment-word-home-index! }
        { Main -> drop increment-main-home-index! }
    }
}

struct Lambda {
    token:Token
    outer-ctx:Ctx
    dom:StackType
    params:List(Var)
    body:Arrow
    --
    def inner-ctx [ Lambda -- Ctx ] { body ctx }
    def mid [ Lambda -- StackType ] { body dom }
    def cod [ Lambda -- StackType ] { body cod } # assuming no dependent types
    def free-vars [ +Mirth Lambda -- +Mirth List(Var) ] {
        dup body free-vars
        swap params difference
    }
}

#########
# BLOCK #
#########

table +Mirth |- Block {
    ctx: Ctx
    token: Token
    home: Home
    dom: StackType
    cod: StackType
    home-index: Int { field-self home increment-index! }
    cname: Str {
        field-self dup home match {
            { Word -> qname-hard mangled Str("mb_" ; ; "_" ; home-index int; ) }
            { Main -> drop Str("mb_" ; home-index int;) }
        }
    }
    free-vars: List(Var) { field-self arrow free-vars }
    ~arrow: Prop(Arrow)
    --

    def New! [ +Mirth |- Arrow -- Block ] {
        >arrow
        @arrow home >home
        @arrow ctx >ctx
        @arrow token-start >token
        @arrow dom >dom
        @arrow cod >cod
        Block.Make!
        arrow> over PropLabel.BlockArrow prop over ~arrow !
    }

    def NewDeferred!(f) [ +Mirth |- (Block -- Arrow) Ctx Token Home -- Block ] {
        >home
        >token
        >ctx
        StackType.Fresh! >dom
        StackType.Fresh! >cod
        Block.Make!
        dup dup PropLabel.BlockArrow prop(f) over ~arrow !
    }

    def type  [ +Mirth |- Block -- ArrowType ] { sip(dom) cod T-> }
    def arrow [ +Mirth |- Block -- Arrow ] { ~arrow force! }
    def typecheck! [ +Mirth |- Block -- ] { arrow drop }
    def infer-type! [ +Mirth |- Block -- ArrowType ] { arrow type }
    def unify-type! [ +Mirth |- ArrowType Block -- ArrowType ] { sip(type unify! drop) infer-type! }

    max-mirth-revision 2025_03_29_001 {
        def = [ +Mirth |- Block Block -- Bool ] { on2:index = }
    }

    def mangled; [ +Mirth +Str |- Block -- ] { cname ; }

    def to-run-var [ +Mirth |- Block -- Maybe(Var) ] { arrow to-run-var }

}

def block-unify-type! [ +Mirth |- Block ArrowType -- ArrowType ] {
    swap unify-type!
}
