module(arrow)

import(prelude)

def(init-arrow!, +Arrow,
    0 Int->I32
    ctx-empty over arrow-ctx!
    TYPE_ERROR over arrow-dom!
    TYPE_ERROR over arrow-cod!
    drop

    1 ARROW_NUM !)

##########
# ARROWS #
##########

# Mirth words are elaborated into arrows, which may later be interpreted in
# various categories depending on the constraints given in the context.

def-type(Arrow, I32)
def(Arrow->Int, Arrow -- Int, I32->Int)
def(Int->Arrow, Int -- Arrow, Int->I32)

def(ARROW_MAX, Size, 1 16 <<)
quad def-static-buffer(ARROW_NUM)
def(arrow-alloc!, Arrow +Arrow,
    ARROW_NUM @ dup 1+ ARROW_NUM !)

ARROW_MAX u16s def-static-buffer(ARROW_CTX)
def(arrow-ctx?, Arrow -- Arrow Ctx +Arrow, dup arrow-ctx@)
def(arrow-ctx@, Arrow -- Ctx +Arrow, Arrow->Int ARROW_CTX u16@@)
def(arrow-ctx!, Ctx Arrow -- +Arrow, Arrow->Int ARROW_CTX u16!!)

ARROW_MAX u32s def-static-buffer(ARROW_DOM)
def(arrow-dom?, Arrow -- Arrow Type +Arrow, dup arrow-dom@)
def(arrow-dom@, Arrow -- Type +Arrow, Arrow->Int ARROW_DOM u32@@)
def(arrow-dom!, Type Arrow -- +Arrow, Arrow->Int ARROW_DOM u32!!)

ARROW_MAX u32s def-static-buffer(ARROW_COD)
def(arrow-cod?, Arrow -- Arrow Type +Arrow, dup arrow-cod@)
def(arrow-cod@, Arrow -- Type +Arrow, Arrow->Int ARROW_COD u32@@)
def(arrow-cod!, Type Arrow -- +Arrow, Arrow->Int ARROW_COD u32!!)
