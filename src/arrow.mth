module mirth.arrow

import std.prelude
import std.maybe
import std.list
import std.str

import mirth.mirth
import mirth.token
import mirth.type
import mirth.data
import mirth.match
import mirth.var
import mirth.name
import mirth.word
import mirth.prim
import mirth.external
import mirth.buffer
import mirth.table
import mirth.label

##########
# ARROWS #
##########

# Each Mirth word is represented by a morphism in some category
# (or some class of categories). We provide special support for
# the morphisms of symmetric monoidal category theory, since we
# want to manipulate multiple pieces of data, like a string diagram,
# but we do not assume commutativity (i.e. that dip(f) g == g dip(f)),
# so that we can more easily represent computational effects like IO.
# As such, we actually provide special support for premonoidal
# categories, and we're really working with ordered string diagrams.

# The representation, for now, involves building up morphisms as a
# sequence of atomic morphisms. Atomic morphisms are morphisms that
# can't be broken down into a composition. These include calling
# words, primitives, control flow, and literal values. This is a
# nested intermediate representation.

# Originally this type was called Morphism but that's hard to spell and
# to type repeatedly so now it's called Arrow :-)

struct Arrow {
    home:Home
    token-start:Token
    token-end:Token
    ctx:Ctx
    dom:StackType
    cod:StackType
    atoms:List(Atom)
    --
    def ctx-type { sip(ctx) type }
    def type { sip(dom) cod T-> }

    def to-run-var [ +Mirth Arrow -- +Mirth Maybe(Var) ] {
        atoms single? bind(to-run-var)
    }
    def free-vars [ +Mirth Arrow -- +Mirth List(Var) ] {
        atoms map(free-vars) unions
    }
}

struct Atom {
    home:Home
    token:Token
    ctx:Ctx
    op:Op
    args:List(Arg)
    dom:StackType
    cod:StackType
    subst:Subst
    --
    def to-run-var [ +Mirth Atom -- +Mirth Maybe(Var) ] { op to-run-var }
    def free-vars [ +Mirth Atom -- +Mirth List(Var) ] {
        dup args map(free-vars) unions
        swap op free-vars union
    }
}

data Arg {
    Block [ Block ]
    --
    def token { Block -> token }
    def type  { Block -> type }
    def free-vars { Block -> free-vars }
    def >Str [ +Mirth Arg -- +Mirth Str ] { Block -> qname >Str }
    def == [ Arg Arg -- Bool ] {
        { Block -> swap match { Block -> swap ==, _ -> drop2 Nay } }
    }
}

data PushValue {
    Str [ Str ]
    Int [ Int ]
    U8  [ U8  ]
    U16 [ U16 ]
    U32 [ U32 ]
    U64 [ U64 ]
    I8  [ I8  ]
    I16 [ I16 ]
    I32 [ I32 ]
    I64 [ I64 ]
    F32 [ F32 ]
    F64 [ F64 ]
    --
    def == [ PushValue PushValue -- Bool ] {
        { Str -> swap match { Str -> swap ==, _ -> drop2 False } }
        { Int -> swap match { Int -> swap ==, _ -> drop2 False } }
        { U8  -> swap match { U8  -> swap ==, _ -> drop2 False } }
        { U16 -> swap match { U16 -> swap ==, _ -> drop2 False } }
        { U32 -> swap match { U32 -> swap ==, _ -> drop2 False } }
        { U64 -> swap match { U64 -> swap ==, _ -> drop2 False } }
        { I8  -> swap match { I8  -> swap ==, _ -> drop2 False } }
        { I16 -> swap match { I16 -> swap ==, _ -> drop2 False } }
        { I32 -> swap match { I32 -> swap ==, _ -> drop2 False } }
        { I64 -> swap match { I64 -> swap ==, _ -> drop2 False } }
        { F32 -> swap match { F32 -> swap ==, _ -> drop2 False } }
        { F64 -> swap match { F64 -> swap ==, _ -> drop2 False } }
    }
}

data Op {
    Prim [ Prim ]
    Word [ Word ]
    External [ External ]
    Buffer [ Buffer ]
    Field [ Field ]
    Push [ PushValue ]
    Tag [ Tag ]
    Match [ Match ]
    Lambda [ Lambda ]
    Var [ Var ]
    BlockPush [ Block ]
    BlockRun  [ Block ]
    LabelPush  [ Label ]
    LabelPop   [ Label ]
    LabelPushR [ Label ]
    LabelPopR  [ Label ]
    DataGetEnumValue  [ Data ]
    DataFromEnumValue [ Data ]
    DataGetLabel [ TagField ]
    DataSetLabel [ TagField ]
    TableToIndex [ Table ]
    TableFromIndex [ Table ]
    --
    def to-run-var [ +Mirth Op -- +Mirth Maybe(Var) ] {
        { Var -> dup auto-run? if(Some, drop None) }
        { _ -> drop None }
    }
    def free-vars [ +Mirth Op -- +Mirth List(Var) ] {
        { Prim -> drop List.Nil }
        { Word -> drop List.Nil }
        { External -> drop List.Nil }
        { Buffer -> drop List.Nil }
        { Field -> drop List.Nil }
        { Push -> drop List.Nil }
        { Tag -> drop List.Nil }
        { Match -> free-vars }
        { Lambda -> free-vars }
        { Var -> L1 }
        { BlockPush -> free-vars }
        { BlockRun -> free-vars }
        { LabelPush -> drop List.Nil }
        { LabelPop -> drop List.Nil }
        { LabelPushR -> drop List.Nil }
        { LabelPopR -> drop List.Nil }
        { DataGetEnumValue -> drop List.Nil }
        { DataFromEnumValue -> drop List.Nil }
        { DataGetLabel -> drop List.Nil }
        { DataSetLabel -> drop List.Nil }
        { TableToIndex -> drop List.Nil }
        { TableFromIndex -> drop List.Nil }
    }
}

data Home {
    Main [ Token ]
    Word [ Word  ]
}

struct Lambda {
    token:Token
    outer-ctx:Ctx
    dom:StackType
    params:List(Var)
    body:Arrow
    --
    def inner-ctx [ Lambda -- Ctx ] { body ctx }
    def mid [ Lambda -- StackType ] { body dom }
    def cod [ Lambda -- StackType ] { body cod } # assuming no dependent types
    def free-vars [ +Mirth Lambda -- +Mirth List(Var) ] {
        dup body free-vars
        swap params difference
    }
}

#########
# BLOCK #
#########

table(Block)

field(Block.~ctx, Block, Ctx)
field(Block.~token, Block, Token)
field(Block.~home, Block, Home)
field(Block.~dom, Block, StackType)
field(Block.~cod, Block, StackType)
field(Block.~arrow, Block, Prop(Arrow))
field(Block.~qname, Block, QName)

def(Block.ctx, +Mirth Block -- +Mirth Ctx, ~ctx @)
def(Block.token, +Mirth Block -- +Mirth Token, ~token @)
def(Block.dom, +Mirth Block -- +Mirth StackType, ~dom @)
def(Block.cod, +Mirth Block -- +Mirth StackType, ~cod @)
def(Block.home, +Mirth Block -- +Mirth Home, ~home @)

def(Block.type, +Mirth Block -- +Mirth ArrowType, sip(dom) cod T->)
def(Block.arrow, +Mirth Block -- +Mirth Arrow, ~arrow force!)
def(Block.infer-type!, +Mirth Block -- +Mirth ArrowType, arrow type)

def(Block.qname, +Mirth Block -- +Mirth QName,
    dup ~qname memoize(dup dup home match(
        Main ->
            .module Namespace.Module
            swap arrow token-start index show
            dip:"entry@" cat >Name 0 QName.Mk,
        Word -> dup Namespace.Word
            dip(dip:arrow arrow both(token-start index) - show >Name)
            swap 0 QName.Mk
    )) nip)

def(Block.==, Block Block -- Bool, both(Block.index) ==)

field(Block.~home-index, Block, Int)
def(Block.register-home!, +Mirth Block -- +Mirth,
    dup home match(
        Word ->
            inc-num-blocks! swap ~home-index !,
        Main ->
            drop2
    ))

field(Block.~cname, Block, Str)
def(Block.cname, +Mirth Block -- +Mirth Str, dup ~cname memoize(
    dup home match(
        Word -> qname-hard mangled Str("mb_" ; ; "_" ; dup ~home-index @ show;),
        Main -> drop Str("mb_" ; dup index show;),
    )) nip)

def(Block.new!, +Mirth Arrow -- +Mirth Block,
    Block.alloc!
    over home over ~home !
    dup register-home!
    over ctx over ~ctx !
    over token-start over ~token !
    over dom over ~dom !
    over cod over ~cod !
    tuck dup dip(PropLabel.BlockArrow prop) ~arrow !)

def(Block.new-deferred!(f), (+Mirth Block -- +Mirth Arrow) +Mirth Ctx Token Home -- +Mirth Block,
    Block.alloc!
    tuck ~home !
    dup register-home!
    tuck ~token !
    tuck ~ctx !
    MetaVar.new! StackType.Meta over ~dom !
    MetaVar.new! StackType.Meta over ~cod !
    dup dup PropLabel.BlockArrow prop(f) over ~arrow !)

def(Block.typecheck!, +Mirth Block -- +Mirth,
    arrow drop)

def(block-unify-type!, +Mirth Block ArrowType -- +Mirth ArrowType,
    dip(dup type) rotl dip(unify! drop) arrow type)

def(Block.to-run-var, +Mirth Block -- +Mirth Maybe(Var),
    arrow to-run-var)

field(Block.~free-vars, Block, List(Var))
def(Block.free-vars, +Mirth Block -- +Mirth List(Var),
    dup ~free-vars memoize(
        dup arrow free-vars
    ) nip)

def(Match.free-vars, +Mirth Match -- +Mirth List(Var),
    cases map(free-vars) unions)
def(Case.free-vars, +Mirth Case -- +Mirth List(Var),
    body free-vars)
