# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

import base/maybe
import base/panic
export base/result
  type Maybe(t)
  type Result(e,t)
  Result.generate : e t Bool -- Result(e,t)

  err : e -- Result(e,t)
  ok  : t -- Result(e,t)

  err? : Result(e,t) -- Result(e,t) Bool
  ok?  : Result(e,t) -- Result(e,t) Bool

  result(f : *a e -- *b, g : *a t -- *b) : *a Result(e,t) -- *b
  rfor(f : *a t -- *a) : *a Result(e,t) -- *a


  rpure : a -- Result(e,a)
  rpure2 : a b -- Result(e,a) Result(e,b)
  rpure3 : a b c -- Result(e,a) Result(e,b) Result(e,c)

  rmap(f: a -- b) : Result(e,a) -- Result(e,b)
  rmap2(f: a b -- c) : Result(e,a) Result(e,b) -- Result(e,c)
  rmap3(f: a b c -- d) : Result(e,a) Result(e,b) Result(e,c) -- Result(e,d)

  rbind(f: a -- Result(e,b)) : Result(e,a) -- Result(e,b)
  rbind2(f: a b -- Result(e,c)) : Result(e,a) Result(e,b) -- Result(e,c)
  rbind3(f: a b c -- Result(e,d)) : Result(e,a) Result(e,b) Result(e,c) -- Result(e,d)

  result->maybe : Result(e,t) -- Maybe(t)

end

data Result(e,t)
  err : e -- Result(e,t)
  ok  : t -- Result(e,t)
end

Result.generate = if(drop err, nip ok)

result(f,g) = match(err -> f, ok -> g)
rfor(f) = result(drop, f)

result->maybe = result(drop none, some)

err? = result(err true, ok false)
ok?  = result(err false, ok true)

err? drop == id
ok?  drop == id
err? == ok? not

rpure = ok
rpure2 = dip(ok) ok
rpure3 = dip(rpure2) ok
rmap(f) = result(err, f ok)
rmap2(f) = swap result(nip err, swap result(nip err, f ok))
rmap3(f) = rmap2(pack2) rmap2(unpack2 f)
rbind(f) = result(err, f)
rbind2(f) = rmap2(pack2) rbind(unpack2 f)
rbind3(f) = rmap3(pack3) rbind(unpack3 f)


