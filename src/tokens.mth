module(tokens)
import(prelude)
import(names)
import(strings)

def(init-tokens!, --,
    0 num-tokens!)

##########
# Tokens #
##########

def(MAX_TOKENS, Size, 0x7000)

quad def-static-buffer(NUM_TOKENS)
def(num-tokens@, Int, NUM_TOKENS @)
def(num-tokens!, Int --, NUM_TOKENS !)
def(clear-tokens!, --, 0 num-tokens!)

def-type(Token, Int)
def-type(TokenType, U8)
def-type(Row, U16)
def-type(Col, U16)

MAX_TOKENS u8s def-static-buffer(TOKEN_TYPE)
def(token-type!, TokenType Token --, TOKEN_TYPE u8!!)
def(token-type@, Token -- TokenType, TOKEN_TYPE u8@@)
def(token-type?, Token -- Token TokenType, dup token-type@)
def(TOKEN_NONE, TokenType, 0 Int->U8)
def(TOKEN_LPAREN, TokenType, 1 Int->U8)
def(TOKEN_RPAREN, TokenType, 2 Int->U8)
def(TOKEN_COMMA, TokenType, 3 Int->U8)
def(TOKEN_NAME, TokenType, 4 Int->U8)
def(TOKEN_INT, TokenType, 5 Int->U8)
def(TOKEN_STR, TokenType, 6 Int->U8)
def(token-type-str, TokenType -- Str,
    dup TOKEN_NONE = if(drop "NONE",
    dup TOKEN_LPAREN = if(drop "LPAREN",
    dup TOKEN_RPAREN = if(drop "RPAREN",
    dup TOKEN_COMMA = if(drop "COMMA",
    dup TOKEN_NAME = if(drop "NAME",
    dup TOKEN_INT = if(drop "INT",
    dup TOKEN_STR = if(drop "STR",
    drop "???UNKNOWN???"))))))))
def(token-type-print!, TokenType --,
    token-type-str str-print!)

MAX_TOKENS i16s def-static-buffer(TOKEN_VALUE)
def-type(TokenValue, I16)
def(token-value!, TokenValue Token --, TOKEN_VALUE i16!!)
def(token-value@, Token -- TokenValue, TOKEN_VALUE i16@@)
def(token-value?, Token -- Token TokenValue, dup token-value@)
def(Int->TokenValue, Int -- TokenValue, Int->I16)
def(Name->TokenValue, Name -- TokenValue, Int->I16)
def(Token->TokenValue, Token -- TokenValue, Int->I16)
def(TokenValue->Int, TokenValue -- Int, I16->Int)
def(TokenValue->Name, TokenValue -- Name, I16->Int)
def(TokenValue->Token, TokenValue -- Token, I16->Int)
def(TokenValue->Str, TokenValue -- Str, I16->Int STRINGS_BUF +)

def(token-int@, Token -- Int,
    token-type? TOKEN_INT = if(
        token-value@ TokenValue->Int,
        "compiler error: token-int@ called on non-int token" emit-fatal-error! 0
    ))
def(token-int?, Token -- Token Int, dup token-int@)

def(token-str@, Token -- Str,
    token-type? TOKEN_STR = if(
        token-value@ TokenValue->Str,
        "compiler error: token-str@ called on non-str token" emit-fatal-error! ""
    ))
def(token-str?, Token -- Token Str, dup token-str@)

def(token-name@, Token -- Name,
    token-type? TOKEN_NAME = if(
        token-value@ TokenValue->Name,
        "compiler error: token-name@ called on non-name token" emit-fatal-error! PRIM_ID
    ))
def(token-name?, Token -- Token Name, dup token-name@)

def(token-token@, Token -- Token,
    token-type? TOKEN_LPAREN = if(
        token-value@ TokenValue->Token,
    token-type? TOKEN_RPAREN = if(
        token-value@ TokenValue->Token,
        "compiler error: token-token@ called on non-paren token" emit-fatal-error! 0
    )))
def(token-token?, Token -- Token Token, dup token-token@)

MAX_TOKENS u16s def-static-buffer(TOKEN_MODULE)
def(token-module!, Module Token --, TOKEN_MODULE u16!!)
def(token-module@, Token -- Module, TOKEN_MODULE u16@@)
def(token-module?, Token -- Token Module, dup token-module@)

MAX_TOKENS u16s def-static-buffer(TOKEN_ROW)
def(token-row!, Row Token --, TOKEN_ROW u16!!)
def(token-row@, Token -- Row, TOKEN_ROW u16@@)
def(token-row?, Token -- Token Row, dup token-row@)
def(Row->Int, Row -- Int, U16->Int)
def(Int->Row, Int -- Row, Int->U16)

MAX_TOKENS u16s def-static-buffer(TOKEN_COL)
def(token-col!, Col Token --, TOKEN_COL u16!!)
def(token-col@, Token -- Col, TOKEN_COL u16@@)
def(token-col?, Token -- Token Col, dup token-col@)
def(Col->Int, Col -- Int, U16->Int)
def(Int->Col, Int -- Col, Int->U16)

def(token-new, -- Token,
    num-tokens@ dup MAX_TOKENS >= if(
        "tokens buffer overflow" panic!,
        dup 1+ num-tokens!
    ))

def(token-trace-prefix!, Token -- +IO,
    token-module? load-module-source-path! str-buf-trace! ":" str-trace!
    token-row? Row->Int int-trace! ":" str-trace!
    token-col? Col->Int int-trace! ":" str-trace-sp!
    drop)

def(token-print-prefix!, Token -- +IO,
    token-module? load-module-source-path! str-buf-print! ":" str-print!
    token-row? Row->Int int-print! ":" str-print!
    token-col? Col->Int int-print! ":" str-print-sp!
    drop)

def(token-print!, Token -- +IO,
    dup token-print-prefix!
    dup int-print-sp!
    token-type? token-type-print!
    token-type? TOKEN_NAME = if(
        print-sp!
        token-name? name-load! str-buf-print!,

    token-type? TOKEN_STR = if(
        print-sp!
        print-quote!
        token-str? str-print! print-quote!,
        # FIXME: print escaped

        print-sp!
        token-value? TokenValue->Int int-print!))

    drop
    print-ln!)

def(show-tokens!, --,
    0
    while(dup num-tokens@ <,
        dup token-print! 1+)
    drop)
