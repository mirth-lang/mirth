module(tests.test-prelude)
import(std.prelude)
import(posix.posix)

# Assertions

def(!!T, Bool --, if(id, "Assertion failed" panic!))
def(!!F, Bool --, not !!T)
def(!!=, Int Int --, == !!T)
def(!!0, Int --, 0 !!=)
def(!!1, Int --, 1 !!=)
def(!!001, Int Int Int --, 1 !!= 0 !!= 0 !!=)
def(!!010, Int Int Int --, 0 !!= 1 !!= 0 !!=)
def(!!011, Int Int Int --, 1 !!= 1 !!= 0 !!=)
def(!!100, Int Int Int --, 0 !!= 0 !!= 1 !!=)
def(!!111, Int Int Int --, 1 !!= 1 !!= 1 !!=)

# Tests

def(test-prelude!, --,
    test-if test-drop test-dup test-swap test-dip
    test-rotr test-rotl test== test< test<= test> test>=
    test+ test- test* test-while)
def(test-if, --,
    0 !!0 1 !!1 0 1 !!1 !!0
    T  [ 10 ] [ 20 ] Bool.if 10 !!=
    F [ 10 ] [ 20 ] Bool.if 20 !!=
    T  [ 30 ] Bool.if(20) 30 !!=
    F [ 30 ] Bool.if(20) 20 !!=)

def(test-drop, --, 0 1 drop !!0)
def(test-dup, --, 0 1 dup !!011)
def(test-swap, --, 0 1 0 swap !!001)
def(test-dip, --,
    0 0 dip(1) !!010
    0 0 [1] dip !!010
    0 0 [1 +] dip !!0 !!1)
def(test-rotr, --,
    1 0 0 rotr !!010
    0 1 0 rotr !!001
    0 0 1 rotr !!100)
def(test-rotl, --,
    1 0 0 rotl !!001
    0 1 0 rotl !!100
    0 0 1 rotl !!010)

def(test==, --,
    0 0 == !!T
    0 1 == !!F
    1 0 == !!F
    1 1 == !!T
    1 2 == !!F
    2 1 == !!F
    2 2 == !!T)
def(test<, --,
    0 0 < !!F
    0 1 < !!T
    1 0 < !!F
    1 1 < !!F
    1 2 < !!T
    2 1 < !!F
    2 2 < !!F)
def(test<=, --,
    0 0 <= !!T
    0 1 <= !!T
    1 0 <= !!F
    1 1 <= !!T
    1 2 <= !!T
    2 1 <= !!F
    2 2 <= !!T)
def(test>, --,
    0 0 > !!F
    0 1 > !!F
    1 0 > !!T
    1 1 > !!F
    1 2 > !!F
    2 1 > !!T
    2 2 > !!F)
def(test>=, --,
    0 0 >= !!T
    0 1 >= !!F
    1 0 >= !!T
    1 1 >= !!T
    1 2 >= !!F
    2 1 >= !!T
    2 2 >= !!T
    -1 0 >= !!F
    -1 -1 >= !!T
    0 -1 >= !!T
    -1 -2 >= !!T
    -2 -2 >= !!T
    -2 -1 >= !!F)

def(test+, --,
    0 0 + !!0
    0 1 + !!1
    1 0 + !!1
    1 1 + 2 == !!T
    2 2 + 4 == !!T
    2 -2 + !!0)

def(test-, --,
    0 0 - !!0
    1 0 - !!1
    1 1 - !!0
    0 1 - -1 !!=
    2 2 - !!0
    2 4 - -2 !!=
    4 2 - 2 !!=)

def(test*, --,
    0 0 * !!0
    2 1 * 2 !!=
    2 2 * 4 !!=
    2 4 * 8 !!=)

def(test-while, --,
    999 10 20 while(dup 0>, 1- dip(1+)) drop 30 !!= 999 !!=
    10 20 [dup 0 >] while(1- dip(1+)) drop 30 !!=
    30 40 [dup 0 >] [1- dip(1+)] while drop 70 !!=
    )

# Morphism quotes
def(test-morphism-quote-id, [ Int -- Int ] -- [ Int -- Int ], id)
def(test-morphism-quote-drop, [ Int -- Int ] -- , drop)
def(test-morphism-quote-dup, [ Int -- Int ] -- [ Int -- Int ] [ Int -- Int ], dup)

# Tensor quotes
def(test-tensor-quote-id, [ Int ] -- [ Int ], id)
def(test-tensor-quote-drop, [ Int ] -- , drop)
def(test-tensor-quote-dup, [ Int ] -- [ Int ] [ Int ], dup)

# Stack assertions
def(test-stack-assertions, --,
    1 2 { Int Int }
    3 4 { Int Int Int Int }
    + + + { Int }
    10 ==
    { Bool }
    drop
)

def(test-stack-assertions-var, a b -- a b,
    { a b }
    swap
    { b a }
    swap
    { a b }
)

def(test-stack-assertions-var-2, a b -- a b,
    swap
    { b a }
    swap
    { a b }
)

def(test-stack-assertions-dont-care, a b -- a b,
    { a b }
    { a _ }
    { _ b }
    swap
    { b a }
    { b _ }
    { _ a }
    swap
    { a b }
    { a _ }
    { _ b }
)

def(test-dup2, Int Str Int Str,
    10 "hello" dup2)

def(main, +World -- +World, test-prelude!)
