module mirth.var

import std.prelude
import std.maybe
import std.list
import std.str

import mirth.name
import mirth.type
import mirth.mirth

#######
# VAR #
#######

# mirth/data/var
table +Mirth |- Var {
    ||| Name of the variable.
    name: Name

    ||| Type of the variable. This can be a kind, for type variables.
    type: Type

    ||| Variable runs automatically when used. This returns the corresponding
    ||| arrow type, so it's doubling the information in `Var.type` but providing
    ||| a refined view of it.
    auto-run?: Maybe(ArrowType)
    --
    max-mirth-revision 2025_03_29_001 {
        inline def = [ +Mirth |- Var Var -- Bool ] { on2:index = }
    }

    def name; [ +Mirth +Str |- Var -- ] { name name; }
    def type; [ +Mirth +Str |- Var -- ] { name; }

    def is-type?     [ +Mirth |- Var -- Bool ] { type prim? has(PrimType.TYPE =) }
    def is-stack?    [ +Mirth |- Var -- Bool ] { type prim? has(PrimType.STACK =) }
    def is-resource? [ +Mirth |- Var -- Bool ] { type prim? has(PrimType.RESOURCE =) }
    def is-physical? [ +Mirth |- Var -- Bool ] { type is-physical? }

    def New! [ +Mirth |- Type Name -- Var ] {
        >name
        >type
        None >auto-run?
        Var.Make!
    }

    def NewAutoRun! [ +Mirth |- ArrowType Name -- Var ] {
        >name
        dup Type.Arrow >type
        Some >auto-run?
        Var.Make!
    }

    def NewInCtx [ +Mirth Ctx Type Str -- +Mirth Ctx Var ] {
        Name Var.New! sip:Ctx.new
    }
}

###########
# Context #
###########

# A context for types and terms.
data(Ctx, Ctx -> List(Var))
def(List.>Ctx, List(Var) -- Ctx, Ctx)
def(Nest.>Ctx, Nest(Var) -- Ctx, >List Ctx)
def(Ctx.>List, Ctx -- List(Var), /Ctx)

def(Ctx.L0, Ctx, L0 Ctx)
def(Ctx.L1, Var -- Ctx, L1 Ctx)
def(Ctx.L2, Var Var -- Ctx, L2 Ctx)
def(Ctx.L3, Var Var Var -- Ctx, L3 Ctx)
def(Ctx.L4, Var Var Var Var -- Ctx, L4 Ctx)
def(Ctx.L5, Var Var Var Var Var -- Ctx, L5 Ctx)

def(Ctx.new, Ctx Var -- Ctx, dip(>List) List.Snoc >Ctx)

def(Ctx.vars, Ctx -- List(Var), >List)
def(Ctx.physical-vars, +Mirth Ctx -- +Mirth List(Var), vars filter(is-physical?))
def(Ctx.physically-empty?, +Mirth Ctx -- +Mirth Bool, physical-vars empty?)
def(Ctx.lookup, +Mirth Name Ctx -- +Mirth Maybe(Var), >List reverse-lookup(name =))
def(Ctx.len, Ctx -- Nat, >List len)
def(Ctx.fresh-name!, +Mirth Ctx -- +Mirth Ctx Name,
    1 "_x1" Name while-some(
        dup over3 lookup,
        drop2 1+ dup str("_x"; int;) Name
    ) nip)
def(Ctx.fresh-stack-type-var!, +Mirth Ctx -- +Mirth Ctx Var,
    dip(Type.STACK) fresh-var!)
def(Ctx.fresh-type-var!, +Mirth Ctx -- +Mirth Ctx Var,
    dip(Type.TYPE) fresh-var!)
def(Ctx.fresh-var!, +Mirth Type Ctx -- +Mirth Ctx Var,
    fresh-name! dip(swap) Var.New! sip(Ctx.new))

def(Ctx.=, +Mirth |- Ctx Ctx -- Bool,
    on2:vars =)

def Var.unify! [ +Mirth Var Var -- +Mirth Type ] {
    dup2 = if(drop Type.Var, both(Type.Var) unify-failed!)
}

def Var.kind [ +Mirth Var -- +Mirth Kind ] {
    type >Kind
}

def Var.freshen [ +Mirth Subst Var -- +Mirth Subst Type ] {
    swap dup2 has-var? if(
        tuck get-var,
        over kind MetaVar.New! Type.Meta dup
        dip(rotr cons)
    )
}

# Syntactic Sorts

data Sort {
    Type
    Resource
    Stack
}

def Var.sort? [ +Mirth Var -- +Mirth Maybe(Sort) ] {
    type >Sort?
}

def Type.>Sort? [ +Mirth Type -- +Mirth Maybe(Sort) ] {
    { Meta -> expand-if(>Sort?, drop None) }
    { Prim -> >Sort? }
    { _ -> drop None }
}

def PrimType.>Sort? [ +Mirth PrimType -- +Mirth Maybe(Sort) ] {
    { TYPE -> Sort.Type Some }
    { STACK -> Sort.Stack Some }
    { RESOURCE -> Sort.Resource Some }
    { _ -> drop None }
}
