module(mirth.prim)

import(std.prelude)
import(std.maybe)
import(mirth.mirth)
import(mirth.name)
import(mirth.type)
import(mirth.data)
import(mirth.var)
import(mirth.token)
import(mirth.def)

# mirth/data/prim
data Prim {
    PRIM_CORE_ID
    PRIM_CORE_DUP
    PRIM_CORE_DROP
    PRIM_CORE_SWAP
    PRIM_CORE_RSWAP
    PRIM_CORE_DIP
    PRIM_CORE_RDIP
    PRIM_CORE_IF
    PRIM_CORE_WHILE
    PRIM_CORE_DEBUG
    PRIM_CORE_PANIC
    PRIM_CORE_RUN

    PRIM_INT_EQ
    PRIM_INT_LT
    PRIM_INT_LE
    PRIM_INT_GT
    PRIM_INT_GE
    PRIM_INT_NE
    PRIM_INT_ADD
    PRIM_INT_SUB
    PRIM_INT_MUL
    PRIM_INT_DIV
    PRIM_INT_MOD
    PRIM_INT_AND
    PRIM_INT_OR
    PRIM_INT_XOR
    PRIM_INT_SHL
    PRIM_INT_SHR
    PRIM_INT_TO_STR
    PRIM_INT_TO_I64
    PRIM_INT_TO_F32
    PRIM_INT_TO_F64

    PRIM_U8_GET
    PRIM_U8_SET

    PRIM_U16_GET
    PRIM_U16_SET

    PRIM_U32_GET
    PRIM_U32_SET

    PRIM_U64_GET
    PRIM_U64_SET

    PRIM_I8_GET
    PRIM_I8_SET

    PRIM_I16_GET
    PRIM_I16_SET

    PRIM_I32_GET
    PRIM_I32_SET

    PRIM_I64_GET
    PRIM_I64_SET
    PRIM_I64_TO_INT

    PRIM_F32_EQ
    PRIM_F32_LT
    PRIM_F32_ADD
    PRIM_F32_SUB
    PRIM_F32_MUL
    PRIM_F32_DIV
    PRIM_F32_TO_INT
    PRIM_F32_TO_STR
    PRIM_F32_TO_F64

    PRIM_F64_EQ
    PRIM_F64_LT
    PRIM_F64_ADD
    PRIM_F64_SUB
    PRIM_F64_MUL
    PRIM_F64_DIV
    PRIM_F64_TO_INT
    PRIM_F64_TO_STR
    PRIM_F64_TO_F32

    PRIM_BOOL_AND
    PRIM_BOOL_OR
    PRIM_BOOL_NOT

    PRIM_TUP_PACK0
    PRIM_TUP_PACK1
    PRIM_TUP_PACK2
    PRIM_TUP_PACK3
    PRIM_TUP_PACK4
    PRIM_TUP_PACK5

    PRIM_TUP_UNPACK0
    PRIM_TUP_UNPACK1
    PRIM_TUP_UNPACK2
    PRIM_TUP_UNPACK3
    PRIM_TUP_UNPACK4
    PRIM_TUP_UNPACK5

    PRIM_MUT_GET
    PRIM_MUT_SET
    PRIM_MUT_IS_SET

    PRIM_PTR_NIL
    PRIM_PTR_EQ
    PRIM_PTR_ADD
    PRIM_PTR_SIZE
    PRIM_PTR_ALLOC
    PRIM_PTR_REALLOC
    PRIM_PTR_FREE
    PRIM_PTR_COPY
    PRIM_PTR_FILL
    PRIM_PTR_GET
    PRIM_PTR_SET

    PRIM_STR_COPY
    PRIM_STR_NUM_BYTES
    PRIM_STR_BASE
    PRIM_STR_CAT
    PRIM_STR_CMP
    PRIM_STR_EQ
    PRIM_STR_LT
    PRIM_STR_LE
    PRIM_STR_GT
    PRIM_STR_GE
    PRIM_STR_NE

    PRIM_SYS_OS
    PRIM_SYS_ARCH
    PRIM_SYS_ARGC
    PRIM_SYS_ARGV

    --
    def MIN [ Prim ] { PRIM_CORE_ID }
    def MAX [ Prim ] { PRIM_SYS_ARGV }
    def ForAll(f) [ (*a Prim -- *a) *a -- *a ] {
        Prim.MIN >Int while (
            dup Prim.MAX >Int <=,
            sip(Prim.from-enum-value-unsafe f)
            1+
        ) drop
    }

    def >Int [ Prim -- Int ] { enum-value }
    def == [ Prim Prim -- Bool ] { on2:>Int == }
    def <> [ Prim Prim -- Bool ] { == not }

    def name  { str-arity drop >Name }
    def arity { str-arity nip }
    def qname { str-arity QName.Prim }

    def register! [ +Mirth Prim -- +Mirth ] {
        DefPrim register
    }

    def str-arity [ Prim -- Str Int ] {
        { PRIM_CORE_ID -> "prim-id" 0 }
        { PRIM_CORE_DUP -> "prim-dup" 0 }
        { PRIM_CORE_DROP -> "prim-drop" 0 }
        { PRIM_CORE_SWAP -> "prim-swap" 0 }
        { PRIM_CORE_RSWAP -> "prim-rswap" 0 }
        { PRIM_CORE_DIP -> "prim-dip" 1 }
        { PRIM_CORE_RDIP -> "prim-rdip" 1 }
        { PRIM_CORE_IF -> "prim-if" 2 }
        { PRIM_CORE_WHILE -> "prim-while" 2 }
        { PRIM_CORE_DEBUG -> "prim-debug" 0 }
        { PRIM_CORE_PANIC -> "prim-panic" 0 }
        { PRIM_CORE_RUN -> "prim-run" 0 }

        { PRIM_INT_EQ -> "prim-int-eq" 0 }
        { PRIM_INT_LT -> "prim-int-lt" 0 }
        { PRIM_INT_LE -> "prim-int-le" 0 }
        { PRIM_INT_GT -> "prim-int-gt" 0 }
        { PRIM_INT_GE -> "prim-int-ge" 0 }
        { PRIM_INT_NE -> "prim-int-ne" 0 }
        { PRIM_INT_ADD -> "prim-int-add" 0 }
        { PRIM_INT_SUB -> "prim-int-sub" 0 }
        { PRIM_INT_MUL -> "prim-int-mul" 0 }
        { PRIM_INT_DIV -> "prim-int-div" 0 }
        { PRIM_INT_MOD -> "prim-int-mod" 0 }
        { PRIM_INT_AND -> "prim-int-and" 0 }
        { PRIM_INT_OR -> "prim-int-or" 0 }
        { PRIM_INT_XOR -> "prim-int-xor" 0 }
        { PRIM_INT_SHL -> "prim-int-shl" 0 }
        { PRIM_INT_SHR -> "prim-int-shr" 0 }
        { PRIM_INT_TO_STR -> "prim-int-to-str" 0 }
        { PRIM_INT_TO_I64 -> "prim-int-to-i64" 0 }
        { PRIM_INT_TO_F32 -> "prim-int-to-f32" 0 }
        { PRIM_INT_TO_F64 -> "prim-int-to-f64" 0 }

        { PRIM_U8_GET -> "prim-u8-get" 0 }
        { PRIM_U8_SET -> "prim-u8-set" 0 }
        { PRIM_U16_GET -> "prim-u16-get" 0 }
        { PRIM_U16_SET -> "prim-u16-set" 0 }
        { PRIM_U32_GET -> "prim-u32-get" 0 }
        { PRIM_U32_SET -> "prim-u32-set" 0 }
        { PRIM_U64_GET -> "prim-u64-get" 0 }
        { PRIM_U64_SET -> "prim-u64-set" 0 }

        { PRIM_I8_GET -> "prim-i8-get" 0 }
        { PRIM_I8_SET -> "prim-i8-set" 0 }

        { PRIM_I16_GET -> "prim-i16-get" 0 }
        { PRIM_I16_SET -> "prim-i16-set" 0 }

        { PRIM_I32_GET -> "prim-i32-get" 0 }
        { PRIM_I32_SET -> "prim-i32-set" 0 }

        { PRIM_I64_GET -> "prim-i64-get" 0 }
        { PRIM_I64_SET -> "prim-i64-set" 0 }
        { PRIM_I64_TO_INT -> "prim-i64-to-int" 0 }

        { PRIM_F32_EQ -> "prim-f32-eq" 0 }
        { PRIM_F32_LT -> "prim-f32-lt" 0 }
        { PRIM_F32_ADD -> "prim-f32-add" 0 }
        { PRIM_F32_SUB -> "prim-f32-sub" 0 }
        { PRIM_F32_MUL -> "prim-f32-mul" 0 }
        { PRIM_F32_DIV -> "prim-f32-div" 0 }
        { PRIM_F32_TO_INT -> "prim-f32-to-int" 0 }
        { PRIM_F32_TO_STR -> "prim-f32-to-str" 0 }
        { PRIM_F32_TO_F64 -> "prim-f32-to-f64" 0 }

        { PRIM_F64_EQ -> "prim-f64-eq" 0 }
        { PRIM_F64_LT -> "prim-f64-lt" 0 }
        { PRIM_F64_ADD -> "prim-f64-add" 0 }
        { PRIM_F64_SUB -> "prim-f64-sub" 0 }
        { PRIM_F64_MUL -> "prim-f64-mul" 0 }
        { PRIM_F64_DIV -> "prim-f64-div" 0 }
        { PRIM_F64_TO_INT -> "prim-f64-to-int" 0 }
        { PRIM_F64_TO_STR -> "prim-f64-to-str" 0 }
        { PRIM_F64_TO_F32 -> "prim-f64-to-f32" 0 }

        { PRIM_BOOL_AND -> "prim-bool-and" 0 }
        { PRIM_BOOL_OR  -> "prim-bool-or"  0 }
        { PRIM_BOOL_NOT -> "prim-bool-not" 0 }

        { PRIM_TUP_PACK0 -> "prim-tup-pack0" 0 }
        { PRIM_TUP_PACK1 -> "prim-tup-pack1" 0 }
        { PRIM_TUP_PACK2 -> "prim-tup-pack2" 0 }
        { PRIM_TUP_PACK3 -> "prim-tup-pack3" 0 }
        { PRIM_TUP_PACK4 -> "prim-tup-pack4" 0 }
        { PRIM_TUP_PACK5 -> "prim-tup-pack5" 0 }
        { PRIM_TUP_UNPACK0 -> "prim-tup-unpack0" 0 }
        { PRIM_TUP_UNPACK1 -> "prim-tup-unpack1" 0 }
        { PRIM_TUP_UNPACK2 -> "prim-tup-unpack2" 0 }
        { PRIM_TUP_UNPACK3 -> "prim-tup-unpack3" 0 }
        { PRIM_TUP_UNPACK4 -> "prim-tup-unpack4" 0 }
        { PRIM_TUP_UNPACK5 -> "prim-tup-unpack5" 0 }

        { PRIM_MUT_GET -> "prim-mut-get" 0 }
        { PRIM_MUT_SET -> "prim-mut-set" 0 }
        { PRIM_MUT_IS_SET -> "prim-mut-is-set" 0 }

        { PRIM_PTR_NIL -> "prim-ptr-nil" 0 }
        { PRIM_PTR_EQ -> "prim-ptr-eq" 0 }
        { PRIM_PTR_ADD -> "prim-ptr-add" 0 }
        { PRIM_PTR_SIZE -> "prim-ptr-size" 0 }
        { PRIM_PTR_ALLOC -> "prim-ptr-alloc" 0 }
        { PRIM_PTR_REALLOC -> "prim-ptr-realloc" 0 }
        { PRIM_PTR_FREE -> "prim-ptr-free" 0 }
        { PRIM_PTR_COPY -> "prim-ptr-copy" 0 }
        { PRIM_PTR_FILL -> "prim-ptr-fill" 0 }
        { PRIM_PTR_GET -> "prim-ptr-get" 0 }
        { PRIM_PTR_SET -> "prim-ptr-set" 0 }

        { PRIM_STR_COPY -> "prim-str-copy" 0 }
        { PRIM_STR_NUM_BYTES -> "prim-str-num-bytes" 0 }
        { PRIM_STR_BASE -> "prim-str-base" 0 }
        { PRIM_STR_CAT -> "prim-str-cat" 0 }
        { PRIM_STR_CMP -> "prim-str-cmp" 0 }
        { PRIM_STR_EQ -> "prim-str-eq" 0 }
        { PRIM_STR_LT -> "prim-str-lt" 0 }
        { PRIM_STR_LE -> "prim-str-le" 0 }
        { PRIM_STR_GT -> "prim-str-gt" 0 }
        { PRIM_STR_GE -> "prim-str-ge" 0 }
        { PRIM_STR_NE -> "prim-str-ne" 0 }

        { PRIM_SYS_OS   -> "prim-sys-os"   0 }
        { PRIM_SYS_ARCH -> "prim-sys-arch" 0 }
        { PRIM_SYS_ARGC -> "prim-sys-argc" 0 }
        { PRIM_SYS_ARGV -> "prim-sys-argv" 0 }
    }

    field (~ctx-type, Prim, [Ctx ArrowType])
    def ctx-type [ +Mirth Prim -- +Mirth Ctx ArrowType ] {
        dup ~ctx-type memoize(dup compute-ctx-type pack2) nip unpack2
    }
    def ctx  [ +Mirth Prim -- +Mirth Ctx       ] { ctx-type drop }
    def type [ +Mirth Prim -- +Mirth ArrowType ] { ctx-type nip }

    def compute-ctx-type [ +Mirth Prim -- +Mirth Ctx ArrowType ] {
        { PRIM_CORE_ID -> Ctx.L0 T0 T0 T-> }
        { PRIM_CORE_DUP ->
            Ctx.L0
            "a" Type.NewInCtx >a
            @a T1 @a @a T2 T->
            a> drop
        }
        { PRIM_CORE_DROP ->
            Ctx.L0
            "a" Type.NewInCtx >a
            @a T1 T0 T->
            a> drop
        }
        { PRIM_CORE_SWAP ->
            Ctx.L0
            "a" Type.NewInCtx >a
            "b" Type.NewInCtx >b
            @a @b T2 @b @a T2 T->
            a> b> drop2
        }

        { PRIM_CORE_RSWAP ->
            Ctx.L0
            "+a" Resource.NewInCtx >a
            "+b" Resource.NewInCtx >b
            T0 @a T+ @b T+
            T0 @b T+ @a T+ T->
            a> b> drop2
        }

        { PRIM_CORE_DIP ->
            Ctx.L0
            "*a" StackType.NewInCtx >a
            "*b" StackType.NewInCtx >b
            "x" Type.NewInCtx >x
            @a @x T* @a @b T-> TMorphism T*
            @b @x T* T->
            a> b> x> drop3
        }

        { PRIM_CORE_RDIP ->
            Ctx.L0
            "*a" StackType.NewInCtx >a
            "*b" StackType.NewInCtx >b
            "x" Resource.NewInCtx >x
            @a @x T+
                @a @b T-> TMorphism T*
            @b @x T+ T->
            a> b> x> drop3
        }

        { PRIM_CORE_IF ->
            Ctx.L0
            "*a" StackType.NewInCtx >a
            "*b" StackType.NewInCtx >b
            @a TYPE_BOOL T*
                @a @b T-> TMorphism T*
                @a @b T-> TMorphism T*
            @b T->
            a> b> drop2
        }

        { PRIM_CORE_WHILE ->
            Ctx.L0
            "*a" StackType.NewInCtx >a
            @a
                @a @a TYPE_BOOL T* T-> TMorphism T*
                @a @a T-> TMorphism T*
            @a T->
            a> drop
        }

        { PRIM_CORE_DEBUG ->
            Ctx.L0
            T0 T0 T->
        }

        { PRIM_CORE_PANIC ->
            Ctx.L0
            "*a" StackType.NewInCtx >a
            "*b" StackType.NewInCtx >b
            @a TYPE_STR T*
            @b T->
            a> b> drop2
        }

        { PRIM_CORE_RUN ->
            Ctx.L0
            "*a" StackType.NewInCtx >a
            "*b" StackType.NewInCtx >b
            @a @a @b T-> TMorphism T*
            @b T->
            a> b> drop2
        }

        { PRIM_INT_EQ -> Ctx.L0 TYPE_INT TYPE_INT T2 TYPE_BOOL T1 T-> }
        { PRIM_INT_LT -> Ctx.L0 TYPE_INT TYPE_INT T2 TYPE_BOOL T1 T-> }
        { PRIM_INT_LE -> Ctx.L0 TYPE_INT TYPE_INT T2 TYPE_BOOL T1 T-> }
        { PRIM_INT_GT -> Ctx.L0 TYPE_INT TYPE_INT T2 TYPE_BOOL T1 T-> }
        { PRIM_INT_GE -> Ctx.L0 TYPE_INT TYPE_INT T2 TYPE_BOOL T1 T-> }
        { PRIM_INT_NE -> Ctx.L0 TYPE_INT TYPE_INT T2 TYPE_BOOL T1 T-> }

        { PRIM_INT_ADD -> Ctx.L0 TYPE_INT TYPE_INT T2 TYPE_INT T1 T-> }
        { PRIM_INT_SUB -> Ctx.L0 TYPE_INT TYPE_INT T2 TYPE_INT T1 T-> }
        { PRIM_INT_MUL -> Ctx.L0 TYPE_INT TYPE_INT T2 TYPE_INT T1 T-> }
        { PRIM_INT_DIV -> Ctx.L0 TYPE_INT TYPE_INT T2 TYPE_INT T1 T-> }
        { PRIM_INT_MOD -> Ctx.L0 TYPE_INT TYPE_INT T2 TYPE_INT T1 T-> }
        { PRIM_INT_AND -> Ctx.L0 TYPE_INT TYPE_INT T2 TYPE_INT T1 T-> }
        { PRIM_INT_OR  -> Ctx.L0 TYPE_INT TYPE_INT T2 TYPE_INT T1 T-> }
        { PRIM_INT_XOR -> Ctx.L0 TYPE_INT TYPE_INT T2 TYPE_INT T1 T-> }
        { PRIM_INT_SHL -> Ctx.L0 TYPE_INT TYPE_INT T2 TYPE_INT T1 T-> }
        { PRIM_INT_SHR -> Ctx.L0 TYPE_INT TYPE_INT T2 TYPE_INT T1 T-> }
        { PRIM_INT_TO_STR -> Ctx.L0 TYPE_INT T1 TYPE_STR T1 T-> }
        { PRIM_INT_TO_I64 -> Ctx.L0 TYPE_INT T1 TYPE_I64 T1 T-> }
        { PRIM_INT_TO_F32 -> Ctx.L0 TYPE_INT T1 TYPE_F32 T1 T-> }
        { PRIM_INT_TO_F64 -> Ctx.L0 TYPE_INT T1 TYPE_F64 T1 T-> }

        { PRIM_U8_GET -> Ctx.L0 TYPE_PTR T1 TYPE_U8 T1 T-> }
        { PRIM_U8_SET -> Ctx.L0 TYPE_U8 TYPE_PTR T2 T0 T-> }

        { PRIM_U16_GET -> Ctx.L0 TYPE_PTR T1 TYPE_U16 T1 T-> }
        { PRIM_U16_SET -> Ctx.L0 TYPE_U16 TYPE_PTR T2 T0 T-> }

        { PRIM_U32_GET -> Ctx.L0 TYPE_PTR T1 TYPE_U32 T1 T-> }
        { PRIM_U32_SET -> Ctx.L0 TYPE_U32 TYPE_PTR T2 T0 T-> }

        { PRIM_U64_GET -> Ctx.L0 TYPE_PTR T1 TYPE_U64 T1 T-> }
        { PRIM_U64_SET -> Ctx.L0 TYPE_U64 TYPE_PTR T2 T0 T-> }

        { PRIM_I8_GET -> Ctx.L0 TYPE_PTR T1 TYPE_I8 T1 T-> }
        { PRIM_I8_SET -> Ctx.L0 TYPE_I8 TYPE_PTR T2 T0 T-> }

        { PRIM_I16_GET -> Ctx.L0 TYPE_PTR T1 TYPE_I16 T1 T-> }
        { PRIM_I16_SET -> Ctx.L0 TYPE_I16 TYPE_PTR T2 T0 T-> }

        { PRIM_I32_GET -> Ctx.L0 TYPE_PTR T1 TYPE_I32 T1 T-> }
        { PRIM_I32_SET -> Ctx.L0 TYPE_I32 TYPE_PTR T2 T0 T-> }

        { PRIM_I64_GET -> Ctx.L0 TYPE_PTR T1 TYPE_I64 T1 T-> }
        { PRIM_I64_SET -> Ctx.L0 TYPE_I64 TYPE_PTR T2 T0 T-> }
        { PRIM_I64_TO_INT -> Ctx.L0 TYPE_I64 T1 TYPE_INT T1 T-> }

        { PRIM_F32_EQ -> Ctx.L0 TYPE_F32 TYPE_F32 T2 TYPE_BOOL T1 T-> }
        { PRIM_F32_LT -> Ctx.L0 TYPE_F32 TYPE_F32 T2 TYPE_BOOL T1 T-> }
        { PRIM_F32_ADD -> Ctx.L0 TYPE_F32 TYPE_F32 T2 TYPE_F32 T1 T-> }
        { PRIM_F32_SUB -> Ctx.L0 TYPE_F32 TYPE_F32 T2 TYPE_F32 T1 T-> }
        { PRIM_F32_MUL -> Ctx.L0 TYPE_F32 TYPE_F32 T2 TYPE_F32 T1 T-> }
        { PRIM_F32_DIV -> Ctx.L0 TYPE_F32 TYPE_F32 T2 TYPE_F32 T1 T-> }
        { PRIM_F32_TO_INT -> Ctx.L0 TYPE_F32 T1 TYPE_INT T1 T-> }
        { PRIM_F32_TO_STR -> Ctx.L0 TYPE_F32 T1 TYPE_STR T1 T-> }
        { PRIM_F32_TO_F64 -> Ctx.L0 TYPE_F32 T1 TYPE_F64 T1 T-> }

        { PRIM_F64_EQ -> Ctx.L0 TYPE_F64 TYPE_F64 T2 TYPE_BOOL T1 T-> }
        { PRIM_F64_LT -> Ctx.L0 TYPE_F64 TYPE_F64 T2 TYPE_BOOL T1 T-> }
        { PRIM_F64_ADD -> Ctx.L0 TYPE_F64 TYPE_F64 T2 TYPE_F64 T1 T-> }
        { PRIM_F64_SUB -> Ctx.L0 TYPE_F64 TYPE_F64 T2 TYPE_F64 T1 T-> }
        { PRIM_F64_MUL -> Ctx.L0 TYPE_F64 TYPE_F64 T2 TYPE_F64 T1 T-> }
        { PRIM_F64_DIV -> Ctx.L0 TYPE_F64 TYPE_F64 T2 TYPE_F64 T1 T-> }
        { PRIM_F64_TO_INT -> Ctx.L0 TYPE_F64 T1 TYPE_INT T1 T-> }
        { PRIM_F64_TO_STR -> Ctx.L0 TYPE_F64 T1 TYPE_STR T1 T-> }
        { PRIM_F64_TO_F32 -> Ctx.L0 TYPE_F64 T1 TYPE_F32 T1 T-> }

        { PRIM_BOOL_AND -> Ctx.L0 TYPE_BOOL TYPE_BOOL T2 TYPE_BOOL T1 T-> }
        { PRIM_BOOL_OR  -> Ctx.L0 TYPE_BOOL TYPE_BOOL T2 TYPE_BOOL T1 T-> }
        { PRIM_BOOL_NOT -> Ctx.L0 TYPE_BOOL T1 TYPE_BOOL T1 T-> }

        { PRIM_TUP_PACK0 ->
            Ctx.L0
            T0
            dup >Type T1 T->
        }
        { PRIM_TUP_PACK1 ->
            Ctx.L0
            "a" Type.NewInCtx >a
            a> T1
            dup >Type T1 T->
        }
        { PRIM_TUP_PACK2 ->
            Ctx.L0
            "a" Type.NewInCtx >a
            "b" Type.NewInCtx >b
            a> b> T2
            dup >Type T1 T->
        }
        { PRIM_TUP_PACK3 ->
            Ctx.L0
            "a" Type.NewInCtx >a
            "b" Type.NewInCtx >b
            "c" Type.NewInCtx >c
            a> b> c> T3
            dup >Type T1 T->
        }
        { PRIM_TUP_PACK4 ->
            Ctx.L0
            "a" Type.NewInCtx >a
            "b" Type.NewInCtx >b
            "c" Type.NewInCtx >c
            "d" Type.NewInCtx >d
            a> b> c> d> T4
            dup >Type T1 T->
        }
        { PRIM_TUP_PACK5 ->
            Ctx.L0
            "a" Type.NewInCtx >a
            "b" Type.NewInCtx >b
            "c" Type.NewInCtx >c
            "d" Type.NewInCtx >d
            "e" Type.NewInCtx >e
            a> b> c> d> e> T5
            dup >Type T1 T->
        }

        { PRIM_TUP_UNPACK0 ->
            Ctx.L0
            T0
            dup >Type T1 swap T->
        }
        { PRIM_TUP_UNPACK1 ->
            Ctx.L0
            "a" Type.NewInCtx >a
            a> T1
            dup >Type T1 swap T->
        }
        { PRIM_TUP_UNPACK2 ->
            Ctx.L0
            "a" Type.NewInCtx >a
            "b" Type.NewInCtx >b
            a> b> T2
            dup >Type T1 swap T->
        }
        { PRIM_TUP_UNPACK3 ->
            Ctx.L0
            "a" Type.NewInCtx >a
            "b" Type.NewInCtx >b
            "c" Type.NewInCtx >c
            a> b> c> T3
            dup >Type T1 swap T->
        }
        { PRIM_TUP_UNPACK4 ->
            Ctx.L0
            "a" Type.NewInCtx >a
            "b" Type.NewInCtx >b
            "c" Type.NewInCtx >c
            "d" Type.NewInCtx >d
            a> b> c> d> T4
            dup >Type T1 swap T->
        }
        { PRIM_TUP_UNPACK5 ->
            Ctx.L0
            "a" Type.NewInCtx >a
            "b" Type.NewInCtx >b
            "c" Type.NewInCtx >c
            "d" Type.NewInCtx >d
            "e" Type.NewInCtx >e
            a> b> c> d> e> T5
            dup >Type T1 swap T->
        }

        { PRIM_MUT_GET ->
            Ctx.L0
            "a" Type.NewInCtx >a
            @a TMut T1 @a T1 T->
            a> drop
        }
        { PRIM_MUT_SET ->
            Ctx.L0
            "a" Type.NewInCtx >a
            @a @a TMut T2 T0 T->
            a> drop
        }
        { PRIM_MUT_IS_SET ->
            Ctx.L0
            "a" Type.NewInCtx >a
            @a TMut T1 TYPE_BOOL T1 T->
            a> drop
        }

        { PRIM_PTR_NIL -> Ctx.L0 T0 TYPE_PTR T1 T-> }
        { PRIM_PTR_EQ  -> Ctx.L0 TYPE_PTR TYPE_PTR T2 TYPE_BOOL T1 T-> }
        { PRIM_PTR_ADD -> Ctx.L0 TYPE_INT TYPE_PTR T2 TYPE_PTR T1 T-> }
        { PRIM_PTR_SIZE -> Ctx.L0 T0 TYPE_INT T1 T-> }
        { PRIM_PTR_ALLOC -> Ctx.L0 TYPE_INT T1 TYPE_PTR T1 T-> }
        { PRIM_PTR_REALLOC -> Ctx.L0 TYPE_PTR TYPE_INT T2 TYPE_PTR T1 T-> }
        { PRIM_PTR_FREE -> Ctx.L0 TYPE_PTR T1 T0 T-> }
        { PRIM_PTR_COPY -> Ctx.L0 TYPE_PTR TYPE_INT TYPE_PTR T3 T0 T-> }
        { PRIM_PTR_FILL -> Ctx.L0 TYPE_INT TYPE_INT TYPE_PTR T3 T0 T-> }
        { PRIM_PTR_GET -> Ctx.L0 TYPE_PTR T1 TYPE_PTR T1 T-> }
        { PRIM_PTR_SET -> Ctx.L0 TYPE_PTR TYPE_PTR T2 T0 T-> }

        { PRIM_STR_COPY -> Ctx.L0 TYPE_PTR TYPE_INT T2 TYPE_STR T1 T-> }
        { PRIM_STR_NUM_BYTES -> Ctx.L0 TYPE_STR T1 TYPE_INT T1 T-> }
        { PRIM_STR_BASE -> Ctx.L0 TYPE_STR T1 TYPE_PTR T1 T-> }
        { PRIM_STR_CAT -> Ctx.L0 TYPE_STR TYPE_STR T2 TYPE_STR T1 T-> }
        { PRIM_STR_CMP -> Ctx.L0 TYPE_STR TYPE_STR T2 TYPE_INT T1 T-> }
        { PRIM_STR_EQ -> Ctx.L0 TYPE_STR TYPE_STR T2 TYPE_BOOL T1 T-> }
        { PRIM_STR_LT -> Ctx.L0 TYPE_STR TYPE_STR T2 TYPE_BOOL T1 T-> }
        { PRIM_STR_LE -> Ctx.L0 TYPE_STR TYPE_STR T2 TYPE_BOOL T1 T-> }
        { PRIM_STR_GT -> Ctx.L0 TYPE_STR TYPE_STR T2 TYPE_BOOL T1 T-> }
        { PRIM_STR_GE -> Ctx.L0 TYPE_STR TYPE_STR T2 TYPE_BOOL T1 T-> }
        { PRIM_STR_NE -> Ctx.L0 TYPE_STR TYPE_STR T2 TYPE_BOOL T1 T-> }

        { PRIM_SYS_OS   -> Ctx.L0 T0 TYPE_INT T1 T-> }
        { PRIM_SYS_ARCH -> Ctx.L0 T0 TYPE_INT T1 T-> }
        { PRIM_SYS_ARGC -> Ctx.L0 T0 TYPE_INT T1 T-> }
        { PRIM_SYS_ARGV -> Ctx.L0 T0 TYPE_PTR T1 T-> }
    }
}


||| Initialize name table with list of primitives.
def +Mirth.init-prims! [ +Mirth -- +Mirth ] {
    Prim.ForAll(register!)
}
