module mirth.prim

import std.prelude
import std.maybe
import mirth.mirth
import mirth.name
import mirth.type
import mirth.data
import mirth.var
import mirth.token
import mirth.def

# mirth/data/prim
data Prim {
    Id
    Dup
    Drop
    Swap
    RSwap
    Dip
    RDip
    If
    While
    Debug
    Panic
    Run

    IntEq
    IntLt
    IntLe
    IntGt
    IntGe
    IntNe
    IntAdd
    IntSub
    IntMul
    IntDiv
    IntMod
    IntAnd
    IntOr
    IntXor
    IntShl
    IntShr
    IntToStr
    IntToI64
    IntToF32
    IntToF64

    U8Get
    U8Set

    U16Get
    U16Set

    U32Get
    U32Set

    U64Get
    U64Set

    I8Get
    I8Set

    I16Get
    I16Set

    I32Get
    I32Set

    I64Get
    I64Set
    I64ToInt

    F32Eq
    F32Lt
    F32Add
    F32Sub
    F32Mul
    F32Div
    F32ToInt
    F32ToStr
    F32ToF64

    F64Eq
    F64Lt
    F64Add
    F64Sub
    F64Mul
    F64Div
    F64ToInt
    F64ToStr
    F64ToF32

    BoolAnd
    BoolOr
    BoolNot

    TupPack0
    TupPack1
    TupPack2
    TupPack3
    TupPack4
    TupPack5

    TupUnpack0
    TupUnpack1
    TupUnpack2
    TupUnpack3
    TupUnpack4
    TupUnpack5

    MutGet
    MutSet
    MutIsSet

    PtrNil
    PtrEq
    PtrAdd
    PtrSize
    PtrAlloc
    PtrRealloc
    PtrFree
    PtrCopy
    PtrFill
    PtrGet
    PtrSet

    StrCopy
    StrNumBytes
    StrBase
    StrCat
    StrCmp
    StrEq
    StrLt
    StrLe
    StrGt
    StrGe
    StrNe
    StrToF64
    StrToF32

    SysOs
    SysArch
    SysArgc
    SysArgv

    --
    def MIN [ Prim ] { Prim.Id }
    def MAX [ Prim ] { Prim.SysArgv }
    def ForAll(f) [ (*a Prim -- *a) *a -- *a ] {
        Prim.MIN >Int while (
            dup Prim.MAX >Int <=,
            sip(Prim.from-enum-value-unsafe f)
            1+
        ) drop
    }

    def >Int [ Prim -- Int ] { enum-value }
    def == [ Prim Prim -- Bool ] { on2:>Int == }
    def <> [ Prim Prim -- Bool ] { == not }

    def name  { str-arity drop >Name }
    def arity { str-arity nip }
    def qname { str-arity QName.Prim }

    def register! [ +Mirth Prim -- +Mirth ] {
        Def.Prim register
    }

    def str-arity [ Prim -- Str Int ] {
        { Id -> "prim-id" 0 }
        { Dup -> "prim-dup" 0 }
        { Drop -> "prim-drop" 0 }
        { Swap -> "prim-swap" 0 }
        { RSwap -> "prim-rswap" 0 }
        { Dip -> "prim-dip" 1 }
        { RDip -> "prim-rdip" 1 }
        { If -> "prim-if" 2 }
        { While -> "prim-while" 2 }
        { Debug -> "prim-debug" 0 }
        { Panic -> "prim-panic" 0 }
        { Run -> "prim-run" 0 }

        { IntEq -> "prim-int-eq" 0 }
        { IntLt -> "prim-int-lt" 0 }
        { IntLe -> "prim-int-le" 0 }
        { IntGt -> "prim-int-gt" 0 }
        { IntGe -> "prim-int-ge" 0 }
        { IntNe -> "prim-int-ne" 0 }
        { IntAdd -> "prim-int-add" 0 }
        { IntSub -> "prim-int-sub" 0 }
        { IntMul -> "prim-int-mul" 0 }
        { IntDiv -> "prim-int-div" 0 }
        { IntMod -> "prim-int-mod" 0 }
        { IntAnd -> "prim-int-and" 0 }
        { IntOr -> "prim-int-or" 0 }
        { IntXor -> "prim-int-xor" 0 }
        { IntShl -> "prim-int-shl" 0 }
        { IntShr -> "prim-int-shr" 0 }
        { IntToStr -> "prim-int-to-str" 0 }
        { IntToI64 -> "prim-int-to-i64" 0 }
        { IntToF32 -> "prim-int-to-f32" 0 }
        { IntToF64 -> "prim-int-to-f64" 0 }

        { U8Get -> "prim-u8-get" 0 }
        { U8Set -> "prim-u8-set" 0 }
        { U16Get -> "prim-u16-get" 0 }
        { U16Set -> "prim-u16-set" 0 }
        { U32Get -> "prim-u32-get" 0 }
        { U32Set -> "prim-u32-set" 0 }
        { U64Get -> "prim-u64-get" 0 }
        { U64Set -> "prim-u64-set" 0 }

        { I8Get -> "prim-i8-get" 0 }
        { I8Set -> "prim-i8-set" 0 }

        { I16Get -> "prim-i16-get" 0 }
        { I16Set -> "prim-i16-set" 0 }

        { I32Get -> "prim-i32-get" 0 }
        { I32Set -> "prim-i32-set" 0 }

        { I64Get -> "prim-i64-get" 0 }
        { I64Set -> "prim-i64-set" 0 }
        { I64ToInt -> "prim-i64-to-int" 0 }

        { F32Eq -> "prim-f32-eq" 0 }
        { F32Lt -> "prim-f32-lt" 0 }
        { F32Add -> "prim-f32-add" 0 }
        { F32Sub -> "prim-f32-sub" 0 }
        { F32Mul -> "prim-f32-mul" 0 }
        { F32Div -> "prim-f32-div" 0 }
        { F32ToInt -> "prim-f32-to-int" 0 }
        { F32ToStr -> "prim-f32-to-str" 0 }
        { F32ToF64 -> "prim-f32-to-f64" 0 }

        { F64Eq -> "prim-f64-eq" 0 }
        { F64Lt -> "prim-f64-lt" 0 }
        { F64Add -> "prim-f64-add" 0 }
        { F64Sub -> "prim-f64-sub" 0 }
        { F64Mul -> "prim-f64-mul" 0 }
        { F64Div -> "prim-f64-div" 0 }
        { F64ToInt -> "prim-f64-to-int" 0 }
        { F64ToStr -> "prim-f64-to-str" 0 }
        { F64ToF32 -> "prim-f64-to-f32" 0 }

        { BoolAnd -> "prim-bool-and" 0 }
        { BoolOr  -> "prim-bool-or"  0 }
        { BoolNot -> "prim-bool-not" 0 }

        { TupPack0 -> "prim-tup-pack0" 0 }
        { TupPack1 -> "prim-tup-pack1" 0 }
        { TupPack2 -> "prim-tup-pack2" 0 }
        { TupPack3 -> "prim-tup-pack3" 0 }
        { TupPack4 -> "prim-tup-pack4" 0 }
        { TupPack5 -> "prim-tup-pack5" 0 }
        { TupUnpack0 -> "prim-tup-unpack0" 0 }
        { TupUnpack1 -> "prim-tup-unpack1" 0 }
        { TupUnpack2 -> "prim-tup-unpack2" 0 }
        { TupUnpack3 -> "prim-tup-unpack3" 0 }
        { TupUnpack4 -> "prim-tup-unpack4" 0 }
        { TupUnpack5 -> "prim-tup-unpack5" 0 }

        { MutGet -> "prim-mut-get" 0 }
        { MutSet -> "prim-mut-set" 0 }
        { MutIsSet -> "prim-mut-is-set" 0 }

        { PtrNil -> "prim-ptr-nil" 0 }
        { PtrEq -> "prim-ptr-eq" 0 }
        { PtrAdd -> "prim-ptr-add" 0 }
        { PtrSize -> "prim-ptr-size" 0 }
        { PtrAlloc -> "prim-ptr-alloc" 0 }
        { PtrRealloc -> "prim-ptr-realloc" 0 }
        { PtrFree -> "prim-ptr-free" 0 }
        { PtrCopy -> "prim-ptr-copy" 0 }
        { PtrFill -> "prim-ptr-fill" 0 }
        { PtrGet -> "prim-ptr-get" 0 }
        { PtrSet -> "prim-ptr-set" 0 }

        { StrCopy -> "prim-str-copy" 0 }
        { StrNumBytes -> "prim-str-num-bytes" 0 }
        { StrBase -> "prim-str-base" 0 }
        { StrCat -> "prim-str-cat" 0 }
        { StrCmp -> "prim-str-cmp" 0 }
        { StrEq -> "prim-str-eq" 0 }
        { StrLt -> "prim-str-lt" 0 }
        { StrLe -> "prim-str-le" 0 }
        { StrGt -> "prim-str-gt" 0 }
        { StrGe -> "prim-str-ge" 0 }
        { StrNe -> "prim-str-ne" 0 }
        { StrToF32 -> "prim-str-to-f32" 0 }
        { StrToF64 -> "prim-str-to-f64" 0 }

        { SysOs   -> "prim-sys-os"   0 }
        { SysArch -> "prim-sys-arch" 0 }
        { SysArgc -> "prim-sys-argc" 0 }
        { SysArgv -> "prim-sys-argv" 0 }
    }

    field (~ctx-type, Prim, [Ctx ArrowType])
    def ctx-type [ +Mirth Prim -- +Mirth Ctx ArrowType ] {
        dup ~ctx-type memoize(dup compute-ctx-type pack2) nip unpack2
    }
    def ctx  [ +Mirth Prim -- +Mirth Ctx       ] { ctx-type drop }
    def type [ +Mirth Prim -- +Mirth ArrowType ] { ctx-type nip }

    def compute-ctx-type [ +Mirth Prim -- +Mirth Ctx ArrowType ] {
        { Id -> Ctx.L0 T0 T0 T-> }
        { Dup ->
            Ctx.L0
            "a" Type.NewInCtx >a
            @a T1 @a @a T2 T->
            a> drop
        }
        { Drop ->
            Ctx.L0
            "a" Type.NewInCtx >a
            @a T1 T0 T->
            a> drop
        }
        { Swap ->
            Ctx.L0
            "a" Type.NewInCtx >a
            "b" Type.NewInCtx >b
            @a @b T2 @b @a T2 T->
            a> b> drop2
        }

        { RSwap ->
            Ctx.L0
            "+a" Resource.NewInCtx >a
            "+b" Resource.NewInCtx >b
            T0 @a T+ @b T+
            T0 @b T+ @a T+ T->
            a> b> drop2
        }

        { Dip ->
            Ctx.L0
            "*a" StackType.NewInCtx >a
            "*b" StackType.NewInCtx >b
            "x" Type.NewInCtx >x
            @a @x T* @a @b T-> >Type T*
            @b @x T* T->
            a> b> x> drop3
        }

        { RDip ->
            Ctx.L0
            "*a" StackType.NewInCtx >a
            "*b" StackType.NewInCtx >b
            "x" Resource.NewInCtx >x
            @a @x T+
                @a @b T-> >Type T*
            @b @x T+ T->
            a> b> x> drop3
        }

        { If ->
            Ctx.L0
            "*a" StackType.NewInCtx >a
            "*b" StackType.NewInCtx >b
            @a Type.Bool T*
                @a @b T-> >Type T*
                @a @b T-> >Type T*
            @b T->
            a> b> drop2
        }

        { While ->
            Ctx.L0
            "*a" StackType.NewInCtx >a
            @a
                @a @a Type.Bool T* T-> >Type T*
                @a @a T-> >Type T*
            @a T->
            a> drop
        }

        { Debug ->
            Ctx.L0
            T0 T0 T->
        }

        { Panic ->
            Ctx.L0
            "*a" StackType.NewInCtx >a
            "*b" StackType.NewInCtx >b
            @a Type.Str T*
            @b T->
            a> b> drop2
        }

        { Run ->
            Ctx.L0
            "*a" StackType.NewInCtx >a
            "*b" StackType.NewInCtx >b
            @a @a @b T-> >Type T*
            @b T->
            a> b> drop2
        }

        { IntEq -> Ctx.L0 Type.Int Type.Int T2 Type.Bool T1 T-> }
        { IntLt -> Ctx.L0 Type.Int Type.Int T2 Type.Bool T1 T-> }
        { IntLe -> Ctx.L0 Type.Int Type.Int T2 Type.Bool T1 T-> }
        { IntGt -> Ctx.L0 Type.Int Type.Int T2 Type.Bool T1 T-> }
        { IntGe -> Ctx.L0 Type.Int Type.Int T2 Type.Bool T1 T-> }
        { IntNe -> Ctx.L0 Type.Int Type.Int T2 Type.Bool T1 T-> }

        { IntAdd -> Ctx.L0 Type.Int Type.Int T2 Type.Int T1 T-> }
        { IntSub -> Ctx.L0 Type.Int Type.Int T2 Type.Int T1 T-> }
        { IntMul -> Ctx.L0 Type.Int Type.Int T2 Type.Int T1 T-> }
        { IntDiv -> Ctx.L0 Type.Int Type.Int T2 Type.Int T1 T-> }
        { IntMod -> Ctx.L0 Type.Int Type.Int T2 Type.Int T1 T-> }
        { IntAnd -> Ctx.L0 Type.Int Type.Int T2 Type.Int T1 T-> }
        { IntOr  -> Ctx.L0 Type.Int Type.Int T2 Type.Int T1 T-> }
        { IntXor -> Ctx.L0 Type.Int Type.Int T2 Type.Int T1 T-> }
        { IntShl -> Ctx.L0 Type.Int Type.Int T2 Type.Int T1 T-> }
        { IntShr -> Ctx.L0 Type.Int Type.Int T2 Type.Int T1 T-> }
        { IntToStr -> Ctx.L0 Type.Int T1 Type.Str T1 T-> }
        { IntToI64 -> Ctx.L0 Type.Int T1 Type.I64 T1 T-> }
        { IntToF32 -> Ctx.L0 Type.Int T1 Type.F32 T1 T-> }
        { IntToF64 -> Ctx.L0 Type.Int T1 Type.F64 T1 T-> }

        { U8Get -> Ctx.L0 Type.Ptr T1 Type.U8 T1 T-> }
        { U8Set -> Ctx.L0 Type.U8 Type.Ptr T2 T0 T-> }

        { U16Get -> Ctx.L0 Type.Ptr T1 Type.U16 T1 T-> }
        { U16Set -> Ctx.L0 Type.U16 Type.Ptr T2 T0 T-> }

        { U32Get -> Ctx.L0 Type.Ptr T1 Type.U32 T1 T-> }
        { U32Set -> Ctx.L0 Type.U32 Type.Ptr T2 T0 T-> }

        { U64Get -> Ctx.L0 Type.Ptr T1 Type.U64 T1 T-> }
        { U64Set -> Ctx.L0 Type.U64 Type.Ptr T2 T0 T-> }

        { I8Get -> Ctx.L0 Type.Ptr T1 Type.I8 T1 T-> }
        { I8Set -> Ctx.L0 Type.I8 Type.Ptr T2 T0 T-> }

        { I16Get -> Ctx.L0 Type.Ptr T1 Type.I16 T1 T-> }
        { I16Set -> Ctx.L0 Type.I16 Type.Ptr T2 T0 T-> }

        { I32Get -> Ctx.L0 Type.Ptr T1 Type.I32 T1 T-> }
        { I32Set -> Ctx.L0 Type.I32 Type.Ptr T2 T0 T-> }

        { I64Get -> Ctx.L0 Type.Ptr T1 Type.I64 T1 T-> }
        { I64Set -> Ctx.L0 Type.I64 Type.Ptr T2 T0 T-> }
        { I64ToInt -> Ctx.L0 Type.I64 T1 Type.Int T1 T-> }

        { F32Eq -> Ctx.L0 Type.F32 Type.F32 T2 Type.Bool T1 T-> }
        { F32Lt -> Ctx.L0 Type.F32 Type.F32 T2 Type.Bool T1 T-> }
        { F32Add -> Ctx.L0 Type.F32 Type.F32 T2 Type.F32 T1 T-> }
        { F32Sub -> Ctx.L0 Type.F32 Type.F32 T2 Type.F32 T1 T-> }
        { F32Mul -> Ctx.L0 Type.F32 Type.F32 T2 Type.F32 T1 T-> }
        { F32Div -> Ctx.L0 Type.F32 Type.F32 T2 Type.F32 T1 T-> }
        { F32ToInt -> Ctx.L0 Type.F32 T1 Type.Int T1 T-> }
        { F32ToStr -> Ctx.L0 Type.F32 T1 Type.Str T1 T-> }
        { F32ToF64 -> Ctx.L0 Type.F32 T1 Type.F64 T1 T-> }

        { F64Eq -> Ctx.L0 Type.F64 Type.F64 T2 Type.Bool T1 T-> }
        { F64Lt -> Ctx.L0 Type.F64 Type.F64 T2 Type.Bool T1 T-> }
        { F64Add -> Ctx.L0 Type.F64 Type.F64 T2 Type.F64 T1 T-> }
        { F64Sub -> Ctx.L0 Type.F64 Type.F64 T2 Type.F64 T1 T-> }
        { F64Mul -> Ctx.L0 Type.F64 Type.F64 T2 Type.F64 T1 T-> }
        { F64Div -> Ctx.L0 Type.F64 Type.F64 T2 Type.F64 T1 T-> }
        { F64ToInt -> Ctx.L0 Type.F64 T1 Type.Int T1 T-> }
        { F64ToStr -> Ctx.L0 Type.F64 T1 Type.Str T1 T-> }
        { F64ToF32 -> Ctx.L0 Type.F64 T1 Type.F32 T1 T-> }

        { BoolAnd -> Ctx.L0 Type.Bool Type.Bool T2 Type.Bool T1 T-> }
        { BoolOr  -> Ctx.L0 Type.Bool Type.Bool T2 Type.Bool T1 T-> }
        { BoolNot -> Ctx.L0 Type.Bool T1 Type.Bool T1 T-> }

        { TupPack0 ->
            Ctx.L0
            T0
            dup >Type T1 T->
        }
        { TupPack1 ->
            Ctx.L0
            "a" Type.NewInCtx >a
            a> T1
            dup >Type T1 T->
        }
        { TupPack2 ->
            Ctx.L0
            "a" Type.NewInCtx >a
            "b" Type.NewInCtx >b
            a> b> T2
            dup >Type T1 T->
        }
        { TupPack3 ->
            Ctx.L0
            "a" Type.NewInCtx >a
            "b" Type.NewInCtx >b
            "c" Type.NewInCtx >c
            a> b> c> T3
            dup >Type T1 T->
        }
        { TupPack4 ->
            Ctx.L0
            "a" Type.NewInCtx >a
            "b" Type.NewInCtx >b
            "c" Type.NewInCtx >c
            "d" Type.NewInCtx >d
            a> b> c> d> T4
            dup >Type T1 T->
        }
        { TupPack5 ->
            Ctx.L0
            "a" Type.NewInCtx >a
            "b" Type.NewInCtx >b
            "c" Type.NewInCtx >c
            "d" Type.NewInCtx >d
            "e" Type.NewInCtx >e
            a> b> c> d> e> T5
            dup >Type T1 T->
        }

        { TupUnpack0 ->
            Ctx.L0
            T0
            dup >Type T1 swap T->
        }
        { TupUnpack1 ->
            Ctx.L0
            "a" Type.NewInCtx >a
            a> T1
            dup >Type T1 swap T->
        }
        { TupUnpack2 ->
            Ctx.L0
            "a" Type.NewInCtx >a
            "b" Type.NewInCtx >b
            a> b> T2
            dup >Type T1 swap T->
        }
        { TupUnpack3 ->
            Ctx.L0
            "a" Type.NewInCtx >a
            "b" Type.NewInCtx >b
            "c" Type.NewInCtx >c
            a> b> c> T3
            dup >Type T1 swap T->
        }
        { TupUnpack4 ->
            Ctx.L0
            "a" Type.NewInCtx >a
            "b" Type.NewInCtx >b
            "c" Type.NewInCtx >c
            "d" Type.NewInCtx >d
            a> b> c> d> T4
            dup >Type T1 swap T->
        }
        { TupUnpack5 ->
            Ctx.L0
            "a" Type.NewInCtx >a
            "b" Type.NewInCtx >b
            "c" Type.NewInCtx >c
            "d" Type.NewInCtx >d
            "e" Type.NewInCtx >e
            a> b> c> d> e> T5
            dup >Type T1 swap T->
        }

        { MutGet ->
            Ctx.L0
            "a" Type.NewInCtx >a
            @a Type.Mut T1 @a T1 T->
            a> drop
        }
        { MutSet ->
            Ctx.L0
            "a" Type.NewInCtx >a
            @a @a Type.Mut T2 T0 T->
            a> drop
        }
        { MutIsSet ->
            Ctx.L0
            "a" Type.NewInCtx >a
            @a Type.Mut T1 Type.Bool T1 T->
            a> drop
        }

        { PtrNil -> Ctx.L0 T0 Type.Ptr T1 T-> }
        { PtrEq  -> Ctx.L0 Type.Ptr Type.Ptr T2 Type.Bool T1 T-> }
        { PtrAdd -> Ctx.L0 Type.Int Type.Ptr T2 Type.Ptr T1 T-> }
        { PtrSize -> Ctx.L0 T0 Type.Int T1 T-> }
        { PtrAlloc -> Ctx.L0 Type.Int T1 Type.Ptr T1 T-> }
        { PtrRealloc -> Ctx.L0 Type.Ptr Type.Int T2 Type.Ptr T1 T-> }
        { PtrFree -> Ctx.L0 Type.Ptr T1 T0 T-> }
        { PtrCopy -> Ctx.L0 Type.Ptr Type.Int Type.Ptr T3 T0 T-> }
        { PtrFill -> Ctx.L0 Type.Int Type.Int Type.Ptr T3 T0 T-> }
        { PtrGet -> Ctx.L0 Type.Ptr T1 Type.Ptr T1 T-> }
        { PtrSet -> Ctx.L0 Type.Ptr Type.Ptr T2 T0 T-> }

        { StrCopy -> Ctx.L0 Type.Ptr Type.Int T2 Type.Str T1 T-> }
        { StrNumBytes -> Ctx.L0 Type.Str T1 Type.Int T1 T-> }
        { StrBase -> Ctx.L0 Type.Str T1 Type.Ptr T1 T-> }
        { StrCat -> Ctx.L0 Type.Str Type.Str T2 Type.Str T1 T-> }
        { StrCmp -> Ctx.L0 Type.Str Type.Str T2 Type.Int T1 T-> }
        { StrEq -> Ctx.L0 Type.Str Type.Str T2 Type.Bool T1 T-> }
        { StrLt -> Ctx.L0 Type.Str Type.Str T2 Type.Bool T1 T-> }
        { StrLe -> Ctx.L0 Type.Str Type.Str T2 Type.Bool T1 T-> }
        { StrGt -> Ctx.L0 Type.Str Type.Str T2 Type.Bool T1 T-> }
        { StrGe -> Ctx.L0 Type.Str Type.Str T2 Type.Bool T1 T-> }
        { StrNe -> Ctx.L0 Type.Str Type.Str T2 Type.Bool T1 T-> }
        { StrToF32 -> Ctx.L0 Type.Str T1 Type.F32 Type.Str T2 T-> }
        { StrToF64 -> Ctx.L0 Type.Str T1 Type.F64 Type.Str T2 T-> }

        { SysOs   -> Ctx.L0 T0 Type.Int T1 T-> }
        { SysArch -> Ctx.L0 T0 Type.Int T1 T-> }
        { SysArgc -> Ctx.L0 T0 Type.Int T1 T-> }
        { SysArgv -> Ctx.L0 T0 Type.Ptr T1 T-> }
    }
}


||| Initialize name table with list of primitives.
def +Mirth.init-prims! [ +Mirth -- +Mirth ] {
    Prim.ForAll(register!)
}
