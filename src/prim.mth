module mirth.prim

import std.prelude
import std.maybe
import mirth.mirth
import mirth.name
import mirth.type
import mirth.tycon
import mirth.data
import mirth.var
import mirth.token
import mirth.def

# mirth/data/prim
data Prim {
    Id
    Dup
    Drop
    Swap
    RSwap
    Dip
    RDip
    If
    While
    Debug
    Panic
    Run

    IntEq
    IntLt
    IntLe
    IntGt
    IntGe
    IntNe
    IntAdd
    IntSub
    IntMul
    IntDivMod
    IntToStr
    IntToI64
    IntToU64
    IntToF32
    IntToF64

    U8Get
    U8Set
    U8ToU64

    U16Get
    U16Set
    U16ToU64

    U32Get
    U32Set
    U32ToU64

    U64Get
    U64Set
    U64Eq
    U64Lt
    U64Le
    U64Gt
    U64Ge
    U64Ne
    U64Add
    U64Sub
    U64Mul
    U64Div
    U64Mod
    U64And
    U64Or
    U64Xor
    U64Shl
    U64Shr
    U64ToInt
    U64ToStr
    U64ToU8
    U64ToU16
    U64ToU32
    U64ToI8
    U64ToI16
    U64ToI32
    U64ToI64
    U64ToF32
    U64ToF64

    I8Get
    I8Set
    I8ToI64

    I16Get
    I16Set
    I16ToI64

    I32Get
    I32Set
    I32ToI64

    I64Get
    I64Set
    I64Eq
    I64Lt
    I64Le
    I64Gt
    I64Ge
    I64Ne
    I64Add
    I64Sub
    I64Mul
    I64Div
    I64Mod
    I64ToInt
    I64ToStr
    I64ToU8
    I64ToU16
    I64ToU32
    I64ToU64
    I64ToI8
    I64ToI16
    I64ToI32
    I64ToF32
    I64ToF64

    F32Eq
    F32Lt
    F32Le
    F32Gt
    F32Ge
    F32Ne
    F32Add
    F32Sub
    F32Mul
    F32Div
    F32ToInt
    F32ToStr
    F32ToF64

    F32Get
    F32Set

    F64Eq
    F64Lt
    F64Le
    F64Gt
    F64Ge
    F64Ne
    F64Add
    F64Sub
    F64Mul
    F64Div
    F64ToInt
    F64ToStr
    F64ToF32

    F64Get
    F64Set

    BoolTrue
    BoolFalse
    BoolAnd
    BoolOr
    BoolNot

    TupPack0
    TupPack1
    TupPack2
    TupPack3
    TupPack4
    TupPack5

    TupUnpack0
    TupUnpack1
    TupUnpack2
    TupUnpack3
    TupUnpack4
    TupUnpack5

    MutGet
    MutSet
    MutIsSet

    PtrNil
    PtrEq
    PtrAdd
    PtrSize
    PtrAlloc
    PtrRealloc
    PtrFree
    PtrCopy
    PtrFill
    PtrGet
    PtrSet

    StrCopy
    StrNumBytes
    StrBase
    StrCat
    StrCmp
    StrEq
    StrLt
    StrLe
    StrGt
    StrGe
    StrNe
    StrToF64
    StrToF32

    SysOs
    SysArch
    SysArgc
    SysArgv

    --
    def Min [ Prim ] { Prim.Id }
    def Max [ Prim ] { Prim.SysArgv }
    def for(f) [ (*a Prim -- *a) *a -- *a ] {
        Prim.Min >Int while (
            dup Prim.Max >Int <=,
            sip(>EnumValue-unsafe Prim.from-enum-value-unsafe f)
            1+
        ) drop
    }

    def >Int [ Prim -- Int ] { enum-value >Int }
    def =  [ Prim Prim -- Bool ] { on2:>Int = }

    def name  [ +Mirth |- Prim -- Name  ] { str >Name }
    def qname [ +Mirth |- Prim -- QName ] { sip:namespace str-arity dip:>Name QName.Mk }
    def namespace [ +Mirth |- Prim -- Namespace ] { _ -> drop Namespace.Prim }
    def register! [ +Mirth |- Prim -- ] { Def.Prim register }

    def arity [ Prim -- Int ] { str-arity nip }
    def str   [ Prim -- Str ] { str-arity drop }
    def str-arity [ Prim -- Str Int ] {
        { Id -> "prim-id" 0 }
        { Dup -> "prim-dup" 0 }
        { Drop -> "prim-drop" 0 }
        { Swap -> "prim-swap" 0 }
        { RSwap -> "prim-rswap" 0 }
        { Dip -> "prim-dip" 1 }
        { RDip -> "prim-rdip" 1 }
        { If -> "prim-if" 2 }
        { While -> "prim-while" 2 }
        { Debug -> "prim-debug" 0 }
        { Panic -> "prim-panic" 0 }
        { Run -> "prim-run" 0 }

        { IntEq -> "prim-int-eq" 0 }
        { IntLt -> "prim-int-lt" 0 }
        { IntLe -> "prim-int-le" 0 }
        { IntGt -> "prim-int-gt" 0 }
        { IntGe -> "prim-int-ge" 0 }
        { IntNe -> "prim-int-ne" 0 }
        { IntAdd -> "prim-int-add" 0 }
        { IntSub -> "prim-int-sub" 0 }
        { IntMul -> "prim-int-mul" 0 }
        { IntDivMod -> "prim-int-divmod" 0 }
        { IntToStr -> "prim-int-to-str" 0 }
        { IntToU64 -> "prim-int-to-u64" 0 }
        { IntToI64 -> "prim-int-to-i64" 0 }
        { IntToF32 -> "prim-int-to-f32" 0 }
        { IntToF64 -> "prim-int-to-f64" 0 }

        { U8Get -> "prim-u8-get" 0 }
        { U8Set -> "prim-u8-set" 0 }
        { U8ToU64 -> "prim-u8-to-u64" 0 }

        { U16Get -> "prim-u16-get" 0 }
        { U16Set -> "prim-u16-set" 0 }
        { U16ToU64 -> "prim-u16-to-u64" 0 }

        { U32Get -> "prim-u32-get" 0 }
        { U32Set -> "prim-u32-set" 0 }
        { U32ToU64 -> "prim-u32-to-u64" 0 }

        { U64Get   -> "prim-u64-get" 0 }
        { U64Set   -> "prim-u64-set" 0 }
        { U64Eq    -> "prim-u64-eq" 0 }
        { U64Lt    -> "prim-u64-lt" 0 }
        { U64Le    -> "prim-u64-le" 0 }
        { U64Gt    -> "prim-u64-gt" 0 }
        { U64Ge    -> "prim-u64-ge" 0 }
        { U64Ne    -> "prim-u64-ne" 0 }
        { U64Add   -> "prim-u64-add" 0 }
        { U64Sub   -> "prim-u64-sub" 0 }
        { U64Mul   -> "prim-u64-mul" 0 }
        { U64Div   -> "prim-u64-div" 0 }
        { U64Mod   -> "prim-u64-mod" 0 }
        { U64And   -> "prim-u64-and" 0 }
        { U64Or    -> "prim-u64-or"  0 }
        { U64Xor   -> "prim-u64-xor" 0 }
        { U64Shl   -> "prim-u64-shl" 0 }
        { U64Shr   -> "prim-u64-shr" 0 }
        { U64ToInt -> "prim-u64-to-int" 0 }
        { U64ToStr -> "prim-u64-to-str" 0 }
        { U64ToU8  -> "prim-u64-to-u8"  0 }
        { U64ToU16 -> "prim-u64-to-u16" 0 }
        { U64ToU32 -> "prim-u64-to-u32" 0 }
        { U64ToI8  -> "prim-u64-to-i8"  0 }
        { U64ToI16 -> "prim-u64-to-i16" 0 }
        { U64ToI32 -> "prim-u64-to-i32" 0 }
        { U64ToI64 -> "prim-u64-to-i64" 0 }
        { U64ToF32 -> "prim-u64-to-f32" 0 }
        { U64ToF64 -> "prim-u64-to-f64" 0 }

        { I8Get   -> "prim-i8-get" 0 }
        { I8Set   -> "prim-i8-set" 0 }
        { I8ToI64 -> "prim-i8-to-i64" 0 }

        { I16Get   -> "prim-i16-get" 0 }
        { I16Set   -> "prim-i16-set" 0 }
        { I16ToI64 -> "prim-i16-to-i64" 0 }

        { I32Get   -> "prim-i32-get" 0 }
        { I32Set   -> "prim-i32-set" 0 }
        { I32ToI64 -> "prim-i32-to-i64" 0 }

        { I64Get   -> "prim-i64-get" 0 }
        { I64Set   -> "prim-i64-set" 0 }
        { I64Eq    -> "prim-i64-eq"  0 }
        { I64Lt    -> "prim-i64-lt"  0 }
        { I64Le    -> "prim-i64-le"  0 }
        { I64Gt    -> "prim-i64-gt"  0 }
        { I64Ge    -> "prim-i64-ge"  0 }
        { I64Ne    -> "prim-i64-ne"  0 }
        { I64Add   -> "prim-i64-add" 0 }
        { I64Sub   -> "prim-i64-sub" 0 }
        { I64Mul   -> "prim-i64-mul" 0 }
        { I64Div   -> "prim-i64-div" 0 }
        { I64Mod   -> "prim-i64-mod" 0 }
        { I64ToInt -> "prim-i64-to-int" 0 }
        { I64ToStr -> "prim-i64-to-str" 0 }
        { I64ToU8  -> "prim-i64-to-u8"  0 }
        { I64ToU16 -> "prim-i64-to-u16" 0 }
        { I64ToU32 -> "prim-i64-to-u32" 0 }
        { I64ToU64 -> "prim-i64-to-u64" 0 }
        { I64ToI8  -> "prim-i64-to-i8"  0 }
        { I64ToI16 -> "prim-i64-to-i16" 0 }
        { I64ToI32 -> "prim-i64-to-i32" 0 }
        { I64ToF32 -> "prim-i64-to-f32" 0 }
        { I64ToF64 -> "prim-i64-to-f64" 0 }

        { F32Eq -> "prim-f32-eq" 0 }
        { F32Lt -> "prim-f32-lt" 0 }
        { F32Le -> "prim-f32-le" 0 }
        { F32Gt -> "prim-f32-gt" 0 }
        { F32Ge -> "prim-f32-ge" 0 }
        { F32Ne -> "prim-f32-ne" 0 }
        { F32Add -> "prim-f32-add" 0 }
        { F32Sub -> "prim-f32-sub" 0 }
        { F32Mul -> "prim-f32-mul" 0 }
        { F32Div -> "prim-f32-div" 0 }
        { F32ToInt -> "prim-f32-to-int" 0 }
        { F32ToStr -> "prim-f32-to-str" 0 }
        { F32ToF64 -> "prim-f32-to-f64" 0 }
        { F32Get -> "prim-f32-get" 0 }
        { F32Set -> "prim-f32-set" 0 }

        { F64Eq -> "prim-f64-eq" 0 }
        { F64Lt -> "prim-f64-lt" 0 }
        { F64Le -> "prim-f64-le" 0 }
        { F64Gt -> "prim-f64-gt" 0 }
        { F64Ge -> "prim-f64-ge" 0 }
        { F64Ne -> "prim-f64-ne" 0 }
        { F64Add -> "prim-f64-add" 0 }
        { F64Sub -> "prim-f64-sub" 0 }
        { F64Mul -> "prim-f64-mul" 0 }
        { F64Div -> "prim-f64-div" 0 }
        { F64ToInt -> "prim-f64-to-int" 0 }
        { F64ToStr -> "prim-f64-to-str" 0 }
        { F64ToF32 -> "prim-f64-to-f32" 0 }
        { F64Get -> "prim-f64-get" 0 }
        { F64Set -> "prim-f64-set" 0 }

        { BoolTrue -> "prim-bool-true" 0 }
        { BoolFalse -> "prim-bool-false" 0 }
        { BoolAnd -> "prim-bool-and" 0 }
        { BoolOr  -> "prim-bool-or"  0 }
        { BoolNot -> "prim-bool-not" 0 }

        { TupPack0 -> "prim-tup-pack0" 0 }
        { TupPack1 -> "prim-tup-pack1" 0 }
        { TupPack2 -> "prim-tup-pack2" 0 }
        { TupPack3 -> "prim-tup-pack3" 0 }
        { TupPack4 -> "prim-tup-pack4" 0 }
        { TupPack5 -> "prim-tup-pack5" 0 }
        { TupUnpack0 -> "prim-tup-unpack0" 0 }
        { TupUnpack1 -> "prim-tup-unpack1" 0 }
        { TupUnpack2 -> "prim-tup-unpack2" 0 }
        { TupUnpack3 -> "prim-tup-unpack3" 0 }
        { TupUnpack4 -> "prim-tup-unpack4" 0 }
        { TupUnpack5 -> "prim-tup-unpack5" 0 }

        { MutGet -> "prim-mut-get" 0 }
        { MutSet -> "prim-mut-set" 0 }
        { MutIsSet -> "prim-mut-is-set" 0 }

        { PtrNil -> "prim-ptr-nil" 0 }
        { PtrEq -> "prim-ptr-eq" 0 }
        { PtrAdd -> "prim-ptr-add" 0 }
        { PtrSize -> "prim-ptr-size" 0 }
        { PtrAlloc -> "prim-ptr-alloc" 0 }
        { PtrRealloc -> "prim-ptr-realloc" 0 }
        { PtrFree -> "prim-ptr-free" 0 }
        { PtrCopy -> "prim-ptr-copy" 0 }
        { PtrFill -> "prim-ptr-fill" 0 }
        { PtrGet -> "prim-ptr-get" 0 }
        { PtrSet -> "prim-ptr-set" 0 }

        { StrCopy -> "prim-str-copy" 0 }
        { StrNumBytes -> "prim-str-num-bytes" 0 }
        { StrBase -> "prim-str-base" 0 }
        { StrCat -> "prim-str-cat" 0 }
        { StrCmp -> "prim-str-cmp" 0 }
        { StrEq -> "prim-str-eq" 0 }
        { StrLt -> "prim-str-lt" 0 }
        { StrLe -> "prim-str-le" 0 }
        { StrGt -> "prim-str-gt" 0 }
        { StrGe -> "prim-str-ge" 0 }
        { StrNe -> "prim-str-ne" 0 }
        { StrToF32 -> "prim-str-to-f32" 0 }
        { StrToF64 -> "prim-str-to-f64" 0 }

        { SysOs   -> "prim-sys-os"   0 }
        { SysArch -> "prim-sys-arch" 0 }
        { SysArgc -> "prim-sys-argc" 0 }
        { SysArgv -> "prim-sys-argv" 0 }
    }

    field (~ctx-type, Prim, [Ctx ArrowType])
    def ctx-type [ +Mirth |- Prim -- Ctx ArrowType ] {
        dup ~ctx-type memoize(dup compute-ctx-type pack2) nip unpack2
    }
    def ctx  [ +Mirth |- Prim -- Ctx       ] { ctx-type drop }
    def type [ +Mirth |- Prim -- ArrowType ] { ctx-type nip }

    def compute-ctx-type [ +Mirth |- Prim -- Ctx ArrowType ] {
        { Id -> Ctx.L0 T0 T0 T-> }
        { Dup ->
            Ctx.L0
            "a" Type.NewInCtx >a
            @a T1 @a @a T2 T->
            a> drop
        }
        { Drop ->
            Ctx.L0
            "a" Type.NewInCtx >a
            @a T1 T0 T->
            a> drop
        }
        { Swap ->
            Ctx.L0
            "a" Type.NewInCtx >a
            "b" Type.NewInCtx >b
            @a @b T2 @b @a T2 T->
            a> b> drop2
        }

        { RSwap ->
            Ctx.L0
            "+a" Resource.NewInCtx >a
            "+b" Resource.NewInCtx >b
            T0 @a T+ @b T+
            T0 @b T+ @a T+ T->
            a> b> drop2
        }

        { Dip ->
            Ctx.L0
            "*a" StackType.NewInCtx >a
            "*b" StackType.NewInCtx >b
            "x" Type.NewInCtx >x
            @a @x T* @a @b T-> >Type T*
            @b @x T* T->
            a> b> x> drop3
        }

        { RDip ->
            Ctx.L0
            "*a" StackType.NewInCtx >a
            "*b" StackType.NewInCtx >b
            "x" Resource.NewInCtx >x
            @a @x T+
                @a @b T-> >Type T*
            @b @x T+ T->
            a> b> x> drop3
        }

        { If ->
            Ctx.L0
            "*a" StackType.NewInCtx >a
            "*b" StackType.NewInCtx >b
            @a Type.Bool T*
                @a @b T-> >Type T*
                @a @b T-> >Type T*
            @b T->
            a> b> drop2
        }

        { While ->
            Ctx.L0
            "*a" StackType.NewInCtx >a
            @a
                @a @a Type.Bool T* T-> >Type T*
                @a @a T-> >Type T*
            @a T->
            a> drop
        }

        { Debug ->
            Ctx.L0
            T0 T0 T->
        }

        { Panic ->
            Ctx.L0
            "*a" StackType.NewInCtx >a
            "*b" StackType.NewInCtx >b
            @a Type.Str T*
            @b T->
            a> b> drop2
        }

        { Run ->
            Ctx.L0
            "*a" StackType.NewInCtx >a
            "*b" StackType.NewInCtx >b
            @a @a @b T-> >Type T*
            @b T->
            a> b> drop2
        }

        { IntEq  -> Ctx.L0 Type.Int Type.Int T2 Type.Bool T1 T-> }
        { IntLt  -> Ctx.L0 Type.Int Type.Int T2 Type.Bool T1 T-> }
        { IntLe  -> Ctx.L0 Type.Int Type.Int T2 Type.Bool T1 T-> }
        { IntGt  -> Ctx.L0 Type.Int Type.Int T2 Type.Bool T1 T-> }
        { IntGe  -> Ctx.L0 Type.Int Type.Int T2 Type.Bool T1 T-> }
        { IntNe  -> Ctx.L0 Type.Int Type.Int T2 Type.Bool T1 T-> }
        { IntAdd -> Ctx.L0 Type.Int Type.Int T2 Type.Int T1 T-> }
        { IntSub -> Ctx.L0 Type.Int Type.Int T2 Type.Int T1 T-> }
        { IntMul -> Ctx.L0 Type.Int Type.Int T2 Type.Int T1 T-> }
        { IntDivMod -> Ctx.L0 Type.Int Type.Int T2 Type.Int Type.Int T2 T-> }
        { IntToStr -> Ctx.L0 Type.Int T1 Type.Str T1 T-> }
        { IntToU64 -> Ctx.L0 Type.Int T1 Type.U64 T1 T-> }
        { IntToI64 -> Ctx.L0 Type.Int T1 Type.I64 T1 T-> }
        { IntToF32 -> Ctx.L0 Type.Int T1 Type.F32 T1 T-> }
        { IntToF64 -> Ctx.L0 Type.Int T1 Type.F64 T1 T-> }

        { U8Get -> Ctx.L0 Type.Ptr T1 Type.U8 T1 T-> }
        { U8Set -> Ctx.L0 Type.U8 Type.Ptr T2 T0 T-> }
        { U8ToU64 -> Ctx.L0 Type.U8 T1 Type.U64 T1 T-> }

        { U16Get -> Ctx.L0 Type.Ptr T1 Type.U16 T1 T-> }
        { U16Set -> Ctx.L0 Type.U16 Type.Ptr T2 T0 T-> }
        { U16ToU64 -> Ctx.L0 Type.U16 T1 Type.U64 T1 T-> }

        { U32Get -> Ctx.L0 Type.Ptr T1 Type.U32 T1 T-> }
        { U32Set -> Ctx.L0 Type.U32 Type.Ptr T2 T0 T-> }
        { U32ToU64 -> Ctx.L0 Type.U32 T1 Type.U64 T1 T-> }

        { U64Get -> Ctx.L0 Type.Ptr T1 Type.U64 T1 T-> }
        { U64Set -> Ctx.L0 Type.U64 Type.Ptr T2 T0 T-> }
        { U64Eq  -> Ctx.L0 Type.U64 Type.U64 T2 Type.Bool T1 T-> }
        { U64Lt  -> Ctx.L0 Type.U64 Type.U64 T2 Type.Bool T1 T-> }
        { U64Le  -> Ctx.L0 Type.U64 Type.U64 T2 Type.Bool T1 T-> }
        { U64Gt  -> Ctx.L0 Type.U64 Type.U64 T2 Type.Bool T1 T-> }
        { U64Ge  -> Ctx.L0 Type.U64 Type.U64 T2 Type.Bool T1 T-> }
        { U64Ne  -> Ctx.L0 Type.U64 Type.U64 T2 Type.Bool T1 T-> }
        { U64Add -> Ctx.L0 Type.U64 Type.U64 T2 Type.U64 T1 T-> }
        { U64Sub -> Ctx.L0 Type.U64 Type.U64 T2 Type.U64 T1 T-> }
        { U64Mul -> Ctx.L0 Type.U64 Type.U64 T2 Type.U64 T1 T-> }
        { U64Div -> Ctx.L0 Type.U64 Type.U64 T2 Type.U64 T1 T-> }
        { U64Mod -> Ctx.L0 Type.U64 Type.U64 T2 Type.U64 T1 T-> }
        { U64And -> Ctx.L0 Type.U64 Type.U64 T2 Type.U64 T1 T-> }
        { U64Or  -> Ctx.L0 Type.U64 Type.U64 T2 Type.U64 T1 T-> }
        { U64Xor -> Ctx.L0 Type.U64 Type.U64 T2 Type.U64 T1 T-> }
        { U64Shl -> Ctx.L0 Type.U64 Type.U64 T2 Type.U64 T1 T-> }
        { U64Shr -> Ctx.L0 Type.U64 Type.U64 T2 Type.U64 T1 T-> }
        { U64ToInt -> Ctx.L0 Type.U64 T1 Type.Int T1 T-> }
        { U64ToStr -> Ctx.L0 Type.U64 T1 Type.Str T1 T-> }
        { U64ToU8  -> Ctx.L0 Type.U64 T1 Type.U8  T1 T-> }
        { U64ToU16 -> Ctx.L0 Type.U64 T1 Type.U16 T1 T-> }
        { U64ToU32 -> Ctx.L0 Type.U64 T1 Type.U32 T1 T-> }
        { U64ToI8  -> Ctx.L0 Type.U64 T1 Type.I8  T1 T-> }
        { U64ToI16 -> Ctx.L0 Type.U64 T1 Type.I16 T1 T-> }
        { U64ToI32 -> Ctx.L0 Type.U64 T1 Type.I32 T1 T-> }
        { U64ToI64 -> Ctx.L0 Type.U64 T1 Type.I64 T1 T-> }
        { U64ToF32 -> Ctx.L0 Type.U64 T1 Type.F32 T1 T-> }
        { U64ToF64 -> Ctx.L0 Type.U64 T1 Type.F64 T1 T-> }

        { I8Get -> Ctx.L0 Type.Ptr T1 Type.I8 T1 T-> }
        { I8Set -> Ctx.L0 Type.I8 Type.Ptr T2 T0 T-> }
        { I8ToI64 -> Ctx.L0 Type.I8 T1 Type.I64 T1 T-> }

        { I16Get -> Ctx.L0 Type.Ptr T1 Type.I16 T1 T-> }
        { I16Set -> Ctx.L0 Type.I16 Type.Ptr T2 T0 T-> }
        { I16ToI64 -> Ctx.L0 Type.I16 T1 Type.I64 T1 T-> }

        { I32Get -> Ctx.L0 Type.Ptr T1 Type.I32 T1 T-> }
        { I32Set -> Ctx.L0 Type.I32 Type.Ptr T2 T0 T-> }
        { I32ToI64 -> Ctx.L0 Type.I32 T1 Type.I64 T1 T-> }

        { I64Get -> Ctx.L0 Type.Ptr T1 Type.I64 T1 T-> }
        { I64Set -> Ctx.L0 Type.I64 Type.Ptr T2 T0 T-> }
        { I64Eq  -> Ctx.L0 Type.I64 Type.I64 T2 Type.Bool T1 T-> }
        { I64Lt  -> Ctx.L0 Type.I64 Type.I64 T2 Type.Bool T1 T-> }
        { I64Le  -> Ctx.L0 Type.I64 Type.I64 T2 Type.Bool T1 T-> }
        { I64Gt  -> Ctx.L0 Type.I64 Type.I64 T2 Type.Bool T1 T-> }
        { I64Ge  -> Ctx.L0 Type.I64 Type.I64 T2 Type.Bool T1 T-> }
        { I64Ne  -> Ctx.L0 Type.I64 Type.I64 T2 Type.Bool T1 T-> }
        { I64Add -> Ctx.L0 Type.I64 Type.I64 T2 Type.I64 T1 T-> }
        { I64Sub -> Ctx.L0 Type.I64 Type.I64 T2 Type.I64 T1 T-> }
        { I64Mul -> Ctx.L0 Type.I64 Type.I64 T2 Type.I64 T1 T-> }
        { I64Div -> Ctx.L0 Type.I64 Type.I64 T2 Type.I64 T1 T-> }
        { I64Mod -> Ctx.L0 Type.I64 Type.I64 T2 Type.I64 T1 T-> }
        { I64ToInt -> Ctx.L0 Type.I64 T1 Type.Int T1 T-> }
        { I64ToStr -> Ctx.L0 Type.I64 T1 Type.Str T1 T-> }
        { I64ToU8  -> Ctx.L0 Type.I64 T1 Type.U8  T1 T-> }
        { I64ToU16 -> Ctx.L0 Type.I64 T1 Type.U16 T1 T-> }
        { I64ToU32 -> Ctx.L0 Type.I64 T1 Type.U32 T1 T-> }
        { I64ToU64 -> Ctx.L0 Type.I64 T1 Type.U64 T1 T-> }
        { I64ToI8  -> Ctx.L0 Type.I64 T1 Type.I8  T1 T-> }
        { I64ToI16 -> Ctx.L0 Type.I64 T1 Type.I16 T1 T-> }
        { I64ToI32 -> Ctx.L0 Type.I64 T1 Type.I32 T1 T-> }
        { I64ToF32 -> Ctx.L0 Type.I64 T1 Type.F32 T1 T-> }
        { I64ToF64 -> Ctx.L0 Type.I64 T1 Type.F64 T1 T-> }

        { F32Eq -> Ctx.L0 Type.F32 Type.F32 T2 Type.Bool T1 T-> }
        { F32Lt -> Ctx.L0 Type.F32 Type.F32 T2 Type.Bool T1 T-> }
        { F32Le -> Ctx.L0 Type.F32 Type.F32 T2 Type.Bool T1 T-> }
        { F32Gt -> Ctx.L0 Type.F32 Type.F32 T2 Type.Bool T1 T-> }
        { F32Ge -> Ctx.L0 Type.F32 Type.F32 T2 Type.Bool T1 T-> }
        { F32Ne -> Ctx.L0 Type.F32 Type.F32 T2 Type.Bool T1 T-> }
        { F32Add -> Ctx.L0 Type.F32 Type.F32 T2 Type.F32 T1 T-> }
        { F32Sub -> Ctx.L0 Type.F32 Type.F32 T2 Type.F32 T1 T-> }
        { F32Mul -> Ctx.L0 Type.F32 Type.F32 T2 Type.F32 T1 T-> }
        { F32Div -> Ctx.L0 Type.F32 Type.F32 T2 Type.F32 T1 T-> }
        { F32ToInt -> Ctx.L0 Type.F32 T1 Type.Int T1 T-> }
        { F32ToStr -> Ctx.L0 Type.F32 T1 Type.Str T1 T-> }
        { F32ToF64 -> Ctx.L0 Type.F32 T1 Type.F64 T1 T-> }
        { F32Get -> Ctx.L0 Type.Ptr T1 Type.F32 T1 T-> }
        { F32Set -> Ctx.L0 Type.F32 Type.Ptr T2 T0 T-> }

        { F64Eq -> Ctx.L0 Type.F64 Type.F64 T2 Type.Bool T1 T-> }
        { F64Lt -> Ctx.L0 Type.F64 Type.F64 T2 Type.Bool T1 T-> }
        { F64Le -> Ctx.L0 Type.F64 Type.F64 T2 Type.Bool T1 T-> }
        { F64Gt -> Ctx.L0 Type.F64 Type.F64 T2 Type.Bool T1 T-> }
        { F64Ge -> Ctx.L0 Type.F64 Type.F64 T2 Type.Bool T1 T-> }
        { F64Ne -> Ctx.L0 Type.F64 Type.F64 T2 Type.Bool T1 T-> }
        { F64Add -> Ctx.L0 Type.F64 Type.F64 T2 Type.F64 T1 T-> }
        { F64Sub -> Ctx.L0 Type.F64 Type.F64 T2 Type.F64 T1 T-> }
        { F64Mul -> Ctx.L0 Type.F64 Type.F64 T2 Type.F64 T1 T-> }
        { F64Div -> Ctx.L0 Type.F64 Type.F64 T2 Type.F64 T1 T-> }
        { F64ToInt -> Ctx.L0 Type.F64 T1 Type.Int T1 T-> }
        { F64ToStr -> Ctx.L0 Type.F64 T1 Type.Str T1 T-> }
        { F64ToF32 -> Ctx.L0 Type.F64 T1 Type.F32 T1 T-> }
        { F64Get -> Ctx.L0 Type.Ptr T1 Type.F64 T1 T-> }
        { F64Set -> Ctx.L0 Type.F64 Type.Ptr T2 T0 T-> }

        { BoolTrue -> Ctx.L0 T0 Type.Bool T1 T-> }
        { BoolFalse -> Ctx.L0 T0 Type.Bool T1 T-> }
        { BoolAnd -> Ctx.L0 Type.Bool Type.Bool T2 Type.Bool T1 T-> }
        { BoolOr  -> Ctx.L0 Type.Bool Type.Bool T2 Type.Bool T1 T-> }
        { BoolNot -> Ctx.L0 Type.Bool T1 Type.Bool T1 T-> }

        { TupPack0 ->
            Ctx.L0
            T0
            dup >Type T1 T->
        }
        { TupPack1 ->
            Ctx.L0
            "a" Type.NewInCtx >a
            a> T1
            dup >Type T1 T->
        }
        { TupPack2 ->
            Ctx.L0
            "a" Type.NewInCtx >a
            "b" Type.NewInCtx >b
            a> b> T2
            dup >Type T1 T->
        }
        { TupPack3 ->
            Ctx.L0
            "a" Type.NewInCtx >a
            "b" Type.NewInCtx >b
            "c" Type.NewInCtx >c
            a> b> c> T3
            dup >Type T1 T->
        }
        { TupPack4 ->
            Ctx.L0
            "a" Type.NewInCtx >a
            "b" Type.NewInCtx >b
            "c" Type.NewInCtx >c
            "d" Type.NewInCtx >d
            a> b> c> d> T4
            dup >Type T1 T->
        }
        { TupPack5 ->
            Ctx.L0
            "a" Type.NewInCtx >a
            "b" Type.NewInCtx >b
            "c" Type.NewInCtx >c
            "d" Type.NewInCtx >d
            "e" Type.NewInCtx >e
            a> b> c> d> e> T5
            dup >Type T1 T->
        }

        { TupUnpack0 ->
            Ctx.L0
            T0
            dup >Type T1 swap T->
        }
        { TupUnpack1 ->
            Ctx.L0
            "a" Type.NewInCtx >a
            a> T1
            dup >Type T1 swap T->
        }
        { TupUnpack2 ->
            Ctx.L0
            "a" Type.NewInCtx >a
            "b" Type.NewInCtx >b
            a> b> T2
            dup >Type T1 swap T->
        }
        { TupUnpack3 ->
            Ctx.L0
            "a" Type.NewInCtx >a
            "b" Type.NewInCtx >b
            "c" Type.NewInCtx >c
            a> b> c> T3
            dup >Type T1 swap T->
        }
        { TupUnpack4 ->
            Ctx.L0
            "a" Type.NewInCtx >a
            "b" Type.NewInCtx >b
            "c" Type.NewInCtx >c
            "d" Type.NewInCtx >d
            a> b> c> d> T4
            dup >Type T1 swap T->
        }
        { TupUnpack5 ->
            Ctx.L0
            "a" Type.NewInCtx >a
            "b" Type.NewInCtx >b
            "c" Type.NewInCtx >c
            "d" Type.NewInCtx >d
            "e" Type.NewInCtx >e
            a> b> c> d> e> T5
            dup >Type T1 swap T->
        }

        { MutGet ->
            Ctx.L0
            "a" Type.NewInCtx >a
            @a Type.Mut T1 @a T1 T->
            a> drop
        }
        { MutSet ->
            Ctx.L0
            "a" Type.NewInCtx >a
            @a @a Type.Mut T2 T0 T->
            a> drop
        }
        { MutIsSet ->
            Ctx.L0
            "a" Type.NewInCtx >a
            @a Type.Mut T1 Type.Bool T1 T->
            a> drop
        }

        { PtrNil -> Ctx.L0 T0 Type.Ptr T1 T-> }
        { PtrEq  -> Ctx.L0 Type.Ptr Type.Ptr T2 Type.Bool T1 T-> }
        { PtrAdd -> Ctx.L0 Type.I64 Type.Ptr T2 Type.Ptr T1 T-> }
        { PtrSize -> Ctx.L0 T0 Type.U64 T1 T-> }
        { PtrAlloc -> Ctx.L0 Type.U64 T1 Type.Ptr T1 T-> }
        { PtrRealloc -> Ctx.L0 Type.Ptr Type.U64 T2 Type.Ptr T1 T-> }
        { PtrFree -> Ctx.L0 Type.Ptr T1 T0 T-> }
        { PtrCopy -> Ctx.L0 Type.Ptr Type.U64 Type.Ptr T3 T0 T-> }
        { PtrFill -> Ctx.L0 Type.U8 Type.U64 Type.Ptr T3 T0 T-> }
        { PtrGet -> Ctx.L0 Type.Ptr T1 Type.Ptr T1 T-> }
        { PtrSet -> Ctx.L0 Type.Ptr Type.Ptr T2 T0 T-> }

        { StrCopy -> Ctx.L0 Type.Ptr Type.U64 T2 Type.Str T1 T-> }
        { StrNumBytes -> Ctx.L0 Type.Str T1 Type.U64 T1 T-> }
        { StrBase -> Ctx.L0 Type.Str T1 Type.Ptr T1 T-> }
        { StrCat -> Ctx.L0 Type.Str Type.Str T2 Type.Str T1 T-> }
        { StrCmp -> Ctx.L0 Type.Str Type.Str T2 Type.I64 T1 T-> }
        { StrEq -> Ctx.L0 Type.Str Type.Str T2 Type.Bool T1 T-> }
        { StrLt -> Ctx.L0 Type.Str Type.Str T2 Type.Bool T1 T-> }
        { StrLe -> Ctx.L0 Type.Str Type.Str T2 Type.Bool T1 T-> }
        { StrGt -> Ctx.L0 Type.Str Type.Str T2 Type.Bool T1 T-> }
        { StrGe -> Ctx.L0 Type.Str Type.Str T2 Type.Bool T1 T-> }
        { StrNe -> Ctx.L0 Type.Str Type.Str T2 Type.Bool T1 T-> }
        { StrToF32 -> Ctx.L0 Type.Str T1 Type.F32 Type.Str T2 T-> }
        { StrToF64 -> Ctx.L0 Type.Str T1 Type.F64 Type.Str T2 T-> }

        { SysOs   -> Ctx.L0 T0 Type.I64 T1 T-> }
        { SysArch -> Ctx.L0 T0 Type.I64 T1 T-> }
        { SysArgc -> Ctx.L0 T0 Type.U64 T1 T-> }
        { SysArgv -> Ctx.L0 T0 Type.Ptr T1 T-> }
    }
}


||| Initialize name table with list of primitives.
def +Mirth.init-prims! [ +Mirth |- ] {
    Prim.for(register!)
}
