module(mirth.prim)

import(std.prelude)
import(std.maybe)
import(mirth.mirth)
import(mirth.name)
import(mirth.type)
import(mirth.data)
import(mirth.var)
import(mirth.token)
import(mirth.def)

# mirth/data/prim
data(Prim,
    PRIM_CORE_ID,
    PRIM_CORE_DUP,
    PRIM_CORE_DROP,
    PRIM_CORE_SWAP,
    PRIM_CORE_DIP,
    PRIM_CORE_IF,
    PRIM_CORE_WHILE,
    PRIM_CORE_DEBUG,
    PRIM_CORE_PANIC,
    PRIM_CORE_RUN,
    PRIM_CORE_MATCH,
    PRIM_CORE_LAMBDA,

    PRIM_CORE_RSWAP,
    PRIM_CORE_RDIP,

    PRIM_INT_EQ,
    PRIM_INT_LT,
    PRIM_INT_ADD,
    PRIM_INT_SUB,
    PRIM_INT_MUL,
    PRIM_INT_DIV,
    PRIM_INT_MOD,
    PRIM_INT_AND,
    PRIM_INT_OR,
    PRIM_INT_XOR,
    PRIM_INT_SHL,
    PRIM_INT_SHR,
    PRIM_INT_TO_STR,

    PRIM_PACK_NIL,
    PRIM_PACK_CONS,
    PRIM_PACK_UNCONS,

    PRIM_MUT_NEW,
    PRIM_MUT_GET,
    PRIM_MUT_SET,
    PRIM_MUT_IS_SET,

    PRIM_PTR_NIL,
    PRIM_PTR_EQ,
    PRIM_PTR_ADD,
    PRIM_PTR_SIZE,
    PRIM_PTR_GET,
    PRIM_PTR_SET,
    PRIM_PTR_ALLOC,
    PRIM_PTR_REALLOC,
    PRIM_PTR_FREE,
    PRIM_PTR_COPY,
    PRIM_PTR_FILL,

    PRIM_STR_CMP,
    PRIM_STR_COPY,
    PRIM_STR_NUM_BYTES,
    PRIM_STR_BASE,
    PRIM_STR_CAT,

    PRIM_U8_GET,
    PRIM_U8_SET,
    PRIM_U16_GET,
    PRIM_U16_SET,
    PRIM_U32_GET,
    PRIM_U32_SET,
    PRIM_U64_GET,
    PRIM_U64_SET,

    PRIM_I8_GET,
    PRIM_I8_SET,
    PRIM_I16_GET,
    PRIM_I16_SET,
    PRIM_I32_GET,
    PRIM_I32_SET,
    PRIM_I64_GET,
    PRIM_I64_SET,

    PRIM_SYS_OS,
    PRIM_SYS_ARCH,
    PRIM_SYS_ARGC,
    PRIM_SYS_ARGV,

    PRIM_POSIX_READ,
    PRIM_POSIX_WRITE,
    PRIM_POSIX_OPEN,
    PRIM_POSIX_CLOSE,
    PRIM_POSIX_EXIT,
    PRIM_POSIX_MMAP,

    PRIM_SYNTAX_MODULE,
    PRIM_SYNTAX_IMPORT,
    PRIM_SYNTAX_ALIAS,
    PRIM_SYNTAX_INLINE,
    PRIM_SYNTAX_DEF,
    PRIM_SYNTAX_DEF_MISSING,
    PRIM_SYNTAX_DEF_TYPE,
    PRIM_SYNTAX_BUFFER,
    PRIM_SYNTAX_VARIABLE,
    PRIM_SYNTAX_DEF_EXTERNAL,
    PRIM_SYNTAX_EMBED_STR,
    PRIM_SYNTAX_TABLE,
    PRIM_SYNTAX_FIELD,
    PRIM_SYNTAX_DATA,
    PRIM_SYNTAX_DASHES,
    PRIM_SYNTAX_ARROW)
field(Prim.~name, Prim, Name)
field(Prim.~ctx, Prim, Ctx)
field(Prim.~type, Prim, ArrowType)
field(Prim.~decl, Prim, Maybe([Token +World +Mirth -- Token +World +Mirth]))
field(Prim.~arity, Prim, Int)

def(Prim.qname, +Mirth Prim -- +Mirth QName,
    Namespace.prim >namespace
    dup .name >name
    .arity >arity MKQNAME)
def(Prim.name, Prim -- Name, ~name @)
def(Prim.ctx, Prim -- Ctx, ~ctx @)
def(Prim.type, Prim -- ArrowType, ~type @)
def(Prim.decl, Prim -- Maybe([Token +World +Mirth -- Token +World +Mirth]), ~decl @)
def(Prim.arity, Prim -- Int, ~arity @)

def(Prim.>Int, Prim -- Int, Prim.tag)
def(Prim.==, Prim Prim -- Bool, both(>Int) ==)

||| Auxilliary word for defining primitives.
def(def-prim!, +Mirth Prim Str Int -- +Mirth,
    dip(>Name over ~name !)
    over ~arity !
    DefPrim register)

def(Prim.ctx-type!, Ctx ArrowType Prim --,
    tuck ~type ! ~ctx !)

||| Initialize name table with list of primitives.
def(init-prims!, +Mirth -- +Mirth,

    PRIM_SYNTAX_MODULE "module" -1 def-prim!
    PRIM_SYNTAX_IMPORT "import" -1 def-prim!
    PRIM_SYNTAX_INLINE "inline" -1 def-prim!
    PRIM_SYNTAX_ALIAS "alias" -1 def-prim!
    PRIM_SYNTAX_DEF "def" -1 def-prim!
    PRIM_SYNTAX_DEF_TYPE "def-type" -1 def-prim!
    PRIM_SYNTAX_DEF_MISSING "def-missing" -1 def-prim!
    PRIM_SYNTAX_BUFFER "buffer" -1 def-prim!
    PRIM_SYNTAX_DEF_EXTERNAL "def-external" -1 def-prim!
    PRIM_SYNTAX_TABLE "table" -1 def-prim!
    PRIM_SYNTAX_FIELD "field" -1 def-prim!
    PRIM_SYNTAX_EMBED_STR "embed-str" -1 def-prim!
    PRIM_SYNTAX_DATA "data" -1 def-prim!
    PRIM_SYNTAX_VARIABLE "var" -1 def-prim!
    PRIM_SYNTAX_ARROW "->" -1 def-prim!
    PRIM_SYNTAX_DASHES "--" -1 def-prim!

    PRIM_CORE_DIP "dip" 1 def-prim!
    PRIM_CORE_WHILE "while" 2 def-prim!
    PRIM_CORE_MATCH "match" -1 def-prim!
    PRIM_CORE_LAMBDA "\\" -1 def-prim!

    PRIM_CORE_ID "prim-id" 0 def-prim!
    PRIM_CORE_DUP "prim-dup" 0 def-prim!
    PRIM_CORE_DROP "prim-drop" 0 def-prim!
    PRIM_CORE_SWAP "prim-swap" 0 def-prim!
    PRIM_CORE_DIP "prim-dip" 1 def-prim!
    PRIM_CORE_IF "prim-if" 2 def-prim!
    PRIM_CORE_WHILE "prim-while" 2 def-prim!
    PRIM_CORE_DEBUG "prim-debug" 0 def-prim!
    PRIM_CORE_PANIC "prim-panic" 0 def-prim!
    PRIM_CORE_RUN "prim-run" 0 def-prim!
    PRIM_CORE_MATCH "prim-match" -1 def-prim!
    PRIM_CORE_LAMBDA "prim-lambda" -1 def-prim!

    PRIM_CORE_RSWAP "prim-rswap" 0 def-prim!
    PRIM_CORE_RDIP "prim-rdip" 1 def-prim!

    PRIM_INT_ADD "prim-int-add" 0 def-prim!
    PRIM_INT_SUB "prim-int-sub" 0 def-prim!
    PRIM_INT_MUL "prim-int-mul" 0 def-prim!
    PRIM_INT_DIV "prim-int-div" 0 def-prim!
    PRIM_INT_MOD "prim-int-mod" 0 def-prim!
    PRIM_INT_AND "prim-int-and" 0 def-prim!
    PRIM_INT_OR "prim-int-or" 0 def-prim!
    PRIM_INT_XOR "prim-int-xor" 0 def-prim!
    PRIM_INT_SHL "prim-int-shl" 0 def-prim!
    PRIM_INT_SHR "prim-int-shr" 0 def-prim!
    PRIM_INT_TO_STR "prim-int-to-str" 0 def-prim!
    PRIM_INT_EQ "prim-int-eq" 0 def-prim!
    PRIM_INT_LT "prim-int-lt" 0 def-prim!

    PRIM_PACK_NIL "prim-pack-nil" 0 def-prim!
    PRIM_PACK_CONS "prim-pack-cons" 0 def-prim!
    PRIM_PACK_UNCONS "prim-pack-uncons" 0 def-prim!

    PRIM_MUT_GET "prim-mut-get" 0 def-prim!
    PRIM_MUT_SET "prim-mut-set" 0 def-prim!
    PRIM_MUT_IS_SET "prim-mut-is-set" 0 def-prim!

    PRIM_PTR_NIL "prim-ptr-nil" 0 def-prim!
    PRIM_PTR_EQ "prim-ptr-eq" 0 def-prim!
    PRIM_PTR_ADD "prim-ptr-add" 0 def-prim!
    PRIM_PTR_SIZE "prim-ptr-size" 0 def-prim!
    PRIM_PTR_GET "prim-ptr-get" 0 def-prim!
    PRIM_PTR_SET "prim-ptr-set" 0 def-prim!
    PRIM_PTR_ALLOC "prim-ptr-alloc" 0 def-prim!
    PRIM_PTR_REALLOC "prim-ptr-realloc" 0 def-prim!
    PRIM_PTR_FREE "prim-ptr-free" 0 def-prim!
    PRIM_PTR_FILL "prim-ptr-fill" 0 def-prim!
    PRIM_PTR_COPY "prim-ptr-copy" 0 def-prim!

    PRIM_STR_COPY "prim-str-copy" 0 def-prim!
    PRIM_STR_NUM_BYTES "prim-str-num-bytes" 0 def-prim!
    PRIM_STR_BASE "prim-str-base" 0 def-prim!
    PRIM_STR_CAT "prim-str-cat" 0 def-prim!
    PRIM_STR_CMP "prim-str-cmp" 0 def-prim!

    PRIM_U8_GET "prim-u8-get" 0 def-prim!
    PRIM_U8_SET "prim-u8-set" 0 def-prim!
    PRIM_U16_GET "prim-u16-get" 0 def-prim!
    PRIM_U16_SET "prim-u16-set" 0 def-prim!
    PRIM_U32_GET "prim-u32-get" 0 def-prim!
    PRIM_U32_SET "prim-u32-set" 0 def-prim!
    PRIM_U64_GET "prim-u64-get" 0 def-prim!
    PRIM_U64_SET "prim-u64-set" 0 def-prim!

    PRIM_I8_GET "prim-i8-get" 0 def-prim!
    PRIM_I8_SET "prim-i8-set" 0 def-prim!
    PRIM_I16_GET "prim-i16-get" 0 def-prim!
    PRIM_I16_SET "prim-i16-set" 0 def-prim!
    PRIM_I32_GET "prim-i32-get" 0 def-prim!
    PRIM_I32_SET "prim-i32-set" 0 def-prim!
    PRIM_I64_GET "prim-i64-get" 0 def-prim!
    PRIM_I64_SET "prim-i64-set" 0 def-prim!

    PRIM_SYS_OS "prim-sys-os" 0 def-prim!
    PRIM_SYS_ARCH "prim-sys-arch" 0 def-prim!
    PRIM_SYS_ARGC "prim-sys-argc" 0 def-prim!
    PRIM_SYS_ARGV "prim-sys-argv" 0 def-prim!

    PRIM_POSIX_READ "prim-posix-read" 0 def-prim!
    PRIM_POSIX_WRITE "prim-posix-write" 0 def-prim!
    PRIM_POSIX_OPEN "prim-posix-open" 0 def-prim!
    PRIM_POSIX_CLOSE "prim-posix-close" 0 def-prim!
    PRIM_POSIX_EXIT "prim-posix-exit" 0 def-prim!

    #
    # monomorphic prims
    #

    Ctx0 T0 T0 T->
    dup2 PRIM_CORE_ID ctx-type!
    dup2 PRIM_CORE_DEBUG ctx-type!
    drop2

    Ctx0 TYPE_INT TYPE_INT T2 TYPE_INT T1 T->
    dup2 PRIM_INT_ADD ctx-type!
    dup2 PRIM_INT_SUB ctx-type!
    dup2 PRIM_INT_MUL ctx-type!
    dup2 PRIM_INT_DIV ctx-type!
    dup2 PRIM_INT_MOD ctx-type!
    dup2 PRIM_INT_AND ctx-type!
    dup2 PRIM_INT_OR  ctx-type!
    dup2 PRIM_INT_XOR ctx-type!
    dup2 PRIM_INT_SHL ctx-type!
    dup2 PRIM_INT_SHR ctx-type!
    drop2

    Ctx0 TYPE_INT TYPE_INT T2 TYPE_BOOL T1 T->
    dup2 PRIM_INT_EQ ctx-type!
    dup2 PRIM_INT_LT ctx-type!
    drop2

    Ctx0 TYPE_INT T1 TYPE_STR T1 T-> PRIM_INT_TO_STR ctx-type!

    Ctx0 TYPE_PTR T1 TYPE_PTR T1 T-> PRIM_PTR_GET ctx-type!
    Ctx0 TYPE_PTR T1 TYPE_U8  T1 T-> PRIM_U8_GET  ctx-type!
    Ctx0 TYPE_PTR T1 TYPE_U16 T1 T-> PRIM_U16_GET ctx-type!
    Ctx0 TYPE_PTR T1 TYPE_U32 T1 T-> PRIM_U32_GET ctx-type!
    Ctx0 TYPE_PTR T1 TYPE_U64 T1 T-> PRIM_U64_GET ctx-type!
    Ctx0 TYPE_PTR T1 TYPE_I8  T1 T-> PRIM_I8_GET  ctx-type!
    Ctx0 TYPE_PTR T1 TYPE_I16 T1 T-> PRIM_I16_GET ctx-type!
    Ctx0 TYPE_PTR T1 TYPE_I32 T1 T-> PRIM_I32_GET ctx-type!
    Ctx0 TYPE_PTR T1 TYPE_I64 T1 T-> PRIM_I64_GET ctx-type!

    Ctx0 TYPE_PTR TYPE_PTR T2 T0 T-> PRIM_PTR_SET ctx-type!
    Ctx0 TYPE_U8  TYPE_PTR T2 T0 T-> PRIM_U8_SET  ctx-type!
    Ctx0 TYPE_U16 TYPE_PTR T2 T0 T-> PRIM_U16_SET ctx-type!
    Ctx0 TYPE_U32 TYPE_PTR T2 T0 T-> PRIM_U32_SET ctx-type!
    Ctx0 TYPE_U64 TYPE_PTR T2 T0 T-> PRIM_U64_SET ctx-type!
    Ctx0 TYPE_I8  TYPE_PTR T2 T0 T-> PRIM_I8_SET  ctx-type!
    Ctx0 TYPE_I16 TYPE_PTR T2 T0 T-> PRIM_I16_SET ctx-type!
    Ctx0 TYPE_I32 TYPE_PTR T2 T0 T-> PRIM_I32_SET ctx-type!
    Ctx0 TYPE_I64 TYPE_PTR T2 T0 T-> PRIM_I64_SET ctx-type!

    Ctx0 TYPE_INT TYPE_PTR TYPE_INT T3 TYPE_INT T1 T->
    PRIM_POSIX_READ ctx-type!

    Ctx0 TYPE_INT TYPE_PTR TYPE_INT T3 TYPE_INT T1 T->
    PRIM_POSIX_WRITE ctx-type!

    Ctx0 TYPE_PTR TYPE_INT TYPE_INT T3 TYPE_INT T1 T->
    PRIM_POSIX_OPEN ctx-type!

    Ctx0 TYPE_INT T1 TYPE_INT T1 T->
    PRIM_POSIX_CLOSE ctx-type!

    Ctx0
    TYPE_PTR TYPE_INT TYPE_INT TYPE_INT TYPE_INT TYPE_INT T6
    TYPE_PTR T1 T->
    PRIM_POSIX_MMAP ctx-type!

    Ctx0 T0 TYPE_PTR T1 T->
    PRIM_PTR_NIL ctx-type!

    Ctx0 TYPE_PTR TYPE_PTR T2 TYPE_BOOL T1 T->
    PRIM_PTR_EQ ctx-type!

    Ctx0 TYPE_INT TYPE_PTR T2 TYPE_PTR T1 T->
    PRIM_PTR_ADD ctx-type!

    Ctx0 T0 TYPE_INT T1 T->
    PRIM_PTR_SIZE ctx-type!

    Ctx0 TYPE_INT T1 TYPE_PTR T1 T->
    PRIM_PTR_ALLOC ctx-type!

    Ctx0 TYPE_PTR TYPE_INT T2 TYPE_PTR T1 T->
    PRIM_PTR_REALLOC ctx-type!

    Ctx0 TYPE_PTR T1 T0 T->
    PRIM_PTR_FREE ctx-type!

    Ctx0 TYPE_PTR TYPE_INT TYPE_PTR T3 T0 T->
    PRIM_PTR_COPY ctx-type!

    Ctx0 TYPE_INT TYPE_INT TYPE_PTR T3 T0 T->
    PRIM_PTR_FILL ctx-type!

    Ctx0 TYPE_PTR TYPE_INT T2 TYPE_STR T1 T->
    PRIM_STR_COPY ctx-type!

    Ctx0 TYPE_STR T1 TYPE_INT T1 T->
    PRIM_STR_NUM_BYTES ctx-type!

    Ctx0 TYPE_STR T1 TYPE_PTR T1 T->
    PRIM_STR_BASE ctx-type!

    Ctx0 TYPE_STR TYPE_STR T2 TYPE_STR T1 T->
    PRIM_STR_CAT ctx-type!

    Ctx0 TYPE_STR TYPE_STR T2 TYPE_INT T1 T->
    PRIM_STR_CMP ctx-type!

    Ctx0 T0 TYPE_INT T1 T->
    PRIM_SYS_OS ctx-type!

    Ctx0 T0 TYPE_INT T1 T->
    PRIM_SYS_ARCH ctx-type!

    Ctx0 T0 TYPE_INT T1 T->
    PRIM_SYS_ARGC ctx-type!

    Ctx0 T0 TYPE_PTR T1 T->
    PRIM_SYS_ARGV ctx-type!

    Ctx0 T0 T0 >Type T1 T->
    PRIM_PACK_NIL ctx-type!

    #
    # polymorphic prims
    #

    TYPE_TYPE "a" >Name Var.new!
    TYPE_TYPE "b" >Name Var.new!
    TYPE_TYPE "c" >Name Var.new!
    TYPE_RESOURCE "+r" >Name Var.new!
    TYPE_RESOURCE "+s" >Name Var.new!
    TYPE_STACK "*x" >Name Var.new!
    TYPE_STACK "*y" >Name Var.new!
    \( a b c rr sr xs ys ->
        a TVar b TVar c TVar
        rr TVar RESOURCE sr TVar RESOURCE
        xs STVar ys STVar
    \( ta tb tc trr tsr txs tys ->
        a Ctx1
        ta T1 T0 T->
        PRIM_CORE_DROP ctx-type!

        a Ctx1
        ta T1 ta ta T2 T->
        PRIM_CORE_DUP ctx-type!

        a b Ctx2
        ta tb T2 tb ta T2 T->
        PRIM_CORE_SWAP ctx-type!

        xs ys Ctx2
        txs txs tys T-> >Type T* tys T->
        PRIM_CORE_RUN ctx-type!

        xs ys Ctx2
        txs TYPE_INT T* tys T->
        PRIM_POSIX_EXIT ctx-type!

        xs ys Ctx2
        txs TYPE_STR T* tys T->
        PRIM_CORE_PANIC ctx-type!

        xs ys c Ctx3
        txs tc T* txs tys T-> >Type T* tys tc T* T->
        PRIM_CORE_DIP ctx-type!

        xs ys Ctx2
        txs TYPE_BOOL T* txs tys T-> >Type sip(T*) T* tys T->
        PRIM_CORE_IF ctx-type!

        xs Ctx1
        txs txs txs TYPE_BOOL T* T-> >Type T*
            txs txs T-> >Type T*
        txs T->
        PRIM_CORE_WHILE ctx-type!

        rr sr Ctx2
        T0 trr T+ tsr T+ T0 tsr T+ trr T+ T->
        PRIM_CORE_RSWAP ctx-type!

        xs ys rr Ctx3
        txs trr T+ txs tys T-> >Type T* tys trr T+ T->
        PRIM_CORE_RDIP ctx-type!

        xs b Ctx2
        txs >Type tb T2 txs tb T* >Type T1 T->
        PRIM_PACK_CONS ctx-type!

        xs b Ctx2
        txs tb T* >Type T1 txs >Type tb T2 T->
        PRIM_PACK_UNCONS ctx-type!

        a Ctx1
        ta T1 ta TMut T1 T->
        PRIM_MUT_NEW ctx-type!

        a Ctx1
        ta TMut T1 ta T1 T->
        PRIM_MUT_GET ctx-type!

        a Ctx1
        ta ta TMut T2 T0 T->
        PRIM_MUT_SET ctx-type!

        a Ctx1
        ta TMut T1 TYPE_BOOL T1 T->
        PRIM_MUT_IS_SET ctx-type!
    )))
