module mirth.typedef

import std.prelude
import std.maybe
import std.list
import std.str

import mirth.token
import mirth.name
import mirth.def
import mirth.type
import mirth.mirth
import mirth.var

table(TypeDef)
patch TypeDef {
    field(~doc,    TypeDef, Maybe(Str))
    field(~head?,  TypeDef, Maybe(Token))
    field(~name,   TypeDef, Name)
    field(~qname,  TypeDef, Prop(QName))
    field(~target, TypeDef, Prop(Type))

    def doc        [ +Mirth |- TypeDef -- Maybe(Str)   ] { ~doc @ }
    def head?      [ +Mirth |- TypeDef -- Maybe(Token) ] { ~head? @ }
    def qname-soft [ +Mirth |- TypeDef -- Maybe(QName) ] { ~qname @? bind(ready?) }
    def qname-hard [ +Mirth |- TypeDef -- QName        ] { ~qname force! }
    def namespace  [ +Mirth |- TypeDef -- Namespace    ] { qname-hard namespace }
    def name       [ +Mirth |- TypeDef -- Name         ] { ~name @ }
    def target     [ +Mirth |- TypeDef -- Type         ] { ~target force! }
    def params     [ +Mirth |- TypeDef -- List(Var)    ] { drop L0 } # TODO

    def name; [ +Mirth +Str |- TypeDef -- ] { rdip:name name; }

    def = [ TypeDef TypeDef -- Bool ] { both(index) = }

    def new! [ +Mirth |- head:Maybe(Token) name:Name state:PropState(QName) -- TypeDef ] {
        TypeDef.alloc!
        head> over ~head? !
        name> over ~name !
        dup PropLabel.TypeDefQName >label Prop over ~qname !
        dup Def.Type register
    }
}

def +Mirth.def-type! [ +Mirth |- qname:QName type:Type -- ] {
    None >head
    qname> dup name >name
    PropState.Ready >state
    TypeDef.new!
    type> over PropLabel.TypeDefTarget prop swap ~target !
}
