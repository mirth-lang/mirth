module mirth.typedef

import std.prelude
import std.maybe
import std.list
import std.str

import mirth.token
import mirth.name
import mirth.def
import mirth.type
import mirth.mirth
import mirth.var

table(TypeDef)
field(TypeDef.~doc, TypeDef, Maybe(Str))
field(TypeDef.~head?, TypeDef, Maybe(Token))
field(TypeDef.~name, TypeDef, Name)
field(TypeDef.~qname, TypeDef, Prop(QName))
field(TypeDef.~target, TypeDef, Prop(Type))

def TypeDef.doc [ +Mirth TypeDef -- +Mirth Maybe(Str) ] { ~doc @ }
def TypeDef.head? [ +Mirth TypeDef -- +Mirth Maybe(Token) ] { ~head? @ }
def TypeDef.qname-soft [ +Mirth TypeDef -- +Mirth Maybe(QName) ] { ~qname @? bind(ready?) }
def TypeDef.qname-hard [ +Mirth TypeDef -- +Mirth QName ] { ~qname force! }
def TypeDef.namespace [ +Mirth TypeDef -- +Mirth Namespace ] { qname-hard namespace }
def TypeDef.name [ +Mirth TypeDef -- +Mirth Name ] { ~name @ }
def TypeDef.target [ +Mirth TypeDef -- +Mirth Type ] { ~target force! }
def TypeDef.params [ +Mirth TypeDef -- +Mirth List(Var) ] {
    drop L0 # TODO
}

def TypeDef.name; [ +Mirth +Str TypeDef -- +Mirth +Str ] { rdip:name name; }

def TypeDef.= [ TypeDef TypeDef -- Bool ] { both(index) = }

def TypeDef.new! [ +Mirth head:Maybe(Token) name:Name state:PropState(QName) -- +Mirth TypeDef ] {
    TypeDef.alloc!
    head> over ~head? !
    name> over ~name !
    dup PropLabel.TypeDefQName >label Prop over ~qname !
    dup Def.Type register
}

def +Mirth.def-type! [ +Mirth qname:QName type:Type -- +Mirth ] {
    None >head
    qname> dup name >name
    PropState.Ready >state
    TypeDef.new!
    type> over PropLabel.TypeDefTarget prop swap ~target !
}
