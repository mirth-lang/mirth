module mirth.buffer

import std.prelude
import std.maybe

import mirth.name
import mirth.def
import mirth.token
import mirth.mirth
import mirth.elab

# mirth/data/buffer
table +Mirth |- Buffer {
    doc: Maybe(Str)
    head: Token
    size: Size
    name: Name
    ~qname: Prop(QName)
    --
    def qname-soft [ +Mirth |- Buffer -- Maybe(QName) ] { ~qname try-force! }
    def qname-hard [ +Mirth |- Buffer -- QName ] { ~qname force! }
    max-mirth-revision 2025_03_29_001 {
        def = [ +Mirth |- Buffer Buffer -- Bool ] { on2:index = }
    }
}


||| Parse a buffer declaration.
|||
|||     buffer(Name, Size)
|||     buffer Name Size
def parse-buffer [ +Mirth Token |- head:Token doc:Maybe(Str) size:Size ] {
    dup doc >doc
    dup num-args 0> if(
        sip(next) args-2 >sizearg >head
        @head args-0
        @head name/dname? else(@head "Expected buffer name." emit-fatal-error!)
        @head next arg-end? else(@head next "Expected comma." emit-fatal-error!)
        @sizearg int? else?(@sizearg "Expected buffer size." emit-fatal-error!) >size
        @sizearg next args-end? else(@sizearg next "Expected end of arguments." emit-fatal-error!),

        succ dup >head next dup >sizearg next
        @head name/dname? else(@head "Expected buffer name." emit-fatal-error!)
        @sizearg int? else?(@sizearg "Expected buffer size." emit-fatal-error!) >size
    )
    @size 0> else(@sizearg "Buffer size must be positive." emit-error! 8 !size)
    @size:>Size
    sizearg> drop
}

||| Elaborate a buffer definition `buffer(B, size)`.
def elab-buffer! [ +Mirth Token |- ] {
    parse-buffer elab-def-head arity> drop
    Buffer.Make! >buffer
    @buffer PropLabel.BufferQName >label Prop @buffer ~qname !
    buffer> Def.Buffer register
}
