module(sdl2)
import(prelude)

#################
# SDL2 Bindings #
#################

def-external(SDL_Init, SDL_InitFlags -- Int)
def-type(SDL_InitFlags, U32) # technically this ought to be U32...
def(SDL_INIT_TIMER, SDL_InitFlags, 0x0001 Int->U32)
def(SDL_INIT_AUDIO, SDL_InitFlags, 0x0010 Int->U32)
def(SDL_INIT_VIDEO, SDL_InitFlags, 0x0020 Int->U32)
def(SDL_INIT_JOYSTICK, SDL_InitFlags, 0x200 Int->U32)
def(SDL_INIT_HAPTIC, SDL_InitFlags, 0x1000 Int->U32)
def(SDL_INIT_GAMECONTROLLER, SDL_InitFlags, 0x2000 Int->U32)
def(SDL_INIT_EVENTS, SDL_InitFlags, 0x4000 Int->U32)
def(SDL_INIT_SENSOR, SDL_InitFlags, 1 15 << Int->U32)
def(SDL_INIT_EVERYTHING, SDL_InitFlags,
    SDL_INIT_TIMER U32->Int
    SDL_INIT_AUDIO U32->Int |
    SDL_INIT_VIDEO U32->Int |
    SDL_INIT_JOYSTICK U32->Int |
    SDL_INIT_HAPTIC U32->Int |
    SDL_INIT_GAMECONTROLLER U32->Int |
    SDL_INIT_EVENTS U32->Int |
    SDL_INIT_SENSOR U32->Int | Int->U32)

def-external(SDL_Quit, --)
def-external(SDL_GetError, Str)

def-external(SDL_Delay, SDL_Ticks --)
def-external(SDL_GetTicks, SDL_Ticks)
def-type(SDL_Ticks, U32)
def(ms, Int -- SDL_Ticks, Int->U32)

def-external(SDL_CreateWindow, Str Int Int Int Int SDL_WindowFlags -- SDL_Window*)
def-type(SDL_Window*, Ptr)
def-type(SDL_WindowFlags, U32)
def(SDL_WINDOWPOS_UNDEFINED, Int, 0x1FFF 16 <<)
def(SDL_WINDOWPOS_CENTERED, Int, 0x2FFF 16 <<)
def(SDL_WINDOW_NONE, SDL_WindowFlags, 0 Int->U32)
def(SDL_WINDOW_FULLSCREEN, SDL_WindowFlags, 0x1 Int->U32)
def(SDL_WINDOW_OPENGL, SDL_WindowFlags, 0x2 Int->U32)
def(SDL_WINDOW_SHOWN, SDL_WindowFlags, 0x4 Int->U32)
def(SDL_WINDOW_HIDDEN, SDL_WindowFlags, 0x8 Int->U32)
def(SDL_WINDOW_BORDERLESS, SDL_WindowFlags, 0x10 Int->U32)
def(SDL_WINDOW_RESIZABLE, SDL_WindowFlags, 0x20 Int->U32)
def(SDL_WINDOW_MINIMIZED, SDL_WindowFlags, 0x40 Int->U32)
def(SDL_WINDOW_MAXIMIZED, SDL_WindowFlags, 0x80 Int->U32)
def(SDL_WINDOW_INPUT_GRABBED, SDL_WindowFlags, 0x100 Int->U32)
def(SDL_WINDOW_INPUT_FOCUS, SDL_WindowFlags, 0x200 Int->U32)
def(SDL_WINDOW_MOUSE_FOCUS, SDL_WindowFlags, 0x400 Int->U32)
def(SDL_WINDOW_FULLSCREEN_DESKTOP, SDL_WindowFlags, 0x1001 Int->U32)
def(SDL_WINDOW_FOREIGN, SDL_WindowFlags, 0x800 Int->U32)
def(SDL_WINDOW_ALLOW_HIGHDPI, SDL_WindowFlags, 0x2000 Int->U32)
def(SDL_WINDOW_MOUSE_CAPTURE, SDL_WindowFlags, 0x4000 Int->U32)
def(SDL_WINDOW_ALWAYS_ON_TOP, SDL_WindowFlags, 1 15 << Int->U32)
def(SDL_WINDOW_SKIP_TASKBAR, SDL_WindowFlags, 1 16 << Int->U32)
def(SDL_WINDOW_UTILITY, SDL_WindowFlags, 1 17 << Int->U32)
def(SDL_WINDOW_TOOLTIP, SDL_WindowFlags, 1 18 << Int->U32)
def(SDL_WINDOW_POPUP_MENU, SDL_WindowFlags, 1 19 << Int->U32)
def(SDL_WINDOW_VULKAN, SDL_WindowFlags, 1 28 << Int->U32)

def-external(SDL_ShowWindow, SDL_Window* --)
def-external(SDL_HideWindow, SDL_Window* --)
def-external(SDL_RaiseWindow, SDL_Window* --)

def-external(SDL_CreateRenderer, SDL_Window* Int SDL_RendererFlags -- SDL_Renderer*)
def-type(SDL_Renderer*, Ptr)
def-type(SDL_RendererFlags, U32)
def(SDL_RENDERER_SOFTWARE, SDL_RendererFlags, 0x1 Int->U32)
def(SDL_RENDERER_ACCELERATED, SDL_RendererFlags, 0x2 Int->U32)
def(SDL_RENDERER_PRESENTVSYNC, SDL_RendererFlags, 0x4 Int->U32)
def(SDL_RENDERER_TARGETTEXTURE, SDL_RendererFlags, 0x8 Int->U32)

def-external(SDL_RenderClear, SDL_Renderer* --)
def-external(SDL_RenderPresent, SDL_Renderer* --)
def-external(SDL_SetRenderDrawColor, SDL_Renderer* Int Int Int Int --)
def-external(SDL_RenderFillRect, SDL_Renderer* SDL_Rect* --)
def-type(SDL_Rect*, Ptr)

# Size of SDL_Event structure.
def(SDL_EVENT_SIZE, Size, 56)
def-type(SDL_Event*, Ptr)
def-type(SDL_EventType, U32)
def-external(SDL_PollEvent, SDL_Event* -- Int)

def(SDL_Event.type, SDL_Event* -- SDL_EventType, u32@)
def(SDL_QUIT, SDL_EventType, 0x100 Int->U32)
def(SDL_KEYDOWN, SDL_EventType, 0x300 Int->U32)
def(SDL_KEYUP, SDL_EventType, 0x301 Int->U32)
def(SDL_CONTROLLERAXISMOTION, SDL_EventType, 0x650 Int->U32)
def(SDL_CONTROLLERBUTTONDOWN, SDL_EventType, 0x651 Int->U32)
def(SDL_CONTROLLERBUTTONUP, SDL_EventType, 0x652 Int->U32)
def(SDL_CONTROLLERDEVICEADDED, SDL_EventType, 0x653 Int->U32)
def(SDL_CONTROLLERDEVICEREMOVED, SDL_EventType, 0x654 Int->U32)
def(SDL_CONTROLLERDEVICEREMAPPED, SDL_EventType, 0x655 Int->U32)

def(SDL_Event.key.repeat, SDL_Event* -- U8, 13 swap ptr+ u8@)
def(SDL_Event.key.keysym.scancode, SDL_Event* -- SDL_Scancode,
    16 swap ptr+ u16@)

def(SDL_Event.cbutton.which, SDL_Event* -- SDL_JoystickID, 8 swap ptr+ i32@ I32->Int)
def(SDL_Event.cbutton.button, SDL_Event* -- SDL_GameControllerButton, 12 swap ptr+ u8@)

def-type(SDL_Scancode, U16)
def(SDL_SCANCODE_UNKNOWN, SDL_Scancode, 0 Int->U16)
def(SDL_SCANCODE_A, SDL_Scancode, 4 Int->U16)
def(SDL_SCANCODE_B, SDL_Scancode, 5 Int->U16)
def(SDL_SCANCODE_C, SDL_Scancode, 6 Int->U16)
def(SDL_SCANCODE_D, SDL_Scancode, 7 Int->U16)
def(SDL_SCANCODE_E, SDL_Scancode, 8 Int->U16)
def(SDL_SCANCODE_F, SDL_Scancode, 9 Int->U16)
def(SDL_SCANCODE_G, SDL_Scancode, 10 Int->U16)
def(SDL_SCANCODE_H, SDL_Scancode, 11 Int->U16)
def(SDL_SCANCODE_I, SDL_Scancode, 12 Int->U16)
def(SDL_SCANCODE_J, SDL_Scancode, 13 Int->U16)
def(SDL_SCANCODE_K, SDL_Scancode, 14 Int->U16)
def(SDL_SCANCODE_L, SDL_Scancode, 15 Int->U16)
def(SDL_SCANCODE_M, SDL_Scancode, 16 Int->U16)
def(SDL_SCANCODE_N, SDL_Scancode, 17 Int->U16)
def(SDL_SCANCODE_O, SDL_Scancode, 18 Int->U16)
def(SDL_SCANCODE_P, SDL_Scancode, 19 Int->U16)
def(SDL_SCANCODE_Q, SDL_Scancode, 20 Int->U16)
def(SDL_SCANCODE_R, SDL_Scancode, 21 Int->U16)
def(SDL_SCANCODE_S, SDL_Scancode, 22 Int->U16)
def(SDL_SCANCODE_T, SDL_Scancode, 23 Int->U16)
def(SDL_SCANCODE_U, SDL_Scancode, 24 Int->U16)
def(SDL_SCANCODE_V, SDL_Scancode, 25 Int->U16)
def(SDL_SCANCODE_W, SDL_Scancode, 26 Int->U16)
def(SDL_SCANCODE_X, SDL_Scancode, 27 Int->U16)
def(SDL_SCANCODE_Y, SDL_Scancode, 28 Int->U16)
def(SDL_SCANCODE_Z, SDL_Scancode, 29 Int->U16)
def(SDL_SCANCODE_0, SDL_Scancode, 30 Int->U16)
def(SDL_SCANCODE_1, SDL_Scancode, 31 Int->U16)
def(SDL_SCANCODE_2, SDL_Scancode, 32 Int->U16)
def(SDL_SCANCODE_3, SDL_Scancode, 33 Int->U16)
def(SDL_SCANCODE_4, SDL_Scancode, 34 Int->U16)
def(SDL_SCANCODE_5, SDL_Scancode, 35 Int->U16)
def(SDL_SCANCODE_6, SDL_Scancode, 36 Int->U16)
def(SDL_SCANCODE_7, SDL_Scancode, 37 Int->U16)
def(SDL_SCANCODE_8, SDL_Scancode, 38 Int->U16)
def(SDL_SCANCODE_9, SDL_Scancode, 39 Int->U16)
def(SDL_SCANCODE_RETURN, SDL_Scancode, 40 Int->U16)
def(SDL_SCANCODE_ESCAPE, SDL_Scancode, 41 Int->U16)
def(SDL_SCANCODE_BACKSPACE, SDL_Scancode, 42 Int->U16)
def(SDL_SCANCODE_TAB, SDL_Scancode, 43 Int->U16)
def(SDL_SCANCODE_SPACE, SDL_Scancode, 44 Int->U16)
def(SDL_SCANCODE_MINUS, SDL_Scancode, 45 Int->U16)
def(SDL_SCANCODE_EQUALS, SDL_Scancode, 46 Int->U16)
def(SDL_SCANCODE_LEFTBRACKET, SDL_Scancode, 47 Int->U16)
def(SDL_SCANCODE_RIGHTBRACKET, SDL_Scancode, 48 Int->U16)
def(SDL_SCANCODE_BACKSLASH, SDL_Scancode, 49 Int->U16)
def(SDL_SCANCODE_NONUSHASH, SDL_Scancode, 50 Int->U16)
def(SDL_SCANCODE_SEMICOLON, SDL_Scancode, 51 Int->U16)
def(SDL_SCANCODE_APOSTROPHE, SDL_Scancode, 52 Int->U16)
def(SDL_SCANCODE_GRAVE, SDL_Scancode, 53 Int->U16)
def(SDL_SCANCODE_COMMA, SDL_Scancode, 54 Int->U16)
def(SDL_SCANCODE_PERIOD, SDL_Scancode, 55 Int->U16)
def(SDL_SCANCODE_SLASH, SDL_Scancode, 56 Int->U16)
def(SDL_SCANCODE_CAPSLOCK, SDL_Scancode, 57 Int->U16)
def(SDL_SCANCODE_F1, SDL_Scancode, 58 Int->U16)
def(SDL_SCANCODE_F2, SDL_Scancode, 59 Int->U16)
def(SDL_SCANCODE_F3, SDL_Scancode, 60 Int->U16)
def(SDL_SCANCODE_F4, SDL_Scancode, 61 Int->U16)
def(SDL_SCANCODE_F5, SDL_Scancode, 62 Int->U16)
def(SDL_SCANCODE_F6, SDL_Scancode, 63 Int->U16)
def(SDL_SCANCODE_F7, SDL_Scancode, 64 Int->U16)
def(SDL_SCANCODE_F8, SDL_Scancode, 65 Int->U16)
def(SDL_SCANCODE_F9, SDL_Scancode, 66 Int->U16)
def(SDL_SCANCODE_F10, SDL_Scancode, 67 Int->U16)
def(SDL_SCANCODE_F11, SDL_Scancode, 68 Int->U16)
def(SDL_SCANCODE_F12, SDL_Scancode, 69 Int->U16)
# skipping some
def(SDL_SCANCODE_RIGHT, SDL_Scancode, 79 Int->U16)
def(SDL_SCANCODE_LEFT, SDL_Scancode, 80 Int->U16)
def(SDL_SCANCODE_DOWN, SDL_Scancode, 81 Int->U16)
def(SDL_SCANCODE_UP, SDL_Scancode, 82 Int->U16)
# skipping many
def(SDL_SCANCODE_LCTRL, SDL_Scancode, 224 Int->U16)
def(SDL_SCANCODE_LSHIFT, SDL_Scancode, 225 Int->U16)
def(SDL_SCANCODE_LALT, SDL_Scancode, 226 Int->U16)
def(SDL_SCANCODE_LGUI, SDL_Scancode, 227 Int->U16)
def(SDL_SCANCODE_RCTRL, SDL_Scancode, 228 Int->U16)
def(SDL_SCANCODE_RSHIFT, SDL_Scancode, 229 Int->U16)
def(SDL_SCANCODE_RALT, SDL_Scancode, 230 Int->U16)
def(SDL_SCANCODE_RGUI, SDL_Scancode, 231 Int->U16)
# skipping more

def-type(SDL_JoystickID, Int)
def-type(SDL_GameController*, Ptr)
def-external(SDL_NumJoysticks, SDL_JoystickID)
def-external(SDL_IsGameController, SDL_JoystickID -- Bool)
def-external(SDL_GameControllerOpen, SDL_JoystickID -- SDL_GameController*)

def-type(SDL_GameControllerButton, U8)
def(SDL_CONTROLLER_BUTTON_INVALID, SDL_GameControllerButton, 0xFF Int->U8)
def(SDL_CONTROLLER_BUTTON_A, SDL_GameControllerButton, 0 Int->U8)
def(SDL_CONTROLLER_BUTTON_B, SDL_GameControllerButton, 1 Int->U8)
def(SDL_CONTROLLER_BUTTON_X, SDL_GameControllerButton, 2 Int->U8)
def(SDL_CONTROLLER_BUTTON_Y, SDL_GameControllerButton, 3 Int->U8)
def(SDL_CONTROLLER_BUTTON_BACK, SDL_GameControllerButton, 4 Int->U8)
def(SDL_CONTROLLER_BUTTON_GUIDE, SDL_GameControllerButton, 5 Int->U8)
def(SDL_CONTROLLER_BUTTON_START, SDL_GameControllerButton, 6 Int->U8)
def(SDL_CONTROLLER_BUTTON_LEFTSTICK, SDL_GameControllerButton, 7 Int->U8)
def(SDL_CONTROLLER_BUTTON_RIGHTSTICK, SDL_GameControllerButton, 8 Int->U8)
def(SDL_CONTROLLER_BUTTON_LEFTSHOULDER, SDL_GameControllerButton, 9 Int->U8)
def(SDL_CONTROLLER_BUTTON_RIGHTSHOULDER, SDL_GameControllerButton, 10 Int->U8)
def(SDL_CONTROLLER_BUTTON_DPAD_UP, SDL_GameControllerButton, 11 Int->U8)
def(SDL_CONTROLLER_BUTTON_DPAD_DOWN, SDL_GameControllerButton, 12 Int->U8)
def(SDL_CONTROLLER_BUTTON_DPAD_LEFT, SDL_GameControllerButton, 13 Int->U8)
def(SDL_CONTROLLER_BUTTON_DPAD_RIGHT, SDL_GameControllerButton, 14 Int->U8)
