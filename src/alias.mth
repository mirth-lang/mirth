module mirth.alias

import std.prelude
import std.maybe
import std.list

import mirth.mirth
import mirth.token
import mirth.name
import mirth.def
import mirth.elab

table +Mirth |- Alias {
    doc: Maybe(Str)
    head: Token
    name: Name
    arity: Int
    ~qname: Prop(QName)
    ~target: Prop(Def)
    --
    def qname-soft [ +Mirth |- Alias -- Maybe(QName) ] { ~qname @? bind:ready? }
    def qname-hard [ +Mirth |- Alias -- QName ] { ~qname force! }
    def namespace  [ +Mirth |- Alias -- Namespace ] { qname-hard namespace}
    def target [ +Mirth |- Alias -- Def ] { ~target force! }

    max-mirth-revision 2025_03_29_001 {
        def = [ +Mirth |- Alias Alias -- Bool ] { on2:index = }
    }
    def register! [ +Mirth |- Alias -- ] { Def.Alias register }
}

||| Parse an alias declaration:
|||
|||     alias(DefHead,Target)
|||     alias DefHead Target
|||
||| Both `head` and `target` are names (or dnames), with `head` taking
||| an optional argument list (for the arity), and `target` taking no arguments.
def parse-alias [ +Mirth Token |- head:Token target:Token name/dname:Name/DName doc:Maybe(Str) ] {
    dup doc >doc
    dup succ lparen? >Bool >has-paren
    @has-paren if(
        sip(next) args-2 >target >head,
        next dup >head next dup >target next
    )
    @head name/dname? else(@head "expected alias name" emit-fatal-error!)
    @target name/dname? unwrap(@target "expected alias target, which must be a name" emit-fatal-error!) >name/dname
    @target args-0
    @has-paren then(
        @head next arg-end? else(@head "expected comma after alias name" emit-fatal-error!)
        @target succ arg-end? else(@head "expected end of arguments after alias target" emit-fatal-error!)
    )
    has-paren> drop
}

||| Elaborate an alias declaration.
def elab-alias! [ +Mirth Token |- ] {
    parse-alias elab-def-head @arity:>Int Alias.Make!
    dup register!
    dup PropLabel.AliasQName >label Prop over ~qname !

    name/dname> target> over2 dup PropLabel.AliasTarget prop3(
        >alias >target >name/dname
        @target >token
        "target" >sort
        False >report-ambiguous-as-warning
        False >ignore-last-name
        resolve-def(
            expunge(alias? if?(@alias =, False))
            alias> rdip:arity filter(
                dup2 rdip:arity arity-compatible?,
                RejectedDef.WrongArity
            ) drop
            filter-qualifiers
            L0 filter-roots
        )
        unwrap( panic-diagnostics! )
        match(
            Alias ->
                ~target force-or!(
                    @target
                    "Alias points to itself, circular aliases are not allowed."
                    emit-fatal-error!
                ),
            _ -> id
        )
        target> drop
    ) swap ~target !
}
