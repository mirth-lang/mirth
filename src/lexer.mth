module(mirth.lexer)

import(std.prelude)
import(std.byte)
import(std.path)
import(std.str)
import(std.maybe)
import(std.list)
import(std.ctypes)

import(std.world)
import(std.file)
import(std.input)

import(mirth.location)
import(mirth.name)
import(mirth.label)
import(mirth.token)
import(mirth.mirth)
import(mirth.module)


#########
# LEXER #
#########

data(+Lexer, +Lexer ->
    lexer-module:Module
    lexer-row:Row
    lexer-col:Col
    lexer-stack:List(Token)
    lexer-last-token:Token
    +input: +Input)

def(lexer-stack-push!, Token +Lexer -- +Lexer,
    lexer-stack cons lexer-stack!)
def(lexer-stack-pop!, +Lexer -- Maybe(Token) +Lexer,
    lexer-stack uncons lexer-stack!)
def(lexer-stack-drop, +Lexer -- +Lexer,
    lexer-stack-pop! drop)
def(lexer-stack-peek, +Lexer -- Maybe(Token) +Lexer,
    lexer-stack first)

def-missing(+Lexer.lexer-col, +Lexer -- +Lexer Col, lexer-col)
def-missing(+Lexer.lexer-row, +Lexer -- +Lexer Row, lexer-row)
def-missing(+Lexer.lexer-module, +Lexer -- +Lexer Module, lexer-module)
def-missing(+Lexer.lexer-stack, +Lexer -- +Lexer List(Token), lexer-stack)
def-missing(+Lexer.lexer-last-token, +Lexer -- +Lexer Token, lexer-last-token)

def(run-lexer!, Path +World +Mirth -- Module +World +Mirth,
    Module.new! dup >lexer-module
    source-path rdip(open-file! unwrap! +Input.start! >+input)
    1 >Row >lexer-row
    1 >Col >lexer-col
    L0 >lexer-stack
    Token.alloc-none! dup >lexer-last-token
    +Lexer
    while(done? not, lexer-next!)
    TokenNone lexer-emit!
    /+Lexer
    rdip(+input> end! close-file!)
    lexer-stack> uncons drop for("Mismatched left parenthesis." emit-fatal-error!)
    lexer-row> lexer-col> lexer-last-token> drop3
    lexer-module> Token.alloc-none! over ~end !
    swap succ over ~start !)

# Is the lexer done?
def(+Lexer.done?, +Lexer -- Bool +Lexer, +input:done?)

# Create a token, and add it to the token buffer,
# returning the new token.
def(lexer-make!, TokenValue +Lexer -- Token +Lexer,
    Token.alloc!
    tuck ~value !
    lexer-module over ~module !
    lexer-row over ~row !
    lexer-col over ~col !
    dup lexer-last-token!)

# Create a token, and add it to the token buffer.
def(lexer-emit!, TokenValue +Lexer -- +Lexer, lexer-make! drop)

# Lex the next token.
def(lexer-next!, +Mirth +Lexer -- +Mirth +Lexer, lexer-peek match(
    BLF -> lexer-newline! lexer-move!,
    BSPACE -> lexer-move!,
    BHT -> lexer-move!,
    BVT -> lexer-move!,
    BCR -> lexer-move!,
    BHASH -> lexer-skip-comment! lexer-move!,
    BCOMMA -> lexer-close-colons! TokenComma lexer-emit! lexer-move!,
    BRPAREN -> lexer-close-colons! lexer-emit-rparen! lexer-move!,
    BRSQUARE -> lexer-close-colons! lexer-emit-rsquare! lexer-move!,
    BRCURLY -> lexer-close-colons! lexer-emit-rcurly! lexer-move!,
    BCOLON -> lexer-prepare-for-args! lexer-emit-lcolon! lexer-move!,
    BLPAREN -> lexer-prepare-for-args! lexer-emit-lparen! lexer-move!,
    BLSQUARE -> lexer-prepare-for-atom! lexer-emit-lsquare! lexer-move!,
    BLCURLY -> lexer-prepare-for-atom! lexer-emit-lcurly! lexer-move!,
    BQUOTE -> lexer-prepare-for-atom! lexer-emit-string! lexer-move!,
    _ -> is-name-byte if(
        lexer-prepare-for-atom! lexer-emit-name!,
        "Unrecognized byte." lexer-emit-fatal-error!
    )))

def(lexer-newline!, +Lexer -- +Lexer,
    lexer-row >Int 1+ >Row lexer-row!
    0 >Col lexer-col!)

def(lexer-emit-lcolon!, +Lexer -- +Lexer,
    TokenLColonOpen lexer-make!
    lexer-stack-push!)

def(lexer-close-colons!, +Lexer -- +Lexer,
    while-some(
        lexer-stack-peek filter(lcolon-open?),
        lexer-stack-drop
        dup TokenRColon lexer-make!
        TokenLColon swap ~value !
    ))
def(lexer-prepare-for-atom!, +Lexer -- +Lexer,
    lexer-last-token lcolon-open? else(lexer-close-colons!))
def(lexer-prepare-for-args!, +Lexer -- +Lexer,
    lexer-last-token name-or-dname? else(lexer-close-colons!))

def(lexer-emit-lparen!, +Lexer -- +Lexer,
    TokenLParenOpen lexer-make!
    lexer-stack-push!)
def(lexer-emit-rparen!, +Mirth +Lexer -- +Mirth +Lexer,
    lexer-stack-pop! match(
        None -> "Mismatched right parenthesis." lexer-emit-fatal-error!,
        Some -> dup lparen-open? if(
            dup TokenRParen lexer-make!
            TokenLParen swap ~value !,
            "Mismatched right parenthesis." lexer-emit-fatal-error!
        )
    ))

def(lexer-emit-lsquare!, +Lexer -- +Lexer,
    TokenLSquareOpen lexer-make!
    lexer-stack-push!)
def(lexer-emit-rsquare!, +Mirth +Lexer -- +Mirth +Lexer,
    lexer-stack-pop! match(
        None -> "Mismatched right square bracket." lexer-emit-fatal-error!,
        Some -> dup lsquare-open? if(
            dup TokenRSquare lexer-make!
            TokenLSquare swap ~value !,
            "Mismatched right square bracket." lexer-emit-fatal-error!
        )
    ))

def(lexer-emit-lcurly!, +Lexer -- +Lexer,
    TokenLCurlyOpen lexer-make!
    lexer-stack-push!)
def(lexer-emit-rcurly!, +Mirth +Lexer -- +Mirth +Lexer,
    lexer-stack-pop! match(
        None -> "Mismatched right curly brace." lexer-emit-fatal-error!,
        Some -> dup lcurly-open? if(
            dup TokenRCurly lexer-make!
            TokenLCurly swap ~value !,
            "Mismatched right curly brace." lexer-emit-fatal-error!
        )
    ))

def(lexer-emit-name!, +Lexer -- +Lexer,
    rdip("" thaw)
    lexer-module
    lexer-row
    lexer-col

    lexer-peek while(dup is-name-byte,
        rdip(push-byte-unsafe!)
        lexer-move!
        lexer-peek)
    drop

    rdip(is-doc-start?) if(
        drop3
        lexer-skip-doc!,
        # TODO: save the doc in the token-doc field for the next token
        #   https://github.com/mirth-lang/mirth/issues/240

        rdip(is-float? if(
            float? TokenFloat,
            is-int? if(
                int? TokenInt,
                dname? match(
                    Some -> TokenDName,
                    None ->
                        label-token? match(
                            Some -> id,
                            None -> name? TokenName
                        )
                )
            )
        ))

        Token.alloc!
        tuck ~value !
        tuck ~col !
        tuck ~row !
        tuck ~module !
        lexer-last-token!
    )
    rdip(freeze drop))

def(+Str.name?, +Str -- Name +Str, dup! >Name)

def(+Str.first-byte, +Str -- Byte +Str, 0 >Offset byte@)
def(+Str.second-byte, +Str -- Byte +Str, 1 >Offset byte@)
def(+Str.third-byte, +Str -- Byte +Str, 2 >Offset byte@)

def(+Str.first-two-bytes, +Str +Unsafe -- Str +Str +Unsafe, 2 >Size +Str.take-slice)
def(+Str.last-two-bytes, +Str +Unsafe -- Str +Str +Unsafe,
    rdip:num-bytes? >Int 2 > if(
        rdip:num-bytes? >Offset 1- 1- +Str.drop-slice,
        rdip:dup!
    ))

def(+Str.drop-first-byte, +Str +Unsafe -- Str +Str +Unsafe, 1 >Offset +Str.drop-slice)
def(+Str.drop-first-two-bytes, +Str +Unsafe -- Str +Str +Unsafe, 2 >Offset +Str.drop-slice)
def(+Str.drop-last-byte, +Str +Unsafe -- Str +Str +Unsafe,
    rdip:num-bytes? >Int 1 > if(
        rdip:num-bytes? 1- +Str.take-slice,
        ""
    ))
def(+Str.drop-last-two-bytes, +Str +Unsafe -- Str +Str +Unsafe,
    rdip:num-bytes? >Int 2 > if(
        rdip:num-bytes? 1- 1- +Str.take-slice,
        ""
    ))

def(+Str.label-token?, +Str -- Maybe(TokenValue) +Str,
    label-push-token?
    or-some(label-push-r-token?)
    or-some(label-pop-token?)
    or-some(label-pop-r-token?)
    or-some(label-get-token?)
    or-some(label-set-token?))

def(+Str.label-pop-token?, +Str -- Maybe(TokenValue) +Str,
    first-byte is-lower and(last-byte B'>' ==) if(
        unsafe(+Str.drop-last-byte) >Name Label.new! TokenLabelPop Some,
        None
    ))

def(+Str.label-pop-r-token?, +Str -- Maybe(TokenValue) +Str,
    first-byte B'+' == and(second-byte is-lower and(last-byte B'>' ==)) if(
        unsafe(+Str.drop-last-byte) >Name Label.new! TokenLabelPopR Some,
        None
    ))

def(+Str.label-push-token?, +Str -- Maybe(TokenValue) +Str,
    first-byte B'>' == and(second-byte is-lower) if(
        unsafe(+Str.drop-first-byte) >Name Label.new! TokenLabelPush Some,
        None
    ))

def(+Str.label-push-r-token?, +Str -- Maybe(TokenValue) +Str,
    unsafe(+Str.first-two-bytes) ">+" == and(third-byte is-lower) if(
        unsafe(+Str.drop-first-byte) >Name Label.new! TokenLabelPushR Some,
        None
    ))

def(+Str.label-get-token?, +Str -- Maybe(TokenValue) +Str,
    first-byte B'@' == and(second-byte is-lower or(second-byte B'+' == and(third-byte is-lower))) if(
        unsafe(+Str.drop-first-byte) >Name Label.new! TokenLabelGet Some,
        None
    ))

def(+Str.label-set-token?, +Str -- Maybe(TokenValue) +Str,
    first-byte B'!' == and(second-byte is-lower) if(
        unsafe(+Str.drop-first-byte) >Name Label.new! TokenLabelSet Some,
        None
    ))

def(+Str.dname?, +Str -- Maybe(DName) +Str,
    BDOT +Str.split-byte
    uncons >List+ match(
        None -> drop None,
        Some ->
            dip(dup Str.empty? if(drop None, >Name Some))
            map(>Name) DName Some
    ))

def(+Str.is-doc-start?, +Str -- Bool +Str,
    dup! "|||" ==)

def(+Str.is-arrow?, +Str -- Bool +Str,
    +Str.dup! "->" ==)

def(+Str.is-dashes?, +Str -- Bool +Str,
    dup! "--" ==)

def(+Str.is-float?, +Str -- Bool +Str,
    0 >Size
    0 >Offset

    dup byte@ is-sign if(1+, id)
    
    while(dup byte@ is-digit, dip(1+) 1+)

    dup byte@ BDOT == if(
        dip(1+) 1+ while(dup byte@ is-digit, dip(1+) 1+)
        swap >Int 3 >= if(
            num-bytes? >Offset ==,
            drop False
        ),
        drop2 False
    )
)

||| process int sign and return initial state for rest of int lexing.
||| returns: (sign multiplier) (accumulated value == 0) (str-buf index)
def(+Str.float-sign, +Str -- Byte Offset +Str,
    0 >Offset byte@ byte-sign-value-index-float)

def(byte-sign-value-index-float, Byte -- Byte Offset,
    B'-' -> B'-' 1 >Offset,
    B'+' -> B'+' 1 >Offset,
    _ -> drop B'+' 0 >Offset)

external(
    "double strtod(const char*, char**);"
    "double string_to_float64(const char* float64_str) {"
    "    return strtod(float64_str, 0);"
    "}"
    string_to_float64 [ CStr -- CFloat64 ]
)

def(+Str.float?, +Str -- Float64 +Str,
    "" thaw rswap 0 >Offset
    float-sign rdip:dip:push-byte-ascii! +
    while(dup num-bytes? >Offset <,
        sip(
            byte@ rdip:push-byte-ascii!
        )
        1+)
    drop rswap freeze with-cstr(string_to_float64) >Float64)

def(+Str.is-int?, +Str -- Bool +Str,
    is-dec-int?
    or(is-hex-int?)
    or(is-oct-int?))

def(+Str.is-dec-int?, +Str -- Bool +Str,
    0 >Size # number of digits
    0 >Offset # current index
    dup byte@ is-sign if(1+, id)
    while(dup byte@ is-digit, dip(1+) 1+)
    swap 0> if(num-bytes? >Offset ==, drop False))

def(+Str.is-hex-int?, +Str -- Bool +Str,
    0 >Size # number of digits
    0 >Offset # current index
    dup byte@ is-sign if(
        1+,
        id
    )
    dup byte@ B'0' == if(
        1+
        dup byte@ B'x' == if(
            1+
            while(dup byte@ is-hexdigit, dip(1+) 1+)
            swap 0> if(
                num-bytes? >Offset ==,
                drop False
            ),

            drop2 False
        ),

        drop2 False
    ))

def(+Str.is-oct-int?, +Str -- Bool +Str,
    0 >Size # number of digits
    0 >Offset # current index
    dup byte@ is-sign if(
        1+,
        id
    )
    dup byte@ B'0' == if(
        1+
        dup byte@ B'o' == if(
            1+
            while(dup byte@ B'0' B'7' in-range, dip(1+) 1+)
            swap 0> if(
                num-bytes? >Offset ==,
                drop False
            ),

            drop2 False
        ),

        drop2 False
    ))

def(+Str.int?, +Str -- Int +Str,
    is-dec-int? if(
        dec-int?,
	is-hex-int? if(
            hex-int?,
	    oct-int?
	)
    ))

def(byte-sign-multiplier, Byte -- Int,
    B'-' -> -1,
    B'+' -> +1,
    _ -> drop "unexpected byte in byte-sign-multiplier" panic!)

||| process int sign and return initial state for rest of int lexing.
||| returns: (sign multiplier) (accumulated value == 0) (str-buf index)
def(+Str.int-sign, +Str -- Int Int Offset +Str,
    0 >Offset byte@ byte-sign-value-index)

def(byte-sign-value-index, Byte -- Int Int Offset,
    B'-' -> -1 0 1 >Offset,
    B'+' -> +1 0 1 >Offset,
    _ -> drop +1 0 0 >Offset)

def(+Str.dec-int?, +Str -- Int +Str,
    int-sign
    while(dup num-bytes? >Offset <,
        sip(
            byte@ >Int
            dip(10 *) 48 - +
        )
        1+)
    drop *)

def(+Str.hex-int?, +Str -- Int +Str,
    int-sign 1+ 1+ # skip 0x prefix
    while(dup num-bytes? >Offset <,
        sip(
            byte@
            dip(16 *) hexdigit-value +
        )
        1+)
    drop *)

def(+Str.oct-int?, +Str -- Int +Str,
    int-sign 1+ 1+ # skip 0x prefix
    while(dup num-bytes? >Offset <,
        sip(
            byte@ >Int
            dip(8 *) 48 - +
        )
        1+)
    drop *)

def(hexdigit-value, Byte -- Int,
    dup is-digit if(
        >Int 48 -,
        >Int 55 -
    ))

def(lexer-emit-string!, +Mirth +Lexer -- +Mirth +Lexer,
    rdip("" thaw)
    TokenNone lexer-make!

    lexer-move!
    lexer-peek while(dup is-string-end not,
        lexer-push-string-byte!
        lexer-move!
        lexer-peek
    )
    BQUOTE == else(
        "String literal is missing end quote (\")."
        rdip':lexer-emit-fatal-error!
    )

    rdip(freeze TokenStr)
    swap ~value !)

def(lexer-push-string-byte!, +Mirth +Str +Lexer Byte -- +Mirth +Str +Lexer,
    B'\' -> lexer-move! lexer-peek lexer-push-string-escape-byte!,
    _ -> rdip(push-byte-unsafe!))

def(lexer-push-string-escape-byte!, +Mirth +Str +Lexer Byte -- +Mirth +Str +Lexer,
    BLF -> lexer-newline!,
    B'n' -> BLF rdip(push-byte-ascii!),
    B'r' -> BCR rdip(push-byte-ascii!),
    B't' -> BHT rdip(push-byte-ascii!),
    B'\' -> B'\' rdip(push-byte-ascii!),
    BQUOTE -> BQUOTE rdip(push-byte-ascii!),
    _ -> rdip(push-byte-unsafe!)
    "Unknown character escape sequence." rdip':lexer-emit-warning!)

def(lexer-skip-comment!, +Lexer -- +Lexer,
    while(lexer-comment-end? not, lexer-move!)
    lexer-peek BLF == then(lexer-newline!))

def(lexer-skip-doc!, +Lexer -- +Lexer, while(lexer-comment-end? not, lexer-move!))

def(lexer-comment-end?, +Lexer -- Bool +Lexer,
    done? if(
        True,
        lexer-peek dup BLF == nip
    ))

def(lexer-peek, +Lexer -- Byte +Lexer, +input:peek)
def(lexer-move!, +Lexer -- +Lexer,
    +input:move!
    lexer-col >Int 1+ >Col lexer-col!)

def(lexer-location, +Lexer -- Location +Lexer,
    lexer-module >module
    lexer-row >row
    lexer-col >col
    Location)

def(lexer-emit-warning!, Str +Mirth +Lexer -- +Mirth +Lexer, dip(lexer-location) rdip:emit-warning-at!)
def(lexer-emit-error!, Str +Mirth +Lexer -- +Mirth +Lexer, dip(lexer-location) rdip:emit-error-at!)
def(lexer-emit-fatal-error!, *a Str +Mirth +Lexer -- *b, dip(lexer-location) rswap emit-fatal-error-at!)
