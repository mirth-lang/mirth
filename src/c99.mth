module(mirth.c99)

import(std.prelude)
import(std.str)
import(std.path)
import(std.list)
import(std.lazy)
import(std.byte)
import(std.maybe)
import(std.either)

import(std.file)
import(std.output)

import(mirth.mirth)
import(mirth.module)
import(mirth.location)
import(mirth.token)
import(mirth.name)
import(mirth.buffer)
import(mirth.arrow)
import(mirth.word)
import(mirth.table)
import(mirth.variable)
import(mirth.external)
import(mirth.tycon)
import(mirth.type)
import(mirth.data)
import(mirth.package)
import(mirth.prim)
import(mirth.var)
import(mirth.match)
import(mirth.elab)
import(mirth.need)
import(mirth.label)
import(mirth.def)

#######
# C99 #
#######

data(C99_Options, C99_Options ->
    output-path: Path
    emit-debug-info: Bool)

data(+C99, +C99 ->
    options: C99_Options
    depth: Nat
    +needs: +Needs
    +output: +Output
    +mirth: +Mirth)

def(+C99.put, Str +C99 -- +C99, +output:put)
def(+C99.put-byte, Byte +C99 -- +C99, +output:put-byte)
def(+C99.line, +C99 -- +C99, +output:line)

def(c99-start!, Arrow C99_Options +World +Mirth -- Arrow +World +C99,
    >options
    0 >Nat >depth
    +Needs.new dup determine-arrow-needs! >+needs >+mirth
    @options output-path create-file! unwrap! +Output.start! >+output
    +C99)

def(c99-end!, +World +C99 -- +World +Mirth,
    /+C99
    depth> options> drop2
    +needs> rdrop
    +output> end! close-file!
    +mirth>)

def(run-output-c99!, Arrow C99_Options +World +Mirth -- +World +Mirth,
    num-errors 0> if(
        drop2,

        c99-start!
        c99-header!
        c99-label-defs!
        c99-tag-defs!
        c99-buffers!
        c99-variables!
        c99-external-blocks!
        c99-word-sigs!
        c99-block-sigs!
        c99-field-sigs!
        c99-main!
        c99-field-defs!
        c99-word-defs!
        c99-block-defs!
        c99-end!
    ))

field(Tag.~word-cname, Tag, Str)
field(Tag.~pat-cname, Tag, Str)
field(Buffer.~cname, Buffer, Str)
field(Variable.~cname, Variable, Str)
field(Field.~cname, Field, Str)
field(External.~cname, External, Str)
field(Prim.~cname, Prim, Str)

def(Tag.word-cname, +Mirth Tag -- +Mirth Str, dup ~word-cname memoize(
    Str("mtw_" ; dup qname rdip:mangled ;)) nip)
def(Tag.pat-cname, +Mirth Tag -- +Mirth Str, dup ~pat-cname memoize(
    Str("mtp_" ; dup qname rdip:mangled ;)) nip)
def(Buffer.cname, +Mirth Buffer -- +Mirth Str, dup ~cname memoize(
    Str("mbuf_" ; dup qname rdip:mangled ;)) nip)
def(Variable.cname, +Mirth Variable -- +Mirth Str, dup ~cname memoize(
    Str("mvar_" ; dup qname rdip:mangled ;)) nip)
def(Field.cname, +Mirth Field -- +Mirth Str, dup ~cname memoize(
    Str("mfld_" ; dup qname rdip:mangled ;)) nip)
def(External.cname, +Mirth External -- +Mirth Str, dup ~cname memoize(
    Str("mext_" ; dup qname rdip:mangled ;)) nip)
def(Prim.cname, Prim -- Str, dup ~cname memoize(
    Str("mp_" ; dup name mangled ;)) nip)

def(+C99.sig-put, Str +C99 -- +C99, "static void " put put " (void)" put)

embed-str(c99-header-str, "src/mirth.h")
def(c99-header!, +C99 -- +C99,
    "#define MIRTH_DEBUG " put
    options emit-debug-info if("1", "0") put line
    c99-header-str put line)

def(c99-buffers!, +C99 -- +C99, Buffer.for(c99-buffer!))
def(c99-buffer!, Buffer +C99 -- +C99,
    dup +mirth:cname sig-put " {" put line
    "\tstatic uint8_t b[" put dup size show put "] = {0};" put line
    "\tpush_ptr(&b);" put line
    "}" put line
    drop)

def(c99-variables!, +C99 -- +C99, Variable.for(c99-variable!))
def(c99-variable!, Variable +C99 -- +C99,
    +mirth:cname sig-put " {" put line
    "\tstatic VAL v = {0};" put line
    "\tpush_ptr(&v);" put line
    "}" put line)

def(c99-tag-defs!, +C99 -- +C99, Tag.for(c99-tag-def!))
def(c99-tag-def!, Tag +C99 -- +C99, \(tag -> tag prefer-inline? else(
    tag +needs:word-needed? then(
        tag +mirth:word-cname sig-put " {" put line
        tag is-transparent? else(
            tag is-semi-transparent? if(
                tag outputs-resource? if(
                    tag num-type-inputs 0> if(
                        "\tpush_resource(pop_value());" put line,
                        "\tpush_resource(lpop(&lbl_" put
                        tag label-inputs /L1 unwrap name mangled put
                        "));" put line
                    ),
                    "\tpush_value(lpop(&lbl_" put
                    tag label-inputs /L1 unwrap name mangled put
                    "));" put line
                ),

            tag num-total-inputs 0= if(
                tag outputs-resource? if(
                    "\tpush_resource(MKU64(",
                    "\tpush_value(MKU64("
                ) put
                    tag value-show put
                    "LL));" put line
                ,

                "\tTUP* tup = tup_new(" put
                    tag num-total-inputs 1+ show put
                    ");" put line
                "\ttup->size = " put
                    tag num-total-inputs 1+ show put
                    ";" put line
                "\ttup->cells[0] = MKU64(" put
                    tag value-show put
                    "LL);" put line
                tag num-total-inputs
                tag label-inputs reverse-for(
                    "\ttup->cells[" put
                        over show put
                        "] = lpop(&lbl_" put
                        name mangled put
                        ");" put line
                    1-
                )
                tag num-resource-inputs repeat(
                    "\ttup->cells[" put
                        dup show put
                        "] = pop_resource();" put line
                    1-
                )
                tag num-type-inputs repeat(
                    "\ttup->cells[" put
                        dup show put
                        "] = pop_value();" put line
                    1-
                )
                drop
                tag outputs-resource? if(
                    "\tpush_resource(MKTUP(tup, ",
                    "\tpush_value(MKTUP(tup, "
                ) put
                    tag num-total-inputs 1+ show put
                    "));" put line
            ))
        )
        "}" put line
    )

    tag +needs:pat-needed? then(
        tag +mirth:pat-cname sig-put " {" put line
        tag is-transparent? else(
            tag outputs-resource? if(
                "\tVAL val = pop_resource();",
                "\tVAL val = pop_value();"
            ) put line
            tag is-semi-transparent? if(
                tag num-type-inputs 0> if(
                    "\tpush_value(val);" put line,
                    "\tlpush(&lbl_" put
                    tag label-inputs /L1 unwrap name mangled put
                    ", val);" put line
                ),
            tag num-total-inputs 0= if(
                "\t(void)val;" put line,
                "\tASSERT1(IS_TUP(val),val);" put line
                "\tTUP* tup = VTUP(val);" put line
                1
                tag num-type-inputs repeat(
                    "\tpush_value(tup->cells[" put
                        dup show put
                        "]);" put line
                    1+
                )
                tag num-resource-inputs repeat(
                    "\tpush_resource(tup->cells[" put
                        dup show put
                        "]);" put line
                    1+
                )
                tag label-inputs for(
                    "\tlpush(&lbl_" put
                        name mangled put
                        ", tup->cells[" put
                        dup show put
                        "]);" put line
                    1+
                )
                drop
                "\tif (tup->refs > 1) {" put line
                1 tag num-total-inputs repeat(
                    "\t\tincref(tup->cells[" put
                        dup show put
                        "]);" put line
                    1+
                ) drop
                "\t\tdecref(val);" put line
                "\t} else {" put line
                "\t\tfree(tup);" put line
                "\t}" put line
            ))
        )
        "}" put line
    ))))

def(c99-tag-label-index, Tag Label +C99 -- Nat +C99,
    over num-total-inputs 1+
    over2 label-inputs reverse-find(dip(1-) over2 over ==) drop
    dip:drop2)

def(c99-tag-get-label!, Tag Label +C99 -- +C99,
    over is-semi-transparent? if(
        dup2 swap +mirth:project-input-label unwrap match(
            Left -> drop
                over outputs-resource? then(
                    c99-line("VAL v = top_resource();" put)
                    c99-line("incref(v);" put)
                    c99-line("push_value(v);" put)
                ),

            Right -> drop
                c99-line("push_resource(MKU64(0));" put)
        ),

        over outputs-resource? if(
            c99-line("VAL v = pop_resource();" put),
            c99-line("VAL v = pop_value();" put)
        )
        c99-line("ASSERT1(IS_TUP(v), v);" put)
        c99-line("ASSERT1(VTUPLEN(v) == " put
            over num-total-inputs 1+ show put
            ", v);" put)
        c99-line("VAL* p = &VTUP(v)->cells[" put
            dup2 c99-tag-label-index show put
            "];" put)
        c99-line("VAL u = *p;" put)

        dup2 swap +mirth:project-input-label unwrap match(
            Left -> drop
                c99-line("incref(u);" put)
                over outputs-resource? if(
                    c99-line("push_resource(v);" put),
                    c99-line("decref(v);" put)
                )
                c99-line("push_value(u);" put),
            Right -> drop
                c99-line("ASSERT1(VREFS(v) == 1, v);" put)
                c99-line("*p = (VAL){0};" put)
                c99-line("push_resource(u);" put)
                c99-line("push_resource(v);" put)
        )
    ) drop2)

def(c99-tag-set-label!, Tag Label +C99 -- +C99, \(tag lbl ->
    lbl tag +mirth:project-input-label unwrap match(
        Left -> drop
            tag is-semi-transparent? if(
                tag outputs-resource? if(
                    c99-line("VAL v = pop_resource();" put)
                    c99-line("push_resource(pop_value());" put)
                    c99-line("decref(v);" put),

                    c99-line("VAL v = pop_value();" put)
                    c99-line("decref(v);" put)
                ),

                tag outputs-resource? if(
                    c99-line("VAL v = top_resource();" put),
                    c99-line("VAL v = pop_value();" put)
                )
                c99-line("VAL u = pop_value();" put)
                c99-line("ASSERT1(IS_TUP(v), v);" put)
                c99-line("ASSERT1(VTUPLEN(v) == " put
                    tag num-total-inputs 1+ show put
                    ", v);" put)
                tag outputs-resource? if(
                    c99-line("VAL* p = &VTUP(v)->cells[" put
                        tag lbl c99-tag-label-index show put
                        "];" put)
                    c99-line("VAL t = *p; *p = u; decref(t);" put),

                    c99-line("if (VTUP(v)->refs == 1) {" put)
                    c99-nest(
                        c99-line("VAL* p = &VTUP(v)->cells[" put
                            tag lbl c99-tag-label-index show put
                            "];" put)
                        c99-line("VAL t = *p; *p = u; decref(t);" put)
                        c99-line("push_value(v);" put)
                    )
                    c99-line("} else {" put)
                    c99-nest(
                        c99-line("TUP *tup = tup_new(" put
                            tag num-total-inputs 1+ show put
                            ");" put)
                        c99-line("tup->size = " put
                            tag num-total-inputs 1+ show put
                            ";" put)
                        0 >Nat while(dup tag num-total-inputs <=,
                            dup tag lbl c99-tag-label-index == if(
                                c99-line("tup->cells[" put
                                    dup show put
                                    "] = u;" put),
                                c99-line("tup->cells[" put
                                    dup show put
                                    "] = VTUP(v)->cells[" put
                                    dup show put
                                    "]; incref(tup->cells[" put
                                    dup show put
                                    "]);" put)
                            )
                            1+)
                        drop
                        c99-line("decref(v);" put)
                        c99-line("push_value(MKTUP(tup," put
                            tag num-total-inputs 1+ show put
                            "));" put)
                    )
                    c99-line("}" put)
                )
            ),
        Right -> drop
            tag is-semi-transparent? if(
                c99-line("(void)pop_resource();" put),

                c99-line("VAL v = pop_resource();" put)
                c99-line("VAL u = pop_resource();" put)
                c99-line("ASSERT1(IS_TUP(v), v);" put)
                c99-line("ASSERT1(VTUPLEN(v) == " put
                    tag num-total-inputs 1+ show put
                    ", v);" put)
                c99-line("ASSERT1(VREFS(v) == 1, v);" put)
                c99-line("VAL* p = &VTUP(v)->cells[" put
                    tag lbl c99-tag-label-index show put
                    "];" put)
                c99-line("ASSERT1(p->tag == 0, v);" put)
                c99-line("*p = u;" put)
                c99-line("push_resource(v);" put)
            )
    )))

def(c99-external-blocks!, +C99 -- +C99,
    ExternalBlock.for(c99-external-block!))

def(c99-external-block!, ExternalBlock +C99 -- +C99,
    parts for(match(
        EBPCode -> put line,
        EBPDef -> c99-external-def!
    )))

def(c99-external-def!, External +C99 -- +C99,
    >ext
    @ext +mirth:ctype >cty

    @cty cod parts find(dup ctype phantom? not) >outty
    @outty if-some(ctype, Phantom) cname put " " put
    @ext symbol put

    " (" put
    @cty dom parts filter(dup ctype phantom? not)
    match(
        Nil -> "void" put,
        _ -> for(ctype cname put, ", " put)
    )
    ");" put line

    @ext +mirth:cname sig-put " {" put line

    @cty dom parts
    dup len >arg-index
    reverse-for(
        dup ctype phantom? else(
            "\t" put
            dup ctype cname put " " put
            dup c99-arg-name put
            " = " put
        )
        c99-pop
        ";" put line
        @arg-index:1-
    )

    "\t" put
    @outty for(ctype cname put " Y = " put)
    @ext symbol put "(" put

    1 >Nat !arg-index
    @cty dom parts filter-some(
        dup ctype phantom? if(drop None, c99-arg-name Some)
        @arg-index:1+
    )
    for(put, ", " put)
    ");" put line

    @cty cod parts for(
        "\t" put
        dip:"Y" c99-push
        line
    )

    "}" put line

    arg-index> drop
    ext> cty> outty> drop3)

def(CType.c99-pop-value, CType +C99 -- +C99,
    IntLike -> "(" put put ")pop_i64()" put,
    PtrLike -> "(" put put ")pop_ptr()" put,
    FnPtr   -> "(" put put ")pop_fnptr()" put,
    Phantom -> "(void)pop_value()" put )

def(CType.c99-pop-resource, CType +C99 -- +C99,
    IntLike -> "(" put put ")value_i64(pop_resource())" put,
    PtrLike -> "(" put put ")value_ptr(pop_resource())" put,
    FnPtr   -> "(" put put ")value_fnptr(pop_resource())" put,
    Phantom -> "(void)pop_resource()" put)

def(CType.c99-pop-label, Label CType +C99 -- +C99,
    IntLike -> "(" put put ")value_i64(lpop(&lbl_" put name mangled put "))" put,
    PtrLike -> "(" put put ")value_ptr(lpop(&lbl_" put name mangled put "))" put,
    FnPtr   -> "(" put put ")value_fnptr(lpop(&lbl_" put name mangled put "))" put,
    Phantom -> "(void)lpop(&lbl_" put name mangled put ")" put)

def(CType.c99-push-value, Str CType +C99 -- +C99,
    IntLike -> drop "push_i64((int64_t)(" put put "));" put,
    PtrLike -> drop "push_ptr((void*)(" put put "));" put,
    FnPtr   -> drop "push_fnptr((FNPTR)(" put put "));" put,
    Phantom -> drop "push_i64(0);" put)

def(CType.c99-push-resource, Str CType +C99 -- +C99,
    IntLike -> drop "push_resource(MKI64((int64_t)(" put put ")));" put,
    PtrLike -> drop "push_resource(MKPTR((void*)(" put put ")));" put,
    FnPtr   -> drop "push_resource(MKFNPTR((FNPTR)(" put put ")));" put,
    Phantom -> drop "push_resource(MKI64(0));" put)

def(CType.c99-push-label, Str Label CType +C99 -- +C99,
    IntLike ->
        drop "lpush(&lbl_" put name mangled put ", " put
        "MKI64((int64_t)(" put put ")));" put,
    PtrLike ->
        drop "lpush(&lbl_" put name mangled put ", " put
        "MKI64((int64_t)(" put put ")));" put,
    FnPtr ->
        drop "lpush(&lbl_" put name mangled put ", " put
        "MKFNPTR((FNPTR)(" put put ")));" put,
    Phantom ->
        nip "lpush(&lbl_" put name mangled put ", " put
        "MKI64((int64_t)(0)));" put,
    )

def(CTypeStackPart.c99-arg-name, arg-index:Nat CTypeStackPart +C99 -- arg-index:Nat Str +C99,
    label? if-some(
        name mangled,
        Str("X" ; @arg-index show;)
    ))

def(CTypeStackPart.c99-pop, CTypeStackPart +C99 -- +C99,
    CTSPCons -> c99-pop-value,
    CTSPWith -> c99-pop-resource,
    CTSPConsLabel -> swap c99-pop-label,
    CTSPWithLabel -> swap c99-pop-label)

def(CTypeStackPart.c99-push, Str CTypeStackPart +C99 -- +C99,
    CTSPCons -> c99-push-value,
    CTSPWith -> c99-push-resource,
    CTSPConsLabel -> swap c99-push-label,
    CTSPWithLabel -> swap c99-push-label)

    # over countdown("\tintptr_t x" put show put " = (intptr_t)pop_i64();" put line)
    # dup 0> if("\tpush_i64((int64_t)", "\t") put
    # dip2(dup symbol put)
    # "(" put
    # dip(dup 0> if(
    #     dup 1- dup count("x" put show put ", " put) "x" put show put,
    #     id
    # ))
    # ")" put
    # dup 0> if(");", ";") put line
    # "}" put line
    # drop3)

def(c99-nest(f), (*a +C99 -- *b +C99) *a +C99 -- *b +C99,
    depth:1+ f depth:1-)

def(+C99.indent, +C99 -- +C99, depth repeat("\t" put))
def(c99-line(f), (*a +C99 -- *b +C99) *a +C99 -- *b +C99, indent f line)

def(c99-call!, List(Arg) Str +C99 -- +C99,
    dip(c99-args-push!)
    c99-line(put "();" put))

def(c99-arrow!, Arrow +C99 -- +C99, atoms for(c99-atom!))
def(c99-atom!, Atom +C99 -- +C99,
    options emit-debug-info and(dup show-in-stack-trace?) then(
        c99-line("WORD_ATOM(" put
            dup token row >Int show put ", " put
            dup token col >Int show put ", " put
            dup token name? if-some(>Str, "") put-cstr
            ");" put
        )
    )
    sip(args) op
    c99-args-op!)

def(Atom.show-in-stack-trace?, Atom -- Bool,
    op match(
        OpNone -> False,
        OpInt -> drop False,
        OpStr -> drop False,
        OpWord -> prefer-inline? not,
        OpExternal -> drop True,
        OpBuffer -> drop False,
        OpVariable -> drop False,
        OpField -> drop False,
        OpTag -> prefer-inline? not,
        OpPrim -> drop True,
        OpMatch -> drop False,
        OpLambda -> drop False,
        OpVar -> drop False,
        OpBlockPush -> drop False,
        OpBlockRun -> drop False,
        OpCoerce -> drop False,
        OpLabelPush -> drop False,
        OpLabelPop -> drop False,
        OpLabelPushR -> drop False,
        OpLabelPopR -> drop False,
        OpDataGetTag -> drop False,
        OpDataGetLabel -> drop2 False,
        OpDataSetLabel -> drop2 False
    ))

def(c99-args-op!, List(Arg) Op +C99 -- +C99,
    OpNone     -> drop,
    OpInt      -> nip c99-int!,
    OpStr      -> nip c99-str!,
    OpWord     -> c99-word!,
    OpExternal -> +mirth:cname c99-call!,
    OpBuffer   -> +mirth:cname c99-call!,
    OpVariable -> +mirth:cname c99-call!,
    OpField    -> +mirth:cname c99-call!,
    OpTag      -> c99-tag-word!,
    OpPrim     -> c99-prim!,
    OpMatch    -> nip c99-match!,
    OpLambda   -> nip c99-lambda!,
    OpVar      -> nip c99-var!,
    OpBlockPush    -> nip c99-block-push!,
    OpBlockRun      -> nip c99-block-run!,
    OpCoerce   -> drop2,
    OpLabelPush -> nip c99-label-push!,
    OpLabelPop  -> nip c99-label-pop!,
    OpLabelPushR -> nip c99-label-push-r!,
    OpLabelPopR  -> nip c99-label-pop-r!,
    OpDataGetTag -> c99-get-data-tag!,
    OpDataGetLabel -> c99-tag-get-label! drop,
    OpDataSetLabel -> c99-tag-set-label! drop)

def(c99-get-data-tag!, List(Arg) Data +C99 -- +C99,
    nip dup is-enum? or(dup is-unit?) else(
        c99-line("{" put)
        c99-nest(
            c99-line("VAL val = pop_value();" put)
            dup is-semi-transparent? if(
                c99-line(
                    "push_u64(" put
                    dup tags /L1 unwrap value show put
                    "LL);" put),

                c99-line("USIZE tag = get_data_tag(val);" put)
                c99-line("push_u64(tag);" put )
            )
            c99-line("decref(val);" put)
        )
        c99-line("}" put)
    ) drop)

def(c99-word!, List(Arg) Word +C99 -- +C99,
    dup prefer-inline? if(
        dip:c99-args-push!
        +mirth:arrow c99-arrow!,
        +mirth:cname c99-call!
    ))

field(Tag.~value-show, Tag, Str)
def(Tag.value-show, Tag -- Str, dup ~value-show memoize(dup value show) nip)

def(c99-tag-word!, List(Arg) Tag +C99 -- +C99,
    dup prefer-inline? if(
        dup .data is-transparent? else(
            c99-line(
                dup outputs-resource? if(
                    "push_resource(MKU64(" put
                    dup value-show put
                    "LL)); // " put,
                    "push_u64(" put
                    dup value-show put
                    "LL); // " put
                )
                dup name >Str put
            )
        ) drop2,
        +mirth:word-cname c99-call!
    ))

def(c99-tag-case-pat!, Tag +C99 -- +C99,
    c99-line("case " put dup value-show put "LL: // " put dup name >Str put)
    c99-nest(
        dup prefer-inline? if(
            dup .data is-transparent? else(
                c99-line(
                    dup outputs-resource? if(
                        "(void)pop_resource();",
                        "(void)pop_u64();"
                    ) put
                )
            ) drop,
            dip:L0 +mirth:pat-cname c99-call!
        )
    ))

def(c99-label-defs!, +C99 -- +C99, Label.for(c99-label-def!))
def(c99-label-def!, Label +C99 -- +C99, "static VAL lbl_" put name mangled put " = MKNIL_C;" put line)
def(c99-label-push!, Label +C99 -- +C99, c99-line("LPUSH(lbl_" put name mangled put ");" put))
def(c99-label-pop!, Label +C99 -- +C99, c99-line("LPOP(lbl_" put name mangled put ");" put))
def(c99-label-push-r!, Label +C99 -- +C99, c99-line("LPUSHR(lbl_" put name mangled put ");" put))
def(c99-label-pop-r!, Label +C99 -- +C99, c99-line("LPOPR(lbl_" put name mangled put ");" put))

def(c99-int!, Int +C99 -- +C99,
    c99-line("push_i64(" put show put "LL);" put))

def(c99-str!, Str +C99 -- +C99,
    dup num-bytes 4090 >Size > if(
        c99-line("STRLIT(" put)
        c99-nest(
            c99-line(dup put-cstr-long "," put)
            c99-line(dup num-bytes show put)
        )
        c99-line(");" put),

        c99-line("STRLIT(" put
            dup put-cstr ", " put
            dup num-bytes show put ");" put)
    ) drop)

def(+C99.put-cstr-long, Str +C99 -- +C99,
    False >avoid-hexdigit
    BQUOTE put-byte
    BNUL swap bytes-for(
        swap BLF == then(
            BQUOTE put-byte
            line indent
            BQUOTE put-byte
        )
        dup c99-string-byte!
    )
    BQUOTE put-byte
    avoid-hexdigit> drop2)

def(+C99.put-cstr, Str +C99 -- +C99,
    False >avoid-hexdigit
    BQUOTE put-byte bytes-for(c99-string-byte!) BQUOTE put-byte
    avoid-hexdigit> drop)

def(c99-string-byte!, Byte avoid-hexdigit:Bool +C99 -- avoid-hexdigit:Bool +C99,
    B'\' ->   "\\\\" put False !avoid-hexdigit,
    BQUOTE -> "\\\"" put False !avoid-hexdigit,
    BHT ->    "\\t"  put False !avoid-hexdigit,
    BLF ->    "\\n"  put False !avoid-hexdigit,
    BCR ->    "\\r"  put False !avoid-hexdigit,
    _ ->
        dup BSPACE B'~' in-range
        and(dup is-hexdigit @avoid-hexdigit && not) if(
            put-byte
            False !avoid-hexdigit,
            "\\x" put to-hexdigits dip(put-byte) put-byte
            True !avoid-hexdigit
        )
    )

def(c99-prim!, List(Arg) Prim +C99 -- +C99,
    PRIM_CORE_ID -> drop,
    PRIM_CORE_DIP ->
        dup /L1 match(
            Some ->
                nip
                c99-line("{" put)
                c99-nest(
                    c99-line("VAL d" put depth show put " = pop_value();" put)
                    c99-arg-run!
                    c99-line("push_value(d" put depth show put ");" put)
                )
                c99-line("}" put),
            None ->
                PRIM_CORE_DIP c99-prim-default!
        ),

    PRIM_CORE_RDIP ->
        dup /L1 match(
            Some ->
                nip
                c99-line("{" put)
                c99-nest(
                    c99-line("VAL d" put depth show put " = pop_resource();" put)
                    c99-arg-run!
                    c99-line("push_resource(d" put depth show put ");" put)
                )
                c99-line("}" put),
            None ->
                PRIM_CORE_RDIP c99-prim-default!
        ),

    PRIM_CORE_IF ->
        dup /L2 match(
            Some ->
                nip unpack2
                c99-line("if (pop_u64()) {" put)
                c99-nest(swap c99-arg-run!)
                c99-line("} else {" put)
                c99-nest(c99-arg-run!)
                c99-line("}" put),
            None ->
                PRIM_CORE_IF c99-prim-default!
        ),

    PRIM_CORE_WHILE ->
        dup /L2 match(
            Some ->
                nip unpack2
                c99-line("while(1) {" put)
                c99-nest(
                    swap c99-arg-run!
                    c99-line("if (! pop_u64()) break;" put)
                    c99-arg-run!
                )
                c99-line("}" put),

            None ->
                PRIM_CORE_WHILE c99-prim-default!
        ),

    _ -> c99-prim-default!)

def(c99-prim-default!, List(Arg) Prim +C99 -- +C99,
    cname c99-call!)

def(c99-args-push!, List(Arg) +C99 -- +C99,
    for(c99-arg-push!))

def(c99-arg-push!, Arg +C99 -- +C99,
    ArgBlock -> c99-block-push!)

def(c99-arg-run!, Arg +C99 -- +C99,
    ArgBlock -> c99-block-run!)

def(c99-block-run!, Block +C99 -- +C99,
    +mirth:arrow c99-arrow!)

def(+C99.var-put, Var +C99 -- +C99, "var_" put name mangled put)

def(c99-pack-closure-vars!, List(Var) +C99 -- +C99,
    filter(dup is-physical?) for(
        c99-var-push!
        L0 PRIM_PACK_CONS cname c99-call!
    ))

def(c99-unpack-closure-vars!, List(Var) +C99 -- +C99,
    filter(dup is-physical?) dup empty? if(
        drop,
        reverse-for(
            L0 PRIM_PACK_UNCONS cname c99-call!
            c99-line("VAL " put var-put " = pop_value();" put)
        )
        c99-line("pop_value();" put)
    ))

def(c99-decref-closure-vars!, List(Var) +C99 -- +C99,
    filter(dup is-physical?) reverse-for(
        c99-line("decref(" put var-put ");" put)
    ))

def(c99-block-push!, Block +C99 -- +C99,
    dup +mirth:to-run-var match(
        Some -> nip c99-var-push!,
        None ->
            c99-line("push_fnptr(&" put dup +mirth:cname put ");" put)
            dup +mirth:free-vars c99-pack-closure-vars!
            drop
    ))

def(c99-var!, Var +C99 -- +C99,
    dup auto-run? if(c99-var-run!, c99-var-push!))

def(c99-var-run!, Var +C99 -- +C99,
    c99-line("incref(" put dup var-put ");" put)
    c99-line("run_value(" put dup var-put ");" put)
    drop)

def(c99-var-push!, Var +C99 -- +C99,
    c99-line("incref(" put dup var-put ");" put)
    c99-line("push_value(" put dup var-put ");" put)
    drop)

def(c99-lambda!, Lambda +C99 -- +C99,
    c99-line("{" put)
    c99-nest(
        dup params reverse-for(
            c99-line("VAL " put var-put " = pop_value();" put)
        )
        dup body c99-arrow!
        params reverse-for(
            c99-line("decref(" put var-put ");" put)
        )
    )
    c99-line("}" put))

def(c99-match!, Match +C99 -- +C99,
    dup is-transparent? if(
        cases first unwrap body c99-arrow!,

    dup semi-transparent-tag? if-some(
        dip:L0 +mirth:pat-cname c99-call!
        cases first unwrap body c99-arrow!,

        dup scrutinee-data?
        unwrap-or(token "non-uniform match, not supported at present" +mirth:emit-fatal-error!)
        is-resource? if(
            c99-line("switch (get_top_resource_data_tag()) {" put),
            c99-line("switch (get_top_data_tag()) {" put)
        )
        c99-nest(
            dup cases for(c99-case!)
            has-default-case? else(
                c99-line("default:" put)
                c99-nest(
                    c99-line("push_value(mkstr(\"unexpected fallthrough in match\\n\", 32)); " put)
                    L0 PRIM_CORE_PANIC cname c99-call!
                )
            )
        )
        c99-line("}" put)
    )))

def(c99-case!, Case +C99 -- +C99,
    dup pattern c99-pattern!
    c99-nest(
        body c99-arrow!
        c99-line("break;" put)
    ))

def(c99-pattern!, Pattern +C99 -- +C99,
    dup is-default? if(
        drop c99-line("default:" put),

    dup single-tag? if-some(
        nip c99-tag-case-pat!,

        token-start "c99 target -- don't know how to compile this pattern"
        +mirth:emit-fatal-error!
    )))

def(c99-word-sigs!, +C99 -- +C99, Word.for(dup +needs(needed?) if(c99-word-sig!, drop)))
def(c99-word-sig!, Word +C99 -- +C99, c99-line(+mirth:cname sig-put ";" put))

def(c99-block-sigs!, +C99 -- +C99, Block.for(dup +needs(needed?) if(c99-block-sig!, drop)))
def(c99-block-sig!, Block +C99 -- +C99, c99-line(+mirth:cname sig-put ";" put))

def(c99-field-sigs!, +C99 -- +C99, Field.for(c99-field-sig!))
def(c99-field-sig!, Field +C99 -- +C99, c99-line(+mirth:cname sig-put ";" put))

def(c99-block-enter!, Block +C99 -- +C99,
    options emit-debug-info if(
        c99-line("WORD_ENTER(" put
            dup +mirth:cname put ", " put
            dup home match(
                HomeMain -> drop "block",
                HomeWord -> name >Str " block" cat,
            ) put-cstr ", " put
            dup token .module source-path >Str put-cstr ", " put
            dup token row >Int show put ", " put
            dup token col >Int show put ");" put
        ) drop,
        drop
    ))

def(c99-block-exit!, Block +C99 -- +C99,
    options emit-debug-info if(
        c99-line("WORD_EXIT(" put +mirth:cname put ");" put),
        drop
    ))

def(c99-block-defs!, +C99 -- +C99, Block.for(dup +needs(needed?) if(c99-block-def!, drop)))
def(c99-block-def!, Block +C99 -- +C99,
    c99-line(dup +mirth:cname sig-put " {" put)
    c99-nest(
        dup c99-block-enter!
        dup +mirth:arrow
        dup +mirth:free-vars c99-unpack-closure-vars!
        dup c99-arrow!
        +mirth:free-vars c99-decref-closure-vars!
        c99-block-exit!
    )
    c99-line("}" put))

def(c99-word-enter!, Word +C99 -- +C99,
    options emit-debug-info if(
        c99-line(
            "WORD_ENTER(" put
            dup +mirth:cname put ", " put
            dup name >Str put-cstr ", " put
            dup body .module source-path >Str put-cstr ", " put
            dup body row >Int show put ", " put
            dup body col >Int show put ");" put
        ) drop,
        drop
    ))

def(c99-word-exit!, Word +C99 -- +C99,
    options emit-debug-info if(
        c99-line("WORD_EXIT(" put +mirth:cname put ");" put),
        drop
    ))

def(c99-word-defs!, +C99 -- +C99, Word.for(dup +needs(needed?) if(c99-word-def!, drop)))
def(c99-word-def!, Word +C99 -- +C99,
    c99-line(dup +mirth:cname sig-put " {" put)
    c99-nest(
        dup c99-word-enter!
        dup +mirth:arrow c99-arrow!
        dup c99-word-exit!
    )
    c99-line("}" put)
    drop)

def(c99-field-defs!, +C99 -- +C99, Field.for(c99-field-def!))
def(c99-field-def!, Field +C99 -- +C99,
    dup +mirth:cname sig-put " {" put line
    "\tsize_t i = (size_t)pop_u64();" put line
    "\tstatic struct VAL * p = 0;" put line
    "\tsize_t m = " put TABLE_MAX_COUNT show put ";" put line
    "\tif (! p) { p = calloc(m, sizeof *p); }" put line
    "\tEXPECT(i<m, \"table grew too big\");" put line
    "\tpush_ptr(p+i);" put line
    "}" put line line
    drop)

def(c99-main!, Arrow +C99 -- +C99,
    c99-line("int main (int argc, char** argv) {" put)
    c99-nest(
        c99-line("global_argc = argc;" put)
        c99-line("global_argv = argv;" put)
        c99-line("push_resource(MKU64(0));" put) # world
        options emit-debug-info then(
            c99-line("WORD_ENTER(" put
                "(void(*)(void))0, " put
                "\"<main>\", " put
                dup token-start .module source-path >Str put-cstr ", " put
                dup token-start row >Int show put ", " put
                dup token-start col >Int show put ");" put)
        )
        c99-arrow!
        options emit-debug-info then(
            c99-line("WORD_EXIT((void(*)(void))0);" put)
        )
        c99-line("return 0;" put)
    )
    c99-line("}" put))
