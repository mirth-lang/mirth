module(mirth.external)

import(std.prelude)
import(std.list)
import(std.maybe)

import(mirth.type)
import(mirth.token)
import(mirth.name)
import(mirth.var)
import(mirth.mirth)

# mirth/data/external
table(External)
field(External.~name, External, Name)
field(External.~arity, External, Int)
field(External.~qname, External, Prop(QName))
field(External.~symbol, External, Str)
field(External.~head, External, Token)
field(External.~sig, External, Token)
field(External.~ctx-type, External, Prop([Ctx ArrowType]))
field(External.~ctype, External, Prop(CTypeArrow))

def(External.qname-soft, External -- Maybe(QName), ~qname @? bind(ready?))
def(External.qname-hard, +Mirth External -- +Mirth QName, ~qname force!)
def(External.name, External -- Name, ~name @)
def(External.arity, External -- Int, ~arity @)
def(External.symbol, External -- Str, ~symbol @)
def(External.head, External -- Token, ~head @)
def(External.sig, External -- Token, ~sig @)
def(External.ctx-type, +Mirth External -- +Mirth Ctx ArrowType, ~ctx-type force! unpack2)
def(External.ctx, +Mirth External -- +Mirth Ctx, ctx-type drop)
def(External.type, +Mirth External -- +Mirth ArrowType, ctx-type nip)
def(External.ctype, +Mirth External -- +Mirth CTypeArrow, ~ctype force!)

def(External.==, External External -- Bool, both(index) ==)

table(ExternalBlock)
field(ExternalBlock.~token, ExternalBlock, Token)
field(ExternalBlock.~parts, ExternalBlock, List(ExternalBlockPart))
def(ExternalBlock.parts, ExternalBlock -- List(ExternalBlockPart), ~parts @)

data(ExternalBlockPart,
    EBPCode -> Str,
    EBPDef -> External)
