module mirth.external

import std.prelude
import std.list
import std.maybe

import mirth.type
import mirth.token
import mirth.name
import mirth.var
import mirth.mirth

table(External)
patch External {
    field(~doc, External, Maybe(Str))
    field(~name, External, Name)
    field(~arity, External, Int)
    field(~qname, External, Prop(QName))
    field(~symbol, External, Str)
    field(~head, External, Token)
    field(~sig, External, Token)
    field(~ctx-type, External, Prop([Ctx ArrowType]))
    field(~ctype, External, Prop(CTypeArrow))

    def doc        [ +Mirth |- External -- Maybe(Str)    ] { ~doc @ }
    def qname-soft [ +Mirth |- External -- Maybe(QName)  ] { ~qname @? bind(ready?) }
    def qname-hard [ +Mirth |- External -- QName         ] { ~qname force! }
    def name       [ +Mirth |- External -- Name          ] { ~name @ }
    def arity      [ +Mirth |- External -- Int           ] { ~arity @ }
    def symbol     [ +Mirth |- External -- Str           ] { ~symbol @ }
    def head       [ +Mirth |- External -- Token         ] { ~head @ }
    def sig        [ +Mirth |- External -- Token         ] { ~sig @ }
    def ctx-type   [ +Mirth |- External -- Ctx ArrowType ] { ~ctx-type force! unpack2 }
    def ctx        [ +Mirth |- External -- Ctx           ] { ctx-type drop }
    def type       [ +Mirth |- External -- ArrowType     ] { ctx-type nip }
    def ctype      [ +Mirth |- External -- CTypeArrow    ] { ~ctype force! }

    def = [ External External -- Bool ] { both(index) = }
}

table(ExternalBlock)
patch ExternalBlock {
    field(~doc, ExternalBlock, Maybe(Str))
    field(~token, ExternalBlock, Token)
    field(~parts, ExternalBlock, List(ExternalBlockPart))

    def doc   [ +Mirth |- ExternalBlock -- Maybe(Str)              ] { ~doc @ }
    def token [ +Mirth |- ExternalBlock -- Token                   ] { ~token @ }
    def parts [ +Mirth |- ExternalBlock -- List(ExternalBlockPart) ] { ~parts @ }
}

data(ExternalBlockPart,
    EBPCode -> Str,
    EBPDef -> External)
