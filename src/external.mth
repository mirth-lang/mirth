module mirth.external

import std.prelude
import std.list
import std.maybe

import mirth.type
import mirth.token
import mirth.name
import mirth.var
import mirth.mirth

# mirth/data/external
table(External)
field(External.~doc, External, Maybe(Str))
field(External.~name, External, Name)
field(External.~arity, External, Int)
field(External.~qname, External, Prop(QName))
field(External.~symbol, External, Str)
field(External.~head, External, Token)
field(External.~sig, External, Token)
field(External.~ctx-type, External, Prop([Ctx ArrowType]))
field(External.~ctype, External, Prop(CTypeArrow))

def(External.doc, +Mirth External -- +Mirth Maybe(Str), ~doc @)
def(External.qname-soft, +Mirth External -- +Mirth Maybe(QName), ~qname @? bind(ready?))
def(External.qname-hard, +Mirth External -- +Mirth QName, ~qname force!)
def(External.name, +Mirth External -- +Mirth Name, ~name @)
def(External.arity, +Mirth External -- +Mirth Int, ~arity @)
def(External.symbol, +Mirth External -- +Mirth Str, ~symbol @)
def(External.head, +Mirth External -- +Mirth Token, ~head @)
def(External.sig, +Mirth External -- +Mirth Token, ~sig @)
def(External.ctx-type, +Mirth External -- +Mirth Ctx ArrowType, ~ctx-type force! unpack2)
def(External.ctx, +Mirth External -- +Mirth Ctx, ctx-type drop)
def(External.type, +Mirth External -- +Mirth ArrowType, ctx-type nip)
def(External.ctype, +Mirth External -- +Mirth CTypeArrow, ~ctype force!)

def(External.=, External External -- Bool, both(index) =)

table(ExternalBlock)
field(ExternalBlock.~doc, ExternalBlock, Maybe(Str))
field(ExternalBlock.~token, ExternalBlock, Token)
field(ExternalBlock.~parts, ExternalBlock, List(ExternalBlockPart))

def(ExternalBlock.doc, +Mirth ExternalBlock -- +Mirth Maybe(Str), ~doc @)
def(ExternalBlock.token, +Mirth ExternalBlock -- +Mirth Token, ~token @)
def(ExternalBlock.parts, +Mirth ExternalBlock -- +Mirth List(ExternalBlockPart), ~parts @)

data(ExternalBlockPart,
    EBPCode -> Str,
    EBPDef -> External)
