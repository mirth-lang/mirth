module(mirth)

import(prelude)
import(platform.posix)
import(data.path)
import(data.str)
import(mirth.data.error)
import(mirth.data.prim)
import(mirth.data.type)
import(mirth.lexer)
import(mirth.elab)

def(init!, --,
    init-errors!
    init-paths!
    init-types!
    init-prims!
    init-elab!)

########
# Main #
########

def(compile!, Path +World -- +World,
    "Compiling " trace!
    dup >Str trace-ln!

    run-lexer!

    # show-names-table!
    # show-tokens!

    "Building." trace-ln!

    elab-module! drop
    typecheck-everything!

    num-errors @ 0> if(
        num-errors @ trace!
        " errors." trace-ln!
        1 posix-exit!,

        "Done." trace-ln!
    ))

def(main, +World -- +World,
    init!

    # argc int-trace-ln!
    # 0 while(dup argc <,
    #     dup argv ptr@@ str-trace-ln!
    #     1+
    # ) drop

    expect!(argc 2 =, "expected one argument")
    1 argv @@Ptr str-copy-cstr >Path compile!)

#########
# Build #
#########

target-c99("mirth.c", main)
