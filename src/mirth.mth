module(mirth)

import(prelude)
import(platform.posix)
import(mirth.input)
import(mirth.lexer)
import(mirth.codegen)
import(mirth.elab)

import(data.path)
import(mirth.data.prim)
import(mirth.data.type)

def(init!, +IO,
    init-paths!
    init-prims!
    init-types!)

########
# Main #
########

def(compile!, Path -- +IO,
    "Compiling " str-trace!
    dup Path->Str str-trace-ln!

    run-lexer!

    # show-names-table!
    # show-tokens!

    "Building." str-trace-ln!

    elab-module! drop
    typecheck-everything!

    num-errors@ 0 > if(
        num-errors@ int-trace!
        " errors." str-trace-ln!
        1 posix-exit!,

        "Done." str-trace-ln!
    ))

def(main, +IO,
    init!

    # argc int-trace-ln!
    # 0 while(dup argc <,
    #     dup argv ptr@@ str-trace-ln!
    #     1+
    # ) drop

    1 argc < if(
        1 argv ptr@@ Ptr->Str Str->Path compile!,
        "Expected at least one argument" panic!)


    )

#########
# Build #
#########

target-c99("mirth.c", main)
