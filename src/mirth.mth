||| Defines the +Mirth resource.
module mirth.mirth

import std.prelude
import std.world
import std.list
import std.str
import std.terminal
import std.maybe
import std.output
import std.path
import std.either
import std.file

import mirth.mirth
import mirth.location
import mirth.word
import mirth.arrow
import mirth.token
import mirth.data
import mirth.alias
import mirth.external
import mirth.buffer
import mirth.table
import mirth.package
import mirth.module
import mirth.type
import mirth.typedef
import mirth.prim
import mirth.name
import mirth.macro

struct Builtin {
    std: Package
    prim: Module

    cchar:      Data  mk-cchar:      Tag
    cichar:     Data  mk-cichar:     Tag
    cshort:     Data  mk-cshort:     Tag
    cint:       Data  mk-cint:       Tag
    clong:      Data  mk-clong:      Tag
    clonglong:  Data  mk-clonglong:  Tag
    cisize:     Data  mk-cisize:     Tag
    cintptr:    Data  mk-cintptr:    Tag
    cuchar:     Data  mk-cuchar:     Tag
    cushort:    Data  mk-cushort:    Tag
    cuint:      Data  mk-cuint:      Tag
    culong:     Data  mk-culong:     Tag
    culonglong: Data  mk-culonglong: Tag
    cusize:     Data  mk-cusize:     Tag
    cuintptr:   Data  mk-cuintptr:   Tag

    cptr:       Data  mk-cptr:       Tag
    cconst:     Data  mk-cconst:     Tag
    crestrict:  Data  mk-crestrict:  Tag
    cvolatile:  Data  mk-cvolatile:  Tag
    cvoid:      Data  mk-cvoid:      Tag
}

def Builtin.Alloc! [ -- Builtin ] {
    Package.alloc! >std
    Module.alloc! >prim

    Data.alloc! >cchar       Tag.alloc! >mk-cchar
    Data.alloc! >cichar      Tag.alloc! >mk-cichar
    Data.alloc! >cshort      Tag.alloc! >mk-cshort
    Data.alloc! >cint        Tag.alloc! >mk-cint
    Data.alloc! >clong       Tag.alloc! >mk-clong
    Data.alloc! >clonglong   Tag.alloc! >mk-clonglong
    Data.alloc! >cisize      Tag.alloc! >mk-cisize
    Data.alloc! >cintptr     Tag.alloc! >mk-cintptr
    Data.alloc! >cuchar      Tag.alloc! >mk-cuchar
    Data.alloc! >cushort     Tag.alloc! >mk-cushort
    Data.alloc! >cuint       Tag.alloc! >mk-cuint
    Data.alloc! >culong      Tag.alloc! >mk-culong
    Data.alloc! >culonglong  Tag.alloc! >mk-culonglong
    Data.alloc! >cusize      Tag.alloc! >mk-cusize
    Data.alloc! >cuintptr    Tag.alloc! >mk-cuintptr

    Data.alloc! >cptr        Tag.alloc! >mk-cptr
    Data.alloc! >cconst      Tag.alloc! >mk-cconst
    Data.alloc! >crestrict   Tag.alloc! >mk-crestrict
    Data.alloc! >cvolatile   Tag.alloc! >mk-cvolatile
    Data.alloc! >cvoid       Tag.alloc! >mk-cvoid

    Builtin
}

struct LexicalState {
    error-token: Maybe(Token)
    defining-namespace: Maybe(Prop(Namespace))
}

struct +Mirth {
    num-errors: Nat
    num-warnings: Nat
    builtin: Builtin
    mirth-base-path: Maybe(Path)
    package-search-paths: List(Path)
    prefer-inline-defs: Bool
    lexical-state: LexicalState
    +diagnostics: +Lister(Diagnostic)
    +propstack: +Lister(PropLabel)
    +namehashmap: +NameHashMap
    --

    def Init! [ -- +Mirth ] {
        0u >num-errors
        0u >num-warnings
        False >prefer-inline-defs
        Builtin.Alloc! >builtin
        None >mirth-base-path
        L0 >package-search-paths
        +Lister.+Nil >+diagnostics
        +Lister.+Nil >+propstack
        None >error-token
        None >defining-namespace
        LexicalState >lexical-state
        +NameHashMap.new >+namehashmap
        +Mirth
        init-packages!
        init-modules!
        init-types!
        init-prims!
        init-macros!
    }

    def quit! [ +Mirth -- ] {
        /+Mirth
        num-errors> drop
        num-warnings> drop
        prefer-inline-defs> drop
        builtin> drop
        mirth-base-path> drop
        package-search-paths> drop
        lexical-state> drop
        +diagnostics> rdrop
        +propstack> rdrop
        +namehashmap> rdrop
    }

    def mirth-base-lib-path [ +World +Mirth |- Maybe(Path) ] {
        mirth-base-path map("lib" >Path rdip:join)
    }

    def emit-diagnostic-at! [ +Mirth |- Location Str Severity -- ] {
        >severity >message >location
        @severity match {
            { Info    -> id }
            { Warning -> num-warnings:1+ }
            { Error   -> num-errors:1+ }
        }
        Diagnostic +diagnostics:push!
    }


    def emit-info-at!        [ +Mirth |- Location Str -- ] { Severity.Info    emit-diagnostic-at! }
    def emit-warning-at!     [ +Mirth |- Location Str -- ] { Severity.Warning emit-diagnostic-at! }
    def emit-error-at!       [ +Mirth |- Location Str -- ] { Severity.Error   emit-diagnostic-at! }
    def emit-fatal-error-at! [ *a +Mirth Location Str -- *b ] { emit-error-at! panic-diagnostics! }

    def emit-info!        [ +Mirth |- Token Str -- ] { dip(location) emit-info-at! }
    def emit-warning!     [ +Mirth |- Token Str -- ] { dip(location) emit-warning-at! }
    def emit-error!       [ +Mirth |- Token Str -- ] { dip(location) emit-error-at! }
    def emit-fatal-error! [ *a +Mirth Token Str -- *b ] { dip(location) emit-fatal-error-at! }

    def emit-deprecated! [ +Mirth |- Token old:Str new:Str -- ] {
        Str(Sgr.FGCyan span(old> ;) " is deprecated, please use ";
            Sgr.FGCyan span(new> ;) " instead.";) emit-warning!
    }

    def error-token! [ +Mirth |- Token -- ] {
        Some lexical-state:error-token!
    }

    def with-error-token(f) [ +Mirth |- (*a -- *b) *a Token -- *b ] {
        lexical-state:error-token(swap Some) dip(f) lexical-state:error-token!
    }

    def default-error-location [ +Mirth |- Location ] {
        builtin prim >module
        0 Row >row
        0 Col >col
        Location
    }

    def error-location [ +Mirth |- Location ] {
        lexical-state error-token if?(location, default-error-location)
    }

    def info!        [ +Mirth |- Str --    ] { error-location swap emit-info-at!        }
    def warning!     [ +Mirth |- Str --    ] { error-location swap emit-warning-at!     }
    def error!       [ +Mirth |- Str --    ] { error-location swap emit-error-at!       }
    def fatal-error! [ *a +Mirth Str -- *b ] { error-location swap emit-fatal-error-at! }

    def io-error! [ *a IOError +World +Mirth -- *b ] { rdip:message fatal-error! }

    def panic-diagnostics! [ *a +Mirth -- *b ] {
        pop-diagnostics! Str(
            for(diagnostic; "\n";)
            Sgr.FGRed span( "Fatal error. Stopping early."; )
        ) panic!
    }

    def trace-diagnostics! [ +World +Mirth |- ] {
        pop-diagnostics!
        for(Str(diagnostic;) rdip:trace)
    }

    def pop-diagnostics! [ +Mirth |- List(Diagnostic) ] {
        +diagnostics:pop-all!
    }

    def with-lexical-state(f) [ +Mirth |- (*a -- *b) *a LexicalState -- *b ] {
        lexical-state:swap dip(f) lexical-state!
    }

    def with-defining-namespace(f) [ +Mirth |- (*a -- *b) *a Maybe(Prop(Namespace)) -- *b ] {
        lexical-state:defining-namespace:swap
        dip(f) lexical-state:defining-namespace!
    }
}

struct Diagnostic {
    severity: Severity
    location: Location
    message: Str
    --
    def Diagnostic.diagnostic; [ +Mirth +Str |- Diagnostic -- ] {
        /Diagnostic
        location> emit; ": " ;
        severity> >Str ; ": " ;
        message> ;
    }
}

data Severity {
    Info
    Warning
    Error
    --
    def >Str [ Severity -- Str ] {
        { Info    -> "info"    }
        { Warning -> "warning" }
        { Error   -> "error"   }
    }
}



#########
# PROPS #
#########

struct Prop(t) {
    label: PropLabel
    state: PropState(t)
    --
    ||| Is the value ready?
    def ready? [ Prop(t) -- Maybe(t) ] { state ready? }

    ||| Compute prop value without regard for cycles. This may fail or run forever.
    def compute [ +Mirth |- Prop(t) -- Maybe(t) Prop(t) ] { state:compute }

    ||| Compute prop value but detect cycles. Returns None if cycle is detected.
    def try-force! [ +Mirth |- Mut(Prop(t)) -- Maybe(t) ] {
        dup @ >prop
        @prop state match {
            { Ready -> prop> drop nip Some }
            { Delay ->
                prop> label +propstack:push!
                rotl with-lexical-state(
                    rotl
                    PropState.Computing over modify:state!
                    dip(run dup PropState.Ready) modify:state!
                    Some
                )
                +propstack:pop! drop
            }
            { Computing ->
                prop> drop2
                None
            }
        }
    }

    ||| Compute prop value. If a cycle is detected, it panics.
    def force! [ +Mirth |- Mut(Prop(t)) -- t ] {
        try-force! unwrap(
            +propstack:reversed
            Str("Recursive prop detected:" ;
                reverse-for("\n  - " ; trace;)
            ) fatal-error!
        )
    }

    ||| Compute prop value. If a cycle is detected, fall back on function.
    def force-or!(f) [ *a +Mirth |- (-- b) Mut(Prop(b)) -- b ] {
        try-force! unwrap(f)
    }
}

data PropState(b) {
    Ready [ b ]
    Delay [ LexicalState a [ a +Mirth -- b +Mirth ] ]
    Computing
    --
    def ready? [ PropState(b) -- Maybe(b) ] { Ready -> Some, _ -> drop None }
    def compute [ +Mirth |- PropState(t) -- Maybe(t) PropState(t) ] {
        dup match {
            { Ready -> Some swap }
            { Delay -> dip3:drop rotl with-lexical-state:run dup Some swap PropState.Ready }
            { Computing -> None swap }
        }
    }
}

data PropLabel {
    DefiningNamespace
    DataQName      [ Data ]
    DataParams     [ Data ]
    DataCType      [ Data ]
    TagType        [ Tag ]
    TableQName     [ Table ]
    TypeDefQName   [ TypeDef ]
    TypeDefTarget  [ TypeDef ]
    WordQName      [ Word ]
    WordType       [ Word ]
    WordParams     [ Word ]
    WordArrow      [ Word ]
    BlockArrow     [ Block ]
    AliasQName     [ Alias ]
    AliasTarget    [ Alias ]
    ExternalQName  [ External ]
    ExternalType   [ External ]
    ExternalCType  [ External ]
    BufferQName    [ Buffer ]
    TableOwner     [ Table ]
    FieldOwner     [ Field ]
    FieldQName     [ Field ]
    FieldValueType [ Field ]
    FieldIndexType [ Field ]
    MacroQName     [ Macro ]
    --
    def trace; [ +Mirth +Str PropLabel -- +Mirth +Str ] {
        { DefiningNamespace -> "defining namespace"; }
        { DataQName      -> "data qname at " ; rdip:head? location?; }
        { DataParams     -> "data params at " ; rdip:head? location?; }
        { DataCType      -> "data ctype at " ; rdip:head? location?; }
        { TagType        -> "tag ctype at " ; rdip:sig? location?; }
        { TableQName     -> "table qname at " ; rdip:head location; }
        { TypeDefQName   -> "type qname at " ; rdip:head? location?; }
        { TypeDefTarget  -> "type target at " ; rdip:head? location?; }
        { WordQName      -> "word qname at " ; rdip:head location; }
        { WordType       -> "word type at " ; rdip:head location; }
        { WordParams     -> "word params at " ; rdip:head location; }
        { WordArrow      -> "word arrow at " ; rdip:head location; }
        { BlockArrow     -> "block arrow at " ; rdip:token location; }
        { AliasQName     -> "alias qname at " ; rdip:head location; }
        { AliasTarget    -> "alias target at " ; rdip:head location; }
        { ExternalQName  -> "external qname at " ; rdip:head location; }
        { ExternalType   -> "external type at " ; rdip:head location; }
        { ExternalCType  -> "external ctype at " ; rdip:head location; }
        { BufferQName    -> "buffer qname at " ; rdip:head location; }
        { TableOwner     -> "table owner at " ; rdip:head location; }
        { FieldOwner     -> "field owner at " ; rdip:head location; }
        { FieldQName     -> "field qname at " ; rdip:head location; }
        { FieldValueType -> "field value type at " ; rdip:head location; }
        { FieldIndexType -> "field index type at " ; rdip:head location; }
        { MacroQName     -> "macro qname at " ; rdip:head? location?; }
    }

    def prop  [ +Mirth |- b PropLabel -- Prop(b) ] { >label PropState.Ready >state Prop }
    def prop2 [ +Mirth |- b1 b2 PropLabel -- Prop([b1 b2]) ] { dip:pack2 prop }
    def prop3 [ +Mirth |- b1 b2 b3 PropLabel -- Prop([b1 b2 b3]) ] { dip:pack3 prop }

    def prop(f)  [ +Mirth |- ( a -- b ) a PropLabel -- Prop(b) ] {
        >label lexical-state swap [f] PropState.Delay >state Prop
    }
    def prop0(f) [ +Mirth |- (             -- b )             PropLabel -- Prop(b) ] { dip:pack0 prop(unpack0 f) }
    def prop2(f) [ +Mirth |- ( a1 a2       -- b ) a1 a2       PropLabel -- Prop(b) ] { dip:pack2 prop(unpack2 f) }
    def prop3(f) [ +Mirth |- ( a1 a2 a3    -- b ) a1 a2 a3    PropLabel -- Prop(b) ] { dip:pack3 prop(unpack3 f) }
    def prop4(f) [ +Mirth |- ( a1 a2 a3 a4 -- b ) a1 a2 a3 a4 PropLabel -- Prop(b) ] { dip:pack4 prop(unpack4 f) }
}

def Token.location; [ +Mirth +Str |- Token -- ] {
    rdip:location emit;
}

def Maybe.location?; (f {location;}) [ +Mirth +Str |- (t --) Maybe(t) -- ] {
    if?(f, "???";)
}
