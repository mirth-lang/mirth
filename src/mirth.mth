||| Defines the +Mirth resource.
module mirth.mirth

import std.prelude
import std.world
import std.list
import std.str
import std.terminal
import std.maybe
import std.output
import std.path
import std.either
import std.file

import mirth.mirth
import mirth.location
import mirth.word
import mirth.arrow
import mirth.token
import mirth.data
import mirth.alias
import mirth.external
import mirth.buffer
import mirth.table
import mirth.package
import mirth.module
import mirth.type
import mirth.typedef
import mirth.prim
import mirth.name
import mirth.macro

struct Builtin {
    std: Package
    prim: Module

    cchar:      Data  mk-cchar:      Tag
    cichar:     Data  mk-cichar:     Tag
    cshort:     Data  mk-cshort:     Tag
    cint:       Data  mk-cint:       Tag
    clong:      Data  mk-clong:      Tag
    clonglong:  Data  mk-clonglong:  Tag
    cisize:     Data  mk-cisize:     Tag
    cintptr:    Data  mk-cintptr:    Tag
    cuchar:     Data  mk-cuchar:     Tag
    cushort:    Data  mk-cushort:    Tag
    cuint:      Data  mk-cuint:      Tag
    culong:     Data  mk-culong:     Tag
    culonglong: Data  mk-culonglong: Tag
    cusize:     Data  mk-cusize:     Tag
    cuintptr:   Data  mk-cuintptr:   Tag

    cptr:       Data  mk-cptr:       Tag
    cconst:     Data  mk-cconst:     Tag
    crestrict:  Data  mk-crestrict:  Tag
    cvolatile:  Data  mk-cvolatile:  Tag
    cvoid:      Data  mk-cvoid:      Tag
}

def Builtin.Alloc! [ -- Builtin ] {
    Package.alloc! >std
    Module.alloc! >prim

    Data.alloc! >cchar       Tag.alloc! >mk-cchar
    Data.alloc! >cichar      Tag.alloc! >mk-cichar
    Data.alloc! >cshort      Tag.alloc! >mk-cshort
    Data.alloc! >cint        Tag.alloc! >mk-cint
    Data.alloc! >clong       Tag.alloc! >mk-clong
    Data.alloc! >clonglong   Tag.alloc! >mk-clonglong
    Data.alloc! >cisize      Tag.alloc! >mk-cisize
    Data.alloc! >cintptr     Tag.alloc! >mk-cintptr
    Data.alloc! >cuchar      Tag.alloc! >mk-cuchar
    Data.alloc! >cushort     Tag.alloc! >mk-cushort
    Data.alloc! >cuint       Tag.alloc! >mk-cuint
    Data.alloc! >culong      Tag.alloc! >mk-culong
    Data.alloc! >culonglong  Tag.alloc! >mk-culonglong
    Data.alloc! >cusize      Tag.alloc! >mk-cusize
    Data.alloc! >cuintptr    Tag.alloc! >mk-cuintptr

    Data.alloc! >cptr        Tag.alloc! >mk-cptr
    Data.alloc! >cconst      Tag.alloc! >mk-cconst
    Data.alloc! >crestrict   Tag.alloc! >mk-crestrict
    Data.alloc! >cvolatile   Tag.alloc! >mk-cvolatile
    Data.alloc! >cvoid       Tag.alloc! >mk-cvoid

    Builtin
}

struct LexicalState {
    error-token: Maybe(Token)
    defining-namespace: Maybe(Prop(Namespace))
}

struct +Mirth {
    num-errors: Nat
    num-warnings: Nat
    builtin: Builtin
    mirth-base-path: Maybe(Path)
    package-search-paths: List(Path)
    prefer-inline-defs: Bool
    lexical-state: LexicalState
    +diagnostics: +Lister(Diagnostic)
    +propstack: +Lister(PropLabel)
    +namehashmap: +NameHashMap
}

def +Mirth.Init! {
    0u >num-errors
    0u >num-warnings
    False >prefer-inline-defs
    Builtin.Alloc! >builtin
    None >mirth-base-path
    L0 >package-search-paths
    +Lister.+Nil >+diagnostics
    +Lister.+Nil >+propstack
    None >error-token
    None >defining-namespace
    LexicalState >lexical-state
    +NameHashMap.new >+namehashmap
    +Mirth
    init-packages!
    init-modules!
    init-types!
    init-prims!
    init-macros!
}

def +Mirth.rdrop [ +Mirth -- ] {
    /+Mirth
    num-errors> drop
    num-warnings> drop
    prefer-inline-defs> drop
    builtin> drop
    mirth-base-path> drop
    package-search-paths> drop
    lexical-state> drop
    +diagnostics> rdrop
    +propstack> rdrop
    +namehashmap> rdrop
}

def +Mirth.mirth-base-lib-path [ +World +Mirth -- +World +Mirth Maybe(Path) ] {
    mirth-base-path map("lib" >Path rdip:join)
}

struct Diagnostic {
    severity: Severity
    location: Location
    message: Str
}

data Severity { Info, Warning, Error }
def Severity.>Str {
    { Info    -> "info"    }
    { Warning -> "warning" }
    { Error   -> "error"   }
}

def +Mirth.emit-diagnostic-at! [ Location Str Severity +Mirth -- +Mirth ] {
    >severity >message >location
    @severity match {
        { Info    -> id }
        { Warning -> num-warnings:1+ }
        { Error   -> num-errors:1+ }
    }
    Diagnostic +diagnostics:push!
}

def(+Mirth.emit-info-at!, Location Str +Mirth -- +Mirth, Severity.Info emit-diagnostic-at!)
def(+Mirth.emit-warning-at!, Location Str +Mirth -- +Mirth, Severity.Warning emit-diagnostic-at!)
def(+Mirth.emit-error-at!, Location Str +Mirth -- +Mirth, Severity.Error emit-diagnostic-at!)
def(+Mirth.emit-fatal-error-at!, *a Location Str +Mirth -- *b,
    emit-error-at! panic-diagnostics!)

def(+Mirth.emit-info!, Token Str +Mirth -- +Mirth,
    dip(location) emit-info-at!)
def(+Mirth.emit-warning!, Token Str +Mirth -- +Mirth,
    dip(location) emit-warning-at!)
def(+Mirth.emit-error!, Token Str +Mirth -- +Mirth,
    dip(location) emit-error-at!)
def(+Mirth.emit-fatal-error!, *a Token Str +Mirth -- *b,
    dip(location) emit-fatal-error-at!)

def +Mirth.emit-deprecated! [ Token old:Str new:Str +Mirth -- +Mirth ] {
    Str(Sgr.FGCyan span(old> ;) " is deprecated, please use ";
           Sgr.FGCyan span(new> ;) " instead.";) emit-warning!
}

def +Mirth.error-token! [ Token +Mirth -- +Mirth ] {
    Some lexical-state:error-token!
}
def +Mirth.with-error-token(f) [ (*a +Mirth -- *b +Mirth) *a Token +Mirth -- *b +Mirth ] {
    lexical-state:error-token(swap Some) dip(f) lexical-state:error-token!
}

def +Mirth.default-error-location [ +Mirth -- +Mirth Location ] {
    builtin prim >module
    0 Row >row
    0 Col >col
    Location
}

def +Mirth.error-location [ +Mirth -- +Mirth Location ] {
    lexical-state error-token if?(location, default-error-location)
}

def +Mirth.info!    [ Str +Mirth -- +Mirth ] { error-location swap emit-info-at!    }
def +Mirth.warning! [ Str +Mirth -- +Mirth ] { error-location swap emit-warning-at! }
def +Mirth.error!   [ Str +Mirth -- +Mirth ] { error-location swap emit-error-at!   }
def +Mirth.fatal-error! [ *a Str +Mirth -- *b ] { error-location swap emit-fatal-error-at! }

def +Mirth.io-error! [ *a IOError +World +Mirth -- *b ] {
    rdip:message fatal-error!
}

def(+Mirth.panic-diagnostics!, *a +Mirth -- *b,
    pop-diagnostics Str(
        for(diagnostic; "\n";)
        Sgr.FGRed span( "Fatal error. Stopping early."; )
    ) panic!)

def +Mirth.trace-diagnostics! [ +World +Mirth -- +World +Mirth ] {
    pop-diagnostics
    for(Str(diagnostic;) rdip:trace)
}

def(+Mirth.pop-diagnostics, +Mirth -- +Mirth List(Diagnostic),
    +diagnostics(pop-all!))

def(Diagnostic.diagnostic;, +Mirth +Str Diagnostic -- +Mirth +Str,
    /Diagnostic
    location> emit; ": " ;
    severity> >Str ; ": " ;
    message> ;)

def +Mirth.with-lexical-state(f) [ (*a +Mirth -- *b +Mirth) *a LexicalState +Mirth -- *b +Mirth ] {
    lexical-state(swap) dip(f) lexical-state!
}

def +Mirth.with-defining-namespace(f) [ (*a +Mirth -- *b +Mirth) *a Maybe(Prop(Namespace)) +Mirth -- *b +Mirth ] {
    lexical-state:defining-namespace(swap)
    dip(f) lexical-state:defining-namespace!
}

#########
# PROPS #
#########

struct Prop(t) {
    label: PropLabel
    state: PropState(t)
}

data PropState(b) {
    Ready [ b ]
    Delay [ LexicalState a [ a +Mirth -- b +Mirth ] ]
    Computing
}

data PropLabel {
    DefiningNamespace
    DataQName      [ Data ]
    DataParams     [ Data ]
    DataCType      [ Data ]
    TagType        [ Tag ]
    TableQName     [ Table ]
    TypeDefQName   [ TypeDef ]
    TypeDefTarget  [ TypeDef ]
    WordQName      [ Word ]
    WordType       [ Word ]
    WordParams     [ Word ]
    WordArrow      [ Word ]
    BlockArrow     [ Block ]
    AliasQName     [ Alias ]
    AliasTarget    [ Alias ]
    ExternalQName  [ External ]
    ExternalType   [ External ]
    ExternalCType  [ External ]
    BufferQName    [ Buffer ]
    FieldQName     [ Field ]
    FieldValueType [ Field ]
    FieldIndexType [ Field ]
    MacroQName     [ Macro ]
    --
    def trace; [ +Mirth +Str PropLabel -- +Mirth +Str ] {
        { DefiningNamespace -> "defining namespace"; }
        { DataQName      -> "data qname at " ; rdip:head? location?; }
        { DataParams     -> "data params at " ; rdip:head? location?; }
        { DataCType      -> "data ctype at " ; rdip:head? location?; }
        { TagType        -> "tag ctype at " ; rdip:sig? location?; }
        { TableQName     -> "table qname at " ; rdip:head location; }
        { TypeDefQName   -> "type qname at " ; rdip:head? location?; }
        { TypeDefTarget  -> "type target at " ; rdip:head? location?; }
        { WordQName      -> "word qname at " ; rdip:head location; }
        { WordType       -> "word type at " ; rdip:head location; }
        { WordParams     -> "word params at " ; rdip:head location; }
        { WordArrow      -> "word arrow at " ; rdip:head location; }
        { BlockArrow     -> "block arrow at " ; rdip:token location; }
        { AliasQName     -> "alias qname at " ; rdip:head location; }
        { AliasTarget    -> "alias target at " ; rdip:head location; }
        { ExternalQName  -> "external qname at " ; rdip:head location; }
        { ExternalType   -> "external type at " ; rdip:head location; }
        { ExternalCType  -> "external ctype at " ; rdip:head location; }
        { BufferQName    -> "buffer qname at " ; rdip:head location; }
        { FieldQName     -> "field qname at " ; rdip:head location; }
        { FieldValueType -> "field value type at " ; rdip:head location; }
        { FieldIndexType -> "field index type at " ; rdip:head location; }
        { MacroQName     -> "macro qname at " ; rdip:head? location?; }
    }
}

def Token.location; [ +Mirth +Str Token -- +Mirth +Str ] {
    rdip:location emit;
}

def Maybe.location?; (f {location;}) [ (+Mirth +Str t -- +Mirth +Str) +Mirth +Str Maybe(t) -- +Mirth +Str ] {
    if?(f, "???";)
}


def(PropLabel.prop, b PropLabel +Mirth -- Prop(b) +Mirth,
    >label PropState.Ready >state Prop)
def(PropLabel.prop2, b1 b2 PropLabel +Mirth -- Prop([b1 b2]) +Mirth,
    dip(pack2) prop)
def(PropLabel.prop3, b1 b2 b3 PropLabel +Mirth -- Prop([b1 b2 b3]) +Mirth,
    dip(pack3) prop)

def(PropLabel.prop(f), (a +Mirth -- b +Mirth) a PropLabel +Mirth -- Prop(b) +Mirth,
    >label lexical-state swap [f] PropState.Delay >state Prop)
def(PropLabel.prop0(f), (+Mirth -- b +Mirth) PropLabel +Mirth -- Prop(b) +Mirth,
    dip:0 prop(drop f))
def(PropLabel.prop2(f), (a1 a2 +Mirth -- b +Mirth) a1 a2 PropLabel +Mirth -- Prop(b) +Mirth,
    dip(pack2) prop(unpack2 f))
def(PropLabel.prop3(f), (a1 a2 a3 +Mirth -- b +Mirth) a1 a2 a3 PropLabel +Mirth -- Prop(b) +Mirth,
    dip(pack3) prop(unpack3 f))
def(PropLabel.prop4(f), (a1 a2 a3 a4 +Mirth -- b +Mirth) a1 a2 a3 a4 PropLabel +Mirth -- Prop(b) +Mirth,
    dip(pack4) prop(unpack4 f))

def(Prop.ready?, Prop(t) -- Maybe(t),
    state match(
        Ready -> Some,
        _ -> drop None
    ))

def Prop.compute [ Prop(t) +Mirth -- Maybe(t) Prop(t) +Mirth ] {
    state (
        dup >state match {
            { Ready -> Some }
            { Delay -> state> drop rotl with-lexical-state:run dup PropState.Ready >state Some }
            { Computing -> None }
        } state>
    )
}

def Prop.try-force! [ Mut(Prop(t)) +Mirth -- Maybe(t) +Mirth ] {
    dup @ >prop
    @prop state match {
        { Ready -> prop> drop nip Some }
        { Delay ->
            prop> label +propstack:push!
            rotl with-lexical-state(
                rotl
                PropState.Computing over modify:state!
                dip(run dup PropState.Ready) modify:state!
                Some
            )
            +propstack:pop! drop
        }
        { Computing ->
            prop> drop2
            None
        }
    }
}

def Prop.force! [ Mut(Prop(t)) +Mirth -- t +Mirth ] {
    try-force! unwrap(
        +propstack:reversed
        Str("Recursive prop detected:" ;
            reverse-for("\n  - " ; trace;)
        ) fatal-error!
    )
}

def Prop.force-or!(f) [ (*a +Mirth -- *a b +Mirth) *a Mut(Prop(b)) +Mirth -- *a b +Mirth ] {
    try-force! unwrap(f)
}
