module(mirth)

import(prelude)
import(mirth/input)
import(mirth/lexer)
import(mirth/codegen)
import(mirth/elab)

def(init!, +IO,
    init-paths!
    init-names!
    init-types!)

def(test!, +IO,
    test-prelude!)

########
# Main #
########

def(NEW_MIRTH_REVISION, Int, 0)

def(compile!, Path -- +IO,
  "Compiling " str-trace!
  dup Path->Str str-trace-ln!

  run-lexer!

  # show-names-table!
  # show-tokens!

  "Building." str-trace-ln!

  elab-module! drop
  "Done." str-trace-ln!)

def(main, +IO,
    init!
    test!

    argc int-trace-ln!
    0 while(dup argc <,
      dup argv ptr@@ str-trace-ln!
      1+
    ) drop

    1 argc < if(
      1 argv ptr@@ Str->Path compile!,
      "Expected at least one argument" panic!)
    )

#########
# Build #
#########

target-c99("mirth.c", main)

# import(snake) # this is silly, but no way around this for now.
    # there's two issues here:
    #   1. snake imports sdl2, sdl2 declares a bunch of external functions.
    #   under the current compilation approach ("just generate everything
    #   and let the C compiler sort it out") this will cause the dependencies
    #   to infect mirth if I move the import up above, resulting in undefined
    #   symbol errors at link time. That could be avoided if we only generated
    #   what was necessary each time.
    #   2. I shouldn't have to import snake anyway just to be able to have
    #   a separate build target (snake).
