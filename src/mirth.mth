||| Defines the +Mirth resource.
module(mirth.mirth)

import(std.prelude)
import(std.world)
import(std.list)
import(std.str)
import(std.terminal)
import(std.maybe)
import(std.output)
import(std.path)

import(mirth.mirth)
import(mirth.location)
import(mirth.word)
import(mirth.arrow)
import(mirth.token)
import(mirth.data)
import(mirth.alias)
import(mirth.external)
import(mirth.variable)
import(mirth.table)
import(mirth.package)
import(mirth.module)
import(mirth.type)
import(mirth.typedef)
import(mirth.prim)

struct Builtin {
    std: Package
    prim: Module
    bool: Data  true: Tag   false: Tag
    u64: Data   mk-u64: Tag
    u32: Data   mk-u32: Tag
    u16: Data   mk-u16: Tag
    u8: Data    mk-u8: Tag
    i64: Data   mk-i64: Tag
    i32: Data   mk-i32: Tag
    i16: Data   mk-i16: Tag
    i8: Data    mk-i8: Tag

    cchar:      Data  mk-cchar:      Tag
    cichar:     Data  mk-cichar:     Tag
    cshort:     Data  mk-cshort:     Tag
    cint:       Data  mk-cint:       Tag
    clong:      Data  mk-clong:      Tag
    clonglong:  Data  mk-clonglong:  Tag
    cisize:     Data  mk-cisize:     Tag
    cintptr:    Data  mk-cintptr:    Tag
    cuchar:     Data  mk-cuchar:     Tag
    cushort:    Data  mk-cushort:    Tag
    cuint:      Data  mk-cuint:      Tag
    culong:     Data  mk-culong:     Tag
    culonglong: Data  mk-culonglong: Tag
    cusize:     Data  mk-cusize:     Tag
    cuintptr:   Data  mk-cuintptr:   Tag

    cptr:       Data  mk-cptr:       Tag
    cconst:     Data  mk-cconst:     Tag
    crestrict:  Data  mk-crestrict:  Tag
    cvolatile:  Data  mk-cvolatile:  Tag
    cvoid:      Data  mk-cvoid:      Tag
}

def Builtin.Alloc! [ -- Builtin ] {
    Package.alloc! >std
    Module.alloc! >prim
    Data.alloc! >bool Tag.alloc! >true Tag.alloc! >false
    Data.alloc! >u64 Tag.alloc! >mk-u64
    Data.alloc! >u32 Tag.alloc! >mk-u32
    Data.alloc! >u16 Tag.alloc! >mk-u16
    Data.alloc! >u8 Tag.alloc! >mk-u8
    Data.alloc! >i64 Tag.alloc! >mk-i64
    Data.alloc! >i32 Tag.alloc! >mk-i32
    Data.alloc! >i16 Tag.alloc! >mk-i16
    Data.alloc! >i8 Tag.alloc! >mk-i8

    Data.alloc! >cchar       Tag.alloc! >mk-cchar
    Data.alloc! >cichar      Tag.alloc! >mk-cichar
    Data.alloc! >cshort      Tag.alloc! >mk-cshort
    Data.alloc! >cint        Tag.alloc! >mk-cint
    Data.alloc! >clong       Tag.alloc! >mk-clong
    Data.alloc! >clonglong   Tag.alloc! >mk-clonglong
    Data.alloc! >cisize      Tag.alloc! >mk-cisize
    Data.alloc! >cintptr     Tag.alloc! >mk-cintptr
    Data.alloc! >cuchar      Tag.alloc! >mk-cuchar
    Data.alloc! >cushort     Tag.alloc! >mk-cushort
    Data.alloc! >cuint       Tag.alloc! >mk-cuint
    Data.alloc! >culong      Tag.alloc! >mk-culong
    Data.alloc! >culonglong  Tag.alloc! >mk-culonglong
    Data.alloc! >cusize      Tag.alloc! >mk-cusize
    Data.alloc! >cuintptr    Tag.alloc! >mk-cuintptr

    Data.alloc! >cptr        Tag.alloc! >mk-cptr
    Data.alloc! >cconst      Tag.alloc! >mk-cconst
    Data.alloc! >crestrict   Tag.alloc! >mk-crestrict
    Data.alloc! >cvolatile   Tag.alloc! >mk-cvolatile
    Data.alloc! >cvoid       Tag.alloc! >mk-cvoid

    Builtin
}

struct +Mirth {
    num-errors: Nat
    num-warnings: Nat
    prefer-inline-defs: Bool
    builtin: Builtin
    error-token: Maybe(Token)
    package-search-paths: List(Path)
    +diagnostics: +List(Diagnostic)
    +propstack: +List(PropLabel)
}

def +Mirth.Init! {
    0 >Nat >num-errors
    0 >Nat >num-warnings
    False >prefer-inline-defs
    Builtin.Alloc! >builtin
    L0 >package-search-paths
    +L0 >+diagnostics
    +L0 >+propstack
    None >error-token
    +Mirth
    init-packages!
    init-modules!
    init-types!
    init-prims!
}

def +Mirth.rdrop [ +Mirth -- ] {
    /+Mirth
    num-errors> drop
    num-warnings> drop
    prefer-inline-defs> drop
    builtin> drop
    error-token> drop
    package-search-paths> drop
    +diagnostics> freeze drop
    +propstack> freeze drop
}

struct Diagnostic {
    severity: Severity
    location: Location
    message: Str
}

data Severity { Info, Warning, Error }
def Severity.>Str {
    { Info    -> "info"    }
    { Warning -> "warning" }
    { Error   -> "error"   }
}

def +Mirth.emit-diagnostic-at! [ Location Str Severity +Mirth -- +Mirth ] {
    >severity >message >location
    @severity match {
        { Info    -> id }
        { Warning -> num-warnings:1+ }
        { Error   -> num-errors:1+ }
    }
    Diagnostic +diagnostics:push!
}

def(+Mirth.emit-info-at!, Location Str +Mirth -- +Mirth, Info emit-diagnostic-at!)
def(+Mirth.emit-warning-at!, Location Str +Mirth -- +Mirth, Warning emit-diagnostic-at!)
def(+Mirth.emit-error-at!, Location Str +Mirth -- +Mirth, Error emit-diagnostic-at!)
def(+Mirth.emit-fatal-error-at!, *a Location Str +Mirth -- *b,
    emit-error-at! panic-diagnostics!)

def(+Mirth.emit-info!, Token Str +Mirth -- +Mirth,
    dip(location) emit-info-at!)
def(+Mirth.emit-warning!, Token Str +Mirth -- +Mirth,
    dip(location) emit-warning-at!)
def(+Mirth.emit-error!, Token Str +Mirth -- +Mirth,
    dip(location) emit-error-at!)
def(+Mirth.emit-fatal-error!, *a Token Str +Mirth -- *b,
    dip(location) emit-fatal-error-at!)

def(+Mirth.emit-deprecated!, Token old:Str new:Str +Mirth -- +Mirth,
    Str(FGCyan emit; old> ; Reset emit;
        " is deprecated, please use ";
        FGCyan emit; new> ; Reset emit;
        " instead.";) emit-warning!)

def(+Mirth.with-error-token(f), (*a +Mirth -- *b +Mirth)
        *a Token +Mirth -- *b +Mirth,
    error-token dip(Some error-token! f) error-token!)

def(+Mirth.info!, Str +Mirth -- +Mirth,
    error-token unwrap swap emit-info!)
def(+Mirth.warning!, Str +Mirth -- +Mirth,
    error-token unwrap swap emit-warning!)
def(+Mirth.error!, Str +Mirth -- +Mirth,
    error-token unwrap swap emit-error!)
def(+Mirth.fatal-error!, *a Str +Mirth -- *b,
    error-token unwrap swap emit-fatal-error!)

def(+Mirth.panic-diagnostics!, *a +Mirth -- *b,
    pop-diagnostics Str(
        for(diagnostic; "\n";)
        FGRed emit; "Fatal error. Stopping early."; Reset emit;
    ) panic!)

def(+Mirth.trace-diagnostics!, +World +Mirth -- +World +Mirth,
    pop-diagnostics
    for(rdip:trace(diagnostic;)))

def(+Mirth.pop-diagnostics, +Mirth -- +Mirth List(Diagnostic),
    +diagnostics(freeze L0 thaw))

def(Diagnostic.diagnostic;, +Str Diagnostic -- +Str,
    /Diagnostic
    location> emit; ": " ;
    severity> >Str ; ": " ;
    message> ;)

#########
# PROPS #
#########

data(Prop(t), Prop ->
    label: PropLabel
    state: PropState(t))
data(PropState(b),
    PSReady -> b,
    PSDelay -> a [a +Mirth -- b +Mirth],
    PSComputing)
data(PropLabel,
    DataQName -> Data,
    DataParams -> Data,
    DataCType -> Data,
    TagType -> Tag,
    TableQName -> Table,
    TypeDefQName -> TypeDef,
    TypeDefTarget -> TypeDef,
    WordQName -> Word,
    WordType -> Word,
    WordParams -> Word,
    WordArrow -> Word,
    BlockArrow -> Block,
    AliasQName -> Alias,
    AliasTarget -> Alias,
    ExternalQName -> External,
    ExternalType -> External,
    ExternalCType -> External,
    VariableType -> Variable,
    FieldQName -> Field,
    FieldValueType -> Field,
    FieldIndexType -> Field,
)

def(PropLabel.prop, b PropLabel +Mirth -- Prop(b) +Mirth,
    >label PSReady >state Prop)
def(PropLabel.prop2, b1 b2 PropLabel +Mirth -- Prop([b1 b2]) +Mirth,
    dip(pack2) prop)
def(PropLabel.prop3, b1 b2 b3 PropLabel +Mirth -- Prop([b1 b2 b3]) +Mirth,
    dip(pack3) prop)

def(PropLabel.prop0(f), (+Mirth -- b +Mirth) PropLabel +Mirth -- Prop(b) +Mirth,
    dip:0 prop(drop f))
def(PropLabel.prop(f), (a +Mirth -- b +Mirth) a PropLabel +Mirth -- Prop(b) +Mirth,
    >label [f] PSDelay >state Prop)
def(PropLabel.prop2(f), (a1 a2 +Mirth -- b +Mirth) a1 a2 PropLabel +Mirth -- Prop(b) +Mirth,
    dip(pack2) prop(unpack2 f))
def(PropLabel.prop3(f), (a1 a2 a3 +Mirth -- b +Mirth) a1 a2 a3 PropLabel +Mirth -- Prop(b) +Mirth,
    dip(pack3) prop(unpack3 f))

def(Prop.ready?, Prop(t) -- Maybe(t),
    state match(
        PSReady -> Some,
        _ -> drop None
    ))

def(Prop.try-force!, Mut(Prop(t)) +Mirth -- Maybe(t) +Mirth,
    dup @ state match(
        PSReady -> nip Some,
        PSDelay ->
            rotl
            PSComputing over modify:state!
            dip(run dup PSReady) modify:state!
            Some,
        PSComputing ->
            drop None
    ))
def(Prop.force!, Mut(Prop(t)) +Mirth -- t +Mirth,
    try-force! unwrap("Recursive prop detected!" fatal-error!))
def(Prop.force-or!(f), (*a +Mirth -- *a b +Mirth)
        *a Mut(Prop(b)) +Mirth -- *a b +Mirth,
    try-force! unwrap(f))
