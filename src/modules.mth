module(modules)
import(prelude)
import(paths)

def(init-modules!, --,
    0 num-modules!)

def-type(Module, U16)

def(MAX_MODULES, Size, 0x100)
def(MODULE_PATH_SIZE, Size, 0x200)

quad def-static-buffer(NUM_MODULES)

MAX_MODULES MODULE_PATH_SIZE *
    def-static-buffer(MODULE_PATH_BUF)
MAX_MODULES quads dup
    def-static-buffer(MODULE_START)
    def-static-buffer(MODULE_END)

def(num-modules@, -- Size, NUM_MODULES @)
def(num-modules!, Size --, NUM_MODULES !)
def(alloc-module!, Module,
    num-modules@ dup 1+
    dup MAX_MODULES <= if(
        num-modules! Int->U16,
        "ran out of space to store module path" panic! drop Int->U16
    ))

def(new-module!, Path -- Module,
    alloc-module! dup dip(module-path!))

def(module-start?, Module -- Module Token, dup module-start@)
def(module-start@, Module -- Token, U16->Int MODULE_START quad@@)
def(module-start!, Token Module --, U16->Int MODULE_START quad!!)

def(module-end?, Module -- Module Token, dup module-end@)
def(module-end@, Module -- Token, U16->Int MODULE_END quad@@)
def(module-end!, Token Module --, U16->Int MODULE_END quad!!)

def(module-path@, Module -- Path, U16->Int MODULE_PATH_SIZE * MODULE_PATH_BUF +)
def(module-path?, Module -- Module Path, dup module-path@)
def(module-path!, Path Module --,
    over str-length 1+ MODULE_PATH_SIZE <= if(
        module-path@ str-copy!,
        "Module path is too long!" panic! drop2
    ))

# Load a source path associated with a module into STR_BUF.
def(load-module-source-path!, Module --,
    module-path@ load-source-path!)
