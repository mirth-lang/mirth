module mirth.table

import std.prelude
import std.maybe
import std.str

import mirth.name
import mirth.type
import mirth.buffer
import mirth.word
import mirth.token
import mirth.mirth

# mirth/data/table
table(Table)
field(Table.~doc, Table, Maybe(Str))
field(Table.~head, Table, Token) # where the table was defined
field(Table.~name, Table, Name)
field(Table.~qname, Table, Prop(QName))
field(Table.~num-buffer, Table, Buffer)

def(Table.doc, +Mirth Table -- +Mirth Maybe(Str), ~doc @)
def(Table.head, +Mirth Table -- +Mirth Token, ~head @)
def(Table.qname-soft, +Mirth Table -- +Mirth Maybe(QName), ~qname @? bind(ready?))
def(Table.qname-hard, +Mirth Table -- +Mirth QName, ~qname force!)
def(Table.namespace, +Mirth Table -- +Mirth Namespace, qname-hard namespace)
def(Table.name, +Mirth Table -- +Mirth Name, ~name @)
def(Table.num-buffer, +Mirth Table -- +Mirth Buffer, ~num-buffer @)
def(Table.==, Table Table -- Bool, both(index) ==)

def Table.name; [ +Mirth +Str Table -- +Mirth +Str ] { rdip:name name; }
def Table.qname; [ +Mirth +Str Table -- +Mirth +Str ] { rdip:qname-hard qname; }

table(Field)
field(Field.~doc, Field, Maybe(Str))
field(Field.~head, Field, Token)
field(Field.~name, Field, Name)
field(Field.~qname, Field, Prop(QName))
field(Field.~index-type, Field, Prop(Type))
field(Field.~value-type, Field, Prop(Type))

def(Field.doc, +Mirth Field -- +Mirth Maybe(Str), ~doc @)
def(Field.head, +Mirth Field -- +Mirth Token, ~head @)
def(Field.name, +Mirth Field -- +Mirth Name, ~name @)
def(Field.qname-soft, +Mirth Field -- +Mirth Maybe(QName), ~qname @? bind(ready?))
def(Field.qname-hard, +Mirth Field -- +Mirth QName, ~qname force!)
def(Field.index-type, +Mirth Field -- +Mirth Type, ~index-type force!)
def(Field.value-type, +Mirth Field -- +Mirth Type, ~value-type force!)

def Field.name; [ +Mirth +Str Field -- +Mirth +Str ] { rdip:name name; }
def Field.qname; [ +Mirth +Str Field -- +Mirth +Str ] { rdip:qname-hard qname; }

def(Field.dom, +Mirth Field -- +Mirth StackType, index-type T1)
def(Field.cod, +Mirth Field -- +Mirth StackType, value-type Type.Mut T1)
def(Field.type, +Mirth Field -- +Mirth ArrowType, sip(dom) cod T->)

def(Field.==, Field Field -- Bool, both(index) ==)
