module mirth.table

import std.prelude
import std.maybe
import std.str

import mirth.name
import mirth.type
import mirth.buffer
import mirth.word
import mirth.token
import mirth.mirth

# mirth/data/table
table(Table)
patch Table {
    field(~doc, Table, Maybe(Str))
    field(~head, Table, Token) # where the table was defined
    field(~name, Table, Name)
    field(~qname, Table, Prop(QName))
    field(~num-buffer, Table, Buffer)

    def doc        [ +Mirth |- Table -- Maybe(Str)   ] { ~doc @ }
    def head       [ +Mirth |- Table -- Token        ] { ~head @ }
    def qname-soft [ +Mirth |- Table -- Maybe(QName) ] { ~qname @? bind(ready?) }
    def qname-hard [ +Mirth |- Table -- QName        ] { ~qname force! }
    def namespace  [ +Mirth |- Table -- Namespace    ] { qname-hard namespace }
    def name       [ +Mirth |- Table -- Name         ] { ~name @ }
    def num-buffer [ +Mirth |- Table -- Buffer       ] { ~num-buffer @ }

    def = [ Table Table -- Bool ] { on2:index = }
    def unify! [ +Mirth |- Table Table -- Type ] {
        dup2 = if(drop >Type, on2:>Type unify-failed!)
    }
    def >Type [ Table -- Type ] { Type.Table }

    def name;  [ +Mirth +Str |- Table -- ] { rdip:name name; }
    def qname; [ +Mirth +Str |- Table -- ] { rdip:qname-hard qname; }
}

table(Field)
patch Field {
    field(~doc, Field, Maybe(Str))
    field(~head, Field, Token)
    field(~name, Field, Name)
    field(~qname, Field, Prop(QName))
    field(~index-type, Field, Prop(Type))
    field(~value-type, Field, Prop(Type))

    def doc        [ +Mirth |- Field -- Maybe(Str)   ] { ~doc @ }
    def head       [ +Mirth |- Field -- Token        ] { ~head @ }
    def name       [ +Mirth |- Field -- Name         ] { ~name @ }
    def qname-soft [ +Mirth |- Field -- Maybe(QName) ] { ~qname @? bind(ready?) }
    def qname-hard [ +Mirth |- Field -- QName        ] { ~qname force! }
    def index-type [ +Mirth |- Field -- Type         ] { ~index-type force! }
    def value-type [ +Mirth |- Field -- Type         ] { ~value-type force! }

    def name;  [ +Mirth +Str |- Field -- ] { rdip:name name; }
    def qname; [ +Mirth +Str |- Field -- ] { rdip:qname-hard qname; }

    def dom  [ +Mirth |- Field -- StackType ] { index-type T1 }
    def cod  [ +Mirth |- Field -- StackType ] { value-type Type.Mut T1 }
    def type [ +Mirth |- Field -- ArrowType ] { sip(dom) cod T-> }

    def = [ Field Field -- Bool ] { on2:index = }
}
