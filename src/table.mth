module(mirth.table)

import(std.prelude)
import(mirth.name)
import(mirth.type)
import(mirth.buffer)
import(mirth.word)
import(mirth.token)
import(mirth.mirth)

# mirth/data/table
table(Table)
field(Table.~head, Table, Token) # where the table was defined
field(Table.~qname, Table, QName)
field(Table.~num-buffer, Table, Buffer)
field(Table.~max-count, Table, Nat)

def(Table.head, Table -- Token, ~head @)
def(Table.qname, Table -- QName, ~qname @)
def(Table.namespace, Table -- Namespace, qname namespace)
def(Table.name, Table -- Name, qname name)
def(Table.num-buffer, Table -- Buffer, ~num-buffer @)
def(Table.max-count, Table -- Nat, ~max-count @)
def(Table.==, Table Table -- Bool, both(index) ==)

table(Field)
field(Field.~head, Field, Token)
field(Field.~qname, Field, QName)
field(Field.~index-type, Field, Prop(Type))
field(Field.~value-type, Field, Prop(Type))

def(Field.head, Field -- Token, ~head @)
def(Field.qname, Field -- QName, ~qname @)
def(Field.name, Field -- Name, qname name)
def(Field.index-type, +Mirth Field -- +Mirth Type, ~index-type force!)
def(Field.value-type, +Mirth Field -- +Mirth Type, ~value-type force!)

def(Field.dom, +Mirth Field -- +Mirth StackType, index-type T1)
def(Field.cod, +Mirth Field -- +Mirth StackType, value-type TMut T1)
def(Field.type, +Mirth Field -- +Mirth ArrowType, sip(dom) cod T->)

def(Field.==, Field Field -- Bool, both(index) ==)
