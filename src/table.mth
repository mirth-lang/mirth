module(mirth.table)

import(std.prelude)
import(std.maybe)

import(mirth.name)
import(mirth.type)
import(mirth.buffer)
import(mirth.word)
import(mirth.token)
import(mirth.mirth)

# mirth/data/table
table(Table)
field(Table.~head, Table, Token) # where the table was defined
field(Table.~name, Table, Name)
field(Table.~qname, Table, Prop(QName))
field(Table.~num-buffer, Table, Buffer)

def(Table.head, Table -- Token, ~head @)
def(Table.qname-soft, Table -- Maybe(QName), ~qname @? bind(ready?))
def(Table.qname-hard, +Mirth Table -- +Mirth QName, ~qname force!)
def(Table.namespace, +Mirth Table -- +Mirth Namespace, qname-hard namespace)
def(Table.name, Table -- Name, ~name @)
def(Table.num-buffer, Table -- Buffer, ~num-buffer @)
def(Table.==, Table Table -- Bool, both(index) ==)

table(Field)
field(Field.~head, Field, Token)
field(Field.~name, Field, Name)
field(Field.~qname, Field, Prop(QName))
field(Field.~index-type, Field, Prop(Type))
field(Field.~value-type, Field, Prop(Type))

def(Field.head, Field -- Token, ~head @)
def(Field.name, Field -- Name, ~name @)
def(Field.qname-soft, Field -- Maybe(QName), ~qname @? bind(ready?))
def(Field.qname-hard, +Mirth Field -- +Mirth QName, ~qname force!)
def(Field.index-type, +Mirth Field -- +Mirth Type, ~index-type force!)
def(Field.value-type, +Mirth Field -- +Mirth Type, ~value-type force!)

def(Field.dom, +Mirth Field -- +Mirth StackType, index-type T1)
def(Field.cod, +Mirth Field -- +Mirth StackType, value-type TMut T1)
def(Field.type, +Mirth Field -- +Mirth ArrowType, sip(dom) cod T->)

def(Field.==, Field Field -- Bool, both(index) ==)
