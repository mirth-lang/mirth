module(mirth.data)

import(std.prelude)
import(std.list)
import(std.maybe)
import(std.either)

import(mirth.var)
import(mirth.type)
import(mirth.token)
import(mirth.name)
import(mirth.def)
import(mirth.label)
import(mirth.tycon)
import(mirth.word)
import(mirth.mirth)

table(Data)
field(Data.~head?, Data, Maybe(Token))
field(Data.~qname, Data, Prop(QName))
field(Data.~name, Data, Name)
field(Data.~arity, Data, Int)
field(Data.~params, Data, Prop(List(Var)))
field(Data.~tags, Data, List(Tag))
field(Data.~ctype?, Data, Prop(Maybe(CType)))

def(Data.head?, Data -- Maybe(Token), ~head? @)
def(Data.name, Data -- Name, ~name @)
def(Data.qname-soft, Data -- Maybe(QName), ~qname @? bind(ready?))
def(Data.qname-hard, +Mirth Data -- +Mirth QName, ~qname force!)
def(Data.namespace-hard, +Mirth Data -- +Mirth Namespace, qname-hard namespace)
def(Data.arity, Data -- Int, ~arity @)
def(Data.params, +Mirth Data -- +Mirth List(Var), ~params force!)
def(Data.tags, Data -- List(Tag), ~tags @)
def(Data.ctype?, Data +Mirth -- Maybe(CType) +Mirth, ~ctype? force!)

def(TYPE_BOOL, +Mirth -- +Mirth Type, builtin bool TData)
def(TYPE_U64, +Mirth -- +Mirth Type, builtin u64 TData)
def(TYPE_U32, +Mirth -- +Mirth Type, builtin u32 TData)
def(TYPE_U16, +Mirth -- +Mirth Type, builtin u16 TData)
def(TYPE_U8,  +Mirth -- +Mirth Type, builtin u8  TData)
def(TYPE_I64, +Mirth -- +Mirth Type, builtin i64 TData)
def(TYPE_I32, +Mirth -- +Mirth Type, builtin i32 TData)
def(TYPE_I16, +Mirth -- +Mirth Type, builtin i16 TData)
def(TYPE_I8,  +Mirth -- +Mirth Type, builtin i8  TData)

def(make-prim-data!, +Mirth Str List(Var) Data List(Tag) Maybe(CType) -- +Mirth,
    >ctype >tags >data >params >name

    @params len >Int dup @data ~arity !
    @name >Name @data ~name !
    name> swap QName.prim @data DataQName prop @data ~qname !
    ctype> @data DataCType prop @data ~ctype? !

    @tags for(@data swap ~data !)
    tags> @data ~tags !

    params> @data DataParams prop @data ~params !
    None @data ~head? !

    data> DefData register)

def(make-prim-tag!, +Mirth Str Int List(Type) Tag -- +Mirth,
    >tag >inputs >value >name

    @tag .data name> 0 data-word-qname @tag ~qname !
    value> >Nat @tag ~value !

    @inputs len @tag ~num-type-inputs !
    0 >Nat @tag ~num-resource-inputs !
    L0 @tag ~label-inputs !

    @tag .data params >Ctx
    inputs> TT
    T0 @tag .data full-type T*+ T->
    @tag TagType prop2
    @tag ~ctx-type !

    tag> DefTag register)

def(make-prim-intlike!, Str Data Str Tag Str +Mirth -- +Mirth,
    >underlying >tag >tagname >data >dataname

    dataname> L0 data> @tag L1 underlying> IntLike Some make-prim-data!
    tagname> 0 TYPE_INT L1 tag> make-prim-tag!)

def(init-data!, +Mirth -- +Mirth,
    "Bool" L0 builtin bool builtin true builtin false L2 "_Bool" IntLike Some make-prim-data!
    "False" 0 L0 builtin false make-prim-tag!
    "True" 1 L0 builtin true make-prim-tag!

    TYPE_TYPE "a" >Name Var.new! >a
    "CPtr" @a L1 builtin cptr builtin mk-cptr L1 None make-prim-data!
    "CPtr" 0 TYPE_PTR L1 builtin mk-cptr make-prim-tag!
    "CConst" @a L1 builtin cconst builtin mk-cconst L1 None make-prim-data!
    "CConst" 0 @a TVar L1 builtin mk-cconst make-prim-tag!
    "CRestrict" @a L1 builtin crestrict builtin mk-crestrict L1 None make-prim-data!
    "CRestrict" 0 @a TVar L1 builtin mk-crestrict make-prim-tag!
    "CVolatile" @a L1 builtin cvolatile builtin mk-cvolatile L1 None make-prim-data!
    "CVolatile" 0 @a TVar L1 builtin mk-cvolatile make-prim-tag!
    a> drop

    "CVoid" L0 builtin cvoid builtin mk-cvoid L1 Phantom Some make-prim-data!
    "CVoid" 0 L0 builtin mk-cvoid make-prim-tag!

    "U64" builtin u64 "Int>U64-unsafe" builtin mk-u64 "uint64_t" make-prim-intlike!
    "U32" builtin u32 "Int>U32-unsafe" builtin mk-u32 "uint32_t" make-prim-intlike!
    "U16" builtin u16 "Int>U16-unsafe" builtin mk-u16 "uint16_t" make-prim-intlike!
    "U8"  builtin u8  "Int>U8-unsafe"  builtin mk-u8  "uint8_t"  make-prim-intlike!

    "I64" builtin i64 "Int>I64-unsafe" builtin mk-i64 "int64_t" make-prim-intlike!
    "I32" builtin i32 "Int>I32-unsafe" builtin mk-i32 "int32_t" make-prim-intlike!
    "I16" builtin i16 "Int>I16-unsafe" builtin mk-i16 "int16_t" make-prim-intlike!
    "I8"  builtin i8  "Int>I8-unsafe"  builtin mk-i8  "int8_t"  make-prim-intlike!

    "CChar"      builtin cchar      "CChar"      builtin mk-cchar      "char"         make-prim-intlike!
    "CIChar"     builtin cichar     "CIChar"     builtin mk-cichar     "signed char"  make-prim-intlike!
    "CShort"     builtin cshort     "CShort"     builtin mk-cshort     "short"        make-prim-intlike!
    "CInt"       builtin cint       "CInt"       builtin mk-cint       "int"          make-prim-intlike!
    "CLong"      builtin clong      "CLong"      builtin mk-clong      "long"         make-prim-intlike!
    "CLongLong"  builtin clonglong  "CLongLong"  builtin mk-clonglong  "long long"    make-prim-intlike!
    "CISize"     builtin cisize     "CISize"     builtin mk-cisize     "ssize_t"      make-prim-intlike!
    "CIntPtr"    builtin cintptr    "CIntPtr"    builtin mk-cintptr    "intptr_t"     make-prim-intlike!

    "CUChar"     builtin cuchar     "CUChar"     builtin mk-cuchar     "unsigned char"      make-prim-intlike!
    "CUShort"    builtin cushort    "CUShort"    builtin mk-cushort    "unsigned short"     make-prim-intlike!
    "CUInt"      builtin cuint      "CUInt"      builtin mk-cuint      "unsigned int"       make-prim-intlike!
    "CULong"     builtin culong     "CULong"     builtin mk-culong     "unsigned long"      make-prim-intlike!
    "CULongLong" builtin culonglong "CULongLong" builtin mk-culonglong "unsigned long long" make-prim-intlike!
    "CUSize"     builtin cusize     "CUSize"     builtin mk-cusize     "size_t"             make-prim-intlike!
    "CUIntPtr"   builtin cuintptr   "CUIntPtr"   builtin mk-cuintptr   "uintptr_t"          make-prim-intlike!)

def(data-qname, Data Name Int -- QName,
    >arity >name TYCON_DATA NAMESPACE_TYCON >namespace MKQNAME)

def(data-word-qname, Data Str Int -- QName,
    dip(>Name) data-qname)

########
# DATA #
########

def(Data.==, Data Data -- Bool, both(index) ==)
def(Data.num-tags, Data -- Nat, tags len)

||| Adds constructor to data type, and gives tag its rank.
def(Data.add-tag!, Tag Data --,
    dup2 num-tags swap ~value !
    dup tags rotr dip(List.snoc) ~tags !)

field(Data.~is-unit?, Data, Bool)
def(Data.is-unit?, Data -- Bool,
    dup ~is-unit? memoize(
        dup tags /L1 and-some(num-total-inputs 0=)
    ) nip)

field(Data.~is-enum?, Data, Bool)
def(Data.is-enum?, Data -- Bool,
    dup ~is-enum? memoize(
        dup is-unit? not and(
            dup tags all(dup num-total-inputs 0=)
        )
    ) nip)

field(Data.~is-transparent?, Data, Bool)
def(Data.is-transparent?, Data -- Bool,
    dup ~is-transparent? memoize(
        dup is-resource? if(
            dup tags /L1 match(
                Some -> dup num-resource-inputs 1 >Nat == swap num-total-inputs 1 >Nat == &&,
                None -> False,
            ),
            dup tags /L1 match(
                Some -> dup num-type-inputs 1 >Nat == swap num-total-inputs 1 >Nat == &&,
                None -> False
            )
        )
    ) nip)

field(Data.~is-semi-transparent?, Data, Bool)
def(Data.is-semi-transparent?, Data -- Bool,
    dup ~is-semi-transparent? memoize(
        dup tags /L1 and-some(num-total-inputs 1 >Nat ==)
    ) nip)

field(Data.~is-resource?, Data, Bool)
def(Data.is-resource?, Data -- Bool,
    dup ~is-resource? memoize(
        dup name could-be-resource-con
    ) nip)

def(Data.is-value-type?, Data -- Bool,
    is-resource? not)

def(Data.full-type, +Mirth Data -- +Mirth Type/Resource,
    dup sip:TData params for(TVar TApp)
    swap is-value-type? if(
        Left,
        Resource Right
    ))

#######
# TAG #
#######

table(Tag)
field(Tag.~data, Tag, Data)
field(Tag.~qname, Tag, QName)
field(Tag.~value, Tag, Nat)
field(Tag.~label-inputs, Tag, List(Label))
field(Tag.~num-type-inputs, Tag, Nat)
field(Tag.~num-resource-inputs, Tag, Nat)
field(Tag.~sig?, Tag, Maybe(Token))
field(Tag.~ctx-type, Tag, Prop([Ctx ArrowType]))
field(Tag.~untag, Tag, Maybe(Word))

def(Tag.data, Tag -- Data, ~data @)
def(Tag.qname, Tag -- QName, ~qname @)
def(Tag.name, Tag -- Name, qname name)
def(Tag.value, Tag -- Nat, ~value @)
def(Tag.label-inputs, Tag -- List(Label), ~label-inputs @)
def(Tag.num-type-inputs, Tag -- Nat, ~num-type-inputs @)
def(Tag.num-resource-inputs, Tag -- Nat, ~num-resource-inputs @)
def(Tag.sig?, Tag -- Maybe(Token), ~sig? @)
def(Tag.ctx-type, +Mirth Tag -- +Mirth Ctx ArrowType, ~ctx-type force! unpack2)
def(Tag.ctx, +Mirth Tag -- +Mirth Ctx, ctx-type drop)
def(Tag.type, +Mirth Tag -- +Mirth ArrowType, ctx-type nip)
def(Tag.untag, Tag -- Maybe(Word), ~untag @)

def(Tag.label-inputs-from-sig, Tag -- List(Label),
    sig? if-some(run-tokens filter(dup could-be-sig-label?) map(name? unwrap Label.new!), L0))

def(Tag.num-type-inputs-from-sig, Tag -- Nat,
    dup sig? if-some(
        run-length
        over num-resource-inputs-from-sig -
        swap label-inputs-from-sig len -,
        drop 0 >Nat
    ))

def(Tag.num-resource-inputs-from-sig, Tag -- Nat,
    sig? if-some(
        run-tokens filter(dup could-be-sig-label? not) filter-some(name?)
        filter(dup could-be-resource-var or(dup could-be-resource-con))
        len,
        0 >Nat
    ))

field(Tag.~num-label-inputs, Tag, Nat)
def(Tag.num-label-inputs, Tag -- Nat,
    dup ~num-label-inputs memoize(
        dup label-inputs len
    ) nip)

def(Tag.num-total-inputs, Tag -- Nat,
    >tag
    @tag num-label-inputs
    @tag num-type-inputs +
    tag> num-resource-inputs +)

def(Tag.is-transparent?, Tag -- Bool,
    .data is-transparent?)

def(Tag.is-semi-transparent?, Tag -- Bool,
    .data is-semi-transparent?)

def(Tag.outputs-resource?, Tag -- Bool,
    .data is-resource?)

def(Tag.==, Tag Tag -- Bool, both(index) ==)

def(Tag.prefer-inline?, Tag -- Bool,
    dup .data is-transparent?
    or(dup num-total-inputs 0=)
    nip)

#
# Partial Data
#

||| DataPartial represents a data type with missing parts.
||| In general, it could represent missing fields, missing tags, etc.
||| For now, all we need to represent is a single missing field.
data(DataPartial, DataPartial ->
    data:Data field:Label)

def(DataPartial.==, DataPartial DataPartial -- Bool,
    /DataPartial /DataPartial
    data> data> ==
    field> field> == &&)
