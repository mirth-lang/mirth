module mirth.data

import std.prelude
import std.list
import std.str
import std.maybe
import std.either

import mirth.var
import mirth.type
import mirth.token
import mirth.name
import mirth.def
import mirth.label
import mirth.tycon
import mirth.word
import mirth.mirth
import mirth.elab
import mirth.arrow
import mirth.match
import mirth.prim

table +Mirth |- Data {
    doc: Maybe(Str)
    head?: Maybe(Token)
    name: Name
    arity: Int
    tags: List(Tag) { L0 }
    last-tag-value: Int { -1 }
    ~qname: Prop(QName)
    ~params: Prop(List(Var))
    ~ctype?: Prop(Maybe(CType))
    is-resource?: Bool { @self name could-be-resource-con }
    is-unit?: Maybe(Tag) { @self tags single? filter(num-total-inputs 0=) }
    is-enum?: Bool { @self and(is-unit? not, tags all(num-total-inputs 0=)) }
    is-transparent?: Bool {
        @self dup is-resource? if(
            single-tag? has:and(num-resource-inputs 1 =, num-total-inputs 1 =),
            single-tag? has:and(num-type-inputs 1 =, num-total-inputs 1 =)
        )
    }
    semi-transparent?: Maybe(SemiTransparentData) {
        @self single-tag? bind(
            dup inputs single? map(
                >input dup >tag SemiTransparentData
            ) nip
        )
    }
    --
    def qname-soft     [ +Mirth |- Data -- Maybe(QName) ] { ~qname @? bind(ready?) }
    def qname-hard     [ +Mirth |- Data -- QName        ] { ~qname force! }
    def namespace-hard [ +Mirth |- Data -- Namespace    ] { qname-hard namespace }
    def params         [ +Mirth |- Data -- List(Var)    ] { ~params force! }
    def ctype?         [ +Mirth |- Data -- Maybe(CType) ] { ~ctype? force! }

    def name; [ +Mirth +Str |- Data -- ] { name name; }
    def qname; [ +Mirth +Str |- Data -- ] { qname-hard qname; }

    def num-tags [ +Mirth |- Data -- Nat ] { tags len }

    ||| Adds constructor to data type, verifying no duplicate enum-value.
    def add-tag! [ +Mirth |- Tag Data -- ] {
        >data >tag
        @data tags find(@tag on2:value =) for(
            Str("Constructors ";
                name;
                " and " ;
                @tag name;
                " have the same enum value." ;
            )
            @data head? if?(swap emit-error!, error!)
        )
        @tag value @data last-tag-value!
        @data tags tag> List.Snoc data> tags!
    }

    def is-enum-or-unit? [ +Mirth |- Data -- Bool ] {
        dup is-enum? dip(is-unit? >Bool) or
    }

    def single-tag? [ +Mirth |- Data -- Maybe(Tag) ] {
        tags single?
    }

    def is-value-type? [ +Mirth |- Data -- Bool ] {
        is-resource? not
    }

    def applied-type [ +Mirth |- Data -- Type ] {
        sip:Type.Data params for(Type.Var Type.App)
    }

    def full-type [ +Mirth |- Data -- Type/Resource ] {
        sip:applied-type is-value-type? if(
            Left,
            Resource Right
        )
    }

    def can-own-state? [ +Mirth |- Data -- Bool ] {
        and(is-resource?, single-tag? >Bool)
    }

    def unify! [ +Mirth |- Data Data -- Type ] {
        dup2 = if(drop Type.Data, both(Type.Data) unify-failed!)
    }

    def ctype1? [ +Mirth |- CType Data -- Maybe(CType) ] {
        dup builtin cptr = if(drop ptr Some,
        dup builtin cconst = if(drop const Some,
        dup builtin crestrict = if(drop restrict Some,
        dup builtin cvolatile = if(drop volatile Some,
            drop2 None
        ))))
    }

    def >Tycon [ Data -- Tycon ] { Tycon.Data }
    def >Namespace [ Data -- Namespace ] { >Tycon >Namespace }
}

patch +Mirth {
    def make-prim-data! [ +Mirth |- Str List(Var) Data List(Tag) Maybe(CType) -- ] {
        >ctype >tags >data >params >name

        @params len >Int dup @data arity!
        @name Name @data name!
        name> swap QName.Prim @data PropLabel.DataQName prop @data ~qname !
        ctype> @data PropLabel.DataCType prop @data ~ctype? !

        @tags for(@data swap data!)
        tags> @data tags!

        params> @data PropLabel.DataParams prop @data ~params !
        None @data head?!

        data> Def.Data register
    }

    def make-prim-tag! [ +Mirth |- Str Int List(Type) Tag -- ] {
        >tag >inputs >value Name >name

        name> @tag name!
        value> @tag value!
        None @tag sig?!
        None @tag doc!
        @inputs map(StackTypePart.Cons) @tag inputs!
        @inputs len @tag num-type-inputs!
        0u @tag num-resource-inputs!
        L0 @tag label-inputs!

        @tag .data params >Ctx
        inputs> foldl(T0, T*)
        T0 @tag .data full-type T*+ T->
        @tag PropLabel.TagType prop2
        @tag ~ctx-type !

        tag> Def.Tag register
    }

    def make-prim-intlike! [ +Mirth |- Str Data Str Tag Str -- ] {
        >underlying >tag >tagname >data >dataname

        dataname> L0 data> @tag L1 underlying> CType.Int Some make-prim-data!
        tagname> 0 Type.I64 L1 tag> make-prim-tag!
    }

    def make-prim-uintlike! [ +Mirth |- Str Data Str Tag Str -- ] {
        >underlying >tag >tagname >data >dataname

        dataname> L0 data> @tag L1 underlying> CType.UInt Some make-prim-data!
        tagname> 0 Type.U64 L1 tag> make-prim-tag!
    }

    def init-data! [ +Mirth |- ] {
        Type.TYPE "a" Name Var.New! >a
        "CPtr" @a L1 builtin cptr builtin mk-cptr L1 None make-prim-data!
        "CPtr" 0 Type.Ptr L1 builtin mk-cptr make-prim-tag!
        "CConst" @a L1 builtin cconst builtin mk-cconst L1 None make-prim-data!
        "CConst" 0 @a Type.Var L1 builtin mk-cconst make-prim-tag!
        "CRestrict" @a L1 builtin crestrict builtin mk-crestrict L1 None make-prim-data!
        "CRestrict" 0 @a Type.Var L1 builtin mk-crestrict make-prim-tag!
        "CVolatile" @a L1 builtin cvolatile builtin mk-cvolatile L1 None make-prim-data!
        "CVolatile" 0 @a Type.Var L1 builtin mk-cvolatile make-prim-tag!
        a> drop

        "CVoid" L0 builtin cvoid builtin mk-cvoid L1 "void" CType.Void Some make-prim-data!
        "CVoid" 0 L0 builtin mk-cvoid make-prim-tag!

        "CChar"      builtin cchar      "CChar"      builtin mk-cchar      "char"         make-prim-intlike!
        "CIChar"     builtin cichar     "CIChar"     builtin mk-cichar     "signed char"  make-prim-intlike!
        "CShort"     builtin cshort     "CShort"     builtin mk-cshort     "short"        make-prim-intlike!
        "CInt"       builtin cint       "CInt"       builtin mk-cint       "int"          make-prim-intlike!
        "CLong"      builtin clong      "CLong"      builtin mk-clong      "long"         make-prim-intlike!
        "CLongLong"  builtin clonglong  "CLongLong"  builtin mk-clonglong  "long long"    make-prim-intlike!
        "CISize"     builtin cisize     "CISize"     builtin mk-cisize     "ssize_t"      make-prim-intlike!
        "CIntPtr"    builtin cintptr    "CIntPtr"    builtin mk-cintptr    "intptr_t"     make-prim-intlike!

        "CUChar"     builtin cuchar     "CUChar"     builtin mk-cuchar     "unsigned char"      make-prim-uintlike!
        "CUShort"    builtin cushort    "CUShort"    builtin mk-cushort    "unsigned short"     make-prim-uintlike!
        "CUInt"      builtin cuint      "CUInt"      builtin mk-cuint      "unsigned int"       make-prim-uintlike!
        "CULong"     builtin culong     "CULong"     builtin mk-culong     "unsigned long"      make-prim-uintlike!
        "CULongLong" builtin culonglong "CULongLong" builtin mk-culonglong "unsigned long long" make-prim-uintlike!
        "CUSize"     builtin cusize     "CUSize"     builtin mk-cusize     "size_t"             make-prim-uintlike!
        "CUIntPtr"   builtin cuintptr   "CUIntPtr"   builtin mk-cuintptr   "uintptr_t"          make-prim-uintlike!
    }

    def data-qname [ +Mirth |- Data Name Int -- QName ] {
        >arity >name Tycon.Data Namespace.Tycon >namespace QName
    }

    def data-word-qname [ +Mirth |- Data Str Nat -- QName ] {
        dip:Name >Int data-qname
    }
}

struct SemiTransparentData {
    tag: Tag
    input: StackTypePart
}

#######
# TAG #
#######

table +Mirth |- Tag {
    doc: Maybe(Str)
    data: Data
    name: Name
    value: Int
    sig?: Maybe(Token)
    ~ctx-type: Prop([Ctx ArrowType])
    label-inputs: List(Label) { @self label-inputs-from-sig }
    num-label-inputs: Nat { @self label-inputs len }
    num-type-inputs: Nat { @self num-type-inputs-from-sig }
    num-resource-inputs: Nat { @self num-resource-inputs-from-sig }
    inputs: List(StackTypePart) { @self type dom split-parts nip }
    fields: List(TagField) { @self dup inputs filter-some:>TagField? nip }
    untag?: Maybe(Word) { None }

    output-type: Type/Resource {
        @self >self
        @self type cod expand match {
            { Cons -> nip Left }
            { With -> nip Right }
            { _ ->
                drop @self str("Unexpected output type for constructor "; qname;)
                @self .data head? if?(swap emit-error!, error!)
                Type.Error @self data is-resource? if(Resource Right, Left)
            }
        }
        self> drop
    }
    --
    def arity    [ +Mirth |- Tag -- Int ] { drop 0 } # TODO, allow higher-order tags, and specialize them away!
    def qname    [ +Mirth |- Tag -- QName ] { dup data >Namespace >namespace dup name >name arity >arity QName }
    def ctx-type [ +Mirth |- Tag -- Ctx ArrowType ] { ~ctx-type force! unpack2 }
    def ctx      [ +Mirth |- Tag -- Ctx           ] { ctx-type drop }
    def type     [ +Mirth |- Tag -- ArrowType     ] { ctx-type nip }

    def name;  [ +Mirth +Str |- Tag -- ] { rdip:name  name;  }
    def qname; [ +Mirth +Str |- Tag -- ] { rdip:qname qname; }

    def only-tag? [ +Mirth |- Tag -- Bool ] { .data tags single? >Bool }

    def label-inputs-from-sig [ +Mirth |- Tag -- List(Label) ] {
        sig? if?(run-tokens filter-some(sig-label?), List.Nil)
    }

    def num-type-inputs-from-sig [ +Mirth |- Tag -- Nat ] {
        dup sig? if?(
            run-length
            over num-resource-inputs-from-sig sub-clamp
            swap label-inputs-from-sig len sub-clamp,
            drop 0u
        )
    }

    def num-resource-inputs-from-sig [ +Mirth |- Tag -- Nat ] {
        sig? if?(
            run-tokens filter(could-be-sig-label? not) filter-some(name?)
            filter(or(could-be-resource-var, could-be-resource-con))
            len,
            0u
        )
    }

    def num-total-inputs [ +Mirth |- Tag -- Nat ] {
        >tag
        @tag num-label-inputs
        @tag num-type-inputs +
        tag> num-resource-inputs +
    }

    def is-transparent? [ +Mirth |- Tag -- Bool ] {
        .data is-transparent?
    }

    def semi-transparent? [ +Mirth |- Tag -- Maybe(SemiTransparentData) ] {
        .data semi-transparent?
    }

    def is-unit? [ +Mirth |- Tag -- Bool ] {
        .data is-unit? >Bool
    }

    def outputs-resource? [ +Mirth |- Tag -- Bool ] {
        .data is-resource?
    }

    def prefer-inline? [ +Mirth |- Tag -- Bool ] {
        dup .data semi-transparent?
        or(dup num-total-inputs 0=)
        nip
    }
}

#
# Partial Data
#

||| DataPartial represents a data type with missing parts.
||| In general, it could represent missing fields, missing tags, etc.
||| For now, all we need to represent is a single missing field.
struct DataPartial {
    data:Data
    field:Label
    --
    def = [ +Mirth |- DataPartial DataPartial -- Bool ] {
        /DataPartial /DataPartial
        data> data> =
        field> field> = and
    }

    def unify! [ +Mirth |- DataPartial DataPartial -- Type ] {
        dup2 = if(drop Type.DataPartial, both(Type.DataPartial) unify-failed!)
    }
}

struct TagField {
    tag: Tag
    label: Label
    type/resource: Type/Resource
}


||| Parse a data declaration. It looks like one of:
|||
|||     data ( TypeAtom, DataTag* DataDecls )
|||     data TypeAtom { DataTag* DataDecls }
def parse-data [ +Mirth Token |- SyntaxData ] {
    dup doc >doc
    dup num-args 0> if(
        succ dup lparen? else("expected left parenthesis '('" emit-fatal-error!)
        succ parse-data-header >header
        dup comma? then(succ)
        parse-data-tags >tags
        parse-data-decls! >decls
        dup rparen? else("expected right parenthesis ')'" emit-fatal-error!)
        succ,

        succ parse-data-header >header
        dup lcurly? else("expected left curly brace '{'" emit-fatal-error!)
        succ parse-data-tags >tags
        parse-data-decls! >decls
        dup rcurly? else("expected right curly brace '}'" emit-fatal-error!)
        succ
    )
    SyntaxData
}

def parse-data-header [ +Mirth Token |- SyntaxDataHeader ] {
    dup >head next
    @head last-name? has(could-be-constructor)
        else(@head "Expected type name." emit-fatal-error!)
    SyntaxDataHeader
}

def parse-data-tags [ +Mirth Token |- List(SyntaxDataTag) ] {
    collect-while(dup data-tags-end? not, parse-data-tag)
}

def data-tags-end? [ +Mirth |- Token -- Bool ] {
    dup args-end? or(dup sig-dashes?) nip
}

||| Parse a data tag. It looks like one of these:
|||
|||     Tag
|||     Tag -> Type* &ArgEnd
|||     Tag [ Type* ]
|||
def parse-data-tag [ +Mirth Token |- SyntaxDataTag ] {
    dup doc >doc
    dup >head
    dup int? dup >value? then(succ)
    dup name? filter(could-be-constructor)
    unwrap("Expected constructor name." emit-fatal-error!) >name
    succ dup arrow? if(
        succ dup Some >sig? sig-next-stack-end
        dup arg-end? else("Expected comma." emit-fatal-error!),
        dup lsquare? if(
            succ dup Some >sig? sig-next-stack-end
            dup rsquare? else("Expected right square bracket ']'" emit-fatal-error!)
            succ,

            None >sig?
        )
    )
    dup comma? then(succ)
    SyntaxDataTag
}

||| Parse a struct declaration. This looks like this:
|||
|||     struct(TypeAtom, Type* DataDecls)
|||     struct TypeAtom { Type* DataDecls }
|||
def parse-struct [ +Mirth Token |- SyntaxData ] {
    dup doc >doc
    dup num-args 0> if(
        succ dup lparen? then("Expected left parenthesis '('" emit-fatal-error!)
        succ parse-data-header >header
        dup comma? then(succ)
        parse-struct-tag L1 >tags
        parse-data-decls! >decls
        dup rparen? then("Expected right parenthesis ')'" emit-fatal-error!)
        succ,

        succ parse-data-header >header
        dup lcurly? else("expected left curly brace '{'" emit-fatal-error!)
        succ parse-struct-tag L1 >tags
        parse-data-decls! >decls
        dup rcurly? else("expected right curly brace '}'" emit-fatal-error!)
        succ
    )
    SyntaxData
}

||| Data declarations. These start with sig-dashes.
||| This is either empty, or it is dashes followed by decls within an expression.
def parse-data-decls! [ +Mirth Token |- Maybe(Token) ] {
    dup sig-dashes? if(
        succ dup while(dup arg-end? not, next) swap Some,
        None
    )
}

def parse-struct-tag [ +Mirth Token header:SyntaxDataHeader |- SyntaxDataTag ] {
    None >doc
    @header head >head
    @head last-name? filter(could-be-constructor)
    unwrap(@header head "Expected constructor name." emit-fatal-error!) >name
    None >value?
    dup Some >sig?
    sig-next-stack-end
    SyntaxDataTag
}

struct SyntaxData {
    doc: Maybe(Str)
    header: SyntaxDataHeader
    tags: List(SyntaxDataTag)
    decls: Maybe(Token)
}

struct SyntaxDataHeader {
    head: Token
}

struct SyntaxDataTag {
    doc: Maybe(Str)
    head: Token
    value?: Maybe(Int)
    name: Name
    sig?: Maybe(Token)
}

def elab-data!   { parse-data   elab-data-aux! }
def elab-struct! { parse-struct elab-data-aux! }

def elab-data-aux! [ +World +Mirth |- SyntaxData -- ] {
    /SyntaxData
    Data.Alloc!
    doc> over doc!
    header> elab-data-header!
    tags> for(elab-data-tag!)
    decls> for(elab-data-decls!)
    elab-data-done!
}

||| Get the header, name, arity for a data type.
def elab-data-header! [ +Mirth Data |- SyntaxDataHeader -- ] {
    /SyntaxDataHeader >data
    @head last-name? has(could-be-constructor)
        else(@head "Expected type name." emit-fatal-error!)
    elab-def-head
    @head Some @data head?!
    arity> >Int @data arity!
    name> @data name!
    @data PropLabel.DataQName >label Prop @data ~qname !
    @head args @data PropLabel.DataParams prop(elab-data-params!) @data ~params !
    @data Def.Data register
    head> drop
    data>
}

# TODO check header args are well-formed / elaborate them properly
#  as part of: https://github.com/mirth-lang/mirth/issues/246
def elab-data-params! [ +Mirth |- List(Token) -- List(Var) ] {
    Ctx.L0 swap for(
        dup name? unwrap("Expected a parameter name." emit-fatal-error!)
        over2 Ctx.lookup then("Duplicate parameter name." emit-fatal-error!)

        None
        or?(dup sig-type-var? map(Type.TYPE swap Var.New!))
        or?(dup sig-resource-var? map(Type.RESOURCE swap Var.New!))
        or?(dup sig-stack-var? map(Type.STACK swap Var.New!))
        unwrap("Invalid parameter name." emit-fatal-error!)
        nip Ctx.new
    ) >List
}

||| Get a tag associated with a data type.
def elab-data-tag! [ +Mirth Data |- SyntaxDataTag -- ] {
    /SyntaxDataTag dup >data >data

    value?> else?( @data last-tag-value 1+ ) >value
    Tag.Make! >tag
    @tag @data add-tag!
    @tag Def.Tag register

    head> @tag @tag PropLabel.TagType prop2(
        >tag >token
        @tag .data params >Ctx >ctx
        True >allow-implicit-type-vars
        False >allow-type-holes
        +TypeElab
        T0 @tag rdip(data full-type) T*+
        tag> rdip:sig? match(
            None -> T0,
            Some -> token! T0 elab-stack-type-parts!
        )
        swap T-> dip:ctx pack2 +TypeElab.rdrop
    ) @tag ~ctx-type !

    @tag outputs-resource? not then(
        @tag sig? for(
            run-tokens find(
                or(sig-resource-con? >Bool, sig-resource-var? >Bool)
            ) for ("Value type cannot contain resource." emit-error!)
        )
    )

    tag> drop
    data>
}

def elab-data-decls! [ +World +Mirth Data |- Token -- ] {
    dup Some >error-token
    over Tycon.Data Namespace.Tycon PropLabel.DefiningNamespace prop Some >defining-namespace
    LexicalState with-lexical-state (
        while(dup arg-end? not, elab-decl!)
        drop
    )
}

def data-word-new! [ +Mirth |- Data Str Nat doc:Maybe(Str) -- Word ] {
    dup >arity
    over Name >name
    dip2(dup head? unwrap("Missing data token information." fatal-error!) dup >body >head)
    data-word-qname >qname
    None >sig?
    Word.New!

    qname> over PropLabel.WordQName prop over ~qname !
}

def elab-data-done! [ +Mirth |- Data -- ] {
    >dat
    @dat is-value-type? then (
        None >doc # TODO
        @dat "enum-value" 0u data-word-new! >word
        @dat params >Ctx
        @dat data-get-enum-value-type
        @word PropLabel.WordType prop2 @word ~ctx-type !
        @word ab-build-word!(
            L0 @dat Op.DataGetEnumValue ab-op!
        ) make-inline!
        word> drop
    )

    @dat is-enum? then (
        None >doc # TODO
        @dat "from-enum-value-unsafe" 0u data-word-new! >word
        @dat params >Ctx
        @dat data-from-enum-value-type
        @word PropLabel.WordType prop2 @word ~ctx-type !
        @word ab-build-word!(
            L0 @dat Op.DataFromEnumValue ab-op!
        ) make-inline!
        word> drop
    )

    @dat tags single? for(
        >tag
        None >doc # TODO
        @dat "/" @tag name >Str cat 0u data-word-new! >untag
        @untag Some @tag untag?!
        @tag @untag PropLabel.WordType prop(ctx-type invert pack2) @untag ~ctx-type !
        @tag @untag @untag PropLabel.WordArrow prop2(
            >untag >tag
            untag> ab-build-word-arrow!(
                @tag rdip:type dom >cod
                @tag rdip:data rdip:head? unwrap("Missing data token info" rdip:fatal-error!) dup >body
                ab-match!(
                    dup case!(@tag +Pattern.tag!, id)
                )
            )
            tag> drop
        ) @untag ~arrow !
        @untag make-inline!
        @tag create-projectors!
        tag> untag> drop2
    )

    @dat @dat PropLabel.DataCType prop(
        >dat
        @dat is-unit? if(
            "void" CType.Void Some,
        @dat is-enum? if(
            "int" CType.Int Some,
        @dat semi-transparent? if?(
            input match(
                Cons -> ctype?,
                ConsLabel -> drop ctype?,
                With -> ctype?,
                WithLabel -> drop ctype?,
            ),
            None
        )))
        dat> drop
    ) @dat ~ctype? !
    dat> drop
}

||| Return the tag's output type or resource in context, except for a missing field.
def Tag.output-type-except-field [ +Mirth |- Label Tag -- Type/Resource ] {
    dup output-type map(except-field, except-field)
}

||| Return the input type for a tag along a given label.
def Tag.project-input-label [ +Mirth |- Label Tag -- Maybe(Type/Resource) ] {
    type dom label-top?
}

def Tag.project-tag-field [ +Mirth |- Label Tag -- Maybe(TagField) ] {
    dup2 project-input-label if? (
        >type/resource >tag >label TagField Some,
        drop2 None
    )
}

def data-get-label-type [ +Mirth |- TagField -- ArrowType ] {
    /TagField
    type/resource> match {
        { Left ->
            T0 @tag output-type T*+ swap T1
            @tag .data is-resource? then(@tag output-type T*+)
            T-> }
        { Right ->
            T0 @tag output-type T*+
            T0 rotl T+ @label @tag output-type-except-field T*+
            T-> }
    }
    label> tag> drop2
}

def data-set-label-type [ +Mirth |- TagField -- ArrowType ] {
    /TagField
    type/resource> match {
        { Left ->
            T1 @tag output-type T*+
            T0 @tag output-type T*+
            T-> }
        { Right ->
            T0 swap T+ @label @tag output-type-except-field T*+
            T0 @tag output-type T*+
            T-> }
    }
    label> tag> drop2
}

def create-projectors! [ +Mirth |- Tag -- ] {
    >tag
    @tag .data >dat
    @tag label-inputs reverse-for(
        >lbl
        @dat @lbl name 0 data-qname undefined-soft? then(
            None >doc # TODO
            @dat @lbl >Str 0u data-word-new! >lbl_get

            None >doc # TODO
            @dat @lbl >Str "!" cat 0u data-word-new! >lbl_set

            None >doc # TODO
            @dat @lbl >Str 1u data-word-new! >lbl_lens

            @lbl_get make-inline!
            @tag @lbl @lbl_get PropLabel.WordType prop2(
                dip(dup dip(ctx))
                swap project-tag-field unwrap("logic error: expected field in tag." fatal-error!)
                data-get-label-type
                pack2
            ) @lbl_get ~ctx-type !
            @tag @lbl @lbl_get dup PropLabel.WordArrow prop3(ab-build-word-arrow!(
                dip(
                    swap rdip:project-tag-field unwrap("logic error: expected field in tag." rdip:fatal-error!)
                    Op.DataGetLabel L0 swap ab-op!
                )
            )) @lbl_get ~arrow !

            @lbl_set make-inline!
            @tag @lbl @lbl_set PropLabel.WordType prop2(
                dip(dup dip(ctx))
                swap project-tag-field unwrap("logic error: expected field in tag." fatal-error!)
                data-set-label-type
                pack2
            ) @lbl_set ~ctx-type !
            @tag @lbl @lbl_set dup PropLabel.WordArrow prop3(ab-build-word-arrow!(
                dip(
                    swap rdip:project-tag-field unwrap("logic error: expected field in tag." rdip:fatal-error!)
                    Op.DataSetLabel L0 swap ab-op!
                )
            )) @lbl_set ~arrow !

            @lbl_lens make-inline!
            @tag @lbl @lbl_lens PropLabel.WordType prop2(
                >lbl >tag
                lbl> @tag project-input-label unwrap("logic error: expeted field in tag." fatal-error!) >lblty
                @tag output-type >datty

                @tag ctx
                "*x" StackType.NewInCtx >sx
                "*y" StackType.NewInCtx >sy
                @sx @datty T*+
                    @sx @lblty T*+
                    @sy @lblty T*+ T-> >Type T*
                @sy  @datty T*+
                T-> pack2

                sx> sy> drop2
                lblty> datty> drop2
                tag> drop
            ) @lbl_lens ~ctx-type !
            @lbl_lens dup PropLabel.WordParams prop(
                type dom top-type? unwrap("logic error: expected parameter" fatal-error!)
                arrow? unwrap("logic error: expected arrow" fatal-error!)
                "f" Name Var.NewAutoRun! >var None >default Param L1
            ) @lbl_lens ~params !

            @dat @lbl_get @lbl_set @lbl_lens dup PropLabel.WordArrow prop4(
                >lbl_lens >lbl_set >lbl_get >dat
                @lbl_lens ab-build-word-arrow!(
                    lbl_lens> rdip:params map(.var) dup over2 ab-lambda!(
                        single? unwrap("Expected one parameter." rdip:fatal-error!) >f
                        dat> rdip:is-resource? if(
                            L0 lbl_get> ab-word!
                            ab-rdip!(f> ab-var!)
                            L0 lbl_set> ab-word!,

                            L0 Prim.Dup ab-prim!
                            ab-dip!(
                                L0 lbl_get> ab-word!
                                f> ab-var!
                            )
                            L0 lbl_set> ab-word!
                        )
                    )
                )
            ) @lbl_lens ~arrow !
            lbl_get> lbl_set> lbl_lens> drop3
        )
        lbl> drop
    )
    dat> tag> drop2
}
