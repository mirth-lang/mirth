||| The specializer tries to remove higher-order words by specializing them with their arguments.
||| This should be especially doable in Mirth because local variables are less of an issue.
module(mirth.specializer)

import(std.prelude)
import(std.list)
import(std.maybe)
import(std.lazy)
import(std.map)
import(std.str)

import(mirth.word)
import(mirth.arrow)
import(mirth.match)
import(mirth.type)
import(mirth.elab)
import(mirth.name)
import(mirth.var)
import(mirth.prim)

def(run-specializer!, Arrow -- Arrow,
    +SPCheck.begin! check-arrow! loop! end!)

field(Word.~sp-checked, Word, Bool)
field(Block.~sp-checked, Block, Bool)

data(+SPCheck, SPCHECK -> checklist:List(SPCheckItem))

def(+SPCheck.begin!, -- +SPCheck, L0 >checklist SPCHECK)
def(+SPCheck.end!, +SPCheck --, SPCHECK -> checklist> drop)
def(+SPCheck.loop!, +SPCheck -- +SPCheck,
    while-some(checklist:uncons, do-item-check!))

data(SPCheckItem,
    SPCHECK_WORD -> Word,
    SPCHECK_BLOCK -> Block)

def(+SPCheck.do-item-check!, SPCheckItem +SPCheck -- +SPCheck,
    SPCHECK_WORD -> dup dip(arrow check-arrow! ready) ~arrow !,
    SPCHECK_BLOCK -> dup dip(arrow check-arrow! ready) ~arrow !)

def(+SPCheck.check-arrow!, Arrow +SPCheck -- Arrow +SPCheck,
    atoms:flatmap(check-atom!))

def(+SPCheck.check-atom!, Atom +SPCheck -- List(Atom) +SPCheck,
    dup op match(
        OpNone -> L1,
        OpPrim -> check-prim-atom!,
        OpWord -> check-word-atom!,
        OpExternal -> drop L1,
        OpBuffer -> drop L1,
        OpVariable -> drop L1,
        OpField -> drop L1,
        OpInt -> drop L1,
        OpStr -> drop L1,
        OpTag -> drop L1,
        OpMatch -> check-match! OpMatch swap op! L1,
        OpLambda -> check-lambda! OpLambda swap op! L1,
        OpVar -> drop L1,
        OpBlockPush -> push-check-block! L1,
        OpBlockRun -> push-check-block! L1,
        OpCoerce -> drop L1,
        OpLabelPush -> drop L1,
        OpLabelPop -> drop L1,
	OpDataGetTag -> drop L1,
        OpDataGetLabel -> drop2 L1,
        OpDataSetLabel -> drop2 L1,
    ))

def(+SPCheck.check-arg!, Arg +SPCheck -- +SPCheck,
    ArgBlock -> push-check-block!)
def(+SPCheck.check-prim-atom!, Atom Prim +SPCheck -- List(Atom) +SPCheck,
    drop dup args for(check-arg!) L1)
def(+SPCheck.check-word-atom!, Atom Word +SPCheck -- List(Atom) +SPCheck,
    dup push-check-word!
    over args >List+ match(
        None -> drop L1,
        Some ->
            dup for(check-arg!)
            over prefer-inline? not or(
            dup map(free-vars) any(dup any(dup is-physical?))) if(
                # too complicated, let's skip it
                drop2 L1,

                # boot up the specializer for real!
                SPKEY swap specialize-word!
                dup push-check-word!
                swap ab-build-over-atom!(ab-word!) atoms
            )
        )
    )

def(+SPCheck.check-match!, Match +SPCheck -- Match +SPCheck,
    cases:map(check-case!))
def(+SPCheck.check-case!, Case +SPCheck -- Case +SPCheck,
    body:check-arrow!)
def(+SPCheck.check-lambda!, Lambda +SPCheck -- Lambda +SPCheck,
    body:check-arrow!)

def(+SPCheck.push-check-word!, Word +SPCheck -- +SPCheck,
    dup ~sp-checked @? unwrap-or(False) if(
        drop,
        True over ~sp-checked !
        SPCHECK_WORD checklist:cons
    ))
def(+SPCheck.push-check-block!, Block +SPCheck -- +SPCheck,
    dup ~sp-checked @? unwrap-or(False) if(
        drop,
        True over ~sp-checked !
        SPCHECK_BLOCK checklist:cons
    ))

def(ab-build-over-atom!(f), (*a +AB -- *b +AB) *a Atom -- *b Arrow,
    /Atom
    ctx>
    dom> cod> T->
    token> home>
    subst> op> args> drop3
    ab-build-hom!(dip(f)))

data(SPKey, SPKEY -> List+(Arg))
def(SPKey.==, SPKey SPKey -- Bool, both(/SPKEY) ==(==))
def(SPKey.>Str, SPKey -- Str,
    SPKEY -> Str("(" ; dip:"" for(dip:; >Str ; ",") drop ")" ;))
def(SPKey.>Name, SPKey -- Name,
    >Str >Name)

field(Word.~sp-synthed, Word, Map(SPKey,Word))
def(Word.sp-synthed, Word -- Map(SPKey,Word),
    ~sp-synthed @? unwrap-or(Map.empty))

||| Specialize a word to a particular list of arguments.
||| Those other arguments are pushed on the stack.
def(specialize-word!, SPKey Word -- Word,
    \(k w -> k w sp-synthed lookup(==) match(
    Some -> False over ~prefer-inline? !,
    None ->
        w head >head
        None >sig
        w body >body
        w NAMESPACE_WORD k >Name QNAME0 >qname
        0 >arity
        Word.new! \(w' ->
            k >key w' >value KVPair
            w sp-synthed insert w ~sp-synthed !
            # Str(w cname ; k /SPKEY
            #     for("_" ; /ArgBlock index show ;)
            # ) w' ~cname !

            k w delay2(
                ctx-type specialize-ctx-type pack2
            ) w' ~ctx-type !
            True w' ~prefer-inline? !
            k w w' delay3(ab-build-word-arrow!(dip(
                synth-specialized-word!
            ))) w' ~arrow !
            w'
        )
    )))

def(specialize-ctx-type, SPKey Ctx ArrowType -- Ctx ArrowType,
    nip dip:SUBST_NIL freshen nip swap
    /SPKEY
    dup first token >token +Gamma
    dip:SUBST_NIL nip
    dip(ArrowType.unpack swap) reverse-for(
        dip(force-cons?!
            unwrap-or("unexpected domain in specialize-ctx-type" panic!)
            unpack2)
        /ArgBlock type TMorphism unify! drop
    )
    rdrop
    swap T->
    dip:Ctx0 rigidify-sig!)


data(+SPSynth, +SPSYNTH ->
    spkey:SPKey spword:Word spmap:Map(Var,Block) +AB)
def(+SPSynth.ab(f),
        (*a spkey:SPKey spword:Word spmap:Map(Var,Block) +AB --
         *b spkey:SPKey spword:Word spmap:Map(Var,Block) +AB)
        *a +SPSynth -- *b +SPSynth,
    +SPSYNTH -> f +SPSYNTH)

def(synth-specialized-word!, SPKey Word +AB -- +AB,
    dup >spword dip(>spkey)
    Word.arrow atoms /L1
    unwrap-or("unexpected shape for synth-specialized-word!" panic!)
    op match(
        OpLambda ->
            dup params
            spkey> dup >spkey /SPKEY >List
            assert!(
                over len over len ==,
                "wrong number of lambda params in synth-specialized-word!"
            )
            map2(/ArgBlock >value >key KVPair) Map >spmap
            +SPSYNTH
            body synth-arrow!
            /+SPSYNTH spkey> spword> spmap> drop3,
        _ -> "unexpected shape" panic!
    ))

def(+SPSynth.synth-arrow!, Arrow +SPSynth -- +SPSynth,
    atoms for:synth-atom!)
def(+SPSynth.synth-atom!, Atom +SPSynth -- +SPSynth,
    dup token ab:ab-token!
    dup args for:synth-arg! op synth-op!)

def(+SPSynth.synth-arg!, Arg +SPSynth -- +SPSynth,
    ArgBlock -> synth-block!)

def(+SPSynth.synth-op!, Op +SPSynth -- +SPSynth,
    OpMatch -> synth-match!,
    OpLambda -> synth-lambda!,
    OpBlockPush -> synth-block!,
    OpBlockRun -> synth-run!,
    OpVar -> synth-var!,
    _ -> ab:ab-op!)

def(+SPSynth.synth-block!, Block +SPSynth -- +SPSynth,
    # dup free-vars any(dup spmap lookup(==) some?) if(
        dup to-run-var bind(spmap lookup(==)) match(
            None -> ab:ab-block!(+SPSYNTH arrow synth-arrow! /+SPSYNTH),
            Some -> nip OpBlockPush ab:ab-op!
        ),
        # OpBlockPush ab:ab-op!
    # ))
    )

def(+SPSynth.synth-run!, Block +SPSynth -- +SPSynth,
    arrow synth-arrow!)

def(+SPSynth.synth-var!, Var +SPSynth -- +SPSynth,
    dup spmap lookup(==) match(
        Some -> nip OpBlockRun ab:ab-op!,
        # Some -> nip arrow synth-arrow!,
        None -> ab:ab-var!
    ))

def(+SPSynth.synth-match!, Match +SPSynth -- +SPSynth,
    MetaVar.new! STMeta >cod
    dup body >body
    cases ab:ab-match!(for(
        dup pattern token-start
        over Case.body token-start case!(
            dup Case.pattern atoms reverse-for(op +Pattern.op!),
            +SPSYNTH body synth-arrow! /+SPSYNTH
        )
    )))

def(+SPSynth.synth-lambda!, Lambda +SPSynth -- +SPSynth,
    dup params
    ab:ab-lambda!(+SPSYNTH
        body synth-arrow!
    /+SPSYNTH))
