||| The specializer tries to remove higher-order words by specializing them with their arguments.
||| This should be especially doable in Mirth because local variables are less of an issue.
module mirth.specializer

import std.prelude
import std.list
import std.maybe
import std.map
import std.str

import mirth.mirth
import mirth.word
import mirth.arrow
import mirth.data
import mirth.match
import mirth.type
import mirth.elab
import mirth.name
import mirth.var
import mirth.prim

def(run-specializer!, +Mirth Arrow -- +Mirth Arrow,
    +SPCheck.begin! check-arrow! loop! end!)

field(Word.~sp-checked, Word, Bool)
field(Block.~sp-checked, Block, Bool)

data(+SPCheck, SPCHECK -> checklist:List(SPCheckItem))

def(+SPCheck.begin!, -- +SPCheck, List.L0 >checklist SPCHECK)
def(+SPCheck.end!, +SPCheck --, SPCHECK -> checklist> drop)
def(+SPCheck.loop!, +Mirth +SPCheck -- +Mirth +SPCheck,
    while-some(checklist:uncons, do-item-check!))

data(SPCheckItem,
    SPCHECK_WORD -> Word,
    SPCHECK_BLOCK -> Block)

def(+SPCheck.do-item-check!, SPCheckItem +Mirth +SPCheck -- +Mirth +SPCheck,
    SPCHECK_WORD -> >w @w rdip:arrow check-arrow! @w WordArrow rdip:prop w> ~arrow !,
    SPCHECK_BLOCK -> >b @b rdip:arrow check-arrow! @b BlockArrow rdip:prop b> ~arrow !)

def(+SPCheck.check-arrow!, Arrow +Mirth +SPCheck -- Arrow +Mirth +SPCheck,
    atoms:flatmap(check-atom!))

def(+SPCheck.check-atom!, Atom +Mirth +SPCheck -- List(Atom) +Mirth +SPCheck,
    dup op match(
        OpNone -> List.L1,
        OpPrim -> check-prim-atom!,
        OpWord -> check-word-atom!,
        OpExternal -> drop List.L1,
        OpBuffer -> drop List.L1,
        OpVariable -> drop List.L1,
        OpField -> drop List.L1,
        OpInt -> drop List.L1,
        OpF64 -> drop List.L1,
        OpStr -> drop List.L1,
        OpTag -> drop List.L1,
        OpMatch -> check-match! OpMatch swap op! List.L1,
        OpLambda -> check-lambda! OpLambda swap op! List.L1,
        OpVar -> drop List.L1,
        OpBlockPush -> push-check-block! List.L1,
        OpBlockRun -> push-check-block! List.L1,
        OpLabelPush -> drop List.L1,
        OpLabelPop -> drop List.L1,
        OpLabelPushR -> drop List.L1,
        OpLabelPopR -> drop List.L1,
        OpDataGetEnumValue -> drop List.L1,
        OpDataFromEnumValue -> drop List.L1,
        OpDataGetLabel -> drop List.L1,
        OpDataSetLabel -> drop List.L1,
        OpTableToIndex -> drop List.L1,
        OpTableFromIndex -> drop List.L1,
    ))

def(+SPCheck.check-arg!, Arg +SPCheck -- +SPCheck,
    ArgBlock -> push-check-block!)
def(+SPCheck.check-prim-atom!, Atom Prim +SPCheck -- List(Atom) +SPCheck,
    drop dup args for(check-arg!) List.L1)
def(+SPCheck.check-word-atom!, +Mirth +SPCheck Atom Word -- +Mirth +SPCheck List(Atom),
    dup push-check-word!
    over args >List+? match(
        None -> drop List.L1,
        Some ->
            dup has(rdip:free-vars has(is-physical?)) if(
                # can't specialize, just check the args
                dup for(check-arg!)
                drop2 List.L1,

                # boot up the specializer for real!
                SPKEY swap rdip:specialize-word!
                dup push-check-word!
                swap rdip:ab-build-over-atom!(ab-word!) atoms
            )
        )
    )

def(+SPCheck.check-match!, Match +Mirth +SPCheck -- Match +Mirth +SPCheck,
    cases:map(check-case!))
def(+SPCheck.check-case!, Case +Mirth +SPCheck -- Case +Mirth +SPCheck,
    body:check-arrow!)
def(+SPCheck.check-lambda!, Lambda +Mirth +SPCheck -- Lambda +Mirth +SPCheck,
    body:check-arrow!)

def(+SPCheck.push-check-word!, Word +SPCheck -- +SPCheck,
    dup ~sp-checked @? unwrap(False) if(
        drop,
        True over ~sp-checked !
        SPCHECK_WORD checklist:Cons
    ))
def(+SPCheck.push-check-block!, Block +SPCheck -- +SPCheck,
    dup ~sp-checked @? unwrap(False) if(
        drop,
        True over ~sp-checked !
        SPCHECK_BLOCK checklist:Cons
    ))

def(ab-build-over-atom!(f), (*a +Mirth +AB -- *b +Mirth +AB) *a Atom +Mirth -- *b Arrow +Mirth,
    /Atom
    ctx>
    dom> cod> T->
    token> home>
    subst> op> args> drop3
    ab-build-hom!(dip(f)))

def(Arg.similar, +Mirth Arg Arg -- +Mirth Bool, both(/ArgBlock) similar)
def(Block.similar, +Mirth Block Block -- +Mirth Bool,
    dup2 ==
    or(dup2 on2(arrow) similar)
    dip:drop2
)
def(Arrow.similar, +Mirth Arrow Arrow -- +Mirth Bool,
    # both(atoms /L1) if-some(swap if-some(similar, drop False), drop False)
    both(atoms) ==:similar
)
def(Atom.similar, +Mirth Atom Atom -- +Mirth Bool,
    dup2 both(op) similar
    and(dup2 both(args) ==:similar)
    dip(drop2)
)
def Op.similar [ +Mirth Op Op -- +Mirth Bool ] {
    { OpNone -> match { OpNone -> True, _ -> drop False }}
    { OpPrim -> swap match { OpPrim -> ==, _ -> drop2 False }}
    { OpWord -> swap match { OpWord -> ==, _ -> drop2 False }}
    { OpExternal -> swap match { OpExternal -> ==, _ -> drop2 False }}
    { OpBuffer -> swap match { OpBuffer -> ==, _ -> drop2 False }}
    { OpVariable -> swap match { OpVariable -> ==, _ -> drop2 False }}
    { OpField -> swap match { OpField -> ==, _ -> drop2 False }}
    { OpInt -> swap match { OpInt -> ==, _ -> drop2 False }}
    { OpF64 -> swap match { OpF64 -> ==, _ -> drop2 False }}
    { OpStr -> swap match { OpStr -> ==, _ -> drop2 False }}
    { OpTag -> swap match { OpTag -> ==, _ -> drop2 False }}
    { OpMatch -> drop2 False }
    { OpLambda -> drop2 False }
    { OpVar -> drop2 False }
    { OpBlockPush -> swap match { OpBlockPush -> similar, _ -> drop2 False }}
    { OpBlockRun -> swap match { OpBlockRun -> similar, _ -> drop2 False }}
    { OpLabelPush -> swap match { OpLabelPush -> ==, _ -> drop2 False }}
    { OpLabelPop -> swap match { OpLabelPop -> ==, _ -> drop2 False }}
    { OpLabelPushR -> swap match { OpLabelPushR -> ==, _ -> drop2 False }}
    { OpLabelPopR -> swap match { OpLabelPopR -> ==, _ -> drop2 False }}
    { OpDataGetEnumValue -> swap match { OpDataGetEnumValue -> ==, _ -> drop2 False }}
    { OpDataFromEnumValue -> swap match { OpDataFromEnumValue -> ==, _ -> drop2 False }}
    { OpDataGetLabel -> swap match { OpDataGetLabel -> similar, _ -> drop2 False }}
    { OpDataSetLabel -> swap match { OpDataSetLabel -> similar, _ -> drop2 False }}
    { OpTableToIndex -> swap match { OpTableToIndex -> ==, _ -> drop2 False }}
    { OpTableFromIndex -> swap match { OpTableFromIndex -> ==, _ -> drop2 False }}
}

def TagField.similar [ TagField TagField -- Bool ] {
    /TagField /TagField
    label> label> ==
    tag> tag> == &&
    type/resource> type/resource> drop2
}

data(SPKey, SPKEY -> List+(Arg))
def(SPKey.similar, +Mirth SPKey SPKey -- +Mirth Bool, both(/SPKEY) ==(similar))
def(SPKey.>Str, +Mirth SPKey -- +Mirth Str,
    SPKEY -> Str("(" ; dip:"" for(dip:; rdip:>Str ; ",") drop ")" ;))
def(SPKey.>Name, +Mirth SPKey -- +Mirth Name,
    >Str >Name)

field(Word.~sp-synthed, Word, Map(SPKey,Word))
def(Word.sp-synthed, Word -- Map(SPKey,Word),
    ~sp-synthed @? unwrap(Map.Nil))

||| Specialize a word to a particular list of arguments.
||| Those other arguments are pushed on the stack.
def specialize-word! [ +Mirth SPKey Word -- +Mirth Word ] {
    >word >key
    @key @word sp-synthed lookup(similar) match(
        Some ->
            # This specialization has already been done. So inline this
            # specialization only if the word was marked as inline.
            @word prefer-inline? over ~prefer-inline? !,
        None ->
            # This word has not been specialized with these arguments before.
            @word head >head
            None >sig?
            @word body >body
            Str( "sp" ; @word sp-synthed len 1+ show ; ) >Name >name
            0u >arity
            Word.new! >word'

            @word NAMESPACE_WORD @word' name 0 QName.Mk
            @word' WordQName prop @word' ~qname !

            @key >key @word' >value KeyValuePair
            @word sp-synthed insert @word ~sp-synthed !

            # @key @word @word' WordType prop2(
            #     ctx-type specialize-ctx-type pack2
            # ) @word' ~ctx-type !
            @word' dup WordType prop(
                arrow ctx-type pack2
            ) @word' ~ctx-type !
            # True @word' ~inferring-type? !
            True @word' ~prefer-inline? !
            @key @word @word' dup WordArrow prop3(ab-build-word-arrow!(dip(
                synth-specialized-word!
            ))) @word' ~arrow !
            @word' type drop
            word'>
    )
    key> word> drop2
}

def(specialize-ctx-type, +Mirth SPKey Ctx ArrowType -- +Mirth Ctx ArrowType,
    nip dip:SUBST_NIL freshen nip swap
    /SPKEY
    dup first token >token +Gamma
    dip:SUBST_NIL nip
    swap dom (
        swap reverse-for(
            dip(force-cons?!
                unwrap("unexpected domain in specialize-ctx-type" rdip:fatal-error!)
                unpack2)
            /ArgBlock type TMorphism unify! drop
        )
    )
    rdrop
    dip:Ctx.L0 rigidify-sig!)

data(+SPSynth, +SPSYNTH ->
    spkey:SPKey spword:Word spmap:Map(Var,Block) +AB)

def(+SPSynth.ab(f),
        (*a spkey:SPKey spword:Word spmap:Map(Var,Block) +AB --
         *b spkey:SPKey spword:Word spmap:Map(Var,Block) +AB)
        *a +SPSynth -- *b +SPSynth,
    +SPSYNTH -> f +SPSYNTH)

def(synth-specialized-word!, +Mirth +AB SPKey Word -- +Mirth +AB,
    dup >spword dip(>spkey)
    rdip:Word.arrow atoms single?
    unwrap("unexpected shape for synth-specialized-word!" rdip:fatal-error!)
    op match(
        OpLambda ->
            dup params
            @spkey /SPKEY >List
            dup2 dip:len len == else(
                "wrong number of lambda params in synth-specialized-word!"
                rdip:fatal-error!
            )
            map2(/ArgBlock >value >key KeyValuePair) >pairs Map >spmap
            +SPSYNTH
            body synth-arrow!
            /+SPSYNTH spkey> spword> spmap> drop3,
        _ -> "unexpected shape" rdip:fatal-error!
    ))

def(+SPSynth.synth-arrow!, +Mirth +SPSynth Arrow -- +Mirth +SPSynth,
    atoms for:synth-atom!)
def(+SPSynth.synth-atom!, +Mirth +SPSynth Atom -- +Mirth +SPSynth,
    dup token ab:ab-token!
    dup args for:synth-arg! op synth-op!)

def(+SPSynth.synth-arg!, +Mirth +SPSynth Arg -- +Mirth +SPSynth,
    ArgBlock -> synth-block!)

def(+SPSynth.synth-op!, +Mirth +SPSynth Op -- +Mirth +SPSynth,
    OpMatch -> synth-match!,
    OpLambda -> synth-lambda!,
    OpBlockPush -> synth-block!,
    OpBlockRun -> synth-run!,
    OpVar -> synth-var!,
    _ -> ab:ab-op!)

def +SPSynth.synth-block! [ +Mirth +SPSynth Block -- +Mirth +SPSynth ] {
    ab:ab-block!(+SPSYNTH synth-run! /+SPSYNTH)
}

def(+SPSynth.synth-run!, +Mirth +SPSynth Block -- +Mirth +SPSynth,
    rdip:arrow synth-arrow!)

def +SPSynth.synth-var! [ +Mirth +SPSynth Var -- +Mirth +SPSynth ] {
    dup spmap lookup match {
        { Some -> nip synth-run! }
        { None -> ab:ab-var! }
    }
}

def(+SPSynth.synth-match!, +Mirth +SPSynth Match -- +Mirth +SPSynth,
    MetaVar.new! STMeta >cod
    dup body >body
    cases ab:ab-match!(for(
        dup pattern token-start
        over Case.body token-start case!(
            dup Case.pattern atoms reverse-for(op +Pattern.op!),
            +SPSYNTH body synth-arrow! /+SPSYNTH
        )
    )))

def(+SPSynth.synth-lambda!, +Mirth +SPSynth Lambda -- +Mirth +SPSynth,
    dup params
    ab:ab-lambda!(+SPSYNTH
        body synth-arrow!
    /+SPSYNTH))
