||| The specializer tries to remove higher-order words by specializing them with their arguments.
||| This should be especially doable in Mirth because local variables are less of an issue.
module mirth.specializer

import std.prelude
import std.list
import std.maybe
import std.map
import std.str

import mirth.mirth
import mirth.word
import mirth.arrow
import mirth.data
import mirth.match
import mirth.type
import mirth.elab
import mirth.name
import mirth.var
import mirth.prim

def run-specializer! [ +Mirth |- Arrow -- Arrow ] {
    +SPCheck.Init!
    check-arrow!
    check-transitive!
    quit!
}

field(Word.~sp-checked, Word, Bool)
field(Block.~sp-checked, Block, Bool)

data SPCheckItem {
    Word  [ Word  ]
    Block [ Block ]
}

struct +SPCheck {
    checklist: List(SPCheckItem)
    --
    def Init! [ -- +SPCheck ] { L0 >checklist +SPCheck }
    def quit! [ +SPCheck -- ] { +SPCheck -> checklist> drop }
    def check-transitive! [ +Mirth +SPCheck |- ] {
        while-some(checklist:uncons, do-item-check!)
    }

    def do-item-check! [ +Mirth +SPCheck |- SPCheckItem -- ] {
        { Word  -> >w @w rdip:arrow check-arrow! @w PropLabel.WordArrow  rdip:prop w> ~arrow ! }
        { Block -> >b @b rdip:arrow check-arrow! @b PropLabel.BlockArrow rdip:prop b> ~arrow ! }
    }

    def check-arrow! [ +Mirth +SPCheck |- Arrow -- Arrow ] {
        atoms:flatmap(check-atom!)
    }

    def check-atom! [ +Mirth +SPCheck |- Atom -- List(Atom) ] {
        dup op match {
            { Prim -> check-prim-atom! }
            { Word -> check-word-atom! }
            { External -> drop L1 }
            { Buffer -> drop L1 }
            { Field -> drop L1 }
            { Push -> drop L1 }
            { Tag -> drop L1 }
            { Match -> check-match! Op.Match swap op! L1 }
            { Lambda -> check-lambda! Op.Lambda swap op! L1 }
            { Var -> drop L1 }
            { BlockPush -> push-check-block! L1 }
            { BlockRun -> push-check-block! L1 }
            { LabelPush -> drop L1 }
            { LabelPop -> drop L1 }
            { LabelPushR -> drop L1 }
            { LabelPopR -> drop L1 }
            { DataGetEnumValue -> drop L1 }
            { DataFromEnumValue -> drop L1 }
            { DataGetLabel -> drop L1 }
            { DataSetLabel -> drop L1 }
            { TableToIndex -> drop L1 }
            { TableFromIndex -> drop L1 }
        }
    }

    def check-arg! [ +SPCheck |- Arg -- ] {
        { Block -> push-check-block! }
    }
    def check-prim-atom! [ +SPCheck |- Atom Prim -- List(Atom) ] {
        drop dup args for(check-arg!) L1
    }

    def check-word-atom! [ +Mirth +SPCheck |- Atom Word -- List(Atom) ] {
        dup push-check-word!
        over args >Nest? match {
            { None -> drop L1 }
            { Some ->
                dup rdip:has(free-vars has(is-physical?)) if(
                    # can't specialize, just check the args
                    dup for(check-arg!)
                    drop2 L1,

                    # boot up the specializer for real!
                    SPKey swap rdip:specialize-word!
                    dup push-check-word!
                    Op.Word swap op!
                    L0 swap args!
                    L1

                    # swap rdip:ab-build-over-atom!(ab-word!) atoms # don't need to be so roundabout
                )
            }
        }
    }

    def check-match!  [ +Mirth +SPCheck Match  |- ] { cases:map(check-case!) }
    def check-case!   [ +Mirth +SPCheck Case   |- ] { body:check-arrow! }
    def check-lambda! [ +Mirth +SPCheck Lambda |- ] { body:check-arrow! }

    def push-check-word!  [ +SPCheck |- Word  -- ] { SPCheckItem.Word  push-check-item! }
    def push-check-block! [ +SPCheck |- Block -- ] { SPCheckItem.Block push-check-item! }
    def push-check-item!  [ +SPCheck |- SPCheckItem -- ] {
        dup checked! if(drop, checklist:cons)
    }

    ||| Mark item as checked, return whether item was already checked once.
    def checked! [ +SPCheck |- SPCheckItem -- Bool ] {
        match {
            { Word  -> ~sp-checked }
            { Block -> ~sp-checked }
        }
        dup @? unwrap(False) True rotl !
    }
}

# def ab-build-over-atom!(f) [ +Mirth |- (*a +AB -- *b +AB) *a Atom  -- *b Arrow ] {
#     /Atom
#     ctx>
#     dom> cod> T->
#     token> home>
#     subst> op> args> drop3
#     ab-build-hom!(dip(f))
# }

def Arg.similar   [ +Mirth |- Arg Arg -- Bool ] { both(/Block) similar }
def Block.similar [ +Mirth |- Block Block -- Bool ] {
    dup2 =
    or(dup2 on2(arrow) similar)
    dip:drop2
}
def Arrow.similar [ +Mirth |- Arrow Arrow -- Bool ] {
    # both(atoms /L1) if?(swap if?(similar, drop False), drop False)
    both(atoms) =:similar
}
def Atom.similar [ +Mirth |- Atom Atom -- Bool ] {
    dup2 both(op) similar
    and(dup2 both(args) =:similar)
    dip(drop2)
}
def Op.similar [ +Mirth |- Op Op -- Bool ] {
    { Prim -> swap match { Prim -> =, _ -> drop2 False }}
    { Word -> swap match { Word -> =, _ -> drop2 False }}
    { External -> swap match { External -> =, _ -> drop2 False }}
    { Buffer -> swap match { Buffer -> =, _ -> drop2 False }}
    { Field -> swap match { Field -> =, _ -> drop2 False }}
    { Push -> swap match { Push -> =, _ -> drop2 False }}
    { Tag -> swap match { Tag -> =, _ -> drop2 False }}
    { Match -> drop2 False }
    { Lambda -> drop2 False }
    { Var -> drop2 False }
    { BlockPush -> swap match { BlockPush -> similar, _ -> drop2 False }}
    { BlockRun -> swap match { BlockRun -> similar, _ -> drop2 False }}
    { LabelPush -> swap match { LabelPush -> =, _ -> drop2 False }}
    { LabelPop -> swap match { LabelPop -> =, _ -> drop2 False }}
    { LabelPushR -> swap match { LabelPushR -> =, _ -> drop2 False }}
    { LabelPopR -> swap match { LabelPopR -> =, _ -> drop2 False }}
    { DataGetEnumValue -> swap match { DataGetEnumValue -> =, _ -> drop2 False }}
    { DataFromEnumValue -> swap match { DataFromEnumValue -> =, _ -> drop2 False }}
    { DataGetLabel -> swap match { DataGetLabel -> similar, _ -> drop2 False }}
    { DataSetLabel -> swap match { DataSetLabel -> similar, _ -> drop2 False }}
    { TableToIndex -> swap match { TableToIndex -> =, _ -> drop2 False }}
    { TableFromIndex -> swap match { TableFromIndex -> =, _ -> drop2 False }}
}

def TagField.similar [ TagField TagField -- Bool ] {
    /TagField /TagField
    label> label> =
    tag> tag> = and
    type/resource> type/resource> drop2
}

struct SPKey {
    Nest(Arg)
    --
    def similar [ +Mirth |- SPKey SPKey -- Bool ] { on2:/SPKey =(similar) }
    def args; [ +Mirth +Str |- SPKey -- ] {
        "("; /SPKey for(mangled;, ",";) ")";
        # /SPKey "(" ; dip:"" for(dip:; mangled; ",") drop ")" ;
    }
    def >Str [ +Mirth |- SPKey -- Str ] { Str(args;) }
    def >Name [ +Mirth |- SPKey -- Name ] { >Str >Name }
}

field(Word.~sp-synthed, Word, Map(SPKey,Word))
def Word.sp-synthed [ +Mirth |- Word -- Map(SPKey,Word) ] {
    ~sp-synthed @? unwrap(Map.Nil)
}

||| Specialize a word to a particular list of arguments.
||| Those other arguments are pushed on the stack.
def specialize-word! [ +Mirth |- SPKey Word -- Word ] {
    >word >key
    @key @word sp-synthed lookup(similar) match(
        Some ->
            # This specialization has already been done. So inline this
            # specialization only if the word was marked as inline.
            @word prefer-inline? over ~prefer-inline? !,
        None ->
            # This word has not been specialized with these arguments before.
            @word head >head
            None >sig?
            @word body >body
            @word sp-synthed len 1+ str("sp"; int;) >Name >name
            0u >arity
            @word doc >doc
            Word.New! >word'

            @word Namespace.Word @word' name 0 QName.Mk
            @word' PropLabel.WordQName prop @word' ~qname !

            @key >key @word' >value KeyValuePair
            @word sp-synthed insert @word ~sp-synthed !

            # @key @word @word' WordType prop2(
            #     ctx-type specialize-ctx-type pack2
            # ) @word' ~ctx-type !
            @word' dup PropLabel.WordType prop(
                arrow ctx-type pack2
            ) @word' ~ctx-type !
            # True @word' ~inferring-type? !
            True @word' ~prefer-inline? !
            @key @word @word' dup PropLabel.WordArrow prop3(ab-build-word-arrow!(dip(
                synth-specialized-word!
            ))) @word' ~arrow !
            @word' type drop
            word'>
    )
    key> word> drop2
}

def specialize-ctx-type [ +Mirth |- SPKey Ctx ArrowType -- Ctx ArrowType ] {
    nip dip:Subst.Nil freshen nip swap
    /SPKey
    dup first token error-token!
    dip:Subst.Nil nip
    swap dom (
        swap reverse-for(
            dip(force-cons?!
                unwrap("unexpected domain in specialize-ctx-type" fatal-error!)
                unpack2)
            /Block type Type.Arrow unify! drop
        )
    )
    dip:Ctx.L0 rigidify-sig!
}

struct +SPSynth {
    spkey:SPKey
    spword:Word
    spmap:Map(Var,Block)
    +AB
    --
    def +ab(f) [ ( +AB spkey:SPKey spword:Word spmap:Map(Var,Block) |- *a -- *b) +SPSynth |- *a -- *b ] {
        +SPSynth -> f +SPSynth
    }
    def synth-arrow! [ +Mirth +SPSynth |- Arrow -- ] { atoms for:synth-atom! }
    def synth-atom!  [ +Mirth +SPSynth |- Atom --  ] {
        dup token +ab:ab-token!
        dup args for:synth-arg! op synth-op!
    }
    def synth-arg! [ +Mirth +SPSynth |- Arg -- ] {
        { Block -> synth-block! }
    }

    def synth-op! [ +Mirth +SPSynth |- Op -- ] {
        { Match -> synth-match! }
        { Lambda -> synth-lambda! }
        { BlockPush -> synth-block! }
        { BlockRun -> synth-run! }
        { Var -> synth-var! }
        { _ -> +ab:ab-op! }
    }

    def synth-block! [ +Mirth +SPSynth |- Block -- ] {
        rdip:StackType.Fresh!
        +ab:ab-block!(+SPSynth synth-run! /+SPSynth)
    }

    def synth-run! [ +Mirth +SPSynth |- Block -- ] {
        rdip:arrow synth-arrow!
    }

    def synth-var! [ +Mirth +SPSynth |- Var -- ] {
        dup spmap lookup match {
            { Some -> nip synth-run! }
            { None -> +ab:ab-var! }
        }
    }

    def synth-match! [ +Mirth +SPSynth |- Match -- ] {
        rdip:StackType.Fresh! >cod
        dup body >body
        cases +ab:ab-match!(for(
            dup pattern token-start
            over Case.body token-start case!(
                dup Case.pattern atoms reverse-for(op +Pattern.op!),
                # TODO: avoid capture!
                +SPSynth body synth-arrow! /+SPSynth
            )
        ))
    }

    def synth-lambda! [ +Mirth +SPSynth |- Lambda -- ] {
        dup params
        +ab:ab-lambda!(+SPSynth
            # TODO: avoid capture!
            body synth-arrow!
        /+SPSynth)
    }
}

def synth-specialized-word! [ +Mirth +AB |- SPKey Word -- ] {
    dup >spword dip(>spkey)
    rdip:Word.arrow atoms single?
    unwrap("unexpected shape for synth-specialized-word!" rdip:fatal-error!)
    op match(
        Lambda ->
            dup params
            @spkey /SPKey >List
            dup2 dip:len len = else(
                "wrong number of lambda params in synth-specialized-word!"
                rdip:fatal-error!
            )
            map2(/Block >value >key KeyValuePair) >pairs Map >spmap
            +SPSynth
            body synth-arrow!
            /+SPSynth spkey> spword> spmap> drop3,
        _ -> "unexpected shape" rdip:fatal-error!
    )
}
