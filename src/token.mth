module mirth.token

import std.prelude
import std.list
import std.maybe
import std.either
import mirth.name
import mirth.label
import mirth.location
import mirth.mirth
import mirth.prim
import mirth.module

##########
# Tokens #
##########

# mirth/data/token
data TokenValue {
    None
    Comma
    LParenOpen
    LSquareOpen
    LCurlyOpen
    LColonOpen
    LParen     [ Token ]
    RParen     [ Token ]
    LSquare    [ Token ]
    RSquare    [ Token ]
    LCurly     [ Token ]
    RCurly     [ Token ]
    LColon     [ Token ]
    RColon     [ Token ]
    Int        [ Int ]
    U8         [ U8  ]
    U16        [ U16 ]
    U32        [ U32 ]
    U64        [ U64 ]
    I8         [ I8  ]
    I16        [ I16 ]
    I32        [ I32 ]
    I64        [ I64 ]
    F64        [ F64 ]
    F32        [ F32 ]
    Str        [ Str ]
    Name       [ Name ]
    DName      [ DName ]
    LabelPop   [ Label ]
    LabelPush  [ Label ]
    LabelPopR  [ Label ]
    LabelPushR [ Label ]
    LabelGet   [ Label ]
    LabelSet   [ Label ]
    --
    def none? { None -> True, _ -> drop False }
    def comma? { Comma -> True, _ -> drop False }

    def map-token-ref(f) [ *a |- (Token -- Token)  TokenValue -- TokenValue ] {
        { LParen  -> f TokenValue.LParen  } { RParen  -> f TokenValue.RParen  }
        { LCurly  -> f TokenValue.LCurly  } { RCurly  -> f TokenValue.RCurly  }
        { LSquare -> f TokenValue.LSquare } { RSquare -> f TokenValue.RSquare }
        { LColon  -> f TokenValue.LColon  } { RColon  -> f TokenValue.RColon  }
        { _ -> id }
    }
}

def(TokenValue.lparen-open?, TokenValue -- Bool, LParenOpen -> True, _ -> drop False)
def(TokenValue.lparen?, TokenValue -- Maybe(Token), LParen -> Some, _ -> drop None)
def(TokenValue.rparen?, TokenValue -- Maybe(Token), RParen -> Some, _ -> drop None)
def(TokenValue.lsquare-open?, TokenValue -- Bool, LSquareOpen -> True, _ -> drop False)
def(TokenValue.lsquare?, TokenValue -- Maybe(Token), LSquare -> Some, _ -> drop None)
def(TokenValue.rsquare?, TokenValue -- Maybe(Token), RSquare -> Some, _ -> drop None)
def(TokenValue.lcurly-open?, TokenValue -- Bool, LCurlyOpen -> True, _ -> drop False)
def(TokenValue.lcurly?, TokenValue -- Maybe(Token), LCurly -> Some, _ -> drop None)
def(TokenValue.rcurly?, TokenValue -- Maybe(Token), RCurly -> Some, _ -> drop None)
def(TokenValue.lcolon-open?, TokenValue -- Bool, LColonOpen -> True, _ -> drop False)
def(TokenValue.lcolon?, TokenValue -- Maybe(Token), LColon -> Some, _ -> drop None)
def(TokenValue.rcolon?, TokenValue -- Maybe(Token), RColon -> Some, _ -> drop None)
def(TokenValue.lparen-or-lcolon?, TokenValue -- Maybe(Token), LParen -> Some, LColon -> Some, _ -> drop None)


def TokenValue.can-take-args? [ TokenValue -- Bool ] {
    { Name -> drop True }
    { DName -> drop True }
    { LabelGet -> drop True }
    { LabelSet -> drop True }
    { _ -> drop False }
}

def-type(Name/DName, Either(Name,DName))

def TokenValue.int? [ TokenValue -- Maybe(Int) ] { Int -> Some, _ -> drop None }
def TokenValue.str? [ TokenValue -- Maybe(Str) ] { Str -> Some, _ -> drop None }
def TokenValue.name? [ TokenValue -- Maybe(Name) ] { Name -> Some, _ -> drop None }
def TokenValue.dname? [ TokenValue -- Maybe(DName) ] { DName -> Some, _ -> drop None }
def TokenValue.name/dname? [ TokenValue -- Maybe(Name/DName) ] {
    { Name -> Left Some }
    { DName -> Right Some }
    { _ -> drop None }
}
def TokenValue.last-name? [ TokenValue -- Maybe(Name) ] {
    { Name -> Some }
    { DName -> last-name Some }
    { _ -> drop None }
}
def TokenValue.penultimate-name? [ TokenValue -- Maybe(Name) ] { DName -> penultimate-name?, _ -> drop None }
def TokenValue.arg-end? [ TokenValue -- Bool ] {
    Comma -> True,
    RParen -> drop True,
    RCurly -> drop True,
    RSquare -> drop True,
    RColon -> drop True,
    _ -> drop False
}
def TokenValue.left-enclosure? [ TokenValue -- Bool ] {
    LParen -> drop True,
    LSquare -> drop True,
    LCurly -> drop True,
    LColon -> drop True,
    _ -> drop False
}
def TokenValue.right-enclosure? [ TokenValue -- Bool ] {
    RParen -> drop True,
    RSquare -> drop True,
    RCurly -> drop True,
    RColon -> drop True,
    _ -> drop False
}

def name/dname-last-name [ Name/DName -- Name ] {
    { Left -> id }
    { Right -> last-name }
}
def name/dname-penultimate-name? [ Name/DName -- Maybe(Name) ] {
    { Left -> drop None }
    { Right -> penultimate-name? }
}

def TokenValue.sig-type-con? [ +Mirth |- TokenValue -- Maybe(Name/DName) ] {
    name/dname? filter(name/dname-last-name could-be-type-con)
}
def TokenValue.sig-type-hole? [ +Mirth |- TokenValue -- Maybe(Name) ] { name? filter(is-type-hole) }
def TokenValue.sig-type-var?  [ +Mirth |- TokenValue -- Maybe(Name) ] { name? filter(could-be-type-var) }
def(TokenValue.sig-param-name?, +Mirth TokenValue -- +Mirth Maybe(Name), sig-type-var?)
def(TokenValue.sig-stack-var?, +Mirth TokenValue -- +Mirth Maybe(Name), name? filter(could-be-stack-var))
def(TokenValue.sig-resource-var?, +Mirth TokenValue -- +Mirth Maybe(Name), name? filter(could-be-resource-var))
def(TokenValue.sig-resource-con?, +Mirth TokenValue -- +Mirth Maybe(Name/DName), name/dname? filter(name/dname-last-name could-be-resource-con))
def(TokenValue.sig-dashes?, +Mirth TokenValue -- +Mirth Bool, name? has(>Str "--" =))
def(TokenValue.vdash?, +Mirth TokenValue -- +Mirth Bool, name? has(>Str "|-" =))
def(TokenValue.arrow?, +Mirth TokenValue -- +Mirth Bool, name? has(>Str "->" =))
def(TokenValue.pat-underscore?, +Mirth TokenValue -- +Mirth Bool, name? has(is-underscore))
def(TokenValue.module-header?, +Mirth TokenValue -- +Mirth Bool, name? has(>Str "module" =))
def(TokenValue.module-import?, +Mirth TokenValue -- +Mirth Bool, name? has(>Str "import" =))

table(Token)
field(Token.~value, Token, TokenValue)
field(Token.~module, Token, Module)
field(Token.~row, Token, Row)
field(Token.~col, Token, Col)
field(Token.~doc, Token, Maybe(Str))

def(Token.=, Token Token -- Bool, both(index) =)

def(Token.value, +Mirth Token -- +Mirth TokenValue, ~value @)
def(Token.module, +Mirth Token -- +Mirth Module, ~module @)
def(Token.col, +Mirth Token -- +Mirth Col, ~col @)
def(Token.row, +Mirth Token -- +Mirth Row, ~row @)
def(Token.doc, +Mirth Token -- +Mirth Maybe(Str), ~doc @)

def(Token.none?, +Mirth Token -- +Mirth Bool, value none?)
def(Token.comma?, +Mirth Token -- +Mirth Bool, value comma?)
def(Token.lparen-open?, +Mirth Token -- +Mirth Bool, value lparen-open?)
def(Token.lparen?, +Mirth Token -- +Mirth Maybe(Token), value lparen?)
def(Token.rparen?, +Mirth Token -- +Mirth Maybe(Token), value rparen?)
def(Token.lsquare-open?, +Mirth Token -- +Mirth Bool, value lsquare-open?)
def(Token.lsquare?, +Mirth Token -- +Mirth Maybe(Token), value lsquare?)
def(Token.rsquare?, +Mirth Token -- +Mirth Maybe(Token), value rsquare?)
def(Token.lcurly-open?, +Mirth Token -- +Mirth Bool, value lcurly-open?)
def(Token.lcurly?, +Mirth Token -- +Mirth Maybe(Token), value lcurly?)
def(Token.rcurly?, +Mirth Token -- +Mirth Maybe(Token), value rcurly?)
def(Token.lcolon-open?, +Mirth Token -- +Mirth Bool, value lcolon-open?)
def(Token.lcolon?, +Mirth Token -- +Mirth Maybe(Token), value lcolon?)
def(Token.rcolon?, +Mirth Token -- +Mirth Maybe(Token), value rcolon?)
def(Token.lparen-or-lcolon?, +Mirth Token -- +Mirth Maybe(Token), value lparen-or-lcolon?)
def(Token.int?, +Mirth Token -- +Mirth Maybe(Int), value int?)
def(Token.str?, +Mirth Token -- +Mirth Maybe(Str), value str?)
def(Token.name?, +Mirth Token -- +Mirth Maybe(Name), value name?)
def(Token.dname?, +Mirth Token -- +Mirth Maybe(DName), value dname?)
def(Token.name/dname?, +Mirth Token -- +Mirth Maybe(Either(Name,DName)), value name/dname?)
def(Token.last-name?, +Mirth Token -- +Mirth Maybe(Name), value last-name?)
def(Token.penultimate-name?, +Mirth Token -- +Mirth Maybe(Name), value penultimate-name?)
def(Token.arg-end?, +Mirth Token -- +Mirth Bool, value arg-end?)
def(Token.left-enclosure?, +Mirth Token -- +Mirth Bool, value left-enclosure?)
def(Token.right-enclosure?, +Mirth Token -- +Mirth Bool, value right-enclosure?)
def(Token.sig-type-con?, +Mirth Token -- +Mirth Maybe(Name/DName), value sig-type-con?)
def(Token.sig-type-hole?, +Mirth Token -- +Mirth Maybe(Name), value sig-type-hole?)
def(Token.sig-type-var?, +Mirth Token -- +Mirth Maybe(Name), value sig-type-var?)
def(Token.sig-param-name?, +Mirth Token -- +Mirth Maybe(Name), value sig-param-name?)
def(Token.sig-stack-var?, +Mirth Token -- +Mirth Maybe(Name), value sig-stack-var?)
def(Token.sig-resource-var?, +Mirth Token -- +Mirth Maybe(Name), value sig-resource-var?)
def(Token.sig-resource-con?, +Mirth Token -- +Mirth Maybe(Name/DName), value sig-resource-con?)
def(Token.sig-dashes?, +Mirth Token -- +Mirth Bool, value sig-dashes?)
def(Token.vdash?, +Mirth Token -- +Mirth Bool, value vdash?)
def(Token.arrow?, +Mirth Token -- +Mirth Bool, value arrow?)
def(Token.pat-underscore?, +Mirth Token -- +Mirth Bool, value pat-underscore?)
def(Token.module-header?, +Mirth Token -- +Mirth Bool, value module-header?)
def(Token.module-import?, +Mirth Token -- +Mirth Bool, value module-import?)
def(Token.can-take-args?, +Mirth Token -- +Mirth Bool, value can-take-args?)

def(Token.alloc-none!, +Mirth -- +Mirth Token,
    Token.alloc!
    None over ~doc !
    TokenValue.None over ~value !)

def(Token.location, +Mirth Token -- +Mirth Location,
    dup .module >module
    dup .row >row
    .col >col
    Location)

def Token.location! [ +Mirth Location Token -- +Mirth ] {
    >token
    /Location
    module> @token ~module !
    row> @token ~row !
    col> token> ~col !
}

||| Get next token, respecting nesting of tokens and arguments.
def(Token.next, +Mirth Token -- +Mirth Token,
    dup value match(
        LParen -> nip succ,
        LSquare -> nip succ,
        LCurly -> nip succ,
        LColon -> nip succ,
        _ -> can-take-args? if(
            succ dup lparen-or-lcolon? for(nip succ),
            succ
        )
    ))

||| Get previous token, respecting nesting of tokens and arguments.
def(Token.prev, +Mirth Token -- +Mirth Token,
    pred dup value match(
        RSquare -> nip,
        RCurly -> nip,
        RParen -> nip dup pred can-take-args? then(pred),
        RColon -> nip dup pred can-take-args? then(pred),
        _ -> drop
    ))

||| Get closest arg ending (see `TokenValue.arg-end?`) while respecting the
||| nesting of tokens.
def(Token.next-arg-end, +Mirth Token -- +Mirth Token,
    while(dup arg-end? not, next))

def(Token.has-args?, +Mirth Token -- +Mirth Bool,
    dup can-take-args? then(succ)
    lparen-or-lcolon? >Bool)

def(Token.args-start, +Mirth Token -- +Mirth Token,
    dup can-take-args?
    and(dup succ lparen-or-lcolon? >Bool) then(succ))

def(Token.could-be-sig-label?, +Mirth Token -- +Mirth Bool,
    dup name? if?(could-be-label-name?, False)
    and(dup succ lcolon? >Bool) nip)

def Token.sig-label? [ +Mirth Token -- +Mirth Maybe(Label) ] {
    dup name? filter(
        could-be-label-name?
        and(dup succ lcolon? >Bool)
    ) map(Label.new!) nip
}

def Token.pattern-var? [ +Mirth Token -- +Mirth Maybe(Name) ] {
    name? filter: could-be-pattern-var?
}

def Token.pattern-auto-run-var? [ +Mirth Token -- +Mirth Maybe(Name) ] {
    >token
    @token lsquare? >Bool
    @token succ succ rsquare? >Bool and if(
        token> succ pattern-var?,
        token> drop None
    )
}

||| Verify that token has 0 args, and return them.
||| Emits a fatal error if arity is wrong.
def(Token.args-0, Token +Mirth -- +Mirth,
    dup num-args 0= if(
        drop,
        "expected no args" emit-fatal-error!
    ))

||| Verify that token has 1 arg, and return it.
||| Emits a fatal error if arity is wrong.
def(Token.args-1, Token +Mirth -- Token +Mirth,
    dup num-args 1u = if(
        args-start succ,
        dup num-args 1u < if(
            "expected 1 arg, got none" emit-fatal-error!,
            "expected 1 arg, got too many" emit-fatal-error!
        )
    ))

||| Verify that token has 2 args, and return them.
||| Emits a fatal error if arity is wrong.
def(Token.args-2, Token +Mirth -- Token Token +Mirth,
    dup num-args 2u = if(
        args-start succ
        dup next-arg-end succ,
        dup num-args 2u < if(
            "expected 2 args, got too few" emit-fatal-error!,
            "expected 2 args, got too many" emit-fatal-error!
        )
    ))

||| Verify that token has 3 args, and return them.
||| Emits a fatal error if arity is wrong.
def(Token.args-3, Token +Mirth -- Token Token Token +Mirth,
    dup num-args 3u = if(
        args-start succ
        dup next-arg-end succ
        dup next-arg-end succ,
        dup num-args 3u < if(
            "expected 3 args, got too few" emit-fatal-error!,
            "expected 3 args, got too many" emit-fatal-error!
        )
    ))

||| Get number of arguments or number of components in enclosed token.
def(Token.num-args, +Mirth Token -- +Mirth Nat,
    args-start dup left-enclosure? if(
        dip(0u)
        while(dup args-end? not,
            dip(1+) succ next-arg-end)
        drop,
        drop 0u
    ))

||| Get List of token args.
def(Token.args, +Mirth Token -- +Mirth List(Token),
    args-start dup left-enclosure? if(
        collect-while(dup args-end? not, succ sip(next-arg-end)) nip,
        drop L0
    ))

||| Check if we're at the end of the last argument.
||| A trailing comma is ignored.
def(Token.args-end?, +Mirth Token -- +Mirth Bool,
    dup comma? then(succ)
    right-enclosure?)

||| Get Nest of token args.
||| Emits a fatal error if token has no args,
def(Token.args+, +Mirth Token -- +Mirth Nest(Token),
    dup args >Nest? unwrap("expected 1 or more args, got none" emit-fatal-error!) nip)

###############
# Token Types #
###############

||| Is this the end of a module?
def(Token.module-end?, +Mirth Token -- +Mirth Bool, none?)

||| Is this a token to stop running at?
def(Token.run-end?, +Mirth Token -- +Mirth Bool,
    value match(
        None -> True,
        Comma -> True,
        RParen -> drop True,
        RSquare -> drop True,
        RCurly -> drop True,
        RColon -> drop True,
        _ -> drop False
    ))

def Token.to-run-end [ +Mirth Token -- +Mirth Token ] {
    while(dup run-end? not, next)
}

def(Token.run-tokens, +Mirth Token -- +Mirth List(Token),
    collect-while(dup run-end? not, sip(next)) nip)

def(Token.run-length, +Mirth Token -- +Mirth Nat,
    dip(0u) while(dup run-end? not, next dip(1+)) drop)

def(Token.run-arrow?, +Mirth Token -- +Mirth Maybe(Token),
    run-tokens find(arrow?))

###################
# Type Signatures #
###################

def(Token.sig-stack-end?, +Mirth |- Token -- Bool,
    or(sig-dashes?, vdash?, run-end?))

def(Token.sig-next-stack-end, +Mirth |- Token -- Token,
    while(dup sig-stack-end? not, next))

def(Token.sig-has-vdash-or-dashes?, +Mirth |- Token -- Bool,
    sig-next-stack-end or(sig-dashes?, vdash?))

def(Token.pat-tokens, +Mirth |- Token -- List(Token),
    run-tokens take-while(arrow? not))

def Token.clone-run! [ +Mirth |- location:Location Token -- Token ] {
    dup >start to-run-end >end

    Token.alloc-none! >anchor
    @location @anchor location!

    @end index >Int @start index >Int - >Nat-clamp 1+ repeat(
        @location Token.alloc-none! location!
    )

    @anchor:succ
    @anchor >dst
    @start >src
    while(@src index @end index <,
        @src value map-token-ref(
            index >Int
            @anchor index >Int + 1+
            @src index >Int -
            >TableIndex-clamp Token.from-index
        ) @dst ~value !
        @src:succ
        @dst:succ
    )
    src> dst> drop2
    start> end> drop2
    location> drop
    anchor>
}
