module mirth.token

import std.prelude
import std.list
import std.maybe
import std.either
import mirth.name
import mirth.label
import mirth.location
import mirth.mirth
import mirth.prim
import mirth.module

##########
# Tokens #
##########

# mirth/data/token
data TokenValue {
    TokenNone
    TokenComma
    TokenLParenOpen
    TokenLSquareOpen
    TokenLCurlyOpen
    TokenLColonOpen
    TokenLParen     [ Token ]
    TokenRParen     [ Token ]
    TokenLSquare    [ Token ]
    TokenRSquare    [ Token ]
    TokenLCurly     [ Token ]
    TokenRCurly     [ Token ]
    TokenLColon     [ Token ]
    TokenRColon     [ Token ]
    TokenInt        [ Int ]
    TokenF64        [ F64 ]
    TokenStr        [ Str ]
    TokenName       [ Name ]
    TokenDName      [ DName ]
    TokenLabelPop   [ Label ]
    TokenLabelPush  [ Label ]
    TokenLabelPopR  [ Label ]
    TokenLabelPushR [ Label ]
    TokenLabelGet   [ Label ]
    TokenLabelSet   [ Label ]
    --
    def none? { TokenNone -> True, _ -> drop False }
    def comma? { TokenComma -> True, _ -> drop False }
}

def(TokenValue.lparen-open?, TokenValue -- Bool, TokenLParenOpen -> True, _ -> drop False)
def(TokenValue.lparen?, TokenValue -- Maybe(Token), TokenLParen -> Some, _ -> drop None)
def(TokenValue.rparen?, TokenValue -- Maybe(Token), TokenRParen -> Some, _ -> drop None)
def(TokenValue.lsquare-open?, TokenValue -- Bool, TokenLSquareOpen -> True, _ -> drop False)
def(TokenValue.lsquare?, TokenValue -- Maybe(Token), TokenLSquare -> Some, _ -> drop None)
def(TokenValue.rsquare?, TokenValue -- Maybe(Token), TokenRSquare -> Some, _ -> drop None)
def(TokenValue.lcurly-open?, TokenValue -- Bool, TokenLCurlyOpen -> True, _ -> drop False)
def(TokenValue.lcurly?, TokenValue -- Maybe(Token), TokenLCurly -> Some, _ -> drop None)
def(TokenValue.rcurly?, TokenValue -- Maybe(Token), TokenRCurly -> Some, _ -> drop None)
def(TokenValue.lcolon-open?, TokenValue -- Bool, TokenLColonOpen -> True, _ -> drop False)
def(TokenValue.lcolon?, TokenValue -- Maybe(Token), TokenLColon -> Some, _ -> drop None)
def(TokenValue.rcolon?, TokenValue -- Maybe(Token), TokenRColon -> Some, _ -> drop None)
def(TokenValue.lparen-or-lcolon?, TokenValue -- Maybe(Token), TokenLParen -> Some, TokenLColon -> Some, _ -> drop None)

def(TokenValue.can-take-args?, TokenValue -- Bool,
    TokenName -> drop True,
    TokenDName -> drop True,
    TokenLabelGet -> drop True,
    _ -> drop False)

def-type(Name/DName, Either(Name,DName))

def(TokenValue.int?, TokenValue -- Maybe(Int), TokenInt -> Some, _ -> drop None)
def(TokenValue.str?, TokenValue -- Maybe(Str), TokenStr -> Some, _ -> drop None)
def(TokenValue.name?, TokenValue -- Maybe(Name), TokenName -> Some, _ -> drop None)
def(TokenValue.dname?, TokenValue -- Maybe(DName), TokenDName -> Some, _ -> drop None)
def(TokenValue.name/dname?, TokenValue -- Maybe(Name/DName),
    TokenName -> Left Some,
    TokenDName -> Right Some,
    _ -> drop None)
def(TokenValue.last-name?, TokenValue -- Maybe(Name),
    TokenName -> Some,
    TokenDName -> last-name Some,
    _ -> drop None)
def(TokenValue.penultimate-name?, TokenValue -- Maybe(Name),
    TokenDName -> penultimate-name?,
    _ -> drop None)
def(TokenValue.arg-end?, TokenValue -- Bool,
    TokenComma -> True,
    TokenRParen -> drop True,
    TokenRCurly -> drop True,
    TokenRSquare -> drop True,
    TokenRColon -> drop True,
    _ -> drop False)
def(TokenValue.left-enclosure?, TokenValue -- Bool,
    TokenLParen -> drop True,
    TokenLSquare -> drop True,
    TokenLCurly -> drop True,
    TokenLColon -> drop True,
    _ -> drop False)
def(TokenValue.right-enclosure?, TokenValue -- Bool,
    TokenRParen -> drop True,
    TokenRSquare -> drop True,
    TokenRCurly -> drop True,
    TokenRColon -> drop True,
    _ -> drop False)

def name/dname-last-name [ Name/DName -- Name ] {
    { Left -> id }
    { Right -> last-name }
}
def name/dname-penultimate-name? [ Name/DName -- Maybe(Name) ] {
    { Left -> drop None }
    { Right -> penultimate-name? }
}

def(TokenValue.sig-type-con?, TokenValue -- Maybe(Name/DName), name/dname? filter(name/dname-last-name could-be-type-con))
def(TokenValue.sig-type-hole?, TokenValue -- Maybe(Name), name? filter(is-type-hole))
def(TokenValue.sig-type-var?, TokenValue -- Maybe(Name), name? filter(could-be-type-var))
def(TokenValue.sig-param-name?, TokenValue -- Maybe(Name), sig-type-var?)
def(TokenValue.sig-stack-var?, TokenValue -- Maybe(Name), name? filter(could-be-stack-var))
def(TokenValue.sig-resource-var?, TokenValue -- Maybe(Name), name? filter(could-be-resource-var))
def(TokenValue.sig-resource-con?, TokenValue -- Maybe(Name/DName), name/dname? filter(name/dname-last-name could-be-resource-con))
def(TokenValue.sig-dashes?, TokenValue -- Bool, name? has(>Str "--" ==))
def(TokenValue.arrow?, TokenValue -- Bool, name? has(>Str "->" ==))
def(TokenValue.pat-underscore?, TokenValue -- Bool, name? has(is-underscore))
def(TokenValue.module-header?, TokenValue -- Bool, name? has(>Str "module" ==))

table(Token)
field(Token.~value, Token, TokenValue)
field(Token.~module, Token, Module)
field(Token.~row, Token, Row)
field(Token.~col, Token, Col)

def(Token.==, Token Token -- Bool, both(index) ==)

def(Token.value, Token -- TokenValue, ~value @)
def(Token.module, Token -- Module, ~module @)
def(Token.col, Token -- Col, ~col @)
def(Token.row, Token -- Row, ~row @)

def(Token.none?, Token -- Bool, value none?)
def(Token.comma?, Token -- Bool, value comma?)
def(Token.lparen-open?, Token -- Bool, value lparen-open?)
def(Token.lparen?, Token -- Maybe(Token), value lparen?)
def(Token.rparen?, Token -- Maybe(Token), value rparen?)
def(Token.lsquare-open?, Token -- Bool, value lsquare-open?)
def(Token.lsquare?, Token -- Maybe(Token), value lsquare?)
def(Token.rsquare?, Token -- Maybe(Token), value rsquare?)
def(Token.lcurly-open?, Token -- Bool, value lcurly-open?)
def(Token.lcurly?, Token -- Maybe(Token), value lcurly?)
def(Token.rcurly?, Token -- Maybe(Token), value rcurly?)
def(Token.lcolon-open?, Token -- Bool, value lcolon-open?)
def(Token.lcolon?, Token -- Maybe(Token), value lcolon?)
def(Token.rcolon?, Token -- Maybe(Token), value rcolon?)
def(Token.lparen-or-lcolon?, Token -- Maybe(Token), value lparen-or-lcolon?)
def(Token.int?, Token -- Maybe(Int), value int?)
def(Token.str?, Token -- Maybe(Str), value str?)
def(Token.name?, Token -- Maybe(Name), value name?)
def(Token.dname?, Token -- Maybe(DName), value dname?)
def(Token.name/dname?, Token -- Maybe(Either(Name,DName)), value name/dname?)
def(Token.last-name?, Token -- Maybe(Name), value last-name?)
def(Token.penultimate-name?, Token -- Maybe(Name), value penultimate-name?)
def(Token.arg-end?, Token -- Bool, value arg-end?)
def(Token.left-enclosure?, Token -- Bool, value left-enclosure?)
def(Token.right-enclosure?, Token -- Bool, value right-enclosure?)
def(Token.sig-type-con?, Token -- Maybe(Name/DName), value sig-type-con?)
def(Token.sig-type-hole?, Token -- Maybe(Name), value sig-type-hole?)
def(Token.sig-type-var?, Token -- Maybe(Name), value sig-type-var?)
def(Token.sig-param-name?, Token -- Maybe(Name), value sig-param-name?)
def(Token.sig-stack-var?, Token -- Maybe(Name), value sig-stack-var?)
def(Token.sig-resource-var?, Token -- Maybe(Name), value sig-resource-var?)
def(Token.sig-resource-con?, Token -- Maybe(Name/DName), value sig-resource-con?)
def(Token.sig-dashes?, Token -- Bool, value sig-dashes?)
def(Token.arrow?, Token -- Bool, value arrow?)
def(Token.pat-underscore?, Token -- Bool, value pat-underscore?)
def(Token.module-header?, Token -- Bool, value module-header?)
def(Token.can-take-args?, Token -- Bool, value can-take-args?)

def(Token.alloc-none!, Token,
    Token.alloc!
    TokenNone over ~value !)

def(Token.location, Token -- Location,
    dup .module >module
    dup .row >row
    .col >col
    Location)

||| Get next token, respecting nesting of tokens and arguments.
def(Token.next, Token -- Token,
    dup value match(
        TokenLParen -> nip succ,
        TokenLSquare -> nip succ,
        TokenLCurly -> nip succ,
        TokenLColon -> nip succ,
        _ -> can-take-args? if(
            succ dup lparen-or-lcolon? for(nip succ),
            succ
        )
    ))

||| Get previous token, respecting nesting of tokens and arguments.
def(Token.prev, Token -- Token,
    pred dup value match(
        TokenRSquare -> nip,
        TokenRCurly -> nip,
        TokenRParen -> nip dup pred can-take-args? then(pred),
        TokenRColon -> nip dup pred can-take-args? then(pred),
        _ -> drop
    ))

||| Get closest arg ending (see `TokenValue.arg-end?`) while respecting the
||| nesting of tokens.
def(Token.next-arg-end, Token -- Token,
    while(dup arg-end? not, next))

def(Token.has-args?, Token -- Bool,
    dup can-take-args? then(succ)
    lparen-or-lcolon? >Bool)

def(Token.args-start, Token -- Token,
    dup can-take-args?
    and(dup succ lparen-or-lcolon? >Bool) then(succ))

def(Token.could-be-sig-label?, Token -- Bool,
    dup name? if-some(could-be-label-name?, False)
    and(dup succ lcolon? >Bool) nip)

def Token.sig-label? [ Token -- Maybe(Label) ] {
    dup name? filter(
        could-be-label-name?
        and(dup succ lcolon? >Bool)
    ) map(Label.new!) nip
}

def Token.pattern-var? [ Token -- Maybe(Name) ] {
    name? filter: could-be-pattern-var?
}

def Token.pattern-auto-run-var? [ Token -- Maybe(Name) ] {
    >token
    @token lsquare? >Bool
    @token succ succ rsquare? >Bool && if(
        token> succ pattern-var?,
        token> drop None
    )
}

||| Verify that token has 0 args, and return them.
||| Emits a fatal error if arity is wrong.
def(Token.args-0, Token +Mirth -- +Mirth,
    dup num-args 0= if(
        drop,
        "expected no args" emit-fatal-error!
    ))

||| Verify that token has 1 arg, and return it.
||| Emits a fatal error if arity is wrong.
def(Token.args-1, Token +Mirth -- Token +Mirth,
    dup num-args 1u == if(
        args-start succ,
        dup num-args 1u < if(
            "expected 1 arg, got none" emit-fatal-error!,
            "expected 1 arg, got too many" emit-fatal-error!
        )
    ))

||| Verify that token has 2 args, and return them.
||| Emits a fatal error if arity is wrong.
def(Token.args-2, Token +Mirth -- Token Token +Mirth,
    dup num-args 2u == if(
        args-start succ
        dup next-arg-end succ,
        dup num-args 2u < if(
            "expected 2 args, got too few" emit-fatal-error!,
            "expected 2 args, got too many" emit-fatal-error!
        )
    ))

||| Verify that token has 3 args, and return them.
||| Emits a fatal error if arity is wrong.
def(Token.args-3, Token +Mirth -- Token Token Token +Mirth,
    dup num-args 3u == if(
        args-start succ
        dup next-arg-end succ
        dup next-arg-end succ,
        dup num-args 3u < if(
            "expected 3 args, got too few" emit-fatal-error!,
            "expected 3 args, got too many" emit-fatal-error!
        )
    ))

||| Get number of arguments or number of components in enclosed token.
def(Token.num-args, Token -- Nat,
    args-start dup left-enclosure? if(
        dip(0u)
        while(dup args-end? not,
            dip(1+) succ next-arg-end)
        drop,
        drop 0u
    ))

||| Get List of token args.
def(Token.args, Token -- List(Token),
    args-start dup left-enclosure? if(
        collect-while(dup args-end? not, succ sip(next-arg-end)) nip,
        drop List.L0
    ))

||| Check if we're at the end of the last argument.
||| A trailing comma is ignored.
def(Token.args-end?, Token -- Bool,
    dup comma? then(succ)
    right-enclosure?)

||| Get List+ of token args.
||| Emits a fatal error if token has no args,
def(Token.args+, Token +Mirth -- List+(Token) +Mirth,
    dup args >List+? unwrap("expected 1 or more args, got none" emit-fatal-error!) nip)

###############
# Token Types #
###############

||| Is this the end of a module?
def(Token.module-end?, Token -- Bool, none?)

||| Is this a token to stop running at?
def(Token.run-end?, Token -- Bool,
    value match(
        TokenNone -> True,
        TokenComma -> True,
        TokenRParen -> drop True,
        TokenRSquare -> drop True,
        TokenRCurly -> drop True,
        TokenRColon -> drop True,
        _ -> drop False
    ))

def(Token.run-tokens, Token -- List(Token),
    collect-while(dup run-end? not, sip(next)) nip)

def(Token.run-length, Token -- Nat,
    dip(0u) while(dup run-end? not, next dip(1+)) drop)

def(Token.run-arrow?, Token -- Maybe(Token),
    run-tokens find(arrow?))

###################
# Type Signatures #
###################

def(Token.sig-stack-end?, Token -- Bool,
    dup sig-dashes? or(dup run-end?) nip)

def(Token.sig-next-stack-end, Token -- Token,
    while(dup sig-stack-end? not, next))

def(Token.sig-has-dashes?, Token -- Bool,
    sig-next-stack-end sig-dashes?)

def(Token.sig-skip-dashes, Token -- Token,
    dup sig-has-dashes? then(sig-next-stack-end next))

def(Token.pat-tokens, Token -- List(Token),
    run-tokens take-while(arrow? not))
