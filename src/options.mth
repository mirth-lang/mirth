||| Command-line options for Mirth.
module mirth.options

import std.prelude
import std.path
import std.str
import std.list
import std.byte
import std.maybe
import std.result

import arg-parser.parse
import arg-parser.types

struct Options {
    input-file: Path
    output-file: Maybe(Path)
    entry-point: Maybe(Str)
    packages: List([Str Path])
    package-search-paths: List(Path)
    emit-debug-info: Bool
}

||| Create a default initialized arguments table
||| Since the input file is always required we don't need it to be Maybe(Path)
def Options.default [ -- Options ] {
    False >emit-debug-info
    "mirth.mth" >Path >input-file
    None >output-file
    "main" Some >entry-point
    L0 >packages
    L0 >package-search-paths
    Options
}

||| Pretty print the contents of the arguments struct
def Options.show; [ Options +Str -- +Str ] {
    /Options
    "Options { " ;
    "output-file: " ; output-file> show;
    ", input-file: " ; input-file> >Str show;
    ", entry-point: " ; entry-point> show;
    ", emit-debug-info: " ; emit-debug-info> show;
    ", packages: " ; packages> show;:pack2-show;
    ", package-search-path: " ; package-search-paths> show;
    " }" ;
}


def parse-package-def [ Str -- [Str Path] ] {
    dip(Byte.BCOLON) split-byte
    pair? unwrap("Invalid package path definition" panic!)
    unpack2 >Path pack2
}

def compiler-parse-args [ +ArgumentParser(Options) Options Maybe(Str) ArgpOptionType --
                          +ArgumentParser(Options) Options ]
{
    Short -> dip(swap) match {
        { B'o' -> dip:map(>Path) output-file! }
        { B'e' -> entry-point! }
        { B'c' -> nip None swap entry-point! }
        { B'p' -> swap for(parse-package-def swap packages:List.Cons) }
        { B'P' -> swap for(>Path swap package-search-paths:List.Cons) }
        { _ -> drop swap drop ArgumentParsingError.UnknownArg Some state:error! }
    },
    Positional -> swap state positional-index 0= if(
        swap for(>Path swap input-file!),
        dip(drop) ArgumentParsingError.TooManyArgs Some state:error!
    ),
    LongOnly -> dup "debug" == if(
        drop2 True swap emit-debug-info!,
        drop2 ArgumentParsingError.UnknownArg Some state:error!
    ),
    End ->
        state positional-index 1 < then(
            ArgumentParsingError.TooFewArgs Some state:error!
        )
        state arguments output-file else(
            state arguments entry-point then(
                "output-file" ArgumentParsingError.MissingArg Some state:error!
            )
        )
        drop,
    _ -> drop drop ArgumentParsingError.UnknownArg Some state error! state!
}

def parse-options! [ +World -- +World Result([ArgumentParsingError Str], Options) ] {
    Options.default
    List.Mk(
        "output-file" Some >name
        Byte.B'o' ArgpOptionType.Short >flag-type
        "OUTPUT_FILE" Some >arg-doc
        "Test argument" Some >doc
        None >group
        ArgpOption ;

        "compile-only" Some >name
        Byte.B'c' ArgpOptionType.Short >flag-type
        None >arg-doc
        "Compile code without running codegen step" Some >doc
        None >group
        ArgpOption ;

        "entry-point" Some >name
        Byte.B'e' ArgpOptionType.Short >flag-type
        "ENTRY_POINT" Some >arg-doc
        "Custom entry point word for compilation" Some >doc
        None >group
        ArgpOption ;

        "package" Some >name
        Byte.B'p' ArgpOptionType.Short >flag-type
        "(PACKAGE:PATH)*" Some >arg-doc
        "Package locations" Some >doc
        None >group
        ArgpOption ;

        "package-search-path" Some >name
        Byte.B'P' ArgpOptionType.Short >flag-type
        "SEARCH_PATH*" Some >arg-doc
        "Package search paths" Some >doc
        None >group
        ArgpOption ;

        "debug" Some >name
        "debug" ArgpOptionType.LongOnly >flag-type
        None >arg-doc
        "Emit debugging information during codegen" Some >doc
        None >group
        ArgpOption ;
    ) >options
    [ compiler-parse-args ] >parser
    "input-file" Some >args-doc
    "Mirth Compiler" >doc
    ArgumentParser
    parse-args
}
