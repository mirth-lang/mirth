module mirth.main

import std.prelude
import std.path
import std.str
import std.list
import std.byte
import std.maybe
import std.either
import std.world
import std.output
import std.posix
import std.file
import std.test
import std.terminal

import arg-parser.parse
import arg-parser.types
import arg-parser.state

import mirth.package
import mirth.mirth
import mirth.prim
import mirth.word
import mirth.type
import mirth.name
import mirth.def
import mirth.lexer
import mirth.elab
import mirth.var
import mirth.specializer
import mirth.c99

struct Arguments {
    input-file: Path
    output-file: Maybe(Path)
    entry-point: Maybe(Str)
    packages: List([Str Path])
    package-search-paths: List(Path)
    emit-debug-info: Bool
}

||| Create a default initialized arguments table
||| Since the input file is always required we don't need it to be Maybe(Path)
def Arguments.default [ -- Arguments ] {
    Bool.False >emit-debug-info
    "mirth.mth" >Path >input-file
    Maybe.None >output-file
    "main" Maybe.Some >entry-point
    List.L0 >packages
    List.L0 >package-search-paths
    Arguments
}

||| Pretty print the contents of the arguments struct
def Arguments.show; [ Arguments +Str -- +Str ] {
    /Arguments
    "Arguments { " ;
    "output-file: " ; output-file> show;
    ", input-file: " ; input-file> >Str show;
    ", entry-point: " ; entry-point> show;
    ", emit-debug-info: " ; emit-debug-info> show;
    ", packages: " ; packages> show;:pack2-show;
    ", package-search-path: " ; package-search-paths> show;
    " }" ;
}

########
# Main #
########

def compile! [ Arguments +World +Mirth -- +World +Mirth ] {
    /Arguments
    package-search-paths> package-search-paths:drop
    rdip:trace("Compiling "; @input-file path;)
    packages> for(
        unpack2 swap >Name Package.new-or-path! drop
    )
    input-file> run-lexer!

    rdip:trace("Building.";)
    elab-module!
    typecheck-everything!

    entry-point> map(
        dip(dup Namespace.NAMESPACE_MODULE) >Name 0 QName.Mk
        elab-entry-point
    ) nip

    trace-diagnostics!

    num-errors 0> if(
        num-errors rdip:trace(Sgr.FGRed emit; show ; " errors." ; Sgr.Reset emit;) 1 posix-exit!,
        rdip:trace(Sgr.FGGreen emit; "No errors." ; Sgr.Reset emit;),
    )

    match(
        Some ->
            "Specializer." rdip:trace
            run-specializer!
            num-errors 0> if(
                trace-diagnostics!
                num-errors rdip:trace(Sgr.FGRed emit; show ; " errors during specializer." ; Sgr.Reset emit;) 1 posix-exit!,

                "Codegen." rdip:trace
                output-file> if-some(
                    >output-path
                    C99_Options run-output-c99!,

                    emit-debug-info> drop2
                )
            ),
        None ->
            "Skipping Codegen." rdip:trace
            emit-debug-info> drop
            output-file> drop
    )
}

def parse-package-def [ Str -- [Str Path] ] {
    dip(Byte.BCOLON) split-byte
    >L2? unwrap("Invalid package path definition" panic!)
    /L2 >Path pack2
}

def compiler-parse-args [ +ArgumentParser(Arguments) Arguments Maybe(Str) ArgpOptionType --
                          +ArgumentParser(Arguments) Arguments ]
{
    Short -> dip(swap) match {
        { B'o' -> dip:map(>Path) output-file! }
        { B'e' -> entry-point! }
        { B'c' -> nip Maybe.None swap entry-point! }
        { B'p' -> swap for(parse-package-def swap packages:List.Cons) }
        { B'P' -> swap for(>Path swap package-search-paths:List.Cons) }
        { _ -> drop swap drop ArgumentParsingError.UnknownArg Maybe.Some state:error! }
    },
    Positional -> swap state positional-index 0= if(
        swap for(>Path swap input-file!),
        dip(drop) ArgumentParsingError.TooManyArgs Maybe.Some state:error!
    ),
    LongOnly -> dup "debug" == if(
        drop2 Bool.True swap emit-debug-info!,
        drop2 ArgumentParsingError.UnknownArg Maybe.Some state:error!
    ),
    End ->
        state positional-index 1 < then(
            ArgumentParsingError.TooFewArgs Maybe.Some state:error!
        )
        state arguments output-file else(
            state arguments entry-point then(
                "output-file" ArgumentParsingError.MissingArg Maybe.Some state:error!
            )
        )
        drop,
    _ -> drop drop ArgumentParsingError.UnknownArg Maybe.Some state error! state!
}

def main [ +World -- +World ] {
    +Mirth.Init!

    Arguments.default
    LIST(
        "output-file" Maybe.Some >name
        Byte.B'o' ArgpOptionType.Short >flag-type
        "OUTPUT_FILE" Maybe.Some >arg-doc
        "Test argument" Maybe.Some >doc
        Maybe.None >group
        ArgpOption ;

        "compile-only" Maybe.Some >name
        Byte.B'c' ArgpOptionType.Short >flag-type
        Maybe.None >arg-doc
        "Compile code without running codegen step" Maybe.Some >doc
        Maybe.None >group
        ArgpOption ;

        "entry-point" Maybe.Some >name
        Byte.B'e' ArgpOptionType.Short >flag-type
        "ENTRY_POINT" Maybe.Some >arg-doc
        "Custom entry point word for compilation" Maybe.Some >doc
        Maybe.None >group
        ArgpOption ;

        "package" Maybe.Some >name
        Byte.B'p' ArgpOptionType.Short >flag-type
        "(PACKAGE:PATH)*" Maybe.Some >arg-doc
        "Package locations" Maybe.Some >doc
        Maybe.None >group
        ArgpOption ;

        "package-search-path" Maybe.Some >name
        Byte.B'P' ArgpOptionType.Short >flag-type
        "SEARCH_PATH*" Maybe.Some >arg-doc
        "Package search paths" Maybe.Some >doc
        Maybe.None >group
        ArgpOption ;

        "debug" Maybe.Some >name
        "debug" ArgpOptionType.LongOnly >flag-type
        Maybe.None >arg-doc
        "Emit debugging information during codegen" Maybe.Some >doc
        Maybe.None >group
        ArgpOption ;
    ) >options
    [ compiler-parse-args ] >parser
    "input-file" Maybe.Some >args-doc
    "Mirth Compiler" >doc
    ArgumentParser

    parse-args match {
        { Right -> }
        { Left -> rdip:trace(unpack2 ; emit;) 1 posix-exit! }
    }

    dup Arguments.package-search-paths empty? then(
        LIST(
            "lib" >Path ;
            rdip:mirth-base-lib-path for(;)
        ) swap Arguments.package-search-paths!
    )

    compile!
    rdrop
}
