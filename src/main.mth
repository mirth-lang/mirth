module mirth.main

import std.prelude
import std.list
import std.posix
import std.terminal

import mirth.options
import mirth.mirth
import mirth.package
import mirth.lexer
import mirth.elab
import mirth.name
import mirth.specializer
import mirth.c99

def main [ +World |- ] {
    parse-options! if(
        +Mirth.Init!
        compile!
        num-errors 0>
        +Mirth.quit!,

        trace(unpack2 ; emit;)
        True
    )
    then(1 posix-exit!)
}

def compile! [ +World +Mirth |- Options -- ] {
    /Options
    package-search-paths> dup empty? then(
        drop "lib" >Path mirth-base-lib-path >List cons
    ) package-search-paths!

    rdip:trace("Compiling "; @input-file path;)
    packages> for(
        unpack2 swap Name Package.New-Or-Path! drop
    )
    input-file> run-lexer!

    rdip:trace("Building.";)
    elab-module!
    typecheck-everything!

    entry-point> map(
        dip(dup Namespace.Module) Name 0 QName.Mk
        elab-entry-point
    ) nip

    trace-diagnostics!

    num-errors 0> if(
        num-errors rdip:trace(Sgr.FGRed span(int; " errors." ;))
        drop,

        rdip:trace(Sgr.FGGreen span("No errors." ;))
        match(
            Some ->
                "Running specializer." rdip:trace
                run-specializer!
                num-errors 0> if(
                    trace-diagnostics!
                    num-errors rdip:trace(Sgr.FGRed span(int; " errors during specializer." ;))
                    drop,

                    @output-file if?(
                        "Running codegen." rdip:trace
                        >output-path
                        @emit-debug-info >emit-debug-info
                        C99_Options run-output-c99!,


                        drop "No output file, skipping codegen." rdip:trace
                    )
                ),
            None ->
                "No entry point, skipping Codegen." rdip:trace
        )
    )

    output-file> drop
    emit-debug-info> drop
}
