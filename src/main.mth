module(mirth.main)

import(std.prelude)
import(std.path)
import(std.str)
import(std.list)
import(std.byte)
import(std.maybe)
import(std.either)
import(std.world)
import(std.output)
import(std.posix)
import(std.file)
import(std.test)

import(arg-parser.parse)
import(arg-parser.types)
import(arg-parser.state)

import(mirth.package)
import(mirth.mirth)
import(mirth.prim)
import(mirth.word)
import(mirth.type)
import(mirth.name)
import(mirth.def)
import(mirth.lexer)
import(mirth.elab)
import(mirth.var)
import(mirth.specializer)
import(mirth.c99)

import(std.terminal)

struct Arguments {
    input-file: Path
    output-file: Maybe(Path)
    entry-point: Maybe(Str)
    packages: List([Str Path])
    package-search-paths: List(Path)
    emit-debug-info: Bool
}

||| Create a default initialized arguments table
||| Since the input file is always required we don't need it to be Maybe(Path)
def Arguments.default [ -- Arguments ] {
    False >emit-debug-info
    "mirth.mth" >Path >input-file
    None >output-file
    "main" Some >entry-point
    L0 >packages
    L0 >package-search-paths
    Arguments
}

||| Pretty print the contents of the arguments struct
def Arguments.show; [ Arguments +Str -- +Str ] {
    /Arguments
    "Arguments { " ;
    "output-file: " ; output-file> show;:show;
    ", input-file: " ; input-file> >Str show;
    ", entry-point: " ; entry-point> show;:show;
    ", emit-debug-info: " ; emit-debug-info> show;
    ", packages: " ; packages> show;:pack2-show;(show;,show;)
    ", package-search-path: " ; package-search-paths> show;:show;
    " }" ;
}

########
# Main #
########

def compile! [ Arguments +World +Mirth -- +World +Mirth ] {
    /Arguments
    package-search-paths> package-search-paths:drop
    rdip:trace("Compiling "; @input-file path;)
    packages> for(
        unpack2 swap >Name Package.new-or-path! drop
    )
    input-file> run-lexer!

    rdip:trace("Building.";)
    elab-module!
    typecheck-everything!

    entry-point> map(
        dip(dup NAMESPACE_MODULE) >Name QNAME0
        elab-entry-point
    ) nip

    trace-diagnostics!

    num-errors 0> if(
        num-errors rdip:trace(FGRed emit; show ; " errors." ; Reset emit;) 1 posix-exit!,
        rdip:trace(FGGreen emit; "No errors." ; Reset emit;),
    )

    match(
        Some ->
            "Specializer." rdip:trace
            run-specializer!
            "Codegen." rdip:trace
            output-file> if-some(
                >output-path
                C99_Options run-output-c99!,

                emit-debug-info> drop2
            ),
        None ->
            "Skipping Codegen." rdip:trace
            emit-debug-info> drop
            output-file> drop
    )
}

def parse-package-def [ Str -- [Str Path] ] {
    dip(BCOLON) split-byte
    /L2+ unwrap("Invalid package path definition" panic!)
    unpack2 >Path pack2
}

def compiler-parse-args [ +ArgumentParser(Arguments) Arguments Maybe(Str) ArgpOptionType --
                          +ArgumentParser(Arguments) Arguments ]
{
    Short -> dip(swap) match {
        { B'o' -> dip:map(>Path) output-file! }
        { B'e' -> entry-point! }
        { B'c' -> nip None swap entry-point! }
        { B'p' -> swap for(parse-package-def swap packages:cons) }
        { B'P' -> swap for(>Path swap package-search-paths:cons) }
        { _ -> drop swap drop UnknownArg Some state:error! }
    },
    Positional -> swap state positional-index 0= if(
        swap for(>Path swap input-file!),
        dip(drop) TooManyArgs Some state:error!
    ),
    LongOnly -> dup "debug" == if(
        drop2 True swap emit-debug-info!,
        drop2 UnknownArg Some state:error!
    ),
    End ->
        state positional-index 1 < then(
            TooFewArgs Some state:error!
        )
        state arguments output-file else(
            state arguments entry-point then(
                "output-file" MissingArg Some state:error!
            )
        )
        drop,
    _ -> drop drop UnknownArg Some state error! state!
}

def main [ +World -- +World ] {
    +Mirth.Init!

    Arguments.default
    LIST(
        "output-file" Some >name
        B'o' Short >flag-type
        "OUTPUT_FILE" Some >arg-doc
        "Test argument" Some >doc
        None >group
        ArgpOption ;

        "compile-only" Some >name
        B'c' Short >flag-type
        None >arg-doc
        "Compile code without running codegen step" Some >doc
        None >group
        ArgpOption ;

        "entry-point" Some >name
        B'e' Short >flag-type
        "ENTRY_POINT" Some >arg-doc
        "Custom entry point word for compilation" Some >doc
        None >group
        ArgpOption ;

        "package" Some >name
        B'p' Short >flag-type
        "(PACKAGE:PATH)*" Some >arg-doc
        "Package locations" Some >doc
        None >group
        ArgpOption ;

        "package-search-path" Some >name
        B'P' Short >flag-type
        "SEARCH_PATH*" Some >arg-doc
        "Package search paths" Some >doc
        None >group
        ArgpOption ;

        "debug" Some >name
        "debug" LongOnly >flag-type
        None >arg-doc
        "Emit debugging information during codegen" Some >doc
        None >group
        ArgpOption ;
    ) >options
    [ compiler-parse-args ] >parser
    "input-file" Some >args-doc
    "Mirth Compiler" >doc
    ArgumentParser

    parse-args match {
        { Right -> }
        { Left -> rdip:trace(unpack2 ; emit;) 1 posix-exit! }
    }

    dup Arguments.package-search-paths empty? then(
        LIST(
            "lib" >Path ;
            rdip:mirth-base-lib-path for(;)
        ) swap Arguments.package-search-paths!
    )

    compile!
    rdrop
}
