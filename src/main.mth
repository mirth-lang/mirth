module mirth.main

import std.prelude
import std.list
import std.posix
import std.terminal

import mirth.options
import mirth.mirth
import mirth.package
import mirth.lexer
import mirth.elab
import mirth.name
import mirth.specializer
import mirth.c99

def main [ +World -- +World ] {
    parse-options! else(trace(unpack2 ; emit;) 1 posix-exit!)

    +Mirth.Init!
    compile!
    rdrop
}

def compile! [ Options +World +Mirth -- +World +Mirth ] {
    /Options
    package-search-paths> dup empty? then(
        drop "lib" >Path mirth-base-lib-path >List cons
    ) package-search-paths!

    rdip:trace("Compiling "; @input-file path;)
    packages> for(
        unpack2 swap >Name Package.new-or-path! drop
    )
    input-file> run-lexer!

    rdip:trace("Building.";)
    elab-module!
    typecheck-everything!

    entry-point> map(
        dip(dup Namespace.Module) >Name 0 QName.Mk
        elab-entry-point
    ) nip

    trace-diagnostics!

    num-errors 0> if(
        num-errors rdip:trace(Sgr.FGRed span(show ; " errors." ;)) 1 posix-exit!,
        rdip:trace(Sgr.FGGreen span("No errors." ;)),
    )

    match(
        Some ->
            "Specializer." rdip:trace
            run-specializer!
            num-errors 0> if(
                trace-diagnostics!
                num-errors rdip:trace(Sgr.FGRed span(show ; " errors during specializer." ;)) 1 posix-exit!,

                "Codegen." rdip:trace
                output-file> if?(
                    >output-path
                    C99_Options run-output-c99!,

                    emit-debug-info> drop2
                )
            ),
        None ->
            "Skipping Codegen." rdip:trace
            emit-debug-info> drop
            output-file> drop
    )
}
