module mirth.macro

import std.prelude
import std.maybe
import mirth.mirth
import mirth.name
import mirth.token
import mirth.name
import mirth.elab
import mirth.def

table(Macro)
field(Macro.~name, Macro, Name)
field(Macro.~qname, Macro, Prop(QName))
field(Macro.~arity, Macro, Int)
field(Macro.~head, Macro, Token)
field(Macro.~action, Macro, MacroAction)

def Macro.name [ Macro -- Name ] { ~name @ }
def Macro.qname-hard [ +Mirth Macro -- +Mirth QName ] { ~qname force! }
def Macro.qname-soft [ +Mirth Macro -- +Mirth Maybe(QName) ] { ~qname @? bind(ready?) }
def Macro.arity [ Macro -- Int ] { ~arity @ }
def Macro.head? [ Macro -- Maybe(Token) ] { ~head @? }
def Macro.action [ Macro -- MacroAction ] { ~action @ }

def Macro.>Int [ Macro -- Int ] { index }
def Macro.== [ Macro Macro -- Bool ] { on2:>Int == }

data MacroAction {
    MADecl  [ [ +World +Mirth Token -- +World +Mirth Token ] ]
    MAArrow [ [ +Mirth +AB -- +Mirth +AB ] ]
    --
    def decl?  { MADecl -> Some, _ -> drop None }
    def arrow? { MAArrow -> Some, _ -> drop None }
    def callable? { arrow? >Bool }
}

def Macro.Prim [ +Mirth Str MacroAction -- +Mirth Macro ] {
    Macro.alloc! >macro
    @macro ~action !
    dup >Name @macro ~name !
    -1 QName.Prim @macro MacroQName prop @macro ~qname !
    -1 @macro ~arity !
    macro>
}

def +Mirth.init-macros! [ +Mirth -- +Mirth ] {
    "import"        [ elab-module-import! ] MADecl Macro.Prim DefMacro register
    "alias"         [ elab-alias!         ] MADecl Macro.Prim DefMacro register
    "inline"        [ elab-inline!        ] MADecl Macro.Prim DefMacro register
    "def"           [ elab-def!           ] MADecl Macro.Prim DefMacro register
    "def-missing"   [ elab-def-missing!   ] MADecl Macro.Prim DefMacro register
    "def-type"      [ elab-def-type!      ] MADecl Macro.Prim DefMacro register
    "def-external"  [ elab-def-external!  ] MADecl Macro.Prim DefMacro register
    "external"      [ elab-external!      ] MADecl Macro.Prim DefMacro register
    "buffer"        [ elab-buffer!        ] MADecl Macro.Prim DefMacro register
    "var"           [ elab-variable!      ] MADecl Macro.Prim DefMacro register
    "table"         [ elab-table!         ] MADecl Macro.Prim DefMacro register
    "field"         [ elab-field!         ] MADecl Macro.Prim DefMacro register
    "data"          [ elab-data!          ] MADecl Macro.Prim DefMacro register
    "struct"        [ elab-struct!        ] MADecl Macro.Prim DefMacro register
    "embed-str"     [ elab-embed-str!     ] MADecl Macro.Prim DefMacro register

    "match" [ elab-atom-match!    ] MAArrow Macro.Prim DefMacro register
    "\\"    [ elab-atom-lambda!   ] MAArrow Macro.Prim DefMacro register
}
