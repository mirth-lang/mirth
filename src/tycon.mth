module mirth.tycon

import std.prelude
import std.maybe
import std.either
import std.str
import std.list

import mirth.name
import mirth.data
import mirth.table
import mirth.type
import mirth.mirth
import mirth.var

data Tycon {
    Data  [ Data ]
    Table [ Table ]
    Prim  [ PrimType ]
    --
    def >Namespace [ Tycon -- Namespace ] { Namespace.Tycon }

    def data?  [ Tycon -- Maybe(Data)     ] { Data  -> Some, _ -> drop None }
    def table? [ Tycon -- Maybe(Table)    ] { Table -> Some, _ -> drop None }
    def prim?  [ Tycon -- Maybe(PrimType) ] { Prim  -> Some, _ -> drop None }

    def name [ +Mirth |- Tycon -- Name ] {
        { Data -> name }
        { Table -> name }
        { Prim -> tycon-qname name }
    }
    def qname-soft [ +Mirth |- Tycon -- Maybe(QName) ] {
        { Data -> qname-soft }
        { Table -> qname-soft }
        { Prim -> tycon-qname Some }
    }
    def qname-hard [ +Mirth |- Tycon -- QName ] {
        { Data -> qname-hard }
        { Table -> qname-hard }
        { Prim -> tycon-qname }
    }
    def name; [ +Mirth +Str |- Tycon -- ] {
        { Data -> name; }
        { Table -> name; }
        { Prim -> tycon-qname name; }
    }
    def qname; [ +Mirth +Str |- Tycon -- ] {
        { Data -> qname; }
        { Table -> qname; }
        { Prim -> tycon-qname qname; }
    }

    def = [ +Mirth |- Tycon Tycon -- Bool ] {
        { Data  -> swap match { Data  -> swap =, _ -> drop2 False } }
        { Table -> swap match { Table -> swap =, _ -> drop2 False } }
        { Prim  -> swap match { Prim  -> swap =, _ -> drop2 False } }
    }

    def >Type [ Tycon -- Type ] {
        { Data -> Type.Data }
        { Table -> Type.Table }
        { Prim -> Type.Prim }
    }

    def can-own-state? [ +Mirth |- Tycon -- Bool ] {
        { Data -> can-own-state? }
        { Prim -> can-own-state? }
        { Table -> drop False }
    }

    def params       [ +Mirth |- Tycon -- List(Var)     ] { Data -> params,       Table -> params,       Prim -> params       }
    def applied-type [ +Mirth |- Tycon -- Type          ] { Data -> applied-type, Table -> applied-type, Prim -> applied-type }
    def full-type    [ +Mirth |- Tycon -- Type/Resource ] { Data -> full-type,    Table -> full-type,    Prim -> full-type    }

    def full-type-fresh [ +Mirth |- Tycon -- Type/Resource ] {
        dip:Subst.Nil full-type map(freshen, freshen) nip
    }
}
