module mirth.tycon

import std.prelude
import std.maybe
import std.either
import std.str

import mirth.name
import mirth.data
import mirth.table
import mirth.type
import mirth.mirth

data Tycon {
    Data  [ Data ]
    Table [ Table ]
    Prim  [ PrimType ]
    --
    def name [ +Mirth Tycon -- +Mirth Name ] {
        { Data -> name }
        { Table -> name }
        { Prim -> tycon-qname name }
    }
    def qname-soft [ +Mirth Tycon -- +Mirth Maybe(QName) ] {
        { Data -> qname-soft }
        { Table -> qname-soft }
        { Prim -> tycon-qname Some }
    }
    def qname-hard [ +Mirth Tycon -- +Mirth QName ] {
        { Data -> qname-hard }
        { Table -> qname-hard }
        { Prim -> tycon-qname }
    }
    def name; [ +Mirth +Str Tycon -- +Mirth +Str ] {
        { Data -> name; }
        { Table -> name; }
        { Prim -> rdip:tycon-qname name; }
    }
    def qname; [ +Mirth +Str Tycon -- +Mirth +Str ] {
        { Data -> qname; }
        { Table -> qname; }
        { Prim -> rdip:tycon-qname qname; }
    }

    def =  [ Tycon Tycon -- Bool ] {
        { Data  -> swap match { Data  -> swap =, _ -> drop2 False } }
        { Table -> swap match { Table -> swap =, _ -> drop2 False } }
        { Prim  -> swap match { Prim  -> swap =, _ -> drop2 False } }
    }

    def >Type [ Tycon -- Type ] {
        { Data -> Type.Data }
        { Table -> Type.Table }
        { Prim -> Type.Prim }
    }

    def full-type-fresh [ +Mirth Tycon -- +Mirth Type/Resource ] {
        { Data -> dip:Subst.Nil full-type map(freshen, freshen) nip }
        { Prim -> sip:Type.Prim is-resource? if(Resource Right, Left) }
        { Table -> Type.Table Left }
    }

}
