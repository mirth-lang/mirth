module mirth.tycon

import std.prelude
import std.maybe
import std.either

import mirth.name
import mirth.data
import mirth.table
import mirth.type
import mirth.mirth

data(Tycon,
    TYCON_DATA -> Data,
    TYCON_TABLE -> Table,
    TYCON_PRIM -> PrimType)

def(Tycon.name, +Mirth Tycon -- +Mirth Name,
    TYCON_DATA -> name,
    TYCON_TABLE -> name,
    TYCON_PRIM -> tycon-qname name)
def(Tycon.qname-soft, +Mirth Tycon -- +Mirth Maybe(QName),
    TYCON_DATA -> qname-soft,
    TYCON_TABLE -> qname-soft,
    TYCON_PRIM -> tycon-qname Some)
def(Tycon.qname-hard, +Mirth Tycon -- +Mirth QName,
    TYCON_DATA -> qname-hard,
    TYCON_TABLE -> qname-hard,
    TYCON_PRIM -> tycon-qname)

def(Tycon.==, Tycon Tycon -- Bool,
    TYCON_DATA -> swap match(TYCON_DATA -> ==, _ -> drop2 False),
    TYCON_TABLE -> swap match(TYCON_TABLE -> ==, _ -> drop2 False),
    TYCON_PRIM -> swap match(TYCON_PRIM -> ==, _ -> drop2 False))

def(Tycon.>Type, Tycon -- Type,
    TYCON_DATA -> TData,
    TYCON_TABLE -> TTable,
    TYCON_PRIM -> TPrim)

def(Tycon.full-type-fresh, +Mirth Tycon -- +Mirth Type/Resource,
    TYCON_DATA -> dip:SUBST_NIL full-type map(freshen, freshen) nip,
    TYCON_PRIM -> dup is-resource? if(TPrim Resource Right, TPrim Left),
    TYCON_TABLE -> TTable Left)
