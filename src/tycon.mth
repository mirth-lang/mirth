module mirth.tycon

import std.prelude
import std.maybe
import std.either

import mirth.name
import mirth.data
import mirth.table
import mirth.type
import mirth.mirth

data(Tycon,
    Data -> Data,
    Table -> Table,
    Prim -> PrimType)

def(Tycon.name, +Mirth Tycon -- +Mirth Name,
    Data -> name,
    Table -> name,
    Prim -> tycon-qname name)
def(Tycon.qname-soft, +Mirth Tycon -- +Mirth Maybe(QName),
    Data -> qname-soft,
    Table -> qname-soft,
    Prim -> tycon-qname Some)
def(Tycon.qname-hard, +Mirth Tycon -- +Mirth QName,
    Data -> qname-hard,
    Table -> qname-hard,
    Prim -> tycon-qname)

def(Tycon.==, Tycon Tycon -- Bool,
    Data -> swap match(Data -> ==, _ -> drop2 False),
    Table -> swap match(Table -> ==, _ -> drop2 False),
    Prim -> swap match(Prim -> ==, _ -> drop2 False))

def(Tycon.>Type, Tycon -- Type,
    Data -> Type.Data,
    Table -> Type.Table,
    Prim -> Type.Prim)

def(Tycon.full-type-fresh, +Mirth Tycon -- +Mirth Type/Resource,
    Data -> dip:Subst.Nil full-type map(freshen, freshen) nip,
    Prim -> dup is-resource? if(Type.Prim Resource Right, Type.Prim Left),
    Table -> Type.Table Left)
