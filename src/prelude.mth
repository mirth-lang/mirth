module(prelude)

############################################
# not re-exported because of optimisations #
############################################
# def(dip, *a c [*a -- *b] -- *b c, prim.core.dip)
# def(if, *a Bool [*a -- *b] [*a -- *b] -- *b, prim.core.if)
# def(while, *a [*a -- *a] [*a -- *a Bool] -- *a, prim.core.while)
############################################

##################################################
# not re-exported because they're special syntax #
##################################################
# match
# lambda
##################################################

# Re-exported primitives.
def(id, --, prim.core.id)
def(dup, a -- a a, prim.core.dup)
def(drop, a --, prim.core.drop)
def(swap, a b -- b a, prim.core.swap)
def(??, --, prim.core.debug)
def(run, *a [ *a -- *b ] -- *b, \([f] -> f))

def(==, a a -- Bool, prim.value.eq)
def(<=, a a -- Bool, prim.value.le)
def(<,  a a -- Bool, prim.value.lt)
def(cast, a -- b, prim.value.cast)
def(value@, Ptr -- a, prim.value.get)
def(value!, a Ptr --, prim.value.set)

def(+, Int Int -- Int, prim.int.add)
def(-, Int Int -- Int, prim.int.sub)
def(*, Int Int -- Int, prim.int.mul)
def(/, Int Int -- Int, prim.int.div)
def(%, Int Int -- Int, prim.int.mod)
def(&, Int Int -- Int, prim.int.and)
def(|, Int Int -- Int, prim.int.or)
def(^, Int Int -- Int, prim.int.xor)
def(<<, Int Int -- Int, prim.int.shl)
def(>>, Int Int -- Int, prim.int.shr)
def(int@, Ptr -- Int, prim.int.get)
def(int!, Int Ptr --, prim.int.set)

def(true, Bool, prim.bool.true)
def(false, Bool, prim.bool.false)
def(&&, Bool Bool -- Bool, prim.bool.and)
def(||, Bool Bool -- Bool, prim.bool.or)

def(ptr+, Int Ptr -- Ptr, prim.ptr.add)
def(|ptr|, Int, prim.ptr.size)
def(ptr@, Ptr -- Ptr, prim.ptr.get)
def(ptr!, Ptr Ptr --,prim.ptr.set)

data(RawPtr, RAWPTR -> Int)
def(with-raw-ptr, *a Ptr [*a RawPtr -- *b] -- *b Ptr,
    \([f] -> prim.ptr.raw RAWPTR swap dip(f)))

def(u8@, Ptr -- U8, prim.u8.get)
def(u8!, U8 Ptr --, prim.u8.set)
def(u16@, Ptr -- U16, prim.u16.get)
def(u16!, U16 Ptr --, prim.u16.set)
def(u32@, Ptr -- U32, prim.u32.get)
def(u32!, U32 Ptr --, prim.u32.set)
def(u64@, Ptr -- U64, prim.u64.get)
def(u64!, U64 Ptr --, prim.u64.set)

def(i8@, Ptr -- I8, prim.i8.get)
def(i8!, I8 Ptr --, prim.i8.set)
def(i16@, Ptr -- I16, prim.i16.get)
def(i16!, I16 Ptr --, prim.i16.set)
def(i32@, Ptr -- I32, prim.i32.get)
def(i32!, I32 Ptr --, prim.i32.set)
def(i64@, Ptr -- I64, prim.i64.get)
def(i64!, I64 Ptr --, prim.i64.set)

data OS
    OS_UNKNOWN
    OS_WINDOWS
    OS_LINUX
    OS_MACOS
end
def(RUNNING_OS, OS, prim.sys.os cast)
def(argc, Int, prim.sys.argc)
def(argv, Ptr, prim.sys.argv)

def(posix-read!, Int Ptr Int -- Int, prim.posix.read)
def(posix-write!, Int Ptr Int -- Int, prim.posix.write)
def(posix-open!, Str Int Int -- Int, dip2(Str->Ptr) prim.posix.open)
def(posix-close!, Int -- Int, prim.posix.close)
def(posix-exit!, *a Int -- *b, prim.posix.exit)
def(posix-mmap!, Ptr Int Int Int Int Int -- Ptr, prim.posix.mmap)

rotr : a b c -- c a b
rotr = swap dip(swap)

rotl : a b c -- b c a
rotl = dip(swap) swap

over : a b -- a b a
over = dip(dup) swap

tuck : a b -- b a b
tuck = dup dip(swap)

nip : a b -- b
nip = dip(drop)

trip : a -- a a a
trip = dup dup

dup2 : a1 a2 -- a1 a2 a1 a2
dup2 = over over

dup3 : a1 a2 a3 -- a1 a2 a3 a1 a2 a3
dup3 = dup dip(dip(dup2) rotr)

dip? : *a c [*a -- *a Bool] -- *a c Bool
dip? = \([f] -> dip(f) swap)

dip' : *a c x [*a x -- *b y] -- *b c y
dip' = \([f] -> swap dip(f) swap)

dip2 : *a c1 c2 [*a -- *b] -- *b c1 c2
dip2 = \([f] -> dip(dip(f)))

dip3 : *a c1 c2 c3 [*a -- *b] -- *b c1 c2 c3
dip3 = \([f] -> dip(dip(dip(f))))

drop2 : a b --
drop2 = drop drop

drop3 : a b c --
drop3 = drop drop drop

drop4 : a b c d --
drop4 = drop drop drop drop

rot4r : x1 x2 x3 y -- y x1 x2 x3
rot4r = swap dip(rotr)

rot4l : y x1 x2 x3 -- x1 x2 x3 y
rot4l = dip(rotl) swap

or : *a Bool [*a -- *a Bool] -- *a Bool
or = \([f] -> if(true, f))
# or(f) = if(true, f)

and : *a Bool [*a -- *a Bool] -- *a Bool
and = \([f] -> if(f, false))
# and(f) = if(f, false)

def-type(Byte, U8)
def-type(Size, Int)
def-type(Offset, Int)

Str->Ptr : Str -- Ptr
Str->Ptr = cast

Ptr->Str : Ptr -- Str
Ptr->Str = cast

Int->Ptr : Int -- Ptr
Int->Ptr = cast

Ptr->Int : Ptr -- Int
Ptr->Int = cast

U8_MAX : Int
U8_MAX = 0xFF

U16_MAX : Int
U16_MAX = 0xFFFF

U32_MAX : Int
U32_MAX = 0xFFFFFFFF

I8_MAX : Int
I8_MAX = 0x7F

I16_MAX : Int
I16_MAX = 0x7FFF

I32_MAX : Int
I32_MAX = 0x7FFFFFFF


U8_MIN : Int
U8_MIN = 0

U16_MIN : Int
U16_MIN = 0

U32_MIN : Int
U32_MIN = 0

I8_MIN : Int
I8_MIN = -0x80

I16_MIN : Int
I16_MIN = -0x8000

I32_MIN : Int
I32_MIN = -0x80000000

not : Bool -- Bool
not = false ==

!= : a a -- Bool
!= = == not

data Comparison
    EQ
    LT
    GT
end

cmp : a a -- Comparison
cmp =
    dup2 == if(
        drop2 EQ,
        < if(
            LT,
            GT
        )
    )

cmp? : a a -- a a Comparison
cmp? = dup2 cmp

> : a a -- Bool
> = swap <

>= : a a -- Bool
>= = swap <=

0= : Int -- Bool
0= = 0 ==

0< : Int -- Bool
0< = 0 <

1+ : Int -- Int
1+ = 1 +

1- : Int -- Int
1- = 1 -

max : Int Int -- Int
max = dup2 < if(nip, drop)

min : Int Int -- Int
min = dup2 < if(drop, nip)

square : Int -- Int
square = dup *

nonzero : Int -- Bool
nonzero = 0 !=

ptrs : Size -- Size
ptrs = |ptr| *

ptr@@ : Offset Ptr -- Ptr
ptr@@ = dip(ptrs) ptr+ ptr@

ptr!! : Ptr Offset Ptr --
ptr!! = dip(ptrs) ptr+ ptr!

u8@@ : Offset Ptr -- Byte
u8@@ = ptr+ u8@

u8!! : Byte Offset Ptr --
u8!! = ptr+ u8!

ints : Size -- Size
ints = 8 *

int@@ : Offset Ptr -- Int
int@@ = dip(ints) ptr+ int@

int!! : Int Offset Ptr --
int!! = dip(ints) ptr+ int!

values : Size -- Size
values = 16 *

value@@ : Offset Ptr -- a
value@@ = dip(values) ptr+ value@

value!! : a Offset Ptr --
value!! = dip(values) ptr+ value!

in-range : Int Int Int -- Bool
in-range = dip(over dip(>=)) <= &&

Int->U8 : Int -- U8
Int->U8 = cast # U8_MAX & cast
    # dup U8_MIN U8_MAX in-range if(
    #     cast,
    #     "Int->U8 failed: out of bounds" panic!
    # )

Int->U16 : Int -- U16
Int->U16 = cast # U16_MAX & cast
    # dup U16_MIN U16_MAX in-range if(
    #     cast,
    #     "Int->U16 failed: out of bounds" panic!
    # )

Int->U32 : Int -- U32
Int->U32 = cast # U32_MAX & cast
    # dup U32_MIN U32_MAX in-range if(
    #     cast,
    #     "Int->U32 failed: out of bounds" panic!
    # )

Int->U64 : Int -- U64
Int->U64 = cast

Int->I8 : Int -- I8
Int->I8 = cast
    # dup I8_MIN I8_MAX in-range if(
    #     cast,
    #     "Int->I8 failed: out of bounds" panic!
    # )

Int->I16 : Int -- I16
Int->I16 = cast
    # dup I16_MIN I16_MAX in-range if(
    #     cast,
    #     "Int->I16 failed: out of bounds" panic!
    # )

Int->I32 : Int -- I32
Int->I32 = cast
    # dup I32_MIN I32_MAX in-range if(
    #     cast,
    #     "Int->I32 failed: out of bounds" panic!
    # )

Int->I64 : Int -- I64
Int->I64 = cast

U8->Int : U8 -- Int
U8->Int = cast

U16->Int : U16 -- Int
U16->Int = cast

U32->Int : U32 -- Int
U32->Int = cast

U64->Int : U64 -- Int
U64->Int = cast

I8->Int : I8 -- Int
I8->Int = cast

I16->Int : I16 -- Int
I16->Int = cast

I32->Int : I32 -- Int
I32->Int = cast

I64->Int : I64 -- Int
I64->Int = cast

negate : Int -- Int
negate = -1 *

abs : Int -- Int
abs = dup 0< if(negate, id)

###########
# STRINGS #
###########


#######
# NIL #
#######

||| Default value for any type. This is the 0-filled memory
||| version of the type (hence "nil"). Best practice is to
||| set up your types such that 0-filled memory is a sensible
||| default value.
|||
||| Use nil with care! Don't confuse it for an "optional"
||| value, use `Maybe(t)` instead. Rather, `nil` should
||| be a value within the acceptable range of the type, and
||| a sensible default value for fields of this type.
|||
||| In the future, there will be better control over which
||| types admit a `nil` value.
|||
||| - For booleans, this is false.
||| - For integers, this is zero.
||| - For pointers, this is NULL.
||| - For table typess, this is the 0th row, which you never alloc.
|||   Its fields have nil value unless you override them.
||| - For data types, this is the first constructor, applied to nil values.
||| - For n-tuples, this is [ nil ... nil ]
nil : a
nil = 0 cast

||| Test for nil.
is-nil : a -- Bool
is-nil = nil ==

||| Test for nil.
is-nil? : a -- a Bool
is-nil? = dup nil ==

##########
# TUPLES #
##########

||| Return the "nil" pack, i.e. null.
pack-nil : [*a]
pack-nil = nil

||| Is this a nil pack?
pack-nil? : [*a] -- [*a] Bool
pack-nil? = dup pack-nil ==

||| Construct a tuple by appending an element.
pack-cons : [*a] b -- [*a b]
pack-cons = prim.pack.cons

||| Deconstruct a tuple by splitting it at its last element.
pack-uncons : [*a b] -- [*a] b
pack-uncons = prim.pack.uncons

pack0 : []
pack0 = pack-nil

pack1 : a -- [a]
pack1 = dip(pack0) pack-cons

pack2 : a b -- [a b]
pack2 = dip(pack1) pack-cons

pack3 : a b c -- [a b c]
pack3 = dip(pack2) pack-cons

pack4 : a b c d -- [a b c d]
pack4 = dip(pack3) pack-cons

pack5 : a b c d e -- [a b c d e]
pack5 = dip(pack4) pack-cons

unpack0 : [] --
unpack0 = drop

unpack1 : [a] -- a
unpack1 = pack-uncons nip

unpack2 : [a b] -- a b
unpack2 = pack-uncons dip(unpack1)

unpack3 : [a b c] -- a b c
unpack3 = pack-uncons dip(unpack2)

unpack4 : [a b c d] -- a b c d
unpack4 = pack-uncons dip(unpack3)

unpack5 : [a b c d e] -- a b c d e
unpack5 = pack-uncons dip(unpack4)

.0 : [*a b] -- b
.0 = pack-uncons nip

.1 : [*a b c] -- b
.1 = pack-uncons drop .0

.2 : [*a b c d] -- b
.2 = pack-uncons drop .1

.3 : [*a b c d e] -- b
.3 = pack-uncons drop .2

.4 : [*a b c d e f] -- b
.4 = pack-uncons drop .3

.5 : [*a b c d e f g] -- b
.5 = pack-uncons drop .4

.0? : [*a b] -- [*a b] b
.0? = dup .0

.1? : [*a b c] -- [*a b c] b
.1? = dup .1

.2? : [*a b c d] -- [*a b c d] b
.2? = dup .2

.3? : [*a b c d e] -- [*a b c d e] b
.3? = dup .3

.4? : [*a b c d e f] -- [*a b c d e f] b
.4? = dup .4

.5? : [*a b c d e f g] -- [*a b c d e f g] b
.5? = dup .5

.0! : y [*a x] -- [*a y]
.0! = pack-uncons drop swap pack-cons

.1! : y [*a x b] -- [*a y b]
.1! = pack-uncons dip(.0!) pack-cons

.2! : y [*a x b c] -- [*a y b c]
.2! = pack-uncons dip(.1!) pack-cons

.3! : y [*a x b c d] -- [*a y b c d]
.3! = pack-uncons dip(.2!) pack-cons

.4! : y [*a x b c d e] -- [*a y b c d e]
.4! = pack-uncons dip(.3!) pack-cons

.5! : y [*a x b c d e f] -- [*a y b c d e f]
.5! = pack-uncons dip(.4!) pack-cons
