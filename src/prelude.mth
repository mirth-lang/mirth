module(prelude)

############################################
# not re-exported because of optimisations #
############################################
# def(dip, (*a -- *b) *a c -- *b c, prim.core.dip)
# def(if, (*a -- *b, *a -- *b) *a Bool -- *b, prim.core.if)
# def(while, (*a -- *a Bool, *a -- *a) *a -- *a, prim.core.while)
############################################

##################################################
# not re-exported because they're special syntax #
##################################################
# match
# lambda
##################################################

# Re-exported primitives.
alias(id, prim-id)
alias(??, prim-debug)
alias(swap, prim-swap)
alias(dup, prim-dup)
alias(drop, prim-drop)
alias(run, prim-run)

alias(==, prim-value-eq)
alias(<=, prim-value-le)
alias(<, prim-value-lt)
alias(value@, prim-value-get)
alias(value!, prim-value-set)

alias(+, prim-int-add)
alias(-, prim-int-sub)
alias(*, prim-int-mul)
alias(/, prim-int-div)
alias(%, prim-int-mod)
alias(&, prim-int-and)
alias(|, prim-int-or)
alias(^, prim-int-xor)
alias(<<, prim-int-shl)
alias(>>, prim-int-shr)
alias(int@, prim-int-get)
alias(int!, prim-int-set)

alias(true, prim-bool-true)
alias(false, prim-bool-false)
alias(&&, prim-bool-and)
alias(||, prim-bool-or)

# use ptr+ only if Ptr is static or has another reference
# otherwise use with-ptr+
alias(ptr+, prim-ptr-add)
def(with-ptr+(f), (*a Ptr -- *b) *a Offset Ptr -- *b,
    dup dip(prim-ptr-add f) drop)

alias(ptr@, prim-ptr-get)
alias(ptr!, prim-ptr-set)
alias(|ptr|, prim-ptr-size)

data(RawPtr, RAWPTR -> Int)
def(with-raw-ptr(f), (*a RawPtr -- *b) *a Ptr -- *b Ptr,
    prim-ptr-raw RAWPTR swap dip(f))

alias(u8@, prim-u8-get)
alias(u8!, prim-u8-set)
alias(u16@, prim-u16-get)
alias(u16!, prim-u16-set)
alias(u32@, prim-u32-get)
alias(u32!, prim-u32-set)
alias(u64@, prim-u64-get)
alias(u64!, prim-u64-set)

alias(i8@, prim-i8-get)
alias(i8!, prim-i8-set)
alias(i16@, prim-i16-get)
alias(i16!, prim-i16-set)
alias(i32@, prim-i32-get)
alias(i32!, prim-i32-set)
alias(i64@, prim-i64-get)
alias(i64!, prim-i64-set)

data(OS,
    OS_UNKNOWN,
    OS_WINDOWS,
    OS_LINUX,
    OS_MACOS)

def(OS->Int, OS -- Int,
    OS_UNKNOWN -> 0,
    OS_WINDOWS -> 1,
    OS_LINUX -> 2,
    OS_MACOS -> 3)

def(Int->OS, Int -- OS,
    dup 1 == if(
        drop OS_WINDOWS,
    dup 2 == if(
        drop OS_LINUX,
    dup 3 == if(
        drop OS_MACOS,
        drop OS_UNKNOWN
    ))))

def(RUNNING_OS, OS, prim-sys-os Int->OS)
alias(argc, prim-sys-argc)
alias(argv, prim-sys-argv)

alias(posix-read!, prim-posix-read)
alias(posix-write!, prim-posix-write)
def(posix-open!, Str Int Int -- Int,
    rotl dup dip(
        prim-str-base rotr
        prim-posix-open
    ) drop)
alias(posix-close!, prim-posix-close)
alias(posix-exit!, prim-posix-exit)

def(rotr, a b c -- c a b, swap dip(swap))
def(rotl, a b c -- b c a, dip(swap) swap)

def(over, a b -- a b a, dip(dup) swap)
def(over2, a b1 b2 -- a b1 b2 a, dip(over) swap)
def(over3, a b1 b2 b3 -- a b1 b2 b3 a, dip(over2) swap)

def(tuck, a b -- b a b, dup dip(swap))

def(nip, a b -- b, dip(drop))

def(dup2, a b   -- a b    a b  , over over)
def(dup3, a b c -- a b c  a b c, dup dip(dip(dup2) rotr))

def(dip?(f), (*a -- *a Bool) *a c -- *a c Bool, dip(f) swap)
def(dip'(f), (*a x -- *b y) *a c x -- *b c y, swap dip(f) swap)

def(dip2(f), (*a -- *b) *a c1 c2 -- *b c1 c2,
    dip(dip(f)))
def(dip3(f), (*a -- *b) *a c1 c2 c3 -- *b c1 c2 c3,
    dip(dip(dip(f))))

def(sip(f), (*a x -- *b) *a x -- *b x,
    dup dip(f))
def(sip2(f), (*a x1 x2 -- *b) *a x1 x2 -- *b x1 x2,
    dup2 dip(dip(f)))

def(drop2, a b --, drop drop)
def(drop3, a b c --, drop drop drop)
def(drop4, a b c d --, drop drop drop drop)

def(rot4r, a b c d -- d a b c, swap dip(rotr))
def(rot4l, a b c d -- b c d a, dip(rotl) swap)

def(or(f), (*a -- *a Bool) *a Bool -- *a Bool, if(true, f))
def(and(f), (*a -- *a Bool) *a Bool -- *a Bool, if(f, false))

def(repeat(f), (*a -- *a) *a Int -- *a,
    while(dup 0 >, dip(f) 1-) drop)

def(count(f), (*a Int -- *a) *a Int -- *a,
    0 swap repeat(dup dip(f) 1+) drop)
def(countdown(f), (*a Int -- *a) *a Int -- *a,
    dup 1- swap repeat(dup dip(f) 1-) drop)

def-type(Size, Int)
def-type(Offset, Int)

def(U8_MAX, Int, 0xFF)
def(U16_MAX, Int, 0xFFFF)
def(U32_MAX, Int, 0xFFFFFFFF)

def(I8_MAX, Int, 0x7F)
def(I16_MAX, Int, 0x7FFF)
def(I32_MAX, Int, 0x7FFFFFFF)

def(U8_MIN, Int, 0)
def(U16_MIN, Int, 0)
def(U32_MIN, Int, 0)

def(I8_MIN, Int, -0x80)
def(I16_MIN, Int, -0x8000)
def(I32_MIN, Int, -0x80000000)

def(not, Bool -- Bool, false ==)

data(Comparison, EQ, LT, GT)

def(cmp, a a -- Comparison,
    dup2 == if(
        drop2 EQ,
        < if(
            LT,
            GT
        )
    ))
def(cmp?, a a -- a a Comparison, dup2 cmp)
def(<>, a a -- Bool, == not)
def(>, a a -- Bool, swap <)
def(>=, a a -- Bool, swap <=)
def(max, a a -- a, dup2 < if(nip, drop))
def(min, a a -- a, dup2 < if(drop, nip))

def-missing(prim-int-succ, Int -- Int, 1 +)
def-missing(prim-int-pred, Int -- Int, 1 -)
def-missing(prim-int-negate, Int -- Int, -1 *)
alias(negate, prim-int-negate)
alias(1+, prim-int-succ)
alias(1-, prim-int-pred)
def(0=, Int -- Bool, 0 ==)
def(0<, Int -- Bool, 0 <)
def(0>, Int -- Bool, 0 >)
def(0<>, Int -- Bool, 0 <>)

alias(ptr-nil, prim-ptr-nil)
def(ptrs, Size -- Size, |ptr| *)
def(ptr@@, Offset Ptr -- Ptr, dip(ptrs) with-ptr+(ptr@))
def(ptr!!, Ptr Offset Ptr --, dip(ptrs) with-ptr+(ptr!))

def(u8@@, Offset Ptr -- U8, with-ptr+(u8@))
def(u8!!, U8 Offset Ptr --, with-ptr+(u8!))

def(ints, Size -- Size, 8 *)
def(int@@, Offset Ptr -- Int, dip(ints) with-ptr+(int@))
def(int!!, Int Offset Ptr --, dip(ints) with-ptr+(int!))

def(values, Size -- Size, 16 *)
def(value@@, Offset Ptr -- a, dip(values) with-ptr+(value@))
def(value!!, a Offset Ptr --, dip(values) with-ptr+(value!))

def(in-range, a a a -- Bool, dip(dip(dup) >= swap) <= &&)

def(Int->U8, Int -- U8,
    assert!(dup U8_MIN U8_MAX in-range, "Int->U8 out of bounds error")
    prim-unsafe-cast)

def(Int->U16, Int -- U16,
    assert!(dup U16_MIN U16_MAX in-range, "Int->U16 out of bounds error")
    prim-unsafe-cast)

def(Int->U32, Int -- U32,
    assert!(dup U32_MIN U32_MAX in-range, "Int->U32 out of bounds error")
    prim-unsafe-cast)

def(Int->U64, Int -- U64, prim-unsafe-cast)

def(Int->I8, Int -- I8,
    assert!(dup I8_MIN I8_MAX in-range, "Int->I8 out of bounds error")
    prim-unsafe-cast)

def(Int->I16, Int -- I16,
    assert!(dup I16_MIN I16_MAX in-range, "Int->I16 out of bounds error")
    prim-unsafe-cast)

def(Int->I32, Int -- I32,
    assert!(dup I32_MIN I32_MAX in-range, "Int->I32 out of bounds error")
    prim-unsafe-cast)

def(Int->I64, Int -- I64, prim-unsafe-cast)

def(U8->Int, U8 -- Int, prim-unsafe-cast)
def(U16->Int, U16 -- Int, prim-unsafe-cast)
def(U32->Int, U32 -- Int, prim-unsafe-cast)
def(U64->Int, U64 -- Int, prim-unsafe-cast)

def(I8->Int, I8 -- Int, prim-unsafe-cast) # TODO  test this
def(I16->Int, I16 -- Int, prim-unsafe-cast)
def(I32->Int, I32 -- Int, prim-unsafe-cast)
def(I64->Int, I64 -- Int, prim-unsafe-cast)

def(abs, Int -- Int, dup 0< if(negate, id))

##########
# TUPLES #
##########

alias(pack0, prim-pack-nil)
def(pack1, a -- [a], dip(pack0) prim-pack-cons)
def(pack2, a b -- [a b], dip(pack1) prim-pack-cons)
def(pack3, a b c -- [a b c], dip(pack2) prim-pack-cons)
def(pack4, a b c d -- [a b c d], dip(pack3) prim-pack-cons)
def(pack5, a b c d e -- [a b c d e], dip(pack4) prim-pack-cons)

alias(unpack0, drop)
def(unpack1, [a] -- a, prim-pack-uncons nip)
def(unpack2, [a b] -- a b, prim-pack-uncons dip(unpack1))
def(unpack3, [a b c] -- a b c, prim-pack-uncons dip(unpack2))
def(unpack4, [a b c d] -- a b c d, prim-pack-uncons dip(unpack3))
def(unpack5, [a b c d e] -- a b c d e, prim-pack-uncons dip(unpack4))

alias(@, prim-mut-get)
alias(!, prim-mut-set)
alias(mut-is-set, prim-mut-is-set)
def(modify(f), (*a t -- *b t) *a Mut(t) -- *b, dup dip(@ f) !)

alias(panic!, prim-panic)
def(expect!(f,g), (*a -- *a Bool, *a -- *b Str) *a -- *a,
    f if(id, g panic!))
def(assert!(f,g), (*a -- *a Bool, *a -- *b Str) *a -- *a,
    expect!(f,g "assertion failed: " swap prim-str-cat))
