module(prelude)


def(trip, a -- a a a, dup dup)
def(rotr, a b c -- c a b, swap dip(swap))
def(rotl, a b c -- b c a, dip(swap) swap)
def(over, a b -- a b a, dip(dup) swap)
def(tuck, a b -- b a b, dup dip(swap))
def(nip, a b -- b, dip(drop))
def(dup2, a b -- a b a b, over over)
def(drop2, a b --, drop drop)
def(drop3, a b c --, drop drop drop)

def-type(Byte, U8)
def-type(Char, U8)

def-type(Str, Ptr)

def-type(Bool, Int)
def-type(Size, Int)
def-type(Offset, Int)
def-type(File, Int)

def(>, Int Int -- Bool, swap <)
def(>=, Int Int -- Bool, swap <=)

def(0=, Int -- Bool, 0 =)
def(0<, Int -- Bool, 0 <)

def(1+, Int -- Int, 1 +)
def(1-, Int -- Int, 1 -)

def(not, Bool -- Bool, 0 =)

def(u8, Size, 1)
def(u8s, Size -- Size, id)
def(u8@@, Offset Ptr -- Byte, + u8@)
def(u8!!, Byte Offset Ptr --, + u8!)

def(u16, Size, 2)
def(u16s, Size -- Size, u16 *)
def(u16@@, Offset Ptr -- U16, dip(u16s) + u16@)
def(u16!!, U16 Offset Ptr --, dip(u16s) + u16!)

def(i16, Size, 2)
def(i16s, Size -- Size, i16 *)
def(i16@@, Offset Ptr -- I16, dip(i16s) + i16@)
def(i16!!, I16 Offset Ptr --, dip(i16s) + i16!)

def(i32, Size, 4)
def(i32s, Size -- Size, i32 *)
def(i32@@, Offset Ptr -- I32, dip(i32s) + i32@)
def(i32!!, I32 Offset Ptr --, dip(i32s) + i32!)

def-type(Long, Int)
def(quad, Size, 8)
def(quads, Size -- Size, quad *)
def(quad@@, Offset Ptr -- Long, dip(quads) + @)
def(quad!!, Long Offset Ptr --, dip(quads) + !)

# Assertions

def(!!, Bool --, if(id, "Assertion failed" panic!))
def(!!=, a a --, = !!)
def(!!0, Bool --, 0 !!=)
def(!!1, Bool --, 1 !!=)
def(!!001, Int Int Int --, !!1 !!0 !!0)
def(!!010, Int Int Int --, !!0 !!1 !!0)
def(!!011, Int Int Int --, !!1 !!1 !!0)
def(!!100, Int Int Int --, !!0 !!0 !!1)
def(!!111, Int Int Int --, !!1 !!1 !!1)

def(str-tail, Str -- Str, 1 +)
def(str-length, Str -- Int,
    0 swap
    while(dup u8@,
        str-tail
        dip(1+))
    drop)

def(str-copy!, Str Str --,
    while( over u8@,
        over u8@ over u8!
        dip(str-tail) str-tail
    )
    dip(drop 0 Int->U8) u8!)

def(STR_BUF_SIZE, Int, 0x80)
quad def-static-buffer(STR_BUF_LEN)
STR_BUF_SIZE u8s def-static-buffer(STR_BUF)

def(str-buf-length?, Int +StrBuf, STR_BUF_LEN @)
def(str-buf-length!, Int -- +StrBuf,
    dup STR_BUF_LEN !
    dip(0 Int->U8) str-buf-u8!)
def(str-buf-u8@, Offset -- U8 +StrBuf, STR_BUF u8@@)
def(str-buf-u8!, U8 Offset -- +StrBuf, STR_BUF u8!!)
def(str-buf-full?, Bool +StrBuf,
    str-buf-length? 1+ STR_BUF_SIZE >=)
def(str-buf-clear!, +StrBuf, 0 str-buf-length!)

def(str-buf-push!, U8 -- +StrBuf,
    str-buf-full? if(
        "str-buf-push! but STR_BUF is already full" panic!
        drop,
        str-buf-length? str-buf-u8!
        str-buf-length? 1+ str-buf-length!
    ))

# Append the given string into STR_BUF. If the string is
# too large it gets truncated.
def(str-buf-push-str!, Str -- +StrBuf,
        while(str-buf-full? if(0, dup u8@),
        dup u8@ str-buf-push!
        str-tail)
    drop)

# Set the STR_BUF to a given string. If the string is
# too large it gets truncated.
def(str-buf!, Str -- +StrBuf, str-buf-clear! str-buf-push-str!)


def(str-buf-write!, File -- +StrBuf, STR_BUF str-buf-length? posix-write!)
def(str-buf-print!, +StrBuf, stdout str-buf-write!)
def(str-buf-trace!, +StrBuf, stderr str-buf-write!)

def(str-buf-read!, File -- +IO,
    str-buf-clear!
    STR_BUF STR_BUF_SIZE 1- posix-read!
    dup 0< if(
        "str-buf-read! failed" panic! drop,
        str-buf-length!
    ))
def(str-buf-input!, -- +IO, stdin str-buf-read!)

# Tests

def(run-tests, --,
    test-if test-drop test-dup test-swap test-dip
    test-trip test-rotr test-rotl test= test< test<= test> test>=
    test+ test- test* test/ test% test-str test-while
    test@!)
def(test-if, --, 0 !!0 1 !!1 0 1 !!1 !!0)
def(test-drop, --, 0 1 drop !!0)
def(test-dup, --, 0 1 dup !!011)
def(test-swap, --, 0 1 0 swap !!001)
def(test-dip, --, 0 0 dip(1) !!010)
def(test-trip, --, 0 1 trip !!111 !!0)
def(test-rotr, --,
    1 0 0 rotr !!010
    0 1 0 rotr !!001
    0 0 1 rotr !!100)
def(test-rotl, --,
    1 0 0 rotl !!001
    0 1 0 rotl !!100
    0 0 1 rotl !!010)

def(test=, --,
    0 0 = !!1
    0 1 = !!0
    1 0 = !!0
    1 1 = !!1
    1 2 = !!0
    2 1 = !!0
    2 2 = !!1)
def(test<, --,
    0 0 < !!0
    0 1 < !!1
    1 0 < !!0
    1 1 < !!0
    1 2 < !!1
    2 1 < !!0
    2 2 < !!0)
def(test<=, --,
    0 0 <= !!1
    0 1 <= !!1
    1 0 <= !!0
    1 1 <= !!1
    1 2 <= !!1
    2 1 <= !!0
    2 2 <= !!1)
def(test>, --,
    0 0 > !!0
    0 1 > !!0
    1 0 > !!1
    1 1 > !!0
    1 2 > !!0
    2 1 > !!1
    2 2 > !!0)
def(test>=, --,
    0 0 >= !!1
    0 1 >= !!0
    1 0 >= !!1
    1 1 >= !!1
    1 2 >= !!0
    2 1 >= !!1
    2 2 >= !!1
    -1 0 >= !!0
    -1 -1 >= !!1
    0 -1 >= !!1
    -1 -2 >= !!1
    -2 -2 >= !!1
    -2 -1 >= !!0)

def(test+, --,
    0 0 + !!0
    0 1 + !!1
    1 0 + !!1
    1 1 + 2 = !!1
    2 2 + 4 = !!1
    2 -2 + !!0)

def(test-, --,
    0 0 - !!0
    1 0 - !!1
    1 1 - !!0
    0 1 - -1 !!=
    2 2 - !!0
    2 4 - -2 !!=
    4 2 - 2 !!=)

def(test*, --,
    0 0 * !!0
    2 1 * 2 !!=
    2 2 * 4 !!=
    2 4 * 8 !!=)

def(test/, --,
    1 1 / !!1
    -5 2 / -2 !!=
    -4 2 / -2 !!=
    -3 2 / -1 !!=
    -2 2 / -1 !!=
    -1 2 / !!0
    0 2 / !!0
    1 2 / !!0
    2 2 / !!1
    3 2 / !!1
    4 2 / 2 !!=
    5 2 / 2 !!=
    0 -2 / !!0
    1 -2 / !!0
    2 -2 / -1 !!=
    3 -2 / -1 !!=
    4 -2 / -2 !!=
    5 -2 / -2 !!=)

def(test%, --,
    1 1 % !!0
    -5 2 % -1 !!=
    -4 2 % !!0
    -3 2 % -1 !!=
    -2 2 % !!0
    -1 2 % -1 !!=
    0 2 % !!0
    1 2 % !!1
    2 2 % !!0
    3 2 % !!1
    4 2 % !!0
    5 2 % !!1)

2 quads def-static-buffer(TEST_BUF)
def(test@!, --,
    # reset test buffer
    0 0 TEST_BUF quad!!
    0 1 TEST_BUF quad!!
    # run test
    0 TEST_BUF quad@@ !!0
    1 TEST_BUF quad@@ !!0
    99 0 TEST_BUF quad!!
    0 TEST_BUF quad@@ 99 !!=
    1 TEST_BUF quad@@ !!0
    30 1 TEST_BUF quad!!
    0 TEST_BUF quad@@ 99 !!=
    1 TEST_BUF quad@@ 30 !!=
    0 0 TEST_BUF quad!!
    0 TEST_BUF u8@@ 0 !!=
    1 TEST_BUF u8@@ 0 !!=
    2 TEST_BUF u8@@ 0 !!=
    3 TEST_BUF u8@@ 0 !!=
    99 Int->U8 2 TEST_BUF u8!!
    0 TEST_BUF u8@@ 0 !!=
    1 TEST_BUF u8@@ 0 !!=
    2 TEST_BUF u8@@ 99 !!=
    3 TEST_BUF u8@@ 0 !!=)

def(test-str, --,
    "AaBb"
    dup u8@ 65 !!=
    dup str-tail u8@ 97 !!=
    dup str-tail str-tail u8@ 66 !!=
    dup str-tail str-tail str-tail u8@ 98 !!=
    dup str-tail str-tail str-tail str-tail u8@ 0 !!=
    drop

    "" str-length 0 !!=
    "hello" str-length 5 !!=
    "hello, world!" str-length 13 !!=
    )

def(test-while, --,
    999 10 20 while(dup, 1- dip(1+)) drop 30 !!= 999 !!=)

def(stdin,  File, 0)
def(stdout, File, 1)
def(stderr, File, 2)


def(str-write!, Str File -- +IO,
    swap dup str-length posix-write!)

def(str-print!, Str -- +IO, stdout str-write!)
def(str-trace!, Str -- +IO, stderr str-write!)
def(str-print-sp!, Str -- +IO, str-print! print-sp!)
def(str-trace-sp!, Str -- +IO, str-trace! trace-sp!)
def(str-print-ln!, Str -- +IO, str-print! print-ln!)
def(str-trace-ln!, Str -- +IO, str-trace! trace-ln!)

def(str-buf-char!, Char -- +StrBuf, 0 str-buf-u8! 1 str-buf-length!)
def(print-char!, Char -- +IO, str-buf-char! str-buf-print!)
def(trace-char!, Char -- +IO, str-buf-char! str-buf-trace!)

def(print-ln!, +IO, 10 Int->U8 print-char!)
def(trace-ln!, +IO, 10 Int->U8 trace-char!)
def(print-sp!, +IO, 32 Int->U8 print-char!)
def(trace-sp!, +IO, 32 Int->U8 trace-char!)
def(print-quote!, +IO, 34 Int->U8 print-char!)

def(to-digit, Int -- U8, 10 % 48 + Int->U8)

def(cast, a -- b, id)

def(Int->Ptr, Int -- Ptr, cast)
def(Ptr->Int, Ptr -- Int, cast)

def(U8_MAX, Int, 0xFF)
def(U16_MAX, Int, 1 16 << 1-)
def(U32_MAX, Int, 1 32 << 1-)
def(I8_MAX, Int, 127)
def(I16_MAX, Int, 1 15 << 1-)
def(I32_MAX, Int, 1 31 << 1-)

def(U8_MIN, Int, 0)
def(U16_MIN, Int, 0)
def(U32_MIN, Int, 0)
def(I8_MIN, Int, -128)
def(I16_MIN, Int, 0 1 15 << -)
def(I32_MIN, Int, 0 1 31 << -)


def(Int->U8, Int -- U8,
    dup U8_MIN U8_MAX in-range if(
        cast,
        "Int->U8 failed: out of bounds" panic! cast
    ))
def(Int->U16, Int -- U16,
    dup U16_MIN U16_MAX in-range if(
        cast,
        "Int->U16 failed: out of bounds" panic! cast
    ))
def(Int->U32, Int -- U32,
    dup U32_MIN U32_MAX in-range if(
        cast,
        "Int->U32 failed: out of bounds" panic! cast
    ))
def(Int->U64, Int -- U64, cast)

def(Int->I8, Int -- I8,
    dup I8_MIN I8_MAX in-range if(
        cast,
        "Int->I8 failed: out of bounds" panic! cast
    ))
def(Int->I16, Int -- I16,
    dup I16_MIN I16_MAX in-range if(
        cast,
        "Int->I16 failed: out of bounds" panic! cast
    ))
def(Int->I32, Int -- I32,
    dup I32_MIN I32_MAX in-range if(
        cast,
        "Int->I32 failed: out of bounds" panic! cast
    ))
def(Int->I64, Int -- I64, cast)

def(U8->Int, U8 -- Int, cast)
def(U16->Int, U16 -- Int, cast)
def(U32->Int, U32 -- Int, cast)
def(U64->Int, U64 -- Int, cast)
def(I8->Int, I8 -- Int, cast)
def(I16->Int, I16 -- Int, cast)
def(I32->Int, I32 -- Int, cast)
def(I64->Int, I64 -- Int, cast)

def(negate, Int -- Int, -1 *)
def(abs, Int -- Int, dup 0 < if(negate, id))

# put integer into str buf
def(str-buf-int!, Int --,
    dup 0= if(
        drop "0" str-buf!,
        dup dip(
            abs
            str-buf-clear!
            while(dup, dup to-digit str-buf-push! 10 /) drop
        ) 0 < if(45 Int->U8 str-buf-push!, id)
        str-buf-reverse!
    ))

def(int-write!, Int File -- +IO, dip(str-buf-int!) str-buf-write!)
def(int-print!, Int -- +IO, stdout int-write!)
def(int-trace!, Int -- +IO, stderr int-write!)
def(int-print-sp!, Int -- +IO, int-print! print-sp!)
def(int-trace-sp!, Int -- +IO, int-trace! trace-sp!)
def(int-print-ln!, Int -- +IO, int-print! print-ln!)
def(int-trace-ln!, Int -- +IO, int-trace! trace-ln!)

def(panic!, Str -- +IO,
    "panic: " str-trace! str-trace-ln! 1 posix-exit!)

# reverse contents of str buf

def(str-buf-swap-u8!, Int Int --,
    dup2 swap
    dip(dip(dip(str-buf-u8@)))
    dip(str-buf-u8@)
    str-buf-u8! str-buf-u8!
)

def(str-buf-reverse!, --,
    0 str-buf-length? 1-
    while(dup2 <,
        dup2 str-buf-swap-u8!
        dip(1 +) 1-
    )
    drop2)

##########
# System #
##########

def-type(OS, Int)
def(UNKNOWN, OS, 0)
def(WIN32, OS, 1)
def(LINUX, OS, 2)
def(MACOS, OS, 3)

def(open-file!, Str -- File +IO,
    0 0 posix-open!
    dup 0 < if("Failed to open file!" panic!, id))

def(create-file!, Str -- File +IO,
    O_WRONLY|O_CREAT|O_TRUNC
    0x1B6
        # this is the default mode for creating a file
        # on unix, 666 in octal, i.e. owner can
        # read+write, everyone can read
    posix-open!
    dup 0 < if("Failed to create file!" panic!, id))

def(O_WRONLY|O_CREAT|O_TRUNC, Int,
    RUNNING_OS MACOS = if(
        0x601, # O_WRONLY = 0x1, O_CREAT = 0x200, O_TRUNC = 0x400
    RUNNING_OS LINUX = if(
        0x241, # O_WRONLY = 0x1, O_CREAT = 0x40, O_TRUNC = 0x200
    RUNNING_OS WIN32 = if(
        0x301, # O_WRONLY = 0x1, O_CREAT|O_TRUNC = 0x300
        "O_WRONLY|O_CREAT|O_TRUNC not known for os" panic! 0
    ))))


def(close-file!, File -- +IO,
    posix-close!
    0 < if(
        "failed to close file" panic!,
        id
    ))
