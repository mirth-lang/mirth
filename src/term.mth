module(term)

nominal(Term, Int)
def(Int->Term, Int -- Term, cast)
def(Term->Int, Term -- Int, cast)
def(|Term|, Size, 4)
def(term@, Ptr -- Term, u32@ U32->Int Int->Term)
def(term!, Term Ptr --, dip(Term->Int Int->U32) u32!)

def(TERM_TAG_SHIFT, Size, 28)
def(TERM_TAG_MASK, Int, 0x7 TERM_TAG_SHIFT <<)
def(TERM_TAG_ERR, Int, 0x0)
def(TERM_TAG_VAR, Int, 0x1 TERM_TAG_SHIFT <<)
def(TERM_TAG_LAM, Int, 0x2 TERM_TAG_SHIFT <<)
def(TERM_TAG_APP, Int, 0x3 TERM_TAG_SHIFT <<)
def(TERM_TAG_LET, Int, 0x4 TERM_TAG_SHIFT <<)
def(term-tag, Term -- Int, Term->Int TERM_TAG_MASK &)

def(TErr, Err -- Term, Err->Int Int->Term)
def(TVar, Var -- Term, Var->Int TERM_TAG_VAR | Int->Term)
def(TApp, App -- Term, App->Int TERM_TAG_APP | Int->Term)
def(TLam, Lam -- Term, Lam->Int TERM_TAG_LAM | Int->Term)
def(TLet, Let -- Term, Let->Int TERM_TAG_LET | Int->Term)

nominal(Err, Int)
def(Err->Int, Err -- Int, cast)
def(Int->Err, Int -- Err, cast)
def(ERR_MAX, Int, 1 20 <<)
def(ERR_NULL, Err, 0 Int->Err)
def(|Err|, Size, 4)
def(err@, Ptr -- Err, u32@ U32->Int Int->Err)
def(err!, Err Ptr --, dip(Err->Int Int->U32) u32!)


quad def-static-buffer(VAR_NUM)
VAR_MAX |Name| * def-static-buffer(VAR_NAME)
VAR_MAX |Term| * def-static-buffer(VAR_TYPE)

nominal(App, Int)
def(App->Int, App -- Int, cast)
def(Int->App, Int -- App, cast)
def(APP_MAX, Size, 1 20 <<)
def(|App|, Size, 4)
def(app@, Ptr -- App, u32@ U32->Int Int->App)
def(app!, App Ptr --, dip(App->Int Int->U32) u32!)

quad def-static-buffer(APP_NUM)
APP_MAX |Term| * def-static-buffer(APP_LHS)
APP_MAX |Term| * def-static-buffer(APP_RHS)

nominal(Lam, Int)
def(Lam->Int, Lam -- Int, cast)
def(Int->Lam, Int -- Lam, cast)
def(LAM_MAX, Size, 1 20 <<)
def(|Lam|, Size, 4)
def(lam@, Ptr -- Lam, u32@ U32->Int Int->Lam)
def(lam!, Lam Ptr --, dip(Lam->Int Int->U32) u32!)

quad def-static-buffer(LAM_NUM)
LAM_MAX |Var| * def-static-buffer(LAM_VAR)
LAM_MAX |Term| * def-static-buffer(LAM_BODY)

nominal(Let, Int)
def(Let->Int, Let -- Int, cast)
def(Int->Let, Int -- Let, cast)
def(LET_MAX, Size, 1 20 <<)
def(|Let|, Size, 4)
def(let@, Ptr -- Let, u32@ U32->Int Int->Let)
def(let!, Let Ptr --, dip(Let->Int Int->U32) u32!)

quad def-static-buffer(LET_NUM)
LET_MAX |Var| * def-static-buffer(LET_VAR)
LET_MAX |Term| * def-static-buffer(LET_EXPR)
LET_MAX |Term| * def-static-buffer(LET_BODY)
