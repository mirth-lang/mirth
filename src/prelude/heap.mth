module(prelude/heap)
import(prelude/common)

########
# Heap #
########

buffer(HEAP_LENGTH, 8)
def(heap-length@, Size +Heap, HEAP_LENGTH @)
def(heap-length!, Size -- +Heap, HEAP_LENGTH !)

buffer(HEAP_BASE, 8)
def(heap-base@, Ptr +Heap, HEAP_BASE ptr@)
def(heap-base!, Ptr -- +Heap, HEAP_BASE ptr!)

buffer(HEAP_TIMES_EXPANDED, 8)
def(heap-times-expanded@, Int +Heap, HEAP_TIMES_EXPANDED @)
def(heap-times-expanded!, Int -- +Heap, HEAP_TIMES_EXPANDED !)
def(++heap-times-expanded, Int +Heap,
    heap-times-expanded@ 1+ dup heap-times-expanded!)

# Ensure that at at least X space on the heap is available.
#
# If the space left is too small (or heap has not been allocated,
# in which the space left is 0), then it tries to make the heap
# larger in place. This usually works, but if it fails, we just
# allocate a new buffer and forget about the old one, leaking
# some memory and introducing fragmentation.
#
# Panics if reservation is impossible.
def(heap-reserve!, Size -- +Heap,
    dup heap-length@ <= if(
        drop,

        heap-new-size dup # size
        heap-length@ heap-base@ ptr+ swap # pointer hint
        PROT_READ|PROT_WRITE
        MAP_ANON|MAP_PRIVATE
        -1 # file descriptor (-1 for MAP_ANONYMOUS)
        0 # offset
        posix-mmap!
        dup Ptr->Int nonzero if(
            dup heap-length@ heap-base@ ptr+ == if(
                drop heap-length@ + heap-length!,
                heap-base! heap-length!
            ),
            "Failed to allocate heap buffer." panic!
        )
    ))

def(PROT_READ|PROT_WRITE, Int,
    0x3) # PROT_READ = 0x1, PROT_WRITE = 0x2

def(MAP_ANON|MAP_PRIVATE, Int,
    RUNNING_OS MACOS == if(
        0x1002, # MAP_ANON = 0x1000, MAP_PRIVATE = 0x2
    # RUNNING_OS LINUX == if(
        0x22 # MAP_ANON = 0x20, MAP_PRIVATE = 0x2
        # ,
        # "MAP_ANON|MAP_PRIVATE unknown for os" panic!
    # )
    ))

# Aligns a by b, rounding upward. For instance,
#
#   10 64 align == 64
#   64 64 align == 64
#   70 64 align == 128
def(align, Size Size -- Size,
    # a:Size b:Size { a 0 >=, b 0 > } --
    # c:Size { c a >=, c a b + <, c b % 0 = },
    dup dip(1- + dup) % -)

# Figure out how much to expand heap size by, based on a minimum size
# (i.e. requested size aligned to 4096).
# The expansion has a quadratic lower bound.
def(heap-new-size, Size -- Size,
    4096 align
    4096 ++heap-times-expanded square *
    max)

def(heap-alloc!, Size -- Ptr +Heap,
    64 align
    dup heap-reserve!
    dup heap-length@ swap - heap-length!
    heap-base@ dup dip(swap) ptr+ heap-base!)
