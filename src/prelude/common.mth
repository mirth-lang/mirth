module(prelude/common)

trip : a -- a a a
trip = dup dup

rotr : a b c -- c a b
rotr = swap dip(swap)

rotl : a b c -- b c a
rotl = dip(swap) swap

over : a b -- a b a
over = dip(dup) swap

tuck : a b -- b a b
tuck = dup dip(swap)

nip : a b -- b
nip = dip(drop)

dup2 : a b -- a b a b
dup2 = over over

dup3 : a b c -- a b c a b c
dup3 = dip(dup2) dup dip(rotr)

drop2 : a b --
drop2 = drop drop

drop3 : a b c --
drop3 = drop drop drop

def-type(Byte, U8)
def-type(Char, U8)
def-type(Str, Ptr)
def-type(Size, Int)
def-type(Offset, Int)

def(cast, a -- b, prim.unsafe.cast)
def(Int->Ptr, Int -- Ptr, cast)
def(Ptr->Int, Ptr -- Int, cast)

def(U8_MAX, Int, 0xFF)
def(U16_MAX, Int, 1 16 << 1-)
def(U32_MAX, Int, 1 32 << 1-)
def(I8_MAX, Int, 127)
def(I16_MAX, Int, 1 15 << 1-)
def(I32_MAX, Int, 1 31 << 1-)

def(U8_MIN, Int, 0)
def(U16_MIN, Int, 0)
def(U32_MIN, Int, 0)
def(I8_MIN, Int, -128)
def(I16_MIN, Int, 0 1 15 << -)
def(I32_MIN, Int, 0 1 31 << -)

def(!=, a a -- Bool, = not)
def(>, Int Int -- Bool, swap <)
def(>=, Int Int -- Bool, swap <=)

def(0=, Int -- Bool, 0 =)
def(0<, Int -- Bool, 0 <)

def(1+, Int -- Int, 1 +)
def(1-, Int -- Int, 1 -)

def(max, Int Int -- Int, dup2 < if(nip, drop))
def(square, Int -- Int, dup *)

def(not, Bool -- Bool, false =)
def(bool, Bool -- Bool, id)
def(nonzero, Int -- Bool, 0 !=)

def(int@, Ptr -- Int, @)
def(int!, Int Ptr --, !)

def(ptr+, Int Ptr -- Ptr, prim.unsafe.ptr+)
def(ptr@, Ptr -- Ptr, @ Int->Ptr)
def(ptr!, Ptr Ptr --, dip(Ptr->Int) !)

def(ptr, Size, prim.unsafe.|ptr|)
def(ptrs, Size -- Size, ptr *)
def(ptr@@, Offset Ptr -- Ptr, dip(ptrs) ptr+ ptr@)
def(ptr!!, Ptr Offset Ptr --, dip(ptrs) ptr+ ptr!)

def(u8, Size, 1)
def(u8s, Size -- Size, id)
def(u8@@, Offset Ptr -- Byte, ptr+ u8@)
def(u8!!, Byte Offset Ptr --, ptr+ u8!)

def(u16, Size, 2)
def(u16s, Size -- Size, u16 *)
def(u16@@, Offset Ptr -- U16, dip(u16s) ptr+ u16@)
def(u16!!, U16 Offset Ptr --, dip(u16s) ptr+ u16!)

def(u32, Size, 4)
def(u32s, Size -- Size, u32 *)
def(u32@@, Offset Ptr -- U32, dip(u32s) ptr+ u32@)
def(u32!!, U32 Offset Ptr --, dip(u32s) ptr+ u32!)

def(i16, Size, 2)
def(i16s, Size -- Size, i16 *)
def(i16@@, Offset Ptr -- I16, dip(i16s) ptr+ i16@)
def(i16!!, I16 Offset Ptr --, dip(i16s) ptr+ i16!)

def(i32, Size, 4)
def(i32s, Size -- Size, i32 *)
def(i32@@, Offset Ptr -- I32, dip(i32s) ptr+ i32@)
def(i32!!, I32 Offset Ptr --, dip(i32s) ptr+ i32!)

def-type(Long, Int)
def(u64, Size, 8)
def(quad, Size, 8)
def(quads, Size -- Size, quad *)
def(quad@@, Offset Ptr -- Long, dip(quads) ptr+ @)
def(quad!!, Long Offset Ptr --, dip(quads) ptr+ !)

def(in-range, Int Int Int -- Bool,
    dip(over dip(>=)) <= &&)

def(Int->U8, Int -- U8,
    dup U8_MIN U8_MAX in-range if(
        cast,
        "Int->U8 failed: out of bounds" panic!
    ))
def(Int->U16, Int -- U16,
    dup U16_MIN U16_MAX in-range if(
        cast,
        "Int->U16 failed: out of bounds" panic!
    ))
def(Int->U32, Int -- U32,
    dup U32_MIN U32_MAX in-range if(
        cast,
        ??
        "Int->U32 failed: out of bounds" panic!
    ))
def(Int->U64, Int -- U64, cast)

def(Int->I8, Int -- I8,
    dup I8_MIN I8_MAX in-range if(
        cast,
        "Int->I8 failed: out of bounds" panic!
    ))
def(Int->I16, Int -- I16,
    dup I16_MIN I16_MAX in-range if(
        cast,
        "Int->I16 failed: out of bounds" panic!
    ))
def(Int->I32, Int -- I32,
    dup I32_MIN I32_MAX in-range if(
        cast,
        "Int->I32 failed: out of bounds" panic!
    ))
def(Int->I64, Int -- I64, cast)

def(U8->Int, U8 -- Int, cast)
def(U16->Int, U16 -- Int, cast)
def(U32->Int, U32 -- Int, cast)
def(U64->Int, U64 -- Int, cast)
def(I8->Int, I8 -- Int, cast)
def(I16->Int, I16 -- Int, cast)
def(I32->Int, I32 -- Int, cast)
def(I64->Int, I64 -- Int, cast)

def(negate, Int -- Int, -1 *)
def(abs, Int -- Int, dup 0 < if(negate, id))

def-type(OS, Int)
def(UNKNOWN, OS, 0)
def(WIN32, OS, 1)
def(LINUX, OS, 2)
def(MACOS, OS, 3)

###########
# STRINGS #
###########


def(str-head, Str -- U8, u8@)
def(str-tail, Str -- Str, 1 swap ptr+)
def(str-length, Str -- Int,
    0 swap
    while(dup str-null not,
        str-tail
        dip(1+))
    drop)
def(str-null, Str -- Bool,
    u8@ U8->Int 0=)
def(str-null?, Str -- Str Bool,
    dup str-null)

def(str-copy!, Str Str --,
    while( over u8@ U8->Int nonzero,
        over u8@ over u8!
        dip(str-tail) str-tail
    )
    dip(drop 0 Int->U8) u8!)

def(STR_BUF_SIZE, Int, 0x1000)
buffer(STR_BUF_LEN, 8)
buffer(STR_BUF, 0x1000)

def(str-buf-length?, Int +StrBuf, STR_BUF_LEN @)
def(str-buf-length!, Int -- +StrBuf,
    dup STR_BUF_LEN !
    dip(0 Int->U8) str-buf-u8!)
def(str-buf-u8@, Offset -- U8 +StrBuf, STR_BUF u8@@)
def(str-buf-u8!, U8 Offset -- +StrBuf, STR_BUF u8!!)
def(str-buf-empty?, Bool +StrBuf,
    str-buf-length? 0 =)
def(str-buf-full?, Bool +StrBuf,
    str-buf-length? 1+ STR_BUF_SIZE >=)
def(str-buf-clear!, +StrBuf, 0 str-buf-length!)

def(str-buf-push!, U8 -- +StrBuf,
    str-buf-full? if(
        "str-buf-push! but STR_BUF is already full" panic!,
        str-buf-length? str-buf-u8!
        str-buf-length? 1+ str-buf-length!
    ))

# Append the given string into STR_BUF. If the string is
# too large it gets truncated.
def(str-buf-push-str!, Str -- +StrBuf,
        while(str-buf-full? if(false, dup u8@ U8->Int nonzero),
        dup u8@ str-buf-push!
        str-tail)
    drop)

# Set the STR_BUF to a given string. If the string is
# too large it gets truncated.
def(str-buf!, Str -- +StrBuf, str-buf-clear! str-buf-push-str!)

def(str-buf-char!, Char -- +StrBuf, 0 str-buf-u8! 1 str-buf-length!)

def(to-digit, Int -- U8, 10 % 48 + Int->U8)

# put integer into str buf
def(str-buf-int!, Int --,
    dup 0= if(
        drop "0" str-buf!,
        dup dip(
            abs
            str-buf-clear!
            while(dup nonzero, dup to-digit str-buf-push! 10 /) drop
        ) 0 < if(45 Int->U8 str-buf-push!, id)
        str-buf-reverse!
    ))

def(str-buf-swap-u8!, Int Int --,
    dup2 swap
    dip(dip(dip(str-buf-u8@)))
    dip(str-buf-u8@)
    str-buf-u8! str-buf-u8!
)

# reverse contents of str buf
def(str-buf-reverse!, --,
    0 str-buf-length? 1-
    while(dup2 <,
        dup2 str-buf-swap-u8!
        dip(1 +) 1-
    )
    drop2)

def(str-eq, Str Str -- Bool,
    str-null? if(
        drop str-null,
        dup2 str-head swap str-head = if(
            str-tail swap str-tail str-eq,
            drop2 false
        )
    ))

def(str-eq?, Str Str -- Str Str Bool, dup2 str-eq)

##########
# TUPLES #
##########

def(pack-nil, [*a], prim.pack.nil cast)
def(pack-nil?, [*a] -- [*a] Bool, dup pack-nil =)

def(pack-cons, [*a] b -- [*a b], prim.pack.cons)
def(pack-uncons, [*a b] -- [*a] b,
    pack-nil? if(
        "attempted to uncons nil" panic!,
        prim.pack.uncons
    ))

def(pack0, [], pack-nil)
def(pack1, a -- [a], dip(pack0) pack-cons)
def(pack2, a b -- [a b], dip(pack1) pack-cons)
def(pack3, a b c -- [a b c], dip(pack2) pack-cons)
def(pack4, a b c d -- [a b c d], dip(pack3) pack-cons)
def(pack5, a b c d e -- [a b c d e], dip(pack4) pack-cons)

def(unpack0, [] --, drop)
def(unpack1, [a] -- a, pack-uncons dip(unpack0))
def(unpack2, [a b] -- a b, pack-uncons dip(unpack1))
def(unpack3, [a b c] -- a b c, pack-uncons dip(unpack2))
def(unpack4, [a b c d] -- a b c d, pack-uncons dip(unpack3))
def(unpack5, [a b c d e] -- a b c d e, pack-uncons dip(unpack4))

def(.0, [*a b] -- b, pack-uncons nip)
def(.1, [*a b c] -- b, pack-uncons drop .0)
def(.2, [*a b c d] -- b, pack-uncons drop .1)
def(.3, [*a b c d e] -- b, pack-uncons drop .2)
def(.4, [*a b c d e f] -- b, pack-uncons drop .3)

def(.0?, [*a b] -- [*a b] b, dup .0)
def(.1?, [*a b c] -- [*a b c] b, dup .1)
def(.2?, [*a b c d] -- [*a b c d] b, dup .2)
def(.3?, [*a b c d e] -- [*a b c d e] b, dup .3)
def(.4?, [*a b c d e f] -- [*a b c d e f] b, dup .4)

def(.0!, [*a b] b -- [*a b], dip(pack-uncons drop) pack-cons)
def(.1!, [*a b c] b  -- [*a b c], dip(pack-uncons) swap dip(.0!) pack-cons)
def(.2!, [*a b c d] b  -- [*a b c d], dip(pack-uncons) swap dip(.1!) pack-cons)
def(.3!, [*a b c d e] b  -- [*a b c d e], dip(pack-uncons) swap dip(.2!) pack-cons)
def(.4!, [*a b c d e f] b  -- [*a b c d e f], dip(pack-uncons) swap dip(.3!) pack-cons)

#########
# LISTS #
#########

nominal(List(t), [])
def(list->pack, List(t) -- [List(t) t], cast)
def(pack->list, [List(t) t] -- List(t), cast)
def(nil, List(t), pack-nil pack->list)
def(nil?, List(t) -- List(t) Bool, dup nil =)
def(cons, List(t) t -- List(t), pack2 pack->list)
def(uncons, List(t) -- List(t) t,
    nil? if(
        "uncons on nil value" panic!,
        list->pack unpack2
    ))
def(head, List(t) -- t, uncons nip)
def(tail, List(t) -- List(t), uncons drop)
def(length, List(t) -- Int,
    0 swap
    while(nil? not, dip(1+) tail)
    drop)
def(length?, List(t) -- List(t) Int, dup length)

######
# IO #
######

def(panic!, *a Str -- *b +IO,
    "panic: " str-trace! str-trace-ln! 1 posix-exit!)

nominal(File, Int)
def(File->Int, File -- Int, cast)
def(Int->File, Int -- File, cast)
def(|File|, Size, 8)
def(file@, Ptr -- File, int@ Int->File)
def(file!, File Ptr --, dip(File->Int) int!)

def(stdin,  File, 0 Int->File)
def(stdout, File, 1 Int->File)
def(stderr, File, 2 Int->File)

def(str-write!, Str File -- +IO,
    File->Int swap dup str-length posix-write!)

def(str-print!, Str -- +IO, stdout str-write!)
def(str-trace!, Str -- +IO, stderr str-write!)
def(str-print-sp!, Str -- +IO, str-print! print-sp!)
def(str-trace-sp!, Str -- +IO, str-trace! trace-sp!)
def(str-print-ln!, Str -- +IO, str-print! print-ln!)
def(str-trace-ln!, Str -- +IO, str-trace! trace-ln!)

def(print-ln!, +IO, 10 Int->U8 print-char!)
def(trace-ln!, +IO, 10 Int->U8 trace-char!)
def(print-sp!, +IO, 32 Int->U8 print-char!)
def(trace-sp!, +IO, 32 Int->U8 trace-char!)
def(print-quote!, +IO, 34 Int->U8 print-char!)

def(str-buf-write!, File -- +StrBuf, File->Int STR_BUF str-buf-length? posix-write!)
def(str-buf-print!, +StrBuf, stdout str-buf-write!)
def(str-buf-trace!, +StrBuf, stderr str-buf-write!)
def(str-buf-read!, File -- +IO,
    File->Int str-buf-clear!
    STR_BUF STR_BUF_SIZE 1- posix-read!
    dup 0< if(
        "str-buf-read! failed" panic!,
        str-buf-length!
    ))
def(str-buf-input!, -- +IO, stdin str-buf-read!)

def(print-char!, Char -- +IO, str-buf-char! str-buf-print!)
def(trace-char!, Char -- +IO, str-buf-char! str-buf-trace!)

def(int-write!, Int File -- +IO, dip(str-buf-int!) str-buf-write!)
def(int-print!, Int -- +IO, stdout int-write!)
def(int-trace!, Int -- +IO, stderr int-write!)
def(int-print-sp!, Int -- +IO, int-print! print-sp!)
def(int-trace-sp!, Int -- +IO, int-trace! trace-sp!)
def(int-print-ln!, Int -- +IO, int-print! print-ln!)
def(int-trace-ln!, Int -- +IO, int-trace! trace-ln!)

def(open-file!, Str -- File +IO,
    0 0 posix-open!
    dup 0 < if("Failed to open file!" panic!, Int->File))

def(create-file!, Str -- File +IO,
    O_WRONLY|O_CREAT|O_TRUNC
    0x1B6
        # this is the default mode for creating a file
        # on unix, 666 in octal, i.e. owner can
        # read+write, everyone can read
    posix-open!
    dup 0 < if("Failed to create file!" panic!, Int->File))

def(O_WRONLY|O_CREAT|O_TRUNC, Int,
    RUNNING_OS MACOS = if(
        0x601, # O_WRONLY = 0x1, O_CREAT = 0x200, O_TRUNC = 0x400
    RUNNING_OS LINUX = if(
        0x241, # O_WRONLY = 0x1, O_CREAT = 0x40, O_TRUNC = 0x200
    RUNNING_OS WIN32 = if(
        0x301, # O_WRONLY = 0x1, O_CREAT|O_TRUNC = 0x300
        "O_WRONLY|O_CREAT|O_TRUNC not known for os" panic!
    ))))

def(close-file!, File -- +IO,
    File->Int posix-close!
    0 < if("failed to close file" panic!, id))
