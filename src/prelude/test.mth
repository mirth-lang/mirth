module(prelude/test)
import(prelude/common)

# Assertions

def(!!true, Bool --, if(id, "Assertion failed" panic!))
def(!!false, Bool --, not !!true)
def(!!=, a a --, == !!true)
def(!!0, Int --, 0 !!=)
def(!!1, Int --, 1 !!=)
def(!!001, Int Int Int --, 1 !!= 0 !!= 0 !!=)
def(!!010, Int Int Int --, 0 !!= 1 !!= 0 !!=)
def(!!011, Int Int Int --, 1 !!= 1 !!= 0 !!=)
def(!!100, Int Int Int --, 0 !!= 0 !!= 1 !!=)
def(!!111, Int Int Int --, 1 !!= 1 !!= 1 !!=)

# Tests

def(test-prelude!, --,
    test-if test-drop test-dup test-swap test-dip
    test-trip test-rotr test-rotl test= test< test<= test> test>=
    test+ test- test* test/ test% test-str test-while
    test@!)
def(test-if, --, 0 !!0 1 !!1 0 1 !!1 !!0)
def(test-drop, --, 0 1 drop !!0)
def(test-dup, --, 0 1 dup !!011)
def(test-swap, --, 0 1 0 swap !!001)
def(test-dip, --, 0 0 dip(1) !!010)
def(test-trip, --, 0 1 trip !!111 !!0)
def(test-rotr, --,
    1 0 0 rotr !!010
    0 1 0 rotr !!001
    0 0 1 rotr !!100)
def(test-rotl, --,
    1 0 0 rotl !!001
    0 1 0 rotl !!100
    0 0 1 rotl !!010)

def(test=, --,
    0 0 == !!true
    0 1 == !!false
    1 0 == !!false
    1 1 == !!true
    1 2 == !!false
    2 1 == !!false
    2 2 == !!true)
def(test<, --,
    0 0 < !!false
    0 1 < !!true
    1 0 < !!false
    1 1 < !!false
    1 2 < !!true
    2 1 < !!false
    2 2 < !!false)
def(test<=, --,
    0 0 <= !!true
    0 1 <= !!true
    1 0 <= !!false
    1 1 <= !!true
    1 2 <= !!true
    2 1 <= !!false
    2 2 <= !!true)
def(test>, --,
    0 0 > !!false
    0 1 > !!false
    1 0 > !!true
    1 1 > !!false
    1 2 > !!false
    2 1 > !!true
    2 2 > !!false)
def(test>=, --,
    0 0 >= !!true
    0 1 >= !!false
    1 0 >= !!true
    1 1 >= !!true
    1 2 >= !!false
    2 1 >= !!true
    2 2 >= !!true
    -1 0 >= !!false
    -1 -1 >= !!true
    0 -1 >= !!true
    -1 -2 >= !!true
    -2 -2 >= !!true
    -2 -1 >= !!false)

def(test+, --,
    0 0 + !!0
    0 1 + !!1
    1 0 + !!1
    1 1 + 2 == !!true
    2 2 + 4 == !!true
    2 -2 + !!0)

def(test-, --,
    0 0 - !!0
    1 0 - !!1
    1 1 - !!0
    0 1 - -1 !!=
    2 2 - !!0
    2 4 - -2 !!=
    4 2 - 2 !!=)

def(test*, --,
    0 0 * !!0
    2 1 * 2 !!=
    2 2 * 4 !!=
    2 4 * 8 !!=)

def(test/, --,
    1 1 / !!1
    -5 2 / -2 !!=
    -4 2 / -2 !!=
    -3 2 / -1 !!=
    -2 2 / -1 !!=
    -1 2 / !!0
    0 2 / !!0
    1 2 / !!0
    2 2 / !!1
    3 2 / !!1
    4 2 / 2 !!=
    5 2 / 2 !!=
    0 -2 / !!0
    1 -2 / !!0
    2 -2 / -1 !!=
    3 -2 / -1 !!=
    4 -2 / -2 !!=
    5 -2 / -2 !!=)

def(test%, --,
    1 1 % !!0
    -5 2 % -1 !!=
    -4 2 % !!0
    -3 2 % -1 !!=
    -2 2 % !!0
    -1 2 % -1 !!=
    0 2 % !!0
    1 2 % !!1
    2 2 % !!0
    3 2 % !!1
    4 2 % !!0
    5 2 % !!1)

buffer(TEST_BUF, 16)
def(test@!, --,
    # reset test buffer
    0 0 TEST_BUF !!
    0 1 TEST_BUF !!
    # run test
    0 TEST_BUF @@ !!0
    1 TEST_BUF @@ !!0
    99 0 TEST_BUF !!
    0 TEST_BUF @@ 99 !!=
    1 TEST_BUF @@ !!0
    30 1 TEST_BUF !!
    0 TEST_BUF @@ 99 !!=
    1 TEST_BUF @@ 30 !!=
    0 0 TEST_BUF !!
    0 TEST_BUF u8@@ U8->Int 0 !!=
    1 TEST_BUF u8@@ U8->Int 0 !!=
    2 TEST_BUF u8@@ U8->Int 0 !!=
    3 TEST_BUF u8@@ U8->Int 0 !!=
    99 Int->U8 2 TEST_BUF u8!!
    0 TEST_BUF u8@@ U8->Int 0 !!=
    1 TEST_BUF u8@@ U8->Int 0 !!=
    2 TEST_BUF u8@@ U8->Int 99 !!=
    3 TEST_BUF u8@@ U8->Int 0 !!=)

def(test-str, --,
    "AaBb"
    dup u8@ U8->Int 65 !!=
    dup str-tail u8@ U8->Int 97 !!=
    dup str-tail str-tail u8@ U8->Int 66 !!=
    dup str-tail str-tail str-tail u8@ U8->Int 98 !!=
    dup str-tail str-tail str-tail str-tail u8@ U8->Int 0 !!=
    drop

    "" str-length 0 !!=
    "hello" str-length 5 !!=
    "hello, world!" str-length 13 !!=
    )

def(test-while, --,
    999 10 20 while(dup nonzero, 1- dip(1+)) drop 30 !!= 999 !!=)

# Morphism quotes
def(test-morphism-quote-id, [ Int -- Int ] -- [ Int -- Int ], id)
def(test-morphism-quote-drop, [ Int -- Int ] -- , drop)
def(test-morphism-quote-dup, [ Int -- Int ] -- [ Int -- Int ] [ Int -- Int ], dup)

# Tensor quotes
def(test-tensor-quote-id, [ Int ] -- [ Int ], id)
def(test-tensor-quote-drop, [ Int ] -- , drop)
def(test-tensor-quote-dup, [ Int ] -- [ Int ] [ Int ], dup)

# Stack assertions
def(test-stack-assertions, -- ,
    1 2 { Int Int }
    3 4 { Int Int Int Int }
    + + + { Int }
    10 ==
    { Bool }
    drop
)

def(test-stack-assertions-var, a b -- a b,
    { a b }
    swap
    { b a }
    swap
    { a b }
)

def(test-stack-assertions-var-2, a b -- a b,
    swap
    { b a }
    swap
    { a b }
)

def(test-stack-assertions-dont-care, a b -- a b,
    { a b }
    { a _ }
    { _ b }
    swap
    { b a }
    { b _ }
    { _ a }
    swap
    { a b }
    { a _ }
    { _ b }
)

def(test-dup2, -- Int Str Int Str,
    10 "hello" dup2)
