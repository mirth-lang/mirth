module(platform.posix)
import(prelude)
import(data.str)
import(data.path)

data(File, FILE -> Int)
def(Int>File, Int -- File, FILE)
def(File>Int, File -- Int, FILE -> id)

def(STDIN, File, 0 >File)
def(STDOUT, File, 1 >File)
def(STDERR, File, 2 >File)

def(Str.write!, File Str --,
    with-str-data(slice-write!))

def(slice-write!, File Ptr Int --,
    dip2(File>Int) dup dip(posix-write!)
    expect!(dup 0 >=, "write failed")
    expect!(dup2 =, "write output fewer bytes than expected")
    drop2)

def(Str.print!, Str --, dip(STDOUT) write!)
def(Str.trace!, Str --, dip(STDERR) write!)
def(Str.print-ln!, Str --, print! line-print!)
def(Str.trace-ln!, Str --, trace! line-trace!)
def(line-print!, --, "\n" print!)
def(line-trace!, --, "\n" trace!)

def(Int.write!, File Int --, int-to-str write!)
def(Int.print!, Int --, int-to-str print!)
def(Int.trace!, Int --, int-to-str trace!)
def(Int.print-ln!, Int --, int-to-str print-ln!)
def(Int.trace-ln!, Int --, int-to-str trace-ln!)

def(with-open-file!(f,g), (*a File -- *b, *a -- *b) *a Str -- *b,
    0 0 posix-open! dup 0< if(drop g, dup dip(Int>File f) posix-close! drop))

def(READ_FILE_BUF_SIZE, 0x1000)
buffer(READ_FILE_BUF, 0x1000)
def(read-file!, File -- Str,
    File>Int \(fp -> ""
    fp READ_FILE_BUF READ_FILE_BUF_SIZE prim-posix-read
    while(dup 0>,
        READ_FILE_BUF swap prim-str-copy cat
        fp READ_FILE_BUF READ_FILE_BUF_SIZE prim-posix-read)
    expect!(dup 0=, "error while reading file")
    drop))

def(open-file!, Str -- File,
    0 0 posix-open!
    expect!(dup 0>, "failed to open file")
    Int>File)

def(create-file!, Str -- File,
    O_WRONLY|O_CREAT|O_TRUNC
    0x1B6
        # this is the default mode for creating a file
        # on unix, 666 in octal, i.e. owner can
        # read+write, everyone can read
        #  ---- NB: this is inaccurate . . .
    posix-open!
    expect!(dup 0>, "failed to create file")
    Int>File)

def(O_WRONLY|O_CREAT|O_TRUNC, Int,
    RUNNING_OS match(
        OS_MACOS -> 0x601, # O_WRONLY = 0x1, O_CREAT = 0x200, O_TRUNC = 0x400
        OS_LINUX -> 0x241, # O_WRONLY = 0x1, O_CREAT = 0x40, O_TRUNC = 0x200
        OS_WINDOWS -> 0x301, # O_WRONLY = 0x1, O_CREAT|O_TRUNC = 0x300
        OS_UNKNOWN -> "O_WRONLY|O_CREAT|O_TRUNC on unknown os" panic!
    ))

def(close-file!, File --,
    File>Int posix-close!
    expect!(dup 0>=, "failed to close file")
    drop)

########
# STAT #
########

def-external(stat, RawPtr RawPtr -- Int)
buffer(POSIX_STAT_BUF, 256)

def(with-raw-path(f), (*a RawPtr -- *b) *a Path -- *b Path,
    sip(>Str prim-str-base with-raw-ptr(f) drop))

def(is-directory?, Path -- Path Bool,
    with-raw-path(
        POSIX_STAT_BUF with-raw-ptr(stat)
        swap 0= if(
            st_mode@ S_ISDIR,
            drop F
        )
    ) swap)

#define S_IFMT  00170000
#define S_IFSOCK 0140000
#define S_IFLNK	 0120000
#define S_IFREG  0100000
#define S_IFBLK  0060000
#define S_IFDIR  0040000

def(S_IFMT, Int, 0xF000)
def(S_IFDIR, Int, 0x4000)
def(S_IFREG, Int, 0x8000)

def(S_ISDIR, U16 -- Bool, >Int S_IFMT & S_IFDIR =)

def(st_mode@, Ptr -- U16,
    RUNNING_OS match(
        OS_LINUX -> 24, # ... this is all terrible and brittle
        OS_WINDOWS -> 6,
        _ -> drop 8
    ) swap .offset(@U16))
