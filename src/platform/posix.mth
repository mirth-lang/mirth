module(platform.posix)
import(prelude)
import(data.str)
import(data.path)
import(resource.buffer)

data(File, FILE -> Int)
def(Int>File, Int -- File, FILE)
def(File>Int, File -- Int, FILE -> id)

def(STDIN, File, 0 >File)
def(STDOUT, File, 1 >File)
def(STDERR, File, 2 >File)

def(Str.write!, File Str --,
    with-str-data(slice-write!))

def(slice-write!, File Ptr Size --,
    dip2(>Int) >Int dup dip(posix-write!)
    expect!(dup 0 >=, "write failed")
    expect!(dup2 =, "write output fewer bytes than expected")
    drop2)

def(Str.print!, Str --, dip(STDOUT) write!)
def(Str.trace!, Str --, dip(STDERR) write!)
def(Str.print-ln!, Str --, print! line-print!)
def(Str.trace-ln!, Str --, trace! line-trace!)
def(line-print!, --, "\n" print!)
def(line-trace!, --, "\n" trace!)

def(Int.write!, File Int --, show write!)
def(Int.print!, Int --, show print!)
def(Int.trace!, Int --, show trace!)
def(Int.print-ln!, Int --, show print-ln!)
def(Int.trace-ln!, Int --, show trace-ln!)

def(Nat.write!, File Nat --, show write!)
def(Nat.trace!, Nat --, show trace!)
def(Nat.trace-ln!, Nat --, show trace-ln!)
def(Nat.print!, Nat --, show print!)
def(Nat.print-ln!, Nat --, show print-ln!)

def(with-open-file!(f,g), (*a File -- *b, *a -- *b) *a Str -- *b,
    0 0 posix-open! dup 0< if(drop g, dup dip(Int>File f) posix-close! drop))

def(READ_FILE_BUF_SIZE, Int, 0x1000)
buffer(READ_FILE_BUF, 0x1000)
def(read-file!, File -- Str,
    File>Int \(fp -> ""
    fp READ_FILE_BUF READ_FILE_BUF_SIZE prim-posix-read
    while(dup 0>,
        READ_FILE_BUF swap prim-str-copy cat
        fp READ_FILE_BUF READ_FILE_BUF_SIZE prim-posix-read)
    expect!(dup 0=, "error while reading file")
    drop))

########
# STAT #
########

def-external(stat, Ptr Ptr -- Int)
def(is-directory?, Path -- Bool,
    256 >Size +Buffer.new
    >Str with-cstr(
        buffer-base stat
        0= if(buffer-base unsafe(st_mode@) S_ISDIR, F)
    ) rdrop)

#define S_IFMT  00170000
#define S_IFSOCK 0140000
#define S_IFLNK	 0120000
#define S_IFREG  0100000
#define S_IFBLK  0060000
#define S_IFDIR  0040000

def(S_IFMT,   U16, 0xF000 >U16)
def(S_IFDIR,  U16, 0x4000 >U16)
def(S_IFBLK,  U16, 0x6000 >U16)
def(S_IFREG,  U16, 0x8000 >U16)
def(S_IFLNK,  U16, 0xA000 >U16)
def(S_IFSOCK, U16, 0xC000 >U16)

def(S_ISDIR, U16 -- Bool, S_IFMT & S_IFDIR =)

def(st_mode@, Ptr +Unsafe -- U16 +Unsafe,
    RUNNING_OS match(
        OS_LINUX -> 24, # ... this is all terrible and brittle
        OS_WINDOWS -> 6,
        _ -> drop 8
    ) >Offset swap offset @U16)
