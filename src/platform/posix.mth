module(platform.posix)
import(prelude)
import(data.str)
import(data.path)

panic! : *a Str -- *b
panic! = "panic: " str-trace! str-trace-ln! 1 posix-exit!

data(File, FILE -> Int)

Int->File : Int -- File
Int->File = FILE

File->Int : File -- Int
File->Int = match(FILE -> id)

file@ : Ptr -- File
file@ = int@ Int->File

file! : File Ptr --
file! = dip(File->Int) int!

stdin : File
stdin = 0 Int->File

stdout : File
stdout = 1 Int->File

stderr : File
stderr = 2 Int->File

str-write! : Str File -- +IO
str-write! = (
    File->Int swap dup str-length dup
    dip(dip(Str->Ptr) posix-write!) swap
    dup 0 < if(
        "error: write failed!" panic!,
        swap < if(
            "error: write output fewer bytes than expected!" panic!,
            id
        )
    )
)

str-print! : Str -- +IO
str-print! = stdout str-write!

str-trace! : Str -- +IO
str-trace! = stderr str-write!

str-print-ln! : Str -- +IO
str-print-ln! = str-print! print-ln!

str-trace-ln! : Str -- +IO
str-trace-ln! = str-trace! trace-ln!

print-ln! : +IO
print-ln! = "\n" str-print!

trace-ln! : +IO
trace-ln! = "\n" str-trace!

str-buf-write! : File -- +StrBuf +IO
str-buf-write! = (
    File->Int STR_BUF str-buf-length?
    posix-write!
    dup 0 < if(
        "error: str-buf write failed!" panic!,
        str-buf-length? < if(
            "error: str-buf write wrote fewer bytes than expected!" panic!,
            id
        )
    )
)

str-buf-print! : +StrBuf +IO
str-buf-print! = stdout str-buf-write!

str-buf-trace! : +StrBuf +IO
str-buf-trace! = stderr str-buf-write!

str-buf-read! : File -- +IO
str-buf-read! = (
    File->Int str-buf-clear!
    STR_BUF STR_BUF_SIZE 1- posix-read!
    dup 0< if(
        "str-buf-read! failed" panic!,
        str-buf-length!
    )
)

str-buf-input! : -- +IO
str-buf-input! = stdin str-buf-read!

print-char! : Char -- +IO
print-char! = build-str!(str-buf-push-char!) str-print!

trace-char! : Char -- +IO
trace-char! = build-str!(str-buf-push-char!) str-trace!

int-write! : Int File -- +IO
int-write! = dip(str-buf-int!) str-buf-write!

int-print! : Int -- +IO
int-print! = stdout int-write!

int-trace! : Int -- +IO
int-trace! = stderr int-write!

int-print-ln! : Int -- +IO
int-print-ln! = int-print! print-ln!

int-trace-ln! : Int -- +IO
int-trace-ln! = int-trace! trace-ln!

open-file! : Str -- File +IO
open-file! = (
    0 0 posix-open!
    dup 0 < if(
        "Failed to open file!" panic!,
        Int->File
    )
)

create-file! : Str -- File +IO
create-file! = (
    O_WRONLY|O_CREAT|O_TRUNC
    0x1B6
        # this is the default mode for creating a file
        # on unix, 666 in octal, i.e. owner can
        # read+write, everyone can read
        #  ---- NB: this is inaccurate . . .
    posix-open!
    dup 0 < if(
        "Failed to create file!" panic!,
        Int->File
    )
)

O_WRONLY|O_CREAT|O_TRUNC : Int
O_WRONLY|O_CREAT|O_TRUNC =
    RUNNING_OS match(
        OS_MACOS -> 0x601, # O_WRONLY = 0x1, O_CREAT = 0x200, O_TRUNC = 0x400
        OS_LINUX -> 0x241, # O_WRONLY = 0x1, O_CREAT = 0x40, O_TRUNC = 0x200
        OS_WINDOWS -> 0x301, # O_WRONLY = 0x1, O_CREAT|O_TRUNC = 0x300
        OS_UNKNOWN -> "O_WRONLY|O_CREAT|O_TRUNC on unknown os" panic!
    )


close-file! : File -- +IO
close-file! = (
    File->Int posix-close!
    0 < if(
        "failed to close file." panic!,
        id
    )
)


########
# STAT #
########

def-external(stat, RawPtr RawPtr -- Int)

def(with-raw-path, *a Path [*a RawPtr -- *b] -- *b Path,
    \([f] -> Path->Str Str->Ptr with-raw-ptr(f) Ptr->Str Str->Path))

def(is-directory?, Path -- Path Bool,
    with-raw-path(
        256 prim.ptr.alloc with-raw-ptr(stat)
        swap 0 == if(
            st_mode@ S_ISDIR,
            drop false
        )
    ) swap)

#define S_IFMT  00170000
#define S_IFSOCK 0140000
#define S_IFLNK	 0120000
#define S_IFREG  0100000
#define S_IFBLK  0060000
#define S_IFDIR  0040000

def(S_IFMT, Int, 0xF000)
def(S_IFDIR, Int, 0x4000)
def(S_IFREG, Int, 0x8000)

def(S_ISDIR, U32 -- Bool, U32->Int S_IFMT & S_IFDIR ==)

def(st_mode@, Ptr -- U32,
    RUNNING_OS match(
        OS_LINUX -> 24, # ... this is all terrible and brittle
        OS_WINDOWS -> 6,
        _ -> drop 8
    ) swap ptr+ u32@)

########
# Heap #
########

buffer(HEAP_LENGTH, 8)

heap-length@ : Size
heap-length@ = HEAP_LENGTH int@

heap-length! : Size --
heap-length! = HEAP_LENGTH int!

buffer(HEAP_BASE, 8)

heap-base@ : Ptr
heap-base@ = HEAP_BASE ptr@

heap-base! : Ptr --
heap-base! = HEAP_BASE ptr!

buffer(HEAP_TIMES_EXPANDED, 8)

heap-times-expanded@ : Int
heap-times-expanded@ = HEAP_TIMES_EXPANDED int@

heap-times-expanded! : Int --
heap-times-expanded! = HEAP_TIMES_EXPANDED int!

++heap-times-expanded : Int
++heap-times-expanded =
    heap-times-expanded@ 1+ dup heap-times-expanded!

||| Ensure that at at least X space on the heap is available.
|||
||| If the space left is too small (or heap has not been allocated,
||| in which the space left is 0), then it tries to make the heap
||| larger in place. This usually works, but if it fails, we just
||| allocate a new buffer and forget about the old one, leaking
||| some memory and introducing fragmentation.
|||
||| Panics if reservation is impossible.
heap-reserve! : Size --
heap-reserve! =
    dup heap-length@ <= if(
        drop,

        heap-new-size dup # size
        heap-length@ heap-base@ ptr+ swap # pointer hint
        PROT_READ|PROT_WRITE
        MAP_ANON|MAP_PRIVATE
        -1 # file descriptor (-1 for MAP_ANONYMOUS)
        0 # offset
        posix-mmap!
        is-nil? not if(
            dup heap-length@ heap-base@ ptr+ == if(
                drop heap-length@ + heap-length!,
                heap-base! heap-length!
            ),
            "Failed to allocate heap buffer." panic!
        )
    )

PROT_READ|PROT_WRITE : Int
PROT_READ|PROT_WRITE = 0x3
    # PROT_READ = 0x1, PROT_WRITE = 0x2

MAP_ANON|MAP_PRIVATE : Int
MAP_ANON|MAP_PRIVATE =
    RUNNING_OS match(
        OS_MACOS ->
            0x1002, # MAP_ANON = 0x1000, MAP_PRIVATE = 0x2
        _ ->
            drop 0x22, # MAP_ANON = 0x20, MAP_PRIVATE = 0x2
    )

||| Aligns a by b, rounding upward. For instance,
|||
|||   10 64 align == 64
|||   64 64 align == 64
|||   70 64 align == 128
align : Size Size -- Size
align = dup dip(1- + dup) % -

||| Figure out how much to expand heap size by, based on a minimum size
||| (i.e. requested size aligned to 4096).
||| The expansion has a quadratic lower bound.
heap-new-size : Size -- Size
heap-new-size = (
    4096 align
    4096 ++heap-times-expanded square *
    max
)

||| Allocate a buffer on the heap.
heap-alloc! : Size -- Ptr +Heap
heap-alloc! = (
    64 align
    dup heap-reserve!
    dup heap-length@ swap - heap-length!
    heap-base@ dup dip(swap) ptr+ heap-base!
)
