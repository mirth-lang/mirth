module(platform.posix)
import(prelude)
import(data.str)
import(data.path)

def(panic!, *a Str -- *b,
    "panic: " str-trace! str-trace-ln! 1 posix-exit!)

data(File, FILE -> Int)
def(Int->File, Int -- File, FILE)
def(File->Int, File -- Int, match(FILE -> id))

def(file@, Ptr -- File, int@ Int->File)
def(file!, File Ptr --, dip(File->Int) int!)

def(stdin, File, 0 Int->File)
def(stdout, File, 1 Int->File)
def(stderr, File, 2 Int->File)

def(str-write!, Str File --,
    File->Int swap dup str-size dup
    dip(dip(Str->Ptr) posix-write!) swap
    dup 0 < if(
        "error: write failed!" panic!,
        swap < if(
            "error: write output fewer bytes than expected!" panic!,
            id
        )
    ))

def(str-print!, Str --, stdout str-write!)
def(str-trace!, Str --, stderr str-write!)
def(str-print-ln!, Str --, str-print! print-ln!)
def(str-trace-ln!, Str --, str-trace! trace-ln!)

def(print-ln!, --, "\n" str-print!)
def(trace-ln!, --, "\n" str-trace!)

def(str-buf-write!, File --,
    File->Int STR_BUF str-buf-length?
    posix-write!
    dup 0 < if(
        "error: str-buf write failed!" panic!,
        str-buf-length? < if(
            "error: str-buf write wrote fewer bytes than expected!" panic!,
            id
        )
    ))

def(str-buf-print!, --, stdout str-buf-write!)
def(str-buf-trace!, --, stderr str-buf-write!)
def(str-buf-read!, File --,
    File->Int str-buf-clear!
    STR_BUF STR_BUF_SIZE 1- posix-read!
    dup 0< if(
        "str-buf-read! failed" panic!,
        str-buf-length!
    ))

def(str-buf-input!, --, stdin str-buf-read!)
def(print-char!, Char --, build-str!(str-buf-push-char!) str-print!)
def(trace-char!, Char --, build-str!(str-buf-push-char!) str-trace!)

def(int-write!, Int File --, dip(str-buf-int!) str-buf-write!)
def(int-print!, Int --, stdout int-write!)
def(int-trace!, Int --, stderr int-write!)
def(int-print-ln!, Int --, int-print! print-ln!)
def(int-trace-ln!, Int --, int-trace! trace-ln!)

def(with-open-file!(f,g), (*a File -- *b, *a -- *b) *a Str -- *b,
    0 0 posix-open! dup 0 < if(drop g, dup dip(Int->File f) posix-close! drop))

def(read-file!, File -- Str,
    File->Int \(fp ->
        0 0x1000 prim-ptr-alloc
        fp over 0x1000 prim-posix-read
        while(dup 0 >,
            { Int Ptr Int }
            swap dip(+ dup) swap 2 * prim-ptr-realloc
            dup2 with-ptr+(over2 dip2(fp) prim-posix-read))
        0 < if("io error while reading file" panic!, id)
        over 4 + prim-ptr-realloc
        tuck with-ptr+(0 Int->U32 swap u32!) Ptr->Str
    ))

def(open-file!, Str -- File,
    0 0 posix-open!
    dup 0 < if(
        "Failed to open file!" panic!,
        Int->File
    ))

def(create-file!, Str -- File,
    O_WRONLY|O_CREAT|O_TRUNC
    0x1B6
        # this is the default mode for creating a file
        # on unix, 666 in octal, i.e. owner can
        # read+write, everyone can read
        #  ---- NB: this is inaccurate . . .
    posix-open!
    dup 0 < if(
        "Failed to create file!" panic!,
        Int->File
    ))

def(O_WRONLY|O_CREAT|O_TRUNC, Int,
    RUNNING_OS match(
        OS_MACOS -> 0x601, # O_WRONLY = 0x1, O_CREAT = 0x200, O_TRUNC = 0x400
        OS_LINUX -> 0x241, # O_WRONLY = 0x1, O_CREAT = 0x40, O_TRUNC = 0x200
        OS_WINDOWS -> 0x301, # O_WRONLY = 0x1, O_CREAT|O_TRUNC = 0x300
        OS_UNKNOWN -> "O_WRONLY|O_CREAT|O_TRUNC on unknown os" panic!
    ))

def(close-file!, File --,
    File->Int posix-close!
    0 < if(
        "failed to close file." panic!,
        id
    ))

########
# STAT #
########

def-external(stat, RawPtr RawPtr -- Int)

def(with-raw-path(f), (*a RawPtr -- *b) *a Path -- *b Path,
    Path->Str Str->Ptr with-raw-ptr(f) Ptr->Str Str->Path)

def(is-directory?, Path -- Path Bool,
    with-raw-path(
        256 prim-ptr-alloc with-raw-ptr(stat)
        swap 0 == if(
            st_mode@ S_ISDIR,
            drop false
        )
    ) swap)

#define S_IFMT  00170000
#define S_IFSOCK 0140000
#define S_IFLNK	 0120000
#define S_IFREG  0100000
#define S_IFBLK  0060000
#define S_IFDIR  0040000

def(S_IFMT, Int, 0xF000)
def(S_IFDIR, Int, 0x4000)
def(S_IFREG, Int, 0x8000)

def(S_ISDIR, U16 -- Bool, U16->Int S_IFMT & S_IFDIR ==)

def(st_mode@, Ptr -- U16,
    RUNNING_OS match(
        OS_LINUX -> 24, # ... this is all terrible and brittle
        OS_WINDOWS -> 6,
        _ -> drop 8
    ) swap with-ptr+(u16@))
