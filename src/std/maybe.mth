module(std.maybe)

import(std.prelude)
import(std.list)

data(Maybe(t), NONE, SOME -> t)

def(Maybe.none?, Maybe(t) -- Bool, >Bool not)
def(Maybe.some?, Maybe(t) -- Bool, >Bool)
def(Maybe.>Bool, Maybe(t) -- Bool,
    NONE -> F,
    SOME -> drop T)

def(Maybe.>List, Maybe(t) -- List(t),
    NONE -> L0,
    SOME -> L1)

def(Maybe.if(f,g), (*a -- *b, *a -- *b) *a Maybe(t) -- *b,
    SOME -> drop f,
    NONE -> g)
def(Maybe.if-some(f,g), (*a t -- *b, *a -- *b) *a Maybe(t) -- *b,
    SOME -> f,
    NONE -> g)
def(Maybe.then(f), (*a -- *a) *a Maybe(t) -- *a,
    SOME -> drop f,
    NONE -> id)
def(Maybe.then-some(f), (*a t -- *a) *a Maybe(t) -- *a,
    SOME -> f,
    NONE -> id)
def(Maybe.else(f), (*a -- *a) *a Maybe(t) -- *a,
    SOME -> drop,
    NONE -> f)

def(Maybe.not, Maybe(a) -- Bool, >Bool not)
def(Maybe.or(p), (*c -- *c Bool) *c Maybe(a) -- *c Bool,
    some? or(p))
def(Maybe.and(p), (*c -- *c Bool) *c Maybe(a) -- *c Bool,
    NONE -> F,
    SOME -> drop p)
def(Maybe.and-some(p), (*c a -- *c Bool) *c Maybe(a) -- *c Bool,
    NONE -> F,
    SOME -> p)
def(Maybe.guard(p), (*c a -- *c a Bool) *c Maybe(a) -- *c Maybe(a),
    NONE -> NONE,
    SOME -> p if(SOME, drop NONE))

def(Maybe.unwrap, Maybe(t) -- t,
    NONE -> "tried to unwrap NONE" panic!,
    SOME -> id)

def(Maybe.unwrap-or(f), (*a -- *a t) *a Maybe(t) -- *a t,
    NONE -> f,
    SOME -> id)

def(Maybe.map(f), (*c a -- *c b) *c Maybe(a) -- *c Maybe(b),
    NONE -> NONE,
    SOME -> f SOME)

def(Maybe.bind(f), (*c a -- *c Maybe(b)) *c Maybe(a) -- *c Maybe(b),
    NONE -> NONE,
    SOME -> f)

def(Maybe.for(f), (*c a -- *c) *c Maybe(a) -- *c,
    NONE -> id,
    SOME -> f)

def(Maybe.filter(f), (*c a -- *c a Bool) *c Maybe(a) -- *c Maybe(a),
    NONE -> NONE,
    SOME -> f if(SOME, drop NONE))

def(while-some(f,g), (*a -- *a Maybe(b), *a b -- *a) *a -- *a,
    f while(dup some?, unwrap g f) drop)

def(Maybe.map2(f), (*c x y -- *c z) *c Maybe(x) Maybe(y) -- *c Maybe(z),
    NONE -> drop NONE,
    SOME -> swap match(
        NONE -> drop NONE,
        SOME -> swap f SOME
    ))

def(Maybe.zip, Maybe(x) Maybe(y) -- Maybe([x y]), map2(pack2))
