module(mirth.module)

import(std.prelude)
import(std.path)
import(std.str)
import(std.list)
import(std.byte)
import(std.maybe)
import(mirth.name)
import(mirth.package)
import(mirth.token)
import(mirth.mirth)

# mirth/data/module
table(Module)
field(Module.~package, Module, Package)
field(Module.~name, Module, Name)
field(Module.~path, Module, Path)
field(Module.~start, Module, Token)
field(Module.~end, Module, Token)
field(Module.~imports, Module, List(Module))

def(Module.package, Module -- Package, ~package @)
def(Module.name, Module -- Name, ~name @)
def(Module.qname, Module -- QName, sip(package NAMESPACE_PACKAGE) name QNAME0)
def(Module.path, Module -- Path, ~path @)
def(Module.start, Module -- Token, ~start @)
def(Module.end, Module -- Token, ~end @)
def(Module.imports, Module -- List(Module), ~imports @)

def(Module.==, Module Module -- Bool, both(index) ==)

def(Module.prim, +Mirth -- +Mirth Module, builtin prim)
def(init-modules!, +Mirth -- +Mirth,
    builtin prim
    L0 over ~imports !
    "<prim>" >Path over ~path !
    Package.std over ~package !
    "prim" >Name over ~name !
    drop)

def(Module.new!, +Mirth Path -- +Mirth Module,
    Module.alloc!
    Module.prim L1 over ~imports !
    tuck ~path !)

||| ( module1 module2 -- ) Add module2 as import to module1.
||| This does not check if the import is necessary.
def(Module.add-import!, Module Module --,
    swap ~imports modify(cons))

||| Get source path associated with module.
def(Module.source-path, Module -- Path,
    path)

||| ( module1 module2 -- bool ) Check whether module1 is visible in module2.
def(Module.visible, Module Module -- Bool,
    dup2 == if(
        drop2 True, # Module is always visible to itself.
        imports member
    ))
