module mirth.module

import std.prelude
import std.path
import std.str
import std.list
import std.byte
import std.maybe
import mirth.name
import mirth.package
import mirth.token
import mirth.mirth
import mirth.def

# mirth/data/module
table(Module)
field(Module.~doc, Module, Maybe(Str))
field(Module.~package, Module, Package)
field(Module.~name, Module, Name)
field(Module.~path, Module, Path)
field(Module.~start, Module, Token)
field(Module.~head, Module, Token)
field(Module.~end, Module, Token)
field(Module.~imports, Module, List(Module))

def(Module.package, +Mirth Module -- +Mirth Package, ~package @)
def(Module.name, +Mirth Module -- +Mirth Name, ~name @)
def(Module.qname, +Mirth Module -- +Mirth QName, sip(package Namespace.Package) name 0 QName.Mk)
def(Module.path, +Mirth Module -- +Mirth Path, ~path @)
def(Module.start, +Mirth Module -- +Mirth Token, ~start @)
def(Module.head, +Mirth Module -- +Mirth Token, ~head @)
def(Module.end, +Mirth Module -- +Mirth Token, ~end @)
def(Module.imports, +Mirth Module -- +Mirth List(Module), ~imports @)

def(Module.=, Module Module -- Bool, both(index) =)

def(Module.Prim, +Mirth -- +Mirth Module, builtin prim)
def init-modules! [ +Mirth -- +Mirth ] {
    builtin prim
    L0 over ~imports !
    "<prim>" >Path over ~path !
    Package.std over ~package !
    "prim" >Name over ~name !
    None over ~doc !
    Def.Module register
}

def(Module.new!, +Mirth Path -- +Mirth Module,
    Module.alloc!
    Module.Prim L1 over ~imports !
    tuck ~path !)

||| Get source path associated with module.
def(Module.source-path, +Mirth Module -- +Mirth Path,
    path)

||| ( module1 module2 -- bool ) Check whether module1 is visible in module2.
def Module.visible [ +Mirth Module Module -- +Mirth Bool ] {
    dup2 = # module is always visible to itself
    or(dup2 imports member)
    dip(drop2)
}
