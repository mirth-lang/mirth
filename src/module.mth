module mirth.module

import std.prelude
import std.path
import std.str
import std.list
import std.byte
import std.maybe
import mirth.name
import mirth.package
import mirth.token
import mirth.mirth
import mirth.def

# mirth/data/module
table(Module)
patch Module {
    field(~doc, Module, Maybe(Str))
    field(~package, Module, Package)
    field(~name, Module, Name)
    field(~path, Module, Path)
    field(~start, Module, Token)
    field(~head, Module, Token)
    field(~end, Module, Token)
    field(~imports, Module, List(Module))

    def package [ +Mirth |- Module -- Package      ] { ~package @ }
    def name    [ +Mirth |- Module -- Name         ] { ~name @ }
    def qname   [ +Mirth |- Module -- QName        ] { sip(package Namespace.Package) name 0 QName.Mk }
    def path    [ +Mirth |- Module -- Path         ] { ~path @ }
    def start   [ +Mirth |- Module -- Token        ] { ~start @ }
    def head    [ +Mirth |- Module -- Token        ] { ~head @ }
    def end     [ +Mirth |- Module -- Token        ] { ~end @ }
    def imports [ +Mirth |- Module -- List(Module) ] { ~imports @ }

    def = [ Module Module -- Bool ] { both(index) = }

    def Prim [ +Mirth |- Module ] { builtin prim }

    def New! [ +Mirth |- Path -- Module ] {
        Module.alloc!
        Module.Prim L1 over ~imports !
        tuck ~path !
    }

    ||| Get source path associated with module.
    def source-path [ +Mirth |- Module -- Path ] { path }

    ||| ( module1 module2 -- bool ) Check whether module1 is visible in module2.
    ||| In other words, whether module1 is the same as module2, or is imported by module2.
    def visible [ +Mirth |- Module Module -- Bool ] {
        dup imports cons member
    }
}

def +Mirth.init-modules! [ +Mirth |- ] {
    builtin prim
    L0 over ~imports !
    "<prim>" >Path over ~path !
    Package.Std over ~package !
    "prim" >Name over ~name !
    None over ~doc !
    Def.Module register
}
