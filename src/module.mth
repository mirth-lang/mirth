module mirth.module

import std.prelude
import std.path
import std.str
import std.list
import std.byte
import std.maybe
import mirth.name
import mirth.package
import mirth.token
import mirth.mirth
import mirth.def

# mirth/data/module
table +Mirth |- Module {
    doc: Maybe(Str)
    package: Package
    name: Name
    path: Path
    start: Token
    head: Token
    end: Token
    imports: List(Module)
    --
    def qname [ +Mirth |- Module -- QName ] { sip(package Namespace.Package) name 0 QName.Mk }
    max-mirth-revision 2025_03_29_001 {
        def = [ +Mirth |- Module Module -- Bool ] { on2:index = }
    }

    def Prim [ +Mirth |- Module ] { builtin prim }
    def New! [ +Mirth |- Path -- Module ] {
        Module.Alloc!
        Module.Prim L1 over imports!
        tuck path!
    }

    ||| Get source path associated with module.
    def source-path [ +Mirth |- Module -- Path ] { path }

    ||| ( module1 module2 -- bool ) Check whether module1 is visible in module2.
    ||| In other words, whether module1 is the same as module2, or is imported by module2.
    def visible [ +Mirth |- Module Module -- Bool ] {
        dup imports cons member
    }
}

def +Mirth.init-modules! [ +Mirth |- ] {
    builtin prim
    L0 over imports!
    "<prim>" >Path over path!
    Package.Std over package!
    "prim" Name over name!
    None over doc!
    Def.Module register
}
