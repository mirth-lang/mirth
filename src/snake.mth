module(snake)
import(prelude)
import(sdl2)

##############
# Snake Game #
##############

def(SNAKE_W, Size, 20)
def(SNAKE_H, Size, 20)

buffer(SNAKE_DONE, 1)
buffer(SNAKE_DEAD, 1)
buffer(SNAKE_DIRECTION, 1)
buffer(SNAKE_LAST_DIRECTION, 1)
buffer(SNAKE_X, 1)
buffer(SNAKE_Y, 1)
buffer(SNAKE_WINDOW, 8)
buffer(SNAKE_RENDERER, 8)
buffer(SNAKE_CONTROLLER, 8)
buffer(SNAKE_QUEUE_LENGTH, 8)
buffer(SNAKE_QUEUE_X, 0x1000)
buffer(SNAKE_QUEUE_Y, 0x1000)
buffer(SNAKE_GRID, 0x1000)
buffer(SNAKE_EVENT, 0x100)

def-type(Direction, U8)
def(DNORTH, Direction, 0 Int->U8)
def(DEAST, Direction, 1 Int->U8)
def(DSOUTH, Direction, 2 Int->U8)
def(DWEST, Direction, 3 Int->U8)

def-type(XCoord, U8)
def(XCoord->Int, XCoord -- Int, U8->Int)
def(Int->XCoord, Int -- XCoord, Int->U8)

def-type(YCoord, U8)
def(YCoord->Int, YCoord -- Int, U8->Int)
def(Int->YCoord, Int -- YCoord, Int->U8)

def(coords-offset, XCoord YCoord -- Offset,
    dip(XCoord->Int) YCoord->Int SNAKE_W * +)

def-type(State, U8)
def(state-occupy, State -- State, U8->Int 0x1 | Int->U8)
def(state-vacate, State -- State, U8->Int 0xFE & Int->U8)
def(state-is-occupied, State -- Bool, U8->Int 0x1 & nonzero)
def(state-is-occupied?, State -- State Bool, dup state-is-occupied)

def(snake-done@, -- Bool +Snake, SNAKE_DONE u8@ U8->Int nonzero)
def(snake-done!, Bool -- +Snake, if(1,0) Int->U8 SNAKE_DONE u8!)
def(snake-dead@, -- Bool +Snake, SNAKE_DEAD u8@ U8->Int nonzero)
def(snake-dead!, Bool -- +Snake, if(1,0) Int->U8 SNAKE_DEAD u8!)
def(snake-direction@, -- Direction +Snake, SNAKE_DIRECTION u8@)
def(snake-direction!, Direction -- +Snake, SNAKE_DIRECTION u8!)
def(snake-last-direction@, -- Direction +Snake, SNAKE_LAST_DIRECTION u8@)
def(snake-last-direction!, Direction -- +Snake, SNAKE_LAST_DIRECTION u8!)
def(snake-x@, -- XCoord +Snake, SNAKE_X u8@)
def(snake-x!, XCoord -- +Snake, SNAKE_X u8!)
def(snake-y@, -- YCoord +Snake, SNAKE_Y u8@)
def(snake-y!, YCoord -- +Snake, SNAKE_Y u8!)

def(snake-xy@, -- XCoord YCoord +Snake, snake-x@ snake-y@)
def(snake-xy!, XCoord YCoord -- +Snake, snake-y! snake-x!)

def(snake-window@, -- SDL_Window* +Snake, SNAKE_WINDOW ptr@)
def(snake-window!, SDL_Window* -- +Snake, SNAKE_WINDOW ptr!)

def(snake-renderer@, -- SDL_Renderer* +Snake, SNAKE_RENDERER ptr@)
def(snake-renderer!, SDL_Renderer* -- +Snake, SNAKE_RENDERER ptr!)

def(snake-controller@, -- SDL_JoystickID +Snake, SNAKE_CONTROLLER int@)
def(snake-controller!, SDL_JoystickID -- +Snake, SNAKE_CONTROLLER int!)

def(snake-grid@, XCoord YCoord -- State +Snake,
    coords-offset SNAKE_GRID u8@@)
def(snake-grid!, State XCoord YCoord -- +Snake,
    coords-offset SNAKE_GRID u8!!)
def(snake-grid-clear!, +Snake,
    SNAKE_W SNAKE_H * while(dup nonzero,
        1-
        0 Int->U8 over SNAKE_GRID u8!!
    ) drop)

def(snake-queue-length@, -- Size +Snake, SNAKE_QUEUE_LENGTH int@)
def(snake-queue-length!, Size -- +Snake, SNAKE_QUEUE_LENGTH int!)

def(snake-queue-x?, Offset -- Offset XCoord +Snake, dup snake-queue-x@)
def(snake-queue-x@, Offset -- XCoord +Snake, SNAKE_QUEUE_X u8@@)
def(snake-queue-x!, XCoord Offset -- +Snake, SNAKE_QUEUE_X u8!!)

def(snake-queue-y?, Offset -- Offset YCoord +Snake, dup snake-queue-y@)
def(snake-queue-y@, Offset -- YCoord +Snake, SNAKE_QUEUE_Y u8@@)
def(snake-queue-y!, YCoord Offset -- +Snake, SNAKE_QUEUE_Y u8!!)

def(snake-queue-xy?, Offset -- Offset XCoord YCoord +Snake,
    dup snake-queue-xy@)
def(snake-queue-xy@, Offset -- XCoord YCoord +Snake,
    snake-queue-y? dip(snake-queue-x@))
def(snake-queue-xy!, XCoord YCoord Offset -- +Snake,
    tuck snake-queue-y! snake-queue-x!)

def(snake-enqueue-xy!, XCoord YCoord -- +Snake,
    snake-queue-length@ snake-queue-xy!
    snake-queue-length@ 1+ snake-queue-length!)

def(snake-dequeue-xy!, -- XCoord YCoord +Snake,
    0 snake-queue-xy@
    0
    while(dup 1+ snake-queue-length@ <,
        dup
        dip(1+ snake-queue-xy?) snake-queue-xy!)
    drop
    snake-queue-length@ 1- snake-queue-length!)

def(SNAKE_CELL_SIZE, Int, 30)
def(SNAKE_WINDOW_W, Int, SNAKE_W SNAKE_CELL_SIZE *)
def(SNAKE_WINDOW_H, Int, SNAKE_H SNAKE_CELL_SIZE *)
def(SNAKE_WINDOW_FLAGS, SDL_WindowFlags,
    SDL_WINDOW_HIDDEN)
def(SNAKE_RENDERER_FLAGS, SDL_RendererFlags,
    SDL_RENDERER_ACCELERATED U32->Int
    SDL_RENDERER_PRESENTVSYNC U32->Int |
    Int->U32)

def-type(SnakeButton, U8)
def(SNAKE_BUTTON_NONE, SnakeButton, 0 Int->U8)
def(SNAKE_BUTTON_UP, SnakeButton, 1 Int->U8)
def(SNAKE_BUTTON_RIGHT, SnakeButton, 2 Int->U8)
def(SNAKE_BUTTON_DOWN, SnakeButton, 3 Int->U8)
def(SNAKE_BUTTON_LEFT, SnakeButton, 4 Int->U8)
def(SNAKE_BUTTON_START, SnakeButton, 5 Int->U8)

def(SDL_Scancode->SnakeButton, SDL_Scancode -- SnakeButton,
    dup SDL_SCANCODE_UP == if(
        drop SNAKE_BUTTON_UP,
    dup SDL_SCANCODE_RIGHT == if(
        drop SNAKE_BUTTON_RIGHT,
    dup SDL_SCANCODE_DOWN == if(
        drop SNAKE_BUTTON_DOWN,
    dup SDL_SCANCODE_LEFT == if(
        drop SNAKE_BUTTON_LEFT,
    dup SDL_SCANCODE_SPACE == if(
        drop SNAKE_BUTTON_START,

        drop SNAKE_BUTTON_NONE
    ))))))

def(SDL_GameControllerButton->SnakeButton, SDL_GameControllerButton -- SnakeButton,

    dup SDL_CONTROLLER_BUTTON_DPAD_UP == if(
        drop SNAKE_BUTTON_UP,
    dup SDL_CONTROLLER_BUTTON_DPAD_DOWN == if(
        drop SNAKE_BUTTON_DOWN,
    dup SDL_CONTROLLER_BUTTON_DPAD_LEFT == if(
        drop SNAKE_BUTTON_LEFT,
    dup SDL_CONTROLLER_BUTTON_DPAD_RIGHT == if(
        drop SNAKE_BUTTON_RIGHT,
    dup SDL_CONTROLLER_BUTTON_START == if(
        drop SNAKE_BUTTON_START,

        drop SNAKE_BUTTON_NONE
    ))))))

def(snake!, +Snake,
    snake-init!
    snake-loop!
    snake-quit!)

def(snake-reset!, +Snake,
    DNORTH snake-direction!
    SNAKE_W 2 / Int->XCoord snake-x!
    SNAKE_H 2 / Int->YCoord snake-y!
    0 snake-queue-length!
    snake-grid-clear!
    snake-randomize-mouse!
    false snake-dead!
    0 snake-points!
    0 tick-timer!)

def(SNAKE_INIT_FLAGS, SDL_InitFlags,
    SDL_INIT_VIDEO U32->Int
    SDL_INIT_GAMECONTROLLER U32->Int |
    Int->U32)

def(snake-init!, +Snake,
    snake-reset!

    SNAKE_INIT_FLAGS SDL_Init nonzero if(
        SDL_GetError cast panic!,
        id
    )

    SDL_NumJoysticks 0 while(dup2 >,
        dup SDL_IsGameController if(
            snake-controller! dup
            snake-controller@ SDL_GameControllerOpen drop,
            1+
        )
    ) drop2

    "Snake!"
    100
    100
    SNAKE_WINDOW_W
    SNAKE_WINDOW_H
    SNAKE_WINDOW_FLAGS
    SDL_CreateWindow
    dup Ptr->Int nonzero if(
        snake-window!,
        SDL_GetError cast panic!
    )

    snake-window@
    -1
    SNAKE_RENDERER_FLAGS
    SDL_CreateRenderer
    dup Ptr->Int nonzero if(
        snake-renderer!,
        SDL_GetError cast panic!
    ))

def(snake-loop!, +Snake,
    snake-process-events!
    while(snake-done@ not,
        snake-present!
        0 ms SDL_Delay # maybe use a self-adjusting delay to interval reduce input latency.
        snake-process-events!
        snake-update!
    ))

def(snake-quit!, +Snake,
    SDL_Quit)

def-type(R, Int)
def-type(G, Int)
def-type(B, Int)
def-type(A, Int)

def(snake-background-color, R G B A,
    140 100 150 255)

def(snake-foreground-color, R G B A,
    255 255 255 255)

def-type(X, Int)
def-type(Y, Int)
def-type(W, Int)
def-type(H, Int)

i32!! : I32 Offset Ptr --
i32!! = dip(4 *) ptr+ i32!

buffer(SNAKE_RECT, 16)
def(snake-rect!, X Y W H -- +Snake,
    Int->I32 3 SNAKE_RECT i32!!
    Int->I32 2 SNAKE_RECT i32!!
    Int->I32 1 SNAKE_RECT i32!!
    Int->I32 0 SNAKE_RECT i32!!)

def(snake-rect-cell!, XCoord YCoord -- +Snake,
    dip(U8->Int SNAKE_CELL_SIZE *)
    U8->Int SNAKE_CELL_SIZE *
    SNAKE_CELL_SIZE
    SNAKE_CELL_SIZE
    snake-rect!)

def(snake-present!, +Snake,
    snake-window@ SDL_ShowWindow

    snake-renderer@ snake-background-color SDL_SetRenderDrawColor
    snake-renderer@ SDL_RenderClear

    snake-renderer@ snake-foreground-color SDL_SetRenderDrawColor
    snake-xy@ snake-rect-cell!
    snake-renderer@ SNAKE_RECT SDL_RenderFillRect
    0
    while(dup snake-queue-length@ <,
        snake-queue-xy? snake-rect-cell!
        snake-renderer@ SNAKE_RECT SDL_RenderFillRect
        1+)
    drop
    snake-mouse-xy@ snake-rect-cell!
    snake-renderer@ SNAKE_RECT SDL_RenderFillRect

    snake-renderer@ SDL_RenderPresent)

def(snake-process-events!, +Snake,
    while(SNAKE_EVENT SDL_PollEvent nonzero,
        snake-process-event!))

def(snake-process-event!, +Snake,
    SNAKE_EVENT SDL_Event.type
    dup SDL_QUIT == if(
        drop true snake-done!,

    dup SDL_KEYDOWN == if(
        drop
        SNAKE_EVENT SDL_Event.key.repeat U8->Int nonzero if(
            id,
            SNAKE_EVENT SDL_Event.key.keysym.scancode
            dup SDL_SCANCODE_ESCAPE == if(
                drop true snake-done!,
                SDL_Scancode->SnakeButton snake-press!
            )
        ),

    dup SDL_CONTROLLERBUTTONDOWN == if(
        drop
        SNAKE_EVENT SDL_Event.cbutton.which snake-controller@ == if(
            SNAKE_EVENT SDL_Event.cbutton.button
            SDL_GameControllerButton->SnakeButton snake-press!,
            id
        ),

        drop
    ))))

def(snake-press!, SnakeButton -- +Snake,
    dup SNAKE_BUTTON_NONE == if(
        drop,
    dup SNAKE_BUTTON_UP == if(
        drop
        DSOUTH snake-last-direction@ == if(
            id,
            DNORTH snake-direction!
        ),
    dup SNAKE_BUTTON_RIGHT == if(
        drop
        DWEST snake-last-direction@ == if(
            id,
            DEAST snake-direction!
        ),
    dup SNAKE_BUTTON_DOWN == if(
        drop
        DNORTH snake-last-direction@ == if(
            id,
            DSOUTH snake-direction!
        ),
    dup SNAKE_BUTTON_LEFT == if(
        drop
        DEAST snake-last-direction@ == if(
            id,
            DWEST snake-direction!
        ),
    dup SNAKE_BUTTON_START == if(
        drop
        snake-dead@ if(
            snake-reset!,
            id
        ),

        drop "Unhandled button press!" panic!
    )))))))

buffer(TICK_TIMER, 8)
def(tick-timer@, Int +Snake, TICK_TIMER int@)
def(tick-timer!, Int -- +Snake, TICK_TIMER int!)
def(TICK_FRAMES, Int, 7)

def(snake-tick!, Bool +Snake,
    tick-timer@
    1+ dup TICK_FRAMES >= if(
        drop 0 tick-timer! true,
        tick-timer! false
    ))

def(snake-update!, +Snake,
    snake-dead@ if(
        id,

    snake-tick! if(
        snake-direction@ snake-last-direction!

        snake-xy@
        snake-direction@
        snake-apply-direction
        snake-xy!

        snake-xy@ snake-grid@ U8->Int nonzero if(
            true snake-dead!,

            1 Int->U8 snake-xy@ snake-grid!
            snake-check-mouse!

            snake-xy@ snake-enqueue-xy!
            snake-queue-length@ snake-desired-length > if(
                0 Int->U8 snake-dequeue-xy! snake-grid!,
                id
            )
        ),

        id
    )))

buffer(SNAKE_POINTS, 8)
def(snake-points@, -- Int +Snake, SNAKE_POINTS int@)
def(snake-points!, Int -- +Snake, SNAKE_POINTS int!)
def(snake-points-inc!, +Snake, snake-points@ 1 + snake-points!)
def(snake-desired-length, Int +Snake, snake-points@ 5 +)

buffer(SNAKE_MOUSE_X, 1)
buffer(SNAKE_MOUSE_Y, 1)

def(snake-mouse-x@, XCoord +Snake, SNAKE_MOUSE_X u8@)
def(snake-mouse-y@, YCoord +Snake, SNAKE_MOUSE_Y u8@)
def(snake-mouse-xy@, XCoord YCoord +Snake,
    snake-mouse-x@ snake-mouse-y@)

def-external(rand, Int +IO)

def(snake-randomize-mouse!, +IO +Snake,
    rand SNAKE_W % Int->XCoord SNAKE_MOUSE_X u8!
    rand SNAKE_H % Int->YCoord SNAKE_MOUSE_Y u8!

    snake-mouse-xy@ snake-grid@ U8->Int nonzero if(
        snake-randomize-mouse!, # might lead to crash if there is no empty space ...
        id
    ))

def(snake-check-mouse!, +Snake,
    snake-x@ snake-mouse-x@ ==
    snake-y@ snake-mouse-y@ == && if(
        snake-randomize-mouse!
        snake-points-inc!,

        id
    ))


def(snake-apply-direction, XCoord YCoord Direction -- XCoord YCoord,
    dup DNORTH == if(
        drop YCoord->Int 1- SNAKE_H + SNAKE_H % Int->YCoord,
    dup DEAST == if(
        drop dip(XCoord->Int 1+ SNAKE_W % Int->XCoord),
    dup DSOUTH == if(
        drop YCoord->Int 1+ SNAKE_H % Int->YCoord,
    dup DWEST == if(
        drop dip(XCoord->Int 1- SNAKE_W + SNAKE_W % Int->XCoord),

        "unknown direction in snake-apply-direction" panic!
    )))))

target-c99("snake.c", snake!)
