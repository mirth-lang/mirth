module(mirth.name)

import(std.prelude)
import(std.byte)
import(std.str)
import(std.list)
import(std.maybe)
import(std.path)
import(std.world)
import(mirth.def)
import(mirth.module)
import(mirth.package)
import(mirth.tycon)
import(mirth.label)
import(mirth.word)
import(mirth.mirth)

#########
# Names #
#########

table(Name)
field(Name.~Str, Name, Str)
field(Name.~defs, Name, List(Def))
field(Name.~mangled, Name, Str)
field(Name.~label, Name, Label)

def(Name.>Str, Name -- Str, ~Str @)
def(Name.defs, Name -- List(Def), ~defs @)
def(Name.mangled, Name -- Str, dup ~mangled memoize(dup mangle-compute!) nip)

def(Name.==, Name Name -- Bool, both(Name.index) ==)

data(Hash, HASH -> UIndex)
def(Hash.>Int, Hash -- Int, HASH -> >Int)
def(Int.>Hash, Int -- Hash, HASH_MAX & .u >UIndex HASH)
def(Hash.offset, Hash -- UOffset, HASH -> |U64| *)

def(HASH_MAX, Int, 0xFFFF)
buffer(HASH_BUF,   0x80000)
def(hash-name@, Hash -- Maybe(Name),
    offset HASH_BUF unsafe(uoffset @I64) >Int
    dup 0= if(drop None, Name.from-index Some))
def(hash-name!, Name Hash --,
    dip(Name.index >I64)
    offset HASH_BUF unsafe(uoffset !I64))

||| Get hash for string.
def(Str.hash, Str -- Hash,
    0 swap bytes-for(>Int 17 * over 7 << ^ swap 27 >> ^)
    >Hash)

def(Name.hash, Name -- Hash, >Str hash)
def(Hash.next, Hash -- Hash, >Int 1+ >Hash)

def(Hash.keep-going?, Str Hash -- Str Hash Bool,
    dup hash-name@ match(
        None -> False,
        Some -> >Str over2 <>
    ))

def(Name.search, Str -- Maybe(Name),
    dup hash
    while(keep-going?, next)
    nip hash-name@)

def(Str.>Name, Str -- Name,
    dup hash
    while(keep-going?, next)
    dup hash-name@ match(
        None ->
            Name.alloc!
            tuck swap hash-name!
            tuck ~Str !
            L0 over ~defs !,
        Some ->
            dip(drop2)
    ))

||| Add string to name, creating new name.
def(Name.cat, Name Str -- Name,
    dip(>Str) cat >Name)

def(Name.head, Name -- Byte, >Str dip(0u >UOffset) byte@)
def(Name.tail-head, Name -- Byte, >Str dip(1u >UOffset) byte@)
def(Name.tail, Name +Unsafe -- Name +Unsafe, >Str dip(1u >USize) drop-bytes >Name)

def(Name.can-be-relative?, Name -- Bool, head is-upper not)
def(Name.could-be-label-name?, Name -- Bool, dup head is-lower or(dup head B'+' == and(dup tail-head is-lower)) nip)
def(Name.could-be-type, Name -- Bool, head is-alpha)
def(Name.could-be-pattern-var?, Name -- Bool, head is-lower)
def(Name.could-be-type-var, Name -- Bool, head is-lower)
def(Name.could-be-type-con, Name -- Bool, head is-upper)
def(Name.is-type-hole, Name -- Bool, dup head B'?' == swap tail-head dup BNUL == swap is-lower || &&)
def(Name.is-underscore, Name -- Bool, dup head B'_' == swap tail-head BNUL == &&)
def(Name.could-be-stack-var, Name -- Bool, dup head B'*' == swap tail-head is-lower &&)
def(Name.could-be-resource-var, Name -- Bool, dup head B'+' == swap tail-head is-lower &&)
def(Name.could-be-resource-con, Name -- Bool, dup head B'+' == swap tail-head is-upper &&)

def Name.could-be-constructor [ Name -- Bool ] {
    dup head match(
        B'+' -> tail-head is-upper,
        _ -> nip is-upper,
    )
}

def(Name.mangle-compute!, Name -- Str,
    Str(>Str bytes-for(zencode ;)))

#############
# Namespace #
#############

data(Namespace,
    NAMESPACE_ROOT,
    NAMESPACE_PACKAGE -> Package,
    NAMESPACE_MODULE -> Module,
    NAMESPACE_TYCON -> Tycon,
    NAMESPACE_WORD -> Word)

def(Namespace.==, Namespace Namespace -- Bool,
    NAMESPACE_ROOT -> match(NAMESPACE_ROOT -> True, _ -> drop False),
    NAMESPACE_PACKAGE -> swap match(NAMESPACE_PACKAGE -> swap ==, _ -> drop2 False),
    NAMESPACE_MODULE -> swap match(NAMESPACE_MODULE -> swap ==, _ -> drop2 False),
    NAMESPACE_TYCON -> swap match(NAMESPACE_TYCON -> swap ==, _ -> drop2 False),
    NAMESPACE_WORD -> swap match(NAMESPACE_WORD -> swap ==, _ -> drop2 False))

def(Namespace.compare, +Mirth Namespace Namespace -- +Mirth Comparison,
    dip:qname qname compare:compare)

def(Namespace.qname, +Mirth Namespace -- +Mirth Maybe(QName),
    NAMESPACE_ROOT -> None,
    NAMESPACE_PACKAGE -> qname Some,
    NAMESPACE_MODULE -> qname Some,
    NAMESPACE_TYCON -> qname-hard Some,
    NAMESPACE_WORD -> qname-hard Some)

def(Namespace.package?, +Mirth Namespace -- +Mirth Maybe(Package),
    NAMESPACE_ROOT -> None,
    NAMESPACE_PACKAGE -> Some,
    NAMESPACE_MODULE -> package Some,
    NAMESPACE_TYCON -> qname-hard namespace package?,
    NAMESPACE_WORD -> drop None)

def(Namespace.module?, +Mirth Namespace -- +Mirth Maybe(Module),
    NAMESPACE_ROOT -> None,
    NAMESPACE_PACKAGE -> drop None,
    NAMESPACE_MODULE -> Some,
    NAMESPACE_TYCON -> qname-hard namespace module?,
    NAMESPACE_WORD -> drop None)

def(Namespace.tycon?, Namespace -- Maybe(Tycon),
    NAMESPACE_ROOT -> None,
    NAMESPACE_PACKAGE -> drop None,
    NAMESPACE_MODULE -> drop None,
    NAMESPACE_TYCON -> Some,
    NAMESPACE_WORD -> drop None)

def(Namespace.prim, +Mirth -- +Mirth Namespace, Module.prim NAMESPACE_MODULE)

def(Namespace.>Str, +Mirth Namespace -- +Mirth Str,
    NAMESPACE_ROOT -> "<root>",
    NAMESPACE_PACKAGE -> name >Str,
    NAMESPACE_MODULE -> qname >Str,
    NAMESPACE_TYCON -> qname-hard >Str,
    NAMESPACE_WORD -> qname-hard >Str)

def(Namespace.mangled, +Mirth Namespace -- +Mirth Str,
    NAMESPACE_ROOT -> "__root__",
    NAMESPACE_PACKAGE -> name mangled,
    NAMESPACE_MODULE -> qname mangled,
    NAMESPACE_TYCON -> qname-hard mangled,
    NAMESPACE_WORD -> qname-hard mangled)

##################
# Qualified Name #
##################

data(QName, MKQNAME ->
    namespace:Namespace
    name:Name
    arity:Int)

def(QNAME0, Namespace Name -- QName,
    >name >namespace 0 >arity MKQNAME)

def(QName.==, QName QName -- Bool,
    /MKQNAME /MKQNAME
    name> name> ==
    arity> arity> == &&
    namespace> namespace> == &&)

def(QName.<=, +Mirth QName QName -- +Mirth Bool, compare le?)
def(QName.>=, +Mirth QName QName -- +Mirth Bool, compare ge?)
def(QName.<, +Mirth QName QName -- +Mirth Bool,  compare lt?)
def(QName.>, +Mirth QName QName -- +Mirth Bool,  compare gt?)
def(QName.<>, +Mirth QName QName -- +Mirth Bool, compare ne?)
def(QName.compare, +Mirth QName QName -- +Mirth Comparison,
    /MKQNAME /MKQNAME
    arity> arity>
    name> >Str name> >Str
    namespace> namespace>
    compare dup eq? if(
        drop compare dup eq? if(
            drop compare,
            dip:drop2
        ),
        dip:drop4
    ))

def(QName.def-hard?, +Mirth QName -- +Mirth Maybe(Def), dup name defs lookup(qname-hard ==))
def(QName.defined-hard?, +Mirth QName -- +Mirth Bool, def-hard? some?)
def(QName.undefined-hard?, +Mirth QName -- +Mirth Bool, def-hard? none?)

def(QName.def-soft?, +Mirth QName -- +Mirth Maybe(Def), dup name defs dip(Some) lookup(qname-soft ==:==))
def(QName.defined-soft?, +Mirth QName -- +Mirth Bool, def-soft? some?)
def(QName.undefined-soft?, +Mirth QName -- +Mirth Bool, def-soft? none?)

def(QName.prim, +Mirth Str Int -- +Mirth QName,
    >arity
    >Name >name
    Namespace.prim >namespace
    MKQNAME)

def(QName.>Str, +Mirth QName -- +Mirth Str, MKQNAME ->
    namespace> >Str "." cat
    name> >Str cat
    arity> dup 0= if(drop, dip:"/" show cat cat))

def(QName.to-module-path, QName +World +Mirth -- Path +World +Mirth,
    dup namespace match(
        NAMESPACE_PACKAGE ->
            dup path-or-search
            unwrap("No path defined for package "
                swap name >Str fatal-error!)
        	nip swap name >Str ".mth" cat >Path join,
        _ -> drop "expected module name in QName.to-module-path" fatal-error!
    ))
def(QName.mangled, +Mirth QName -- +Mirth Str, MKQNAME ->
    namespace> mangled "_" cat
    name> mangled cat
    arity> dup 0> if(dip:"_" show cat cat, drop))

###############
# Dotted Name #
###############

data(DName, DName -> Maybe(Name) List+(Name))
def(DName.root?, DName -- Maybe(Name), DName -> drop)
def(DName.parts, DName -- List+(Name), DName -> nip)

def(DName.last-name, DName -- Name, parts last)
def(DName.penultimate-name?, DName -- Maybe(Name),
    DName -> unsnoc drop last match(
        Some -> nip Some,
        None -> id
    ))
def(DName.is-relative?, DName -- Bool, root? none?)
