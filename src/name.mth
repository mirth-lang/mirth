module mirth.name

import std.prelude
import std.byte
import std.str
import std.list
import std.maybe
import std.path
import std.world
import mirth.def
import mirth.module
import mirth.package
import mirth.tycon
import mirth.label
import mirth.word
import mirth.mirth

#########
# Names #
#########

table(Name)
field(Name.~Str, Name, Str)
field(Name.~defs, Name, List(Def))
field(Name.~mangled, Name, Str)
field(Name.~label, Name, Label)

def(Name.>Str, Name -- Str, ~Str @)
def(Name.defs, Name -- List(Def), ~defs @)
def(Name.mangled, Name -- Str, dup ~mangled memoize(dup mangle-compute!) nip)

def(Name.==, Name Name -- Bool, both(Name.index) ==)

struct Hash {
    UIndex
    --
    def >Int { Hash -> >Int }
    def Int.>Hash { HASH_MAX & >Nat-clamp >UIndex Hash }
    def offset [ Hash -- UOffset ] { Hash -> |U64| * }
}

def(HASH_MAX, Int, 0xFFFF)
buffer(HASH_BUF,   0x80000)
def(hash-name@, Hash -- Maybe(Name),
    offset HASH_BUF unsafe(uoffset @I64) >Int
    dup 0= if(drop None, Name.from-index Some))
def(hash-name!, Name Hash --,
    dip(Name.index >I64-clamp)
    offset HASH_BUF unsafe(uoffset !I64))

||| Get hash for string.
def(Str.hash, Str -- Hash,
    0 swap bytes-for(>Int 17 * over 7 << ^ swap 27 >> ^)
    >Hash)

def(Name.hash, Name -- Hash, >Str hash)
def(Hash.next, Hash -- Hash, >Int 1+ >Hash)

def(Hash.keep-going?, Str Hash -- Str Hash Bool,
    dup hash-name@ match(
        None -> False,
        Some -> >Str over2 <>
    ))

def(Name.search, Str -- Maybe(Name),
    dup hash
    while(keep-going?, next)
    nip hash-name@)

def(Str.>Name, Str -- Name,
    dup hash
    while(keep-going?, next)
    dup hash-name@ match(
        None ->
            Name.alloc!
            tuck swap hash-name!
            tuck ~Str !
            List.L0 over ~defs !,
        Some ->
            dip(drop2)
    ))

||| Add string to name, creating new name.
def(Name.cat, Name Str -- Name,
    dip(>Str) cat >Name)

def(Name.head, Name -- Byte, >Str dip(0u >UOffset) byte@)
def(Name.tail-head, Name -- Byte, >Str dip(1u >UOffset) byte@)
def(Name.tail, Name +Unsafe -- Name +Unsafe, >Str dip(1u >USize) drop-bytes >Name)

def(Name.can-be-relative?, Name -- Bool, head is-upper not)
def(Name.could-be-label-name?, Name -- Bool, dup head is-lower or(dup head Byte.B'+' == and(dup tail-head is-lower)) nip)
def(Name.could-be-type, Name -- Bool, head is-alpha)
def(Name.could-be-pattern-var?, Name -- Bool, head is-lower)
def(Name.could-be-type-var, Name -- Bool, head is-lower)
def(Name.could-be-type-con, Name -- Bool, head is-upper)
def(Name.is-type-hole, Name -- Bool, dup head Byte.B'?' == swap tail-head dup Byte.BNUL == swap is-lower || &&)
def(Name.is-underscore, Name -- Bool, dup head Byte.B'_' == swap tail-head Byte.BNUL == &&)
def(Name.could-be-stack-var, Name -- Bool, dup head Byte.B'*' == swap tail-head is-lower &&)
def(Name.could-be-resource-var, Name -- Bool, dup head Byte.B'+' == swap tail-head is-lower &&)
def(Name.could-be-resource-con, Name -- Bool, dup head Byte.B'+' == swap tail-head is-upper &&)

def Name.could-be-constructor [ Name -- Bool ] {
    dup head match(
        B'+' -> tail-head is-upper,
        _ -> nip is-upper,
    )
}

def(Name.mangle-compute!, Name -- Str,
    Str(>Str bytes-for(zencode ;)))

#############
# Namespace #
#############

data Namespace {
    Root
    Package [ Package ]
    Module [ Module ]
    Tycon [ Tycon ]
    Word [ Word ]
    --

    def == [ Namespace Namespace -- Bool ] {
        { Root -> match(Root -> True, _ -> drop False) }
        { Package -> swap match(Package -> swap ==, _ -> drop2 False) }
        { Module -> swap match(Module -> swap ==, _ -> drop2 False) }
        { Tycon -> swap match(Tycon -> swap ==, _ -> drop2 False) }
        { Word -> swap match(Word -> swap ==, _ -> drop2 False) }
    }

    def compare [ +Mirth Namespace Namespace -- +Mirth Comparison ] {
        on2:qname compare:compare
    }

    def qname [ +Mirth Namespace -- +Mirth Maybe(QName) ] {
        { Root -> None }
        { Package -> qname Some }
        { Module -> qname Some }
        { Tycon -> qname-hard Some }
        { Word -> qname-hard Some }
    }

    def package? [ +Mirth Namespace -- +Mirth Maybe(Package) ] {
        { Root -> None }
        { Package -> Some }
        { Module -> package Some }
        { Tycon -> qname-hard namespace package? }
        { Word -> drop None }
    }

    def module? [ +Mirth Namespace -- +Mirth Maybe(Module) ] {
        { Root -> None }
        { Package -> drop None }
        { Module -> Some }
        { Tycon -> qname-hard namespace module? }
        { Word -> drop None }
    }

    def tycon? [ Namespace -- Maybe(Tycon) ] {
        { Root -> None }
        { Package -> drop None }
        { Module -> drop None }
        { Tycon -> Some }
        { Word -> drop None }
    }

    def Prim [ +Mirth -- +Mirth Namespace ] {
        Module.Prim Namespace.Module
    }

    def >Str [ +Mirth Namespace -- +Mirth Str ] {
        { Root -> "<root>" }
        { Package -> name >Str }
        { Module -> qname >Str }
        { Tycon -> qname-hard >Str }
        { Word -> qname-hard >Str }
    }

    def mangled [ +Mirth Namespace -- +Mirth Str ] {
        { Root -> "__root__" }
        { Package -> name mangled }
        { Module -> qname mangled }
        { Tycon -> qname-hard mangled }
        { Word -> qname-hard mangled }
    }
}

##################
# Qualified Name #
##################

struct QName {
    namespace:Namespace
    name:Name
    arity:Int
    --
    def Mk [ Namespace Name Int -- QName ] {
        >arity >name >namespace QName
    }

    def == [ QName QName -- Bool ] {
        /QName /QName
        name> name> ==
        arity> arity> == &&
        namespace> namespace> == &&
    }
    def <> [ QName QName -- Bool ] { == not }
    def <  [ +Mirth QName QName -- +Mirth Bool ] { compare lt? }
    def <= [ +Mirth QName QName -- +Mirth Bool ] { compare le? }
    def >  [ +Mirth QName QName -- +Mirth Bool ] { compare gt? }
    def >= [ +Mirth QName QName -- +Mirth Bool ] { compare ge? }
    def compare [ +Mirth QName QName -- +Mirth Comparison ] {
        /QName /QName
        arity> arity>
        name> >Str name> >Str
        namespace> namespace>
        compare dup eq? if(
            drop compare dup eq? if(
                drop compare,
                dip:drop2
            ),
            dip:drop4
        )
    }

    def def-hard? [ +Mirth QName -- +Mirth Maybe(Def) ] { dup name defs lookup(qname-hard ==) }
    def defined-hard? [ +Mirth QName -- +Mirth Bool ] { def-hard? some? }
    def undefined-hard? [ +Mirth QName -- +Mirth Bool ] { def-hard? none? }

    def def-soft? [ +Mirth QName -- +Mirth Maybe(Def) ] { dup name defs dip(Some) lookup(qname-soft ==) }
    def defined-soft? [ +Mirth QName -- +Mirth Bool ] { def-soft? some? }
    def undefined-soft? [ +Mirth QName -- +Mirth Bool ] { def-soft? none? }

    def Prim [ +Mirth Str Int -- +Mirth QName ] {
        >arity
        >Name >name
        Namespace.Prim >namespace
        QName
    }

    def QName.>Str [ +Mirth QName -- +Mirth Str ] {
        /QName
        namespace> >Str "." cat
        name> >Str cat
        arity> dup 0= if(drop, dip:"/" show cat cat)
    }

    def(QName.to-module-path, QName +World +Mirth -- Path +World +Mirth,
        dup namespace match(
            Package ->
                dup path-or-search
                unwrap("False path defined for package "
                    swap name >Str fatal-error!)
                nip swap name >Str ".mth" cat >Path rdip:join,
            _ -> drop "expected module name in QName.to-module-path" fatal-error!
        ))
    def(QName.mangled, +Mirth QName -- +Mirth Str, QName ->
        namespace> mangled "_" cat
        name> mangled cat
        arity> dup 0> if(dip:"_" show cat cat, drop))
}

###############
# Dotted Name #
###############

struct DName {
    Maybe(Name) List+(Name)
    --
    def root? [ DName -- Maybe(Name) ] { /DName drop }
    def parts [ DName -- List+(Name) ] { /DName nip }
    def last-name [ DName -- Name ] { parts last }
    def penultimate-name? [ DName -- Maybe(Name) ] {
        /DName unsnoc drop last if-some(
            nip Some,
            id
        )
    }
    def is-relative? { root? none? }
}
