module mirth.name

import std.prelude
import std.byte
import std.str
import std.list
import std.maybe
import std.path
import std.world
import std.buffer
import mirth.def
import mirth.module
import mirth.package
import mirth.tycon
import mirth.label
import mirth.word
import mirth.mirth

#########
# Names #
#########

table(Name)
field(Name.~Str, Name, Str)
field(Name.~defs, Name, List(Def))
field(Name.~label, Name, Label)

def(Name.>Str, +Mirth Name -- +Mirth Str, ~Str @)
def Name.name; [ +Mirth +Str Name -- +Mirth +Str ] { rdip:>Str ; }

def(Name.defs, +Mirth Name -- +Mirth List(Def), ~defs @)

field(Name.~mangled, Name, Str)
def Name.mangled  [ +Mirth Name -- +Mirth Str ] { dup ~mangled memoize(dup >Str zencode) nip }
def Name.mangled; [ +Mirth +Str Name -- +Mirth +Str ] { rdip:mangled ; }

def(Name.=, Name Name -- Bool, both(Name.index) =)


struct +NameHashMap {
    +buffer: +Buffer
    --
    def new [ -- +NameHashMap ] { 
        0x80000 >Size +Buffer.new >+buffer +NameHashMap
    }
    def rdrop [ +NameHashMap -- ] {
        /+NameHashMap +buffer> rdrop
    }

    def name-id@ [ +NameHashMap Hash -- +NameHashMap Int ] {
        name-index +buffer:@I64 >Int
    }
    def name-id! [ +NameHashMap I64 Hash -- +NameHashMap ] {
        name-index +buffer:!I64
    }
}


struct Hash {
    U64
    --
    inline def >U64 [ Hash -- U64 ] { /Hash }
    inline def >Nat [ Hash -- Nat ] { >U64 >Nat }
    def next [ Hash -- Hash ] { /Hash 1u64 add-wrap Hash }

    def name-index [ Hash -- Nat ] { >U64 >U16-wrap >Nat }
    def name-offset [ Hash -- Offset ] { name-index |I64| * offset }
    def name@ [ +Mirth Hash -- +Mirth Maybe(Name) ] {
        +namehashmap:name-id@
        dup 0= if(drop None, >TableIndex-clamp Name.from-index Some)
    }
    def name! [ +Mirth Name Hash -- +Mirth ] {
        dip(Name.index >Int >I64-clamp)
        +namehashmap:name-id!
    }

    def keep-going? [ +Mirth Str Hash -- +Mirth Str Hash Bool ] {
        dup name@ if?(
            >Str over2 <>,
            False
        )
    }
}

||| Calculate a hash for string.
def Str.hash [ Str -- Hash ] {
    0u64 swap bytes-for(
        >U64 0x100020040101u64 mul-wrap
        over 7u64 lshift xor
        swap 29u64 rshift xor
    )
    Hash
}

def Name.hash [ +Mirth Name -- +Mirth Hash ] {
    >Str hash
}

def Name.search [ +Mirth Str -- +Mirth Maybe(Name) ] {
    dup hash
    while(keep-going?, next)
    nip name@
}

def Str.>Name [ +Mirth Str -- +Mirth Name ] {
    dup hash
    while(keep-going?, next)
    dup name@ if?(
        dip(drop2),

        Name.alloc!
        tuck swap name!
        tuck ~Str !
        L0 over ~defs !
    )
}

||| Add string to name, creating new name.
def(Name.cat, +Mirth Name Str -- +Mirth Name,
    dip(>Str) cat >Name)

def(Name.head, +Mirth Name -- +Mirth Byte, >Str dip(0 Offset) byte@)
def(Name.tail-head, +Mirth Name -- +Mirth Byte, >Str dip(1 Offset) byte@)
def(Name.tail, +Mirth Name +Unsafe -- +Mirth Name +Unsafe, rdip:>Str dip(1 bytes) drop-bytes rdip:>Name)

def(Name.can-be-relative?, +Mirth Name -- +Mirth Bool, head is-upper not)
def(Name.could-be-label-name?, +Mirth Name -- +Mirth Bool, dup head is-lower or(dup head Byte.B'+' = and(dup tail-head is-lower)) nip)
def(Name.could-be-type, +Mirth Name -- +Mirth Bool, head is-alpha)
def(Name.could-be-pattern-var?, +Mirth Name -- +Mirth Bool, head is-lower)
def(Name.could-be-type-var, +Mirth Name -- +Mirth Bool, head is-lower)
def(Name.could-be-type-con, +Mirth Name -- +Mirth Bool, head is-upper)
def(Name.is-type-hole, +Mirth Name -- +Mirth Bool, dup head Byte.B'?' = swap tail-head dup Byte.BNUL = swap is-lower or and)
def(Name.is-underscore, +Mirth Name -- +Mirth Bool, dup head Byte.B'_' = swap tail-head Byte.BNUL = and)
def(Name.could-be-stack-var, +Mirth Name -- +Mirth Bool, dup head Byte.B'*' = swap tail-head is-lower and)
def(Name.could-be-resource-var, +Mirth Name -- +Mirth Bool, dup head Byte.B'+' = swap tail-head is-lower and)
def(Name.could-be-resource-con, +Mirth Name -- +Mirth Bool, dup head Byte.B'+' = swap tail-head is-upper and)

def Name.could-be-constructor [ +Mirth Name -- +Mirth Bool ] {
    dup head match(
        B'+' -> tail-head is-upper,
        _ -> nip is-upper,
    )
}

#############
# Namespace #
#############

data Namespace {
    Root
    Package [ Package ]
    Module [ Module ]
    Tycon [ Tycon ]
    Word [ Word ]
    --

    def =  [ Namespace Namespace -- Bool ] {
        { Root -> match(Root -> True, _ -> drop False) }
        { Package -> swap match(Package -> swap =, _ -> drop2 False) }
        { Module -> swap match(Module -> swap =, _ -> drop2 False) }
        { Tycon -> swap match(Tycon -> swap =, _ -> drop2 False) }
        { Word -> swap match(Word -> swap =, _ -> drop2 False) }
    }

    def compare [ +Mirth Namespace Namespace -- +Mirth Comparison ] {
        on2:qname compare:compare
    }

    def qname [ +Mirth Namespace -- +Mirth Maybe(QName) ] {
        { Root -> None }
        { Package -> qname Some }
        { Module -> qname Some }
        { Tycon -> qname-hard Some }
        { Word -> qname-hard Some }
    }

    def package? [ +Mirth Namespace -- +Mirth Maybe(Package) ] {
        { Root -> None }
        { Package -> Some }
        { Module -> package Some }
        { Tycon -> qname-hard namespace package? }
        { Word -> drop None }
    }

    def module? [ +Mirth Namespace -- +Mirth Maybe(Module) ] {
        { Root -> None }
        { Package -> drop None }
        { Module -> Some }
        { Tycon -> qname-hard namespace module? }
        { Word -> drop None }
    }

    def tycon? [ Namespace -- Maybe(Tycon) ] {
        { Root -> None }
        { Package -> drop None }
        { Module -> drop None }
        { Tycon -> Some }
        { Word -> drop None }
    }

    def Prim [ +Mirth -- +Mirth Namespace ] {
        Module.Prim Namespace.Module
    }

    def name; [ +Mirth +Str Namespace -- +Mirth +Str ] {
        { Root -> "<root>"; }
        { Package -> name; }
        { Module -> rdip:name name; }
        { Tycon -> rdip:name name; }
        { Word -> rdip:name name; }
    }

    def qname; [ +Mirth +Str Namespace -- +Mirth +Str ] {
        { Root -> "<root>"; }
        { Package -> name; }
        { Module -> rdip:qname qname; }
        { Tycon -> rdip:qname-hard qname; }
        { Word -> rdip:qname-hard qname; }
    }

    def mangled [ +Mirth Namespace -- +Mirth Str ] { str:mangled; }
    def mangled; [ +Mirth +Str Namespace -- +Mirth +Str ] {
        { Root -> "__root__"; }
        { Package -> rdip:name mangled; }
        { Module -> rdip:qname mangled; }
        { Tycon -> rdip:qname-hard mangled; }
        { Word -> rdip:qname-hard mangled; }
    }
}

##################
# Qualified Name #
##################

struct QName {
    namespace:Namespace
    name:Name
    arity:Int
    --
    def Mk [ Namespace Name Int -- QName ] {
        >arity >name >namespace QName
    }

    def =  [ QName QName -- Bool ] {
        /QName /QName
        name> name> =
        arity> arity> = and
        namespace> namespace> = and
    }
    def <> [ QName QName -- Bool ] { = not }
    def <  [ +Mirth QName QName -- +Mirth Bool ] { compare lt? }
    def <= [ +Mirth QName QName -- +Mirth Bool ] { compare le? }
    def >  [ +Mirth QName QName -- +Mirth Bool ] { compare gt? }
    def >= [ +Mirth QName QName -- +Mirth Bool ] { compare ge? }
    def compare [ +Mirth QName QName -- +Mirth Comparison ] {
        /QName /QName
        arity> arity>
        name> >Str name> >Str
        namespace> namespace>
        compare dup eq? if(
            drop compare dup eq? if(
                drop compare,
                dip:drop2
            ),
            dip:drop4
        )
    }

    def def-hard? [ +Mirth QName -- +Mirth Maybe(Def) ] { dup name defs lookup(qname-hard =) }
    def defined-hard? [ +Mirth QName -- +Mirth Bool ] { def-hard? some? }
    def undefined-hard? [ +Mirth QName -- +Mirth Bool ] { def-hard? none? }

    def def-soft? [ +Mirth QName -- +Mirth Maybe(Def) ] { dup name defs dip(Some) lookup(qname-soft =) }
    def defined-soft? [ +Mirth QName -- +Mirth Bool ] { def-soft? some? }
    def undefined-soft? [ +Mirth QName -- +Mirth Bool ] { def-soft? none? }

    def Prim [ +Mirth Str Int -- +Mirth QName ] {
        >arity
        >Name >name
        Namespace.Prim >namespace
        QName
    }

    def name; [ +Mirth +Str QName -- +Mirth +Str ] {
        name name;
    }

    def name/arity; [ +Mirth +Str QName -- +Mirth +Str ] {
        dup name;
        arity dup 0> then("/"; dup int;) drop
    }

    def qname; [ +Mirth +Str QName -- +Mirth +Str ] {
        dup namespace qname; "."; name/arity;
    }

    def mangled [+Mirth QName -- +Mirth Str] { str:mangled; }
    def mangled; [ +Mirth +Str QName -- +Mirth +Str ] {
        /QName
        namespace> mangled; "_";
        name> mangled;
        arity> dup 0> if("_"; int;, drop)
    }

    def(to-module-path, QName +World +Mirth -- Path +World +Mirth,
        dup namespace match(
            Package ->
                dup path-or-search
                unwrap("False path defined for package "
                    swap name >Str fatal-error!)
                nip swap name >Str ".mth" cat >Path rdip:join,
            _ -> drop "expected module name in QName.to-module-path" fatal-error!
        ))
}

###############
# Dotted Name #
###############

struct DName {
    Maybe(Name) Nest(Name)
    --
    def root? [ DName -- Maybe(Name) ] { /DName drop }
    def parts [ DName -- Nest(Name) ] { /DName nip }
    def last-name [ DName -- Name ] { parts last }
    def penultimate-name? [ DName -- Maybe(Name) ] {
        /DName unsnoc drop last if?(
            nip Some,
            id
        )
    }
    def is-relative? { root? none? }
}
