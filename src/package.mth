module mirth.package

import std.prelude
import std.path
import std.maybe
import std.str
import std.list
import std.world
import mirth.name
import mirth.def
import mirth.mirth

table(Package)
field(Package.~name, Package, Name)
field(Package.~path, Package, Maybe(Path))

def(Package.name, Package -- Name, ~name @)
def(Package.qname, Package -- QName, Namespace.Root swap name 0 QName.Mk)
def(Package.path, Package -- Maybe(Path), ~path @)

def(Package.std, +Mirth -- +Mirth Package, builtin std)
def(init-packages!, +Mirth -- +Mirth,
    builtin std
    "std" >Name over ~name !
    None swap ~path !)

def(Package.path-or-search, +World +Mirth Package -- +World +Mirth Maybe(Path),
    dup path match(
        Some -> nip Some,
        None ->
            package-search-paths
            map(over name >Str >Path rdip:join)
            find(rdip:is-directory?)
            tuck swap ~path !
    ))

def(Package.path!, +Mirth Path Package -- +Mirth,
    tuck path match(
        Some ->
            dup2 == if(
                drop3,
                Str(
                    "Tried to set different path for the same package " ;
                    "(package = " ; rotl name >Str ;
                    ", path 1 = " ; swap /Path show;
                    ", path 2 = " ; /Path show;
                    ")." ;
                ) fatal-error!
            ),
        None ->
            Some swap ~path !
    ))

def(Package.new!, +Mirth Maybe(Path) Name -- +Mirth Package,
    Package.alloc!
    tuck ~name !
    tuck ~path !
    dup Def.Package register)

def(Package.new-or-path!, +Mirth Path Name -- +Mirth Package,
    dup Package.find match(
        Some -> nip tuck path!,
        None -> dip(Some) Package.new!
    ))

def(Package.find, +Mirth Name -- +Mirth Maybe(Package),
    Namespace.Root swap 0 QName.Mk def-soft? bind(package?))

def(Package.find-or-new!, +Mirth Name -- +Mirth Package,
    dup Package.find unwrap(dup None swap Package.new!) nip)

def(Package.==, Package Package -- Bool, both(index) ==)
