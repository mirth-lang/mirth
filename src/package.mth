module mirth.package

import std.prelude
import std.path
import std.maybe
import std.str
import std.list
import std.world
import mirth.name
import mirth.def
import mirth.mirth

table +Mirth |- Package {
    name: Name
    path: Maybe(Path)
    --
    def qname [ +Mirth |- Package -- QName ] { Namespace.Root swap name 0 QName.Mk }
    def name; [ +Mirth +Str |- Package -- ] { name name; }
    def Std [ +Mirth |- Package ] { builtin std }

    def path-or-search [ +World +Mirth |- Package -- Maybe(Path) ] {
        dup path match(
            { Some -> nip Some }
            { None ->
                package-search-paths
                map(over name >Str >Path rdip:join)
                find(rdip:is-directory?)
                tuck swap path!
            }
        )
    }

    def try-path! [ +Mirth |- Path Package -- ] {
        tuck path match(
            Some ->
                dup2 = if(
                    drop3,
                    Str(
                        "Tried to set different path for the same package " ;
                        "(package = " ; rotl name;
                        ", path 1 = " ; swap /Path repr;
                        ", path 2 = " ; /Path repr;
                        ")." ;
                    ) fatal-error!
                ),
            None ->
                Some swap path!
        )
    }

    def New! [ +Mirth |- Maybe(Path) Name -- Package ] {
        >name >path
        Package.Make!
        dup Def.Package register
    }

    def New-Or-Path! [ +Mirth |- Path Name -- Package ] {
        dup Package.Find? match {
            { Some -> nip tuck try-path! }
            { None -> dip(Some) Package.New! }
        }
    }

    def Find? [ +Mirth |- Name -- Maybe(Package) ] {
        Namespace.Root swap 0 QName.Mk def-soft? bind(package?)
    }

    def Find-Or-New! [ +Mirth |- Name -- Package ] {
        dup Package.Find? unwrap(dup None swap Package.New!) nip
    }
}

def +Mirth.init-packages! [ +Mirth |- ] {
    builtin std
    "std" Name over name!
    None over path!
    Def.Package register
}
