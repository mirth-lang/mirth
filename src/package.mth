module(mirth.package)

import(std.prelude)
import(std.path)
import(std.maybe)
import(std.str)
import(std.list)
import(std.world)
import(mirth.name)
import(mirth.def)
import(mirth.mirth)

table(Package)
field(Package.~name, Package, Name)
field(Package.~path, Package, Maybe(Path))

def(Package.name, Package -- Name, ~name @)
def(Package.qname, Package -- QName, NAMESPACE_ROOT swap name QNAME0)
def(Package.path, Package -- Maybe(Path), ~path @)

var(PACKAGE_SEARCH_PATH, List(Path))

def(Package.std, +Mirth -- +Mirth Package, builtin std)
def(init-packages!, +Mirth -- +Mirth,
    builtin std
    "std" >Name over ~name !
    None swap ~path !)

def(Package.path-or-search, +World Package -- +World Maybe(Path),
    dup path match(
        Some -> nip Some,
        None ->
            PACKAGE_SEARCH_PATH memoize("lib" Path L1)
            map(over name >Str >Path join)
            find(is-directory?)
            tuck swap ~path !
    ))

def(Package.path!, Path Package --,
    tuck path match(
        Some ->
            dup2 == if(
                drop3,
                Str(
                    "Tried to set different path for the same package." ;
                    "\n\tPackage: " ; rotl name >Str ;
                    "\n\tPath 1: " ; swap /Path show;
                    "\n\tPath 2: " ; /Path show;
                ) panic!
            ),
        None ->
            Some swap ~path !
    ))

def(Package.new!, +Mirth Maybe(Path) Name -- +Mirth Package,
    Package.alloc!
    tuck ~name !
    tuck ~path !
    dup DefPackage register)

def(Package.new-or-path!, +Mirth Path Name -- +Mirth Package,
    dup Package.find match(
        Some -> nip tuck path!,
        None -> dip(Some) Package.new!
    ))

def(Package.find, +Mirth Name -- +Mirth Maybe(Package),
    NAMESPACE_ROOT swap QNAME0 def-soft? bind(package?))

def(Package.find-or-new!, +Mirth Name -- +Mirth Package,
    dup Package.find unwrap(dup None swap Package.new!) nip)

def(Package.==, Package Package -- Bool, both(index) ==)
