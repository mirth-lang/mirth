module mirth.word

import std.prelude
import std.maybe
import std.str
import std.list
import mirth.mirth
import mirth.token
import mirth.var
import mirth.name
import mirth.def
import mirth.type
import mirth.arrow
import mirth.elab

struct Param {
    var: Var
    default: Maybe(Token)
}

table +Mirth |- Word {
    doc: Maybe(Str)
    name: Name
    arity: Nat
    head: Token
    body: Token
    sig?: Maybe(Token)
    prefer-inline?: Bool { False }
    inferring-type?: Bool { False }
    word-home-index: Int { 0 }
    cname: Str { @self qname-hard mangled Str("mw_"; ;) }
    ~qname: Prop(QName)
    ~ctx-type: Prop([Ctx ArrowType])
    ~params: Prop(List(Param))
    ~arrow: Prop(Arrow)
    --

    def qname-soft [ +Mirth |- Word -- Maybe(QName) ] { ~qname @? bind(ready?) }
    def qname-hard [ +Mirth |- Word -- QName ] { ~qname force! }
    def namespace-soft [ +Mirth |- Word -- Maybe(Namespace) ] { qname-soft map(namespace) }
    def namespace-hard [ +Mirth |- Word -- Namespace ] { qname-hard namespace }
    def params [ +Mirth |- Word -- List(Param) ] { ~params dup mut-is-set if(force!, drop List.Nil) }
    def arrow  [ +Mirth |- Word -- Arrow ] { ~arrow force! }

    def New! [ +Mirth |-
        head:Token sig?:Maybe(Token) body:Token
        name:Name arity:Nat doc:Maybe(Str)
        -- Word
    ] {
        Word.Make!
        dup Def.Word register
    }

    def Build!(fnamespace,fctxtype,farrow) [ +Mirth self:t |-
        ( Namespace, Ctx ArrowType, +AB word:Word params:List(Var) |-)
        doc:Maybe(Str) head:Token body:Token Str List(Str) -- Word
    ] {
        dup len >arity
        swap Name >name
        None >sig?
        Word.New! >word

        @self @word dup PropLabel.WordQName prop2(
            dip(!self(fnamespace >namespace) drop)
            dup arity >Int >arity name >name QName
        ) @word ~qname !

        @self @word PropLabel.WordType prop(
            !self(fctxtype pack2) drop
        ) @word ~ctx-type !

        @word @word PropLabel.WordParams prop2(
            type dom swap
            reverse map(
                swap force-cons?! unwrap("[compiler bug] word-new! expected word parameter type in domain." fatal-error!)
                unpack2 arrow? unwrap("[compiler bug] word-new! expected word parameter type to be an arrow type." fatal-error!)
                rotl Name Var.NewAutoRun! >var None >default Param
            ) reverse
            nip
        ) @word ~params !

        @self @word dup PropLabel.WordArrow prop2(
            >word >self
            @word params map(.var) >params
            @word ab-build-word-arrow!(dip(
                @word body ab-token!
                @params empty? if(
                    farrow,
                    @params @word type cod ab-lambda!(farrow)
                )
            ))
            word> params> self> drop3
        ) @word ~arrow !

        word>
    }


    def ctx-type [ +Mirth |- Word -- Ctx ArrowType ] { ~ctx-type force! unpack2 }
    def ctx      [ +Mirth |- Word -- Ctx ] { ctx-type drop }
    def type     [ +Mirth |- Word -- ArrowType ] { ctx-type nip }

    def make-inline! [ +Mirth |- Word -- ] { dip:True prefer-inline?! }

    def compare [ +Mirth |- Word Word -- Comparison ] { on2:index compare }
    def increment-word-home-index! [ +Mirth |- Word -- Int ] {
        sip(word-home-index dup 1+) word-home-index!
    }
}
