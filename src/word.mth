module(mirth.word)

import(std.prelude)
import(std.maybe)
import(std.str)
import(std.list)
import(mirth.mirth)
import(mirth.token)
import(mirth.var)
import(mirth.name)
import(mirth.def)
import(mirth.type)
import(mirth.arrow)

table(Word)
field(Word.~name, Word, Name)
field(Word.~arity, Word, Int)
field(Word.~qname, Word, Prop(QName))
field(Word.~head, Word, Token)
field(Word.~sig?, Word, Maybe(Token))
field(Word.~body, Word, Token)
field(Word.~ctx-type, Word, Prop([Ctx ArrowType]))
field(Word.~params, Word, Prop(List(Var)))
field(Word.~arrow, Word, Prop(Arrow))
field(Word.~prefer-inline?, Word, Bool)
field(Word.~cname, Word, Str)
field(Word.~inferring-type?, Word, Bool)

def(Word.qname-soft, Word -- Maybe(QName), ~qname @? bind(ready?))
def(Word.qname-hard, Word +Mirth -- QName +Mirth, ~qname force!)
def(Word.namespace-soft, Word +Mirth -- Maybe(Namespace) +Mirth, qname-soft map(namespace))
def(Word.namespace-hard, Word +Mirth -- Namespace +Mirth, qname-hard namespace)
def(Word.name, Word -- Name, ~name @)
def(Word.head, Word -- Token, ~head @)
def(Word.sig?, Word -- Maybe(Token), ~sig? @)
def(Word.body, Word -- Token, ~body @)
def(Word.arity, Word -- Int, ~arity @)
def(Word.params, Word +Mirth -- List(Var) +Mirth, ~params force!)
def(Word.arrow, Word +Mirth -- Arrow +Mirth, ~arrow force!)
def(Word.inferring-type?, Word -- Bool,
    ~inferring-type? @? unwrap(False))

def(Word.cname, Word +Mirth -- Str +Mirth,
    dup ~cname memoize(
        dup qname-hard mangled Str("mw_"; ;)
    ) nip)

def(Word.ctx-type, Word +Mirth -- Ctx ArrowType +Mirth, ~ctx-type force! unpack2)
def(Word.ctx, Word +Mirth -- Ctx +Mirth, ctx-type drop)
def(Word.type, Word +Mirth -- ArrowType +Mirth, ctx-type nip)

def(Word.prefer-inline?, Word -- Bool, ~prefer-inline? @? unwrap(False))

def(Word.new!,
    head:Token sig?:Maybe(Token) body:Token
    name:Name arity:Int +Mirth -- Word +Mirth,
    Word.alloc!
    name> over ~name !
    head> over ~head !
    body> over ~body !
    arity> over ~arity !
    sig?> over ~sig? !
    dup DefWord register)

def(Word.==, Word Word -- Bool, both(index) ==)
def(Word.compare, Word Word -- Comparison, both(index) compare)

field(Word.~num-blocks, Word, Int)
def(Word.inc-num-blocks!, Word -- Int,
    dup ~num-blocks @? match(
        Some -> tuck 1+ swap ~num-blocks !,
        None -> 1 swap ~num-blocks ! 0
    ))
