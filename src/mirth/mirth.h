/* Mirth C99 header. */

#if defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__NT__)
#define MIRTH_WINDOWS 1
#elif defined(__linux__)
#define MIRTH_LINUX 1
#elif defined(__APPLE__)
#define MIRTH_MACOS 1
#else
#error \"Platform not supported.\"
#endif

#include <stdint.h>
#include <stdbool.h>

typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
typedef uint64_t u64;
typedef int8_t i8;
typedef int16_t i16;
typedef int32_t i32;
typedef int64_t i64;
typedef uintptr_t usize;

extern void* mmap(void*, int, int, int, int, int);
extern void* malloc(usize);
extern void* calloc(usize, usize);
extern void* realloc(void*, usize);
extern void* memset(void*, int, usize);
extern void* memcpy(void*, const void*, usize);
extern void free(void*);
extern usize strlen(const char*);
extern int read(int, void*, usize);
extern int write(int, void*, usize);
extern int close(int);
extern int open(void*, int, int);
extern int strcmp(const char*, const char*);
extern void exit(int);

typedef enum value_tag_t {
   VT_U64 = 0x00,
   VT_U32 = 0x01,
   VT_U21 = 0x02,
   VT_U16 = 0x03,
   VT_C16 = 0x90,
   VT_C21 = 0x96,
   VT_C32 = 0xA0,
   VT_C64 = 0xC0,
} value_tag_t;

typedef void (*fnptr)(void);

typedef union value_payload_t {
  void* vp_ptr;
  u8 vp_u8;
  u16 vp_u16;
  u32 vp_u32;
  u64 vp_u64;
  i8 vp_i8;
  i16 vp_i16;
  i32 vp_i32;
  i64 vp_i64;
  bool vp_bool;
  fnptr vp_fnptr;
  struct value_t* vp_valueptr;
} value_payload_t;

typedef struct value_t {
   value_payload_t payload;
   value_tag_t tag;
} value_t;

typedef struct cell_t {
   u32 refs;
   bool freecdr;
   value_t car;
   value_t cdr;
} cell_t;

#define STACK_SIZE 0x1000
static usize stack_counter = STACK_SIZE;
static value_t stack [STACK_SIZE] = {0};

#define HEAP_SIZE 0x80000
#define HEAP_MASK 0x7FFFF
static usize heap_next = 1;
static usize heap_count = 0;
static cell_t heap [HEAP_SIZE] = {0};

static int global_argc;
static char** global_argv;

/* C99 generated by Mirth compiler: */
