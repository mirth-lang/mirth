module(mirth.var)

import(std.prelude)
import(std.maybe)
import(mirth.name)
import(mirth.type)

#######
# VAR #
#######

# mirth/data/var
table(Var)
field(Var.~name, Var, Name)
field(Var.~type, Var, Type)
field(Var.~auto-run?, Var, Bool) # run variable by default

def(Var.name, Var -- Name, ~name @)
def(Var.type, Var -- Type, ~type @)
def(Var.auto-run?, Var -- Bool, ~auto-run? @)

def(Var.==, Var Var -- Bool, both(.id) ==)
def(Var.trace!, Var --, name trace!)
def(Var.is-type?, Var -- Bool, type prim? and-some(PRIM_TYPE_TYPE ==))
def(Var.is-stack?, Var -- Bool, type prim? and-some(PRIM_TYPE_STACK ==))
def(Var.is-resource?, Var -- Bool, type prim? and-some(PRIM_TYPE_RESOURCE ==))
def(Var.is-physical?, Var -- Bool, type is-physical?)

def(Var.new!, Type Name -- Var,
    Var.alloc!
    tuck ~name !
    tuck ~type !
    F over ~auto-run? !)

def(Var.new-auto-run!, Type Name -- Var,
    Var.new!
    T over ~auto-run? !)
