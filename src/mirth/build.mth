# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

import base/io
import base/nat
import base/str
import base/unit
import base/list
import base/path
import base/maybe
import base/result
import base/map

import mirth/pkg
import mirth/mod
import mirth/loc
import mirth/token
import mirth/lexer
import mirth/syntax
import mirth/parser
import mirth/elab

export mirth/build
  type +IO
  type Path
  buildPath : Path -- Int +IO
end

findMods : Pkg -- List(Mod) +IO
findMods = $(
  dup pkg->path listfiles
  filter(pathHasExtension?("mth"))
  formap(dip(dup) pkgMod) nip
)

buildPkgMods : Maybe(Pkg) List(Mod) -- Int +IO
buildPkgMods = $(
  dip(dup maybe("no pkg", pkg->str) print)
  nil? if("No modules found." panic, id)
  dip(mapNil)
  for(
    dup mod->str "Reading " swap <> trace
    dup mod->path read
    "Lexing." trace
    dip(dup) tokenize result(
      lexerError->str panic,
      "Parsing." trace
      parseModule runParser
      result(
        syntaxError->str panic,
        mapSet
      )
    )
  )
  dip(maybe(n0 anonPkg, id))
  runElabPackage eresult(
    dip(for(eerror->str trace)) for(ewarning->str trace) 1,
    nip for(ewarning->str trace) 0
  )
)

buildPkg : Pkg -- Int +IO
buildPkg = dup dip(Some) findMods buildPkgMods

buildMod : Mod -- Int +IO
buildMod = dip(None) nil snoc buildPkgMods

buildPath : Path -- Int +IO
buildPath = $(
  cond(
    dup isfile -> pathMod buildMod,
    dup isdir  -> pathPkg buildPkg,
    "mirth: Path does not exist: " swap path->str <> trace 1
  )
)
