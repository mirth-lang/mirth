module(mirth.analysis.need)
import(prelude)
import(data.list)
import(data.maybe)
import(data.stack)
import(mirth.resource)
import(mirth.data.arrow)
import(mirth.data.word)
import(mirth.data.match)
import(resource.set)

########
# NEED #
########

data(Need,
    NEED_WORD -> Word,
    NEED_BLOCK -> Block)

def(Need>Int, Need -- Int,
    NEED_WORD  -> Word.id 2 *,
    NEED_BLOCK -> Block.id 2 * 1 +)

#########
# NEEDS #
#########

data(+Needs, +NEEDS -> Stack(Need) +Set(Need))
def(-NEEDS, +Needs -- Stack(Need) +Set(Need), +NEEDS -> id)
def(+Needs~Stack(f), (*a Stack(Need) -- *b Stack(Need)) *a +Needs -- *b +Needs,
    -NEEDS rdip(f) +NEEDS)
def(+Needs~Set(f), (*a +Set(Need) -- *b +Set(Need)) *a +Needs -- *b +Needs,
    -NEEDS dip(f) +NEEDS)

def(+Needs.new, -- +Needs, STACK_NIL +Set.new(Need>Int) +NEEDS)
def(+Needs.rdrop, +Needs --, -NEEDS rdrop drop)

def(for-needed-words(f), (*a Word -- *a) *a +Needs -- *a +Needs,
    Word.for(dup needed? if(rdip(f), drop)))
def(for-needed-blocks(f), (*a Block -- *a) *a +Needs -- *a +Needs,
    Block.for(dup needed? if(rdip(f), drop)))

def(Need+Needs.needed?, Need +Needs -- Bool +Needs, ~Set(member?))
def(Word+Needs.needed?, Word +Needs -- Bool +Needs, NEED_WORD needed?)
def(Block+Needs.needed?, Block +Needs -- Bool +Needs, NEED_BLOCK needed?)

def(Need+Needs.need!, Need +Needs -- +Needs,
    dup needed? else(
        dup ~Set(insert!)
        dup ~Stack(STACK_CONS)
        expect!(dup needed?, "needed? fail")
    ) drop)
def(Word+Needs.need!, Word +Needs -- +Needs, NEED_WORD need!)
def(Block+Needs.need!, Block +Needs -- +Needs, NEED_BLOCK need!)

def(determine-arrow-needs!, Arrow +Needs -- +Needs,
    run! determine-transitive-needs!)
def(determine-transitive-needs!, +Needs -- +Needs,
    while-some(~Stack(uncons), run!))

def(Need+Needs.run!, Need +Needs -- +Needs,
    NEED_BLOCK -> run!,
    NEED_WORD -> run!)

def(Arg+Needs.run!, Arg +Needs -- +Needs,
    ARG_BLOCK -> run!)
def(Block+Needs.run!, Block +Needs -- +Needs, arrow run!)
def(Word+Needs.run!, Word +Needs -- +Needs, arrow run!)
def(Arrow+Needs.run!, Arrow +Needs -- +Needs, atoms for(run!))
def(Atom+Needs.run!, Atom +Needs -- +Needs, sip(args) op run!)
def(Op+Needs.run!, List(Arg) Op +Needs -- +Needs,
    OP_NONE -> drop,
    OP_INT -> drop2,
    OP_STR -> drop2,
    OP_CONSTANT -> drop2,
    OP_WORD -> need! push-args!,
    OP_EXTERNAL -> drop push-args!,
    OP_BUFFER -> drop push-args!,
    OP_VARIABLE -> drop push-args!,
    OP_FIELD -> drop push-args!,
    OP_TAG -> drop push-args!,
    OP_PRIM -> run!,
    OP_MATCH -> nip run!,
    OP_LAMBDA -> nip run!,
    OP_VAR -> drop2,
    OP_BLOCK -> nip push!)
def(Prim+Needs.run!, List(Arg) Prim +Needs -- +Needs,
    PRIM_CORE_DIP -> match(L1 -> run!, _ -> push-args!),
    PRIM_CORE_RDIP -> match(L1 -> run!, _ -> push-args!),
    PRIM_CORE_IF -> match(L2 -> dip(run!) run!, _ -> push-args!),
    PRIM_CORE_WHILE -> match(L2 -> dip(run!) run!, _ -> push-args!),
    _ -> drop push-args!)
def(Match+Needs.run!, Match +Needs -- +Needs, cases for(run!))
def(Case+Needs.run!, Case +Needs -- +Needs, body run!)
def(Lambda+Needs.run!, Lambda +Needs -- +Needs, body run!)

def(+Needs.push-args!, List(Arg) +Needs -- +Needs, for(push!))
def(Arg+Needs.push!, Arg +Needs -- +Needs,
    ARG_BLOCK -> push!)
def(Block+Needs.push!, Block +Needs -- +Needs,
    dup to-run-var match(
        SOME -> drop2,
        NONE -> need!
    ))
