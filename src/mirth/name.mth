module(mirth.name)

import(std.prelude)
import(std.byte)
import(std.str)
import(std.list)
import(std.lazy)
import(std.maybe)
import(std.path)
import(posix.posix)
import(mirth.def)
import(mirth.module)
import(mirth.package)
import(mirth.tycon)
import(mirth.label)
import(mirth.word)

#########
# Names #
#########

table(Name)
field(Name.~Str, Name, Str)
field(Name.~defs, Name, List(Def))
field(Name.~mangled, Name, Lazy(Str))
field(Name.~label, Name, Label)

def(Name.>Str, Name -- Str, ~Str @)
def(Name.defs, Name -- List(Def), ~defs @)
def(Name.mangled, Name -- Str, ~mangled force!)

def(Name.==, Name Name -- Bool, both(Name.index) ==)

data(Hash, HASH -> Int)
def(Hash.>Int, Hash -- Int, HASH -> id)
def(Int.>Hash, Int -- Hash, HASH_MAX % HASH)

def(HASH_MAX, Int, 0x10000)
buffer(HASH_BUF,   0x80000)
def(hash-name@, Hash -- Maybe(Name),
    >Int 8 * >Offset HASH_BUF unsafe(offset @I64) >Int
    dup 0= if(drop NONE, Name.from-index SOME))
def(hash-name!, Name Hash --,
    dip(Name.index >I64)
    >Int 8 * >Offset HASH_BUF unsafe(offset !I64))

||| Get hash for string.
def(Str.hash, Str -- Hash,
    0 swap bytes-for(>Int 17 * over 7 << ^ swap 27 >> ^)
    >Hash)

def(Name.hash, Name -- Hash, >Str hash)
def(Hash.next, Hash -- Hash, >Int 1+ >Hash)

def(Hash.keep-going?, Str Hash -- Str Hash Bool,
    dup hash-name@ match(
        NONE -> F,
        SOME -> >Str over2 <>
    ))

def(Name.search, Str -- Maybe(Name),
    dup hash
    while(keep-going?, next)
    nip hash-name@)

def(Str.>Name, Str -- Name,
    dup hash
    while(keep-going?, next)
    dup hash-name@ match(
        NONE ->
            Name.alloc!
            tuck swap hash-name!
            tuck ~Str !
            L0 over ~defs !
            dup delay(mangle-compute!) over ~mangled !,
        SOME ->
            dip(drop2)
    ))

||| Add string to name, creating new name.
def(Name.cat, Name Str -- Name,
    dip(>Str) cat >Name)

def(Name.trace!, Name --, >Str trace!)

def(Name.head, Name -- Byte, >Str dip(0 >Offset) byte@)
def(Name.tail-head, Name -- Byte, >Str dip(1 >Offset) byte@)
def(Name.tail, Name -- Name,
    >Str with-data(
        dup 2 >Size >=
        if(unsafe(dip(dip(1 >Offset) offset) 1- Str.copy), drop2 "")
    ) >Name)

def(Name.can-be-relative?, Name -- Bool, head is-upper not)
def(Name.could-be-label-name?, Name -- Bool, head is-lower)
def(Name.could-be-type, Name -- Bool, head is-alpha)
def(Name.could-be-pattern-var?, Name -- Bool, head is-lower)
def(Name.could-be-type-var, Name -- Bool, head is-lower)
def(Name.could-be-type-con, Name -- Bool, head is-upper)
def(Name.is-type-hole, Name -- Bool, dup head B'?' == swap tail-head dup BNUL == swap is-lower || &&)
def(Name.is-underscore, Name -- Bool, dup head B'_' == swap tail-head BNUL == &&)
def(Name.could-be-stack-var, Name -- Bool, dup head B'*' == swap tail-head is-lower &&)
def(Name.could-be-resource-var, Name -- Bool, dup head B'+' == swap tail-head is-lower &&)
def(Name.could-be-resource-con, Name -- Bool, dup head B'+' == swap tail-head is-upper &&)
def(Name.could-be-type-or-resource-con, Name -- Bool, dup could-be-type-con or(dup could-be-resource-con) nip)
def(Name.mangle-compute!, Name -- Str,
    build-str!(>Str bytes-for(
        dup is-alnum if(
            push-byte-ascii!,
            dup B'-' == if(
                drop B'_' push-byte-ascii!,
                B'_' push-byte-ascii!
                to-hexdigits dip(push-byte-ascii!) push-byte-ascii!
                B'_' push-byte-ascii!
            )
        )
    )))

def(Name.lens-like?, Name -- Bool,
    >Str thaw last-byte BCOLON == freeze drop)

#############
# Namespace #
#############

data(Namespace,
    NAMESPACE_ROOT,
    NAMESPACE_PACKAGE -> Package,
    NAMESPACE_MODULE -> Module,
    NAMESPACE_TYCON -> Tycon,
    NAMESPACE_WORD -> Word)

def(Namespace.==, Namespace Namespace -- Bool,
    NAMESPACE_ROOT -> match(NAMESPACE_ROOT -> T, _ -> drop F),
    NAMESPACE_PACKAGE -> swap match(NAMESPACE_PACKAGE -> swap ==, _ -> drop2 F),
    NAMESPACE_MODULE -> swap match(NAMESPACE_MODULE -> swap ==, _ -> drop2 F),
    NAMESPACE_TYCON -> swap match(NAMESPACE_TYCON -> swap ==, _ -> drop2 F),
    NAMESPACE_WORD -> swap match(NAMESPACE_WORD -> swap ==, _ -> drop2 F))

def(Namespace.compare, Namespace Namespace -- Comparison,
    NAMESPACE_ROOT -> match(NAMESPACE_ROOT -> EQ, _ -> drop LT),
    NAMESPACE_PACKAGE -> swap match(
        NAMESPACE_ROOT -> drop GT,
        NAMESPACE_PACKAGE -> name >Str swap name >Str compare,
        _ -> drop2 LT
    ),
    _ -> match(
        NAMESPACE_ROOT -> drop GT,
        NAMESPACE_PACKAGE -> drop2 GT,
        _ -> qname unwrap swap qname unwrap compare
    ))

def(Namespace.qname, Namespace -- Maybe(QName),
    NAMESPACE_ROOT -> NONE,
    NAMESPACE_PACKAGE -> qname SOME,
    NAMESPACE_MODULE -> qname SOME,
    NAMESPACE_TYCON -> qname SOME,
    NAMESPACE_WORD -> qname SOME)

def(Namespace.package?, Namespace -- Maybe(Package),
    NAMESPACE_ROOT -> NONE,
    NAMESPACE_PACKAGE -> SOME,
    NAMESPACE_MODULE -> package SOME,
    NAMESPACE_TYCON -> qname namespace package?,
    NAMESPACE_WORD -> drop NONE)

def(Namespace.module?, Namespace -- Maybe(Module),
    NAMESPACE_ROOT -> NONE,
    NAMESPACE_PACKAGE -> drop NONE,
    NAMESPACE_MODULE -> SOME,
    NAMESPACE_TYCON -> qname namespace module?,
    NAMESPACE_WORD -> drop NONE)

def(Namespace.tycon?, Namespace -- Maybe(Tycon),
    NAMESPACE_ROOT -> NONE,
    NAMESPACE_PACKAGE -> drop NONE,
    NAMESPACE_MODULE -> drop NONE,
    NAMESPACE_TYCON -> SOME,
    NAMESPACE_WORD -> drop NONE)

def(Namespace.prim, Namespace, Module.prim NAMESPACE_MODULE)

def(Namespace.>Str, Namespace -- Str,
    NAMESPACE_ROOT -> "<root>",
    NAMESPACE_PACKAGE -> name >Str,
    NAMESPACE_MODULE -> qname >Str,
    NAMESPACE_TYCON -> qname >Str,
    NAMESPACE_WORD -> qname >Str)

def(Namespace.mangled, Namespace -- Str,
    NAMESPACE_ROOT -> "__root__",
    NAMESPACE_PACKAGE -> name mangled,
    NAMESPACE_MODULE -> qname mangled,
    NAMESPACE_TYCON -> qname mangled,
    NAMESPACE_WORD -> qname mangled)

##################
# Qualified Name #
##################

data(QName, MKQNAME ->
    namespace:Namespace
    name:Name
    arity:Int)

def(QNAME0, Namespace Name -- QName,
    >name >namespace 0 >arity MKQNAME)

def(QName.==, QName QName -- Bool,
    /MKQNAME /MKQNAME
    name> name> ==
    arity> arity> == &&
    namespace> namespace> == &&)

def(QName.<=, QName QName -- Bool, compare is-le)
def(QName.>=, QName QName -- Bool, compare is-ge)
def(QName.<, QName QName -- Bool, compare is-lt)
def(QName.>, QName QName -- Bool, compare is-gt)
def(QName.<>, QName QName -- Bool, compare is-ne)
def(QName.compare, QName QName -- Comparison,
    /MKQNAME /MKQNAME
    arity> arity>
    name> >Str name> >Str
    namespace> namespace>
    compare match(
        LT -> drop4 LT,
        GT -> drop4 GT,
        EQ -> compare match(
            LT -> drop2 LT,
            GT -> drop2 GT,
            EQ -> compare
        )
    ))

def(QName.def?, QName -- Maybe(Def), dup name defs find(dup2 qname ==) nip)
def(QName.defined?, QName -- Bool, def? some?)
def(QName.undefined?, QName -- Bool, def? none?)

def(QName.prim, Str Int -- QName, >arity >Name >name Namespace.prim >namespace MKQNAME)

def(QName.>Str, QName -- Str, MKQNAME ->
    namespace> >Str "." cat
    name> >Str cat
    arity> dup 0= if(drop, dip:"/" show cat cat))

def(QName.to-module-path, QName -- Path,
    dup namespace match(
        NAMESPACE_PACKAGE ->
            path unwrap-or("No path defined for package" panic!)
        	swap name >Str ".mth" cat >Path join-unix, # TODO use Path.join instead?
        _ -> drop "expected module name" panic!
    ))
def(QName.mangled, QName -- Str, MKQNAME ->
    namespace> mangled "_" cat
    name> mangled cat
    arity> dup 0> if(dip:"_" show cat cat, drop))

###############
# Dotted Name #
###############

data(DName, DNAME -> Maybe(Name) List+(Name))
def(DName/DNAME, DName -- Maybe(Name) List+(Name), DNAME -> id)
def(DName.root?, DName -- Maybe(Name), DNAME -> drop)
def(DName.parts, DName -- List+(Name), DNAME -> nip)
def(DName.lens-like?, DName -- Bool, parts last lens-like?)
