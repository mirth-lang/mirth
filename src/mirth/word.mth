module(mirth.word)

import(std.prelude)
import(std.lazy)
import(std.maybe)
import(mirth.token)
import(mirth.var)
import(mirth.name)
import(mirth.def)

table(Word)
field(Word.~qname, Word, QName)
field(Word.~head, Word, Token)
field(Word.~sig, Word, Maybe(Token))
field(Word.~body, Word, Token)
field(Word.~arity, Word, Int)
field(Word.~ctx-type, Word, Lazy([Ctx ArrowType]))
field(Word.~params, Word, Lazy(List(Param)))
field(Word.~arrow, Word, Lazy(Arrow))

def(Word.qname, Word -- QName, ~qname @)
def(Word.namespace, Word -- Namespace, qname namespace)
def(Word.name, Word -- Name, qname name)
def(Word.head, Word -- Token, ~head @)
def(Word.sig, Word -- Maybe(Token), ~sig @)
def(Word.body, Word -- Token, ~body @)
def(Word.arity, Word -- Int, ~arity @)
def(Word.params, Word -- List(Param), ~params force!)
def(Word.arrow, Word -- Arrow, ~arrow force!)

def(Word.ctx-type, Word -- Ctx ArrowType, ~ctx-type force! unpack2)
def(Word.ctx, Word -- Ctx, ctx-type drop)
def(Word.type, Word -- ArrowType, ctx-type nip)

def(Word.new!,
    head:Token sig:Maybe(Token) body:Token
    qname:QName arity:Int -- Word,
    Word.alloc!
    qname> over ~qname !
    head> over ~head !
    body> over ~body !
    arity> over ~arity !
    sig> over ~sig !
    dup DEF_WORD register)

def(Word.==, Word Word -- Bool, both(index) ==)
def(Word.compare, Word Word -- Comparison, both(index) compare)
