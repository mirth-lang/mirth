module(mirth.package)

import(std.prelude)
import(std.path)
import(std.maybe)
import(mirth.name)
import(mirth.def)

table(Package)
field(Package.~name, Package, Name)
field(Package.~path, Package, Maybe(Path))

def(Package.name, Package -- Name, ~name @)
def(Package.qname, Package -- QName, NAMESPACE_ROOT swap name QNAME)
def(Package.path, Package -- Maybe(Path), ~path @)

def(Package.new!, Maybe(Path) Name -- Package,
    Package.alloc!
    tuck ~name !
    tuck ~path !
    dup DEF_PACKAGE register)

def(Package.new-or-set-path!, Path Name -- Package,
  dup Package.find match(
    SOME -> dup path match(
      SOME -> "Package already has path" panic!,
      NONE -> dip(drop) dup dip(dip(SOME) ~path !)
    ),
    NONE -> dip(SOME) Package.new!
  )
)

def(Package.find, Name -- Maybe(Package),
    NAMESPACE_ROOT swap QNAME def? bind(package?))

def(Package.find-or-new!, Name -- Package,
    dup Package.find unwrap-or(dup NONE swap Package.new!) nip)

def(Package.==, Package Package -- Bool, both(index) ==)
