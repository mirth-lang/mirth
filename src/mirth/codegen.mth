module(mirth/codegen)
import(prelude)
import(mirth/data/name)
import(mirth/data/token)


###########
# Codegen #
###########

def(CODEGEN_BUF_SIZE, Size, 0x2000)

|File| def-static-buffer(CODEGEN_FILE)
quad def-static-buffer(CODEGEN_LENGTH)
CODEGEN_BUF_SIZE def-static-buffer(CODEGEN_BUF)

def(codegen-file@, -- File +Codegen, CODEGEN_FILE file@)
def(codegen-file!, File -- +Codegen, CODEGEN_FILE file!)
def(codegen-length@, -- Size +Codegen, CODEGEN_LENGTH @)
def(codegen-length!, Size -- +Codegen, CODEGEN_LENGTH !)
def(codegen-u8@, Offset -- Byte +Codegen, CODEGEN_BUF u8@@)
def(codegen-u8!, Byte Offset -- +Codegen, CODEGEN_BUF u8!!)

def(codegen-full?, Bool +Codegen,
    codegen-length@ CODEGEN_BUF_SIZE >=)

def(codegen-flush!, +Codegen,
    codegen-length@ 0 > if(
        codegen-file@ File->Int CODEGEN_BUF codegen-length@ posix-write!
        0 codegen-length!,
        id
    ))

def(.b, Byte -- +Codegen,
    codegen-full? if(codegen-flush!, id)
    codegen-length@ dup 1+ codegen-length! codegen-u8!)

def(., Str -- +Codegen, while(dup u8@ U8->Int nonzero, dup u8@ .b str-tail) drop)

def(codegen-start!, File -- +Codegen,
    codegen-file! 0 codegen-length!)

def(codegen-end!, +Codegen,
    codegen-flush!
    codegen-file@ close-file!
    stdout codegen-file!
    0 codegen-length!)

def(run-output-c99!, Token Path -- +IO,
    load-output-path!
    STR_BUF create-file! codegen-start!
    c99-emit-header!
    c99-emit-strings!
    c99-emit-prims!
    c99-emit-buffers!
    c99-emit-externals!
    c99-emit-word-sigs!
    c99-emit-word-defs!
    c99-emit-main!
    codegen-end!)

quad def-static-buffer(C99_DEPTH)
def(c99-depth@, -- Int +Codegen, C99_DEPTH @)
def(c99-depth!, Int -- +Codegen, C99_DEPTH !)
def(c99-depth++, +Codegen, c99-depth@ 1+ c99-depth!)
def(c99-depth--, +Codegen, c99-depth@ 1- c99-depth!)

def(.lf, +Codegen, 10 Int->U8 .b)
def(;, Str -- +Codegen, . .lf)
def(;;, Str -- +Codegen, . .lf .lf)
def(.n, Int -- +Codegen, str-buf-int! STR_BUF .)
def(.d, +Codegen, c99-depth@ .n)
def(.name, Name -- +Codegen, name-mangle! STR_BUF .)

def(.w, Name -- +IO,
    "void mw" . .name " (void)" .)
def(.p, Prim -- +IO, Prim->Name .w)

def(c99-emit-header!, +IO,
    "/* C99 generated by Mirth compiler. */" ;
    "#if defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__NT__)" ;
    "#define MIRTH_WIN32 1" ;
    "#elif defined(__linux__)" ;
    "#define MIRTH_LINUX 1" ;
    "#elif defined(__APPLE__)" ;
    "#define MIRTH_MACOS 1" ;
    "#else" ;
    "#error \"Platform not supported.\"" ;
    "#endif" ;;

    "#include <stdint.h>";
    "#include <stdbool.h>";;

    "typedef uint8_t u8;";
    "typedef uint16_t u16;";
    "typedef uint32_t u32;";
    "typedef uint64_t u64;";
    "typedef int8_t i8;";
    "typedef int16_t i16;";
    "typedef int32_t i32;";
    "typedef int64_t i64;";
    "typedef uintptr_t usize;";;

    "extern void* mmap(void*, int, int, int, int, int);" ;
    "extern void* malloc(usize);" ;
    "extern int read(int, void*, usize);" ;
    "extern int write(int, void*, usize);" ;
    "extern int close(int);" ;
    "extern int open(void*, int, int);" ;
    "extern void exit(int);" ;;

    "#define STACK_SIZE 2000" ;
    "static volatile usize sc = STACK_SIZE;" ;
    "static volatile i64 stack[STACK_SIZE] = {0};" ;;
    )

def(c99-emit-strings!, +IO,
    "#define STRINGS_SIZE " . strings-size@ .n "" ;
    "static const char strings[STRINGS_SIZE] = { " ;
    0
    while(dup strings-size@ <,
        dup STRINGS_BUF u8@@ U8->Int dup .n "," . nonzero
        if(id, .lf)
        1+
    ) drop
    "};" ;;)

def(c99-emit-buffers!, +IO,
    0
    while(dup num-names@ <,
        dup Int->Name c99-emit-buffer!
        1+)
    .lf drop)

def(c99-emit-buffer!, Name -- +IO,
    name-is-buffer? if(
        " volatile u8 b" . dup .name "[" . dup name-buffer@ buffer-size@ .n "] = {0};" ;
        " void mw" . dup .name " (void) { push((i64)b" . .name "); }" ;  ,
        drop
    ))

def(c99-emit-prims!, +IO,
    " i64 pop (void) {" ;
    "    if (sc < STACK_SIZE) {" ;
    "        return stack[sc++];" ;
    "    } else {" ;
    "        write(2, \"STACK UNDERFLOW\\n\", 16);" ;
    "        exit(1);" ;
    "        return 0;" ;
    "    }" ;
    "}" ;;
    " void* pop_ptr (void) {" ;
    "    i64 x = (i64)pop();" ;
    "    return (void*)x;" ;
    "}";;
    " u8 pop_u8 (void) {" ;
    "    i64 x = pop();" ;
    "    return (u8)x;" ;
    "}";;
    " u16 pop_u16 (void) {" ;
    "    i64 x = pop();" ;
    "    return (u16)x;" ;
    "}";;
    " u32 pop_u32 (void) {" ;
    "    i64 x = pop();" ;
    "    return (u32)x;" ;
    "}";;
    " u64 pop_u64 (void) {" ;
    "    i64 x = pop();" ;
    "    return (u64)x;" ;
    "}";;
    " i8 pop_i8 (void) {" ;
    "    i64 x = pop();" ;
    "    return (i8)x;" ;
    "}";;
    " i16 pop_i16 (void) {" ;
    "    i64 x = pop();" ;
    "    return (i16)x;" ;
    "}";;
    " i32 pop_i32 (void) {" ;
    "    i64 x = pop();" ;
    "    return (i32)x;" ;
    "}";;
    " i64 pop_i64 (void) {" ;
    "    return pop();" ;
    "}";;

    " void push (i64 x) {" ;
    "    if (sc > 0) {" ;
    "        stack[--sc] = x;" ;
    "    } else {" ;
    "        write(2, \"STACK OVERFLOW\\n\", 15);" ;
    "        exit(1);" ;
    "    }" ;
    "}" ;;

    PRIM_ID .p " {" ;
    "}" ;;

    PRIM_DUP .p " {" ;
    "    i64 x = pop();" ;
    "    push(x); push(x);" ;
    "}" ;;

    PRIM_DROP .p " {" ;
    "    pop();" ;
    "}" ;;

    PRIM_SWAP .p " {" ;
    "    i64 x = pop();" ;
    "    i64 y = pop();" ;
    "    push(x); push(y);" ;
    "}" ;;

    PRIM_INT_ADD .p " {" ;
    "    i64 x = pop();" ;
    "    i64 y = pop();" ;
    "    push(x + y);" ;
    "}" ;;

    PRIM_INT_SUB .p " {" ;
    "    i64 x = pop();" ;
    "    i64 y = pop();" ;
    "    push(y - x);" ;
    "}" ;;

    PRIM_INT_MUL .p " {" ;
    "    i64 x = pop();" ;
    "    i64 y = pop();" ;
    "    push(x * y);" ;
    "}" ;;

    PRIM_INT_DIV .p " {" ;
    "    i64 x = pop();" ;
    "    i64 y = pop();" ;
    "    push(y / x);" ;
    "}" ;;

    PRIM_INT_MOD .p " {" ;
    "    i64 x = pop();" ;
    "    i64 y = pop();" ;
    "    push(y % x);" ;
    "}" ;;

    PRIM_INT_EQ .p " {" ;
    "    i64 x = pop();" ;
    "    i64 y = pop();" ;
    "    push(x == y);" ;
    "}" ;;

    PRIM_INT_LT .p " {" ;
    "    i64 x = pop();" ;
    "    i64 y = pop();" ;
    "    push(y < x);" ;
    "}" ;;

    PRIM_INT_LE .p " {" ;
    "    i64 x = pop();" ;
    "    i64 y = pop();" ;
    "    push(y <= x);" ;
    "}" ;;

    PRIM_INT_AND .p " {" ;
    "    i64 x = pop();" ;
    "    i64 y = pop();" ;
    "    push(y & x);" ;
    "}" ;;

    PRIM_INT_OR .p " {" ;
    "    i64 x = pop();" ;
    "    i64 y = pop();" ;
    "    push(y | x);" ;
    "}" ;;

    PRIM_INT_XOR .p " {" ;
    "    i64 x = pop();" ;
    "    i64 y = pop();" ;
    "    push(y ^ x);" ;
    "}" ;;

    PRIM_INT_SHL .p " {" ;
    "    i64 x = pop();" ;
    "    i64 y = pop();" ;
    "    push(y << x);" ;
    "}" ;;

    PRIM_INT_SHR .p " {" ;
    "    i64 x = pop();" ;
    "    i64 y = pop();" ;
    "    push(y >> x);" ;
    "}" ;;

    PRIM_POSIX_WRITE .p " {" ;
    "    usize n = (usize)pop();" ;
    "    void* p = pop_ptr();" ;
    "    int f = (int)pop();" ;
    "    write(f, p, n);" ; # TODO: push return code
    "}" ;;

    PRIM_POSIX_READ .p " {" ;
    "    usize n = (usize)pop();" ;
    "    void* p = pop_ptr();" ;
    "    int f = (int)pop();" ;
    "    push(read(f,p,n));" ;
    "}" ;;

    PRIM_POSIX_OPEN .p " {" ;
    "    int m = (int)pop();" ;
    "    int f = (int)pop();" ;
    "    void* p = pop_ptr();" ;
    "    push(open(p,f,m));" ;
    "}" ;;

    PRIM_POSIX_CLOSE .p " {" ;
    "    int x = (int)pop();" ;
    "    push(close(x));" ;
    "}" ;;

    PRIM_POSIX_EXIT .p " {" ;
    "    int x = (int)pop();" ;
    "    exit(x);" ;
    "}" ;;

    PRIM_POSIX_MMAP .p " {" ;
    "    #ifdef MIRTH_WIN32" ;
    "    pop(); pop(); pop(); pop();" ;
    "    usize b = (usize)pop();" ;
    "    pop();" ;
    "    push((i64)malloc(b));" ;
    "    #else" ;
    "    int f = (int)pop();" ;
    "    int e = (int)pop();" ;
    "    int d = (int)pop();" ;
    "    int c = (int)pop();" ;
    "    usize b = (usize)pop();" ;
    "    void* a = pop_ptr();" ;
    "    void* p = mmap(a,b,c,d,e,f);" ;
    "    push((i64)p);" ;
    "    #endif" ;
    "}" ;;

    PRIM_DEBUG .p " {" ;
    "    write(2, \"??\", 2);" ;
    "    char c[32] = {0};" ;
    "    char* cp;" ;
    "    usize n;" ;
    "    i64 x; i64 y;" ;
    "    for (long i = STACK_SIZE-1; i >= (long)sc; i--) {" ;
    "        cp = c+30;" ;
    "        x = (i64)stack[i];" ;
    "        n = 1;" ;
    "        y = x; if (x < 0) { x = -x; }" ;
    "        do { *cp-- = '0' + (x % 10); x /= 10; n++; } while(x);" ;
    "        if (y < 0) { *cp-- = '-'; n++; } " ;
    "        *cp = ' ';" ;
    "        write(2, cp, n);" ;
    "    }" ;
    "    write(2, \"\\n\", 1);" ;
    "}" ;;

    PRIM_MIRTH_REVISION .p " {" ;
    "    push(" . NEW_MIRTH_REVISION .n ");";
    "}" ;;

    PRIM_MEM_GET .p " {" ;
    "    stack[sc] = *(i64*)(stack[sc]);" ;
    "}" ;;

    PRIM_MEM_SET .p " {" ;
    "    i64* x = pop_ptr();" ;
    "    *x = (i64)pop();" ;
    "}" ;;

    PRIM_MEM_GET_BYTE .p " {" ;
    "    u8* x = pop_ptr();" ;
    "    push(*x);" ;
    "}" ;;

    PRIM_MEM_SET_BYTE .p " {" ;
    "    u8* x = pop_ptr();" ;
    "    *x = pop_u8();" ;
    "}" ;;

    PRIM_MEM_GET_U8 .p " {" ;
    "    u8* x = pop_ptr();" ;
    "    push(*x);" ;
    "}" ;;

    PRIM_MEM_SET_U8 .p " {" ;
    "    u8* x = pop_ptr();" ;
    "    *x = pop_u8();" ;
    "}" ;;

    PRIM_MEM_GET_U16 .p " {" ;
    "    u16* x = pop_ptr();" ;
    "    push(*x);" ;
    "}" ;;

    PRIM_MEM_SET_U16 .p " {" ;
    "    u16* x = pop_ptr();" ;
    "    *x = pop_u16();" ;
    "}" ;;

    PRIM_MEM_GET_U32 .p " {" ;
    "    u32* x = pop_ptr();" ;
    "    push(*x);" ;
    "}" ;;

    PRIM_MEM_SET_U32 .p " {" ;
    "    u32* x = pop_ptr();" ;
    "    *x = pop_u32();" ;
    "}" ;;

    PRIM_MEM_GET_U64 .p " {" ;
    "    u64* x = pop_ptr();" ;
    "    push(*x);" ;
    "}" ;;

    PRIM_MEM_SET_U64 .p " {" ;
    "    u64* x = pop_ptr();" ;
    "    *x = pop_u64();" ;
    "}" ;;

    PRIM_MEM_GET_I8 .p " {" ;
    "    i8* x = pop_ptr();" ;
    "    push(*x);" ;
    "}" ;;

    PRIM_MEM_SET_I8 .p " {" ;
    "    i8* x = pop_ptr();" ;
    "    *x = pop_i8();" ;
    "}" ;;

    PRIM_MEM_GET_I16 .p " {" ;
    "    i16* x = pop_ptr();" ;
    "    push(*x);" ;
    "}" ;;

    PRIM_MEM_SET_I16 .p " {" ;
    "    i16* x = pop_ptr();" ;
    "    *x = pop_i16();" ;
    "}" ;;

    PRIM_MEM_GET_I32 .p " {" ;
    "    i32* x = pop_ptr();" ;
    "    push(*x);" ;
    "}" ;;

    PRIM_MEM_SET_I32 .p " {" ;
    "    i32* x = pop_ptr();" ;
    "    *x = pop_i32();" ;
    "}" ;;

    PRIM_MEM_GET_I64 .p " {" ;
    "    i64* x = pop_ptr();" ;
    "    push(*x);" ;
    "}" ;;

    PRIM_MEM_SET_I64 .p " {" ;
    "    i64* x = pop_ptr();" ;
    "    *x = pop_i64();" ;
    "}" ;;

    PRIM_RUNNING_OS .p " {" ;
    "#if defined(MIRTH_WIN32)" ;
    "    push(" . WIN32 .n ");" ;
    "#elif defined(MIRTH_LINUX)" ;
    "    push(" . LINUX .n ");" ;
    "#elif defined(MIRTH_MACOS)" ;
    "    push(" . MACOS .n ");" ;
    "#else" ;
    "    push(" . UNKNOWN .n ");" ;
    "#endif" ;
    "}" ;;

    PRIM_CAST .p " { }" ;;

    PRIM_PTR+ .p " {" ;
    "   u8* x = pop_ptr();" ;
    "   i64 y = pop();" ;
    "   push((i64)(x + y));" ;
    "}" ;;

    PRIM_TRUE .p " {" ;
    "    push(true);";
    "}" ;

    PRIM_FALSE .p " {" ;
    "    push(false);";
    "}" ;;

    PRIM_BOOL_AND .p " {" ;
    "    bool x = pop();" ;
    "    bool y = pop();" ;
    "    push(y && x);" ;
    "}" ;

    PRIM_BOOL_OR .p " {" ;
    "    bool x = pop();" ;
    "    bool y = pop();" ;
    "    push(y || x);" ;
    "}" ;;

    )

def(c99-emit-externals!, +IO,
    0
    while(dup num-names@ <,
        dup Int->Name c99-emit-external!
        1+)
    .lf drop)

def(c99-emit-external!, Name -- +IO,
    name-is-external? if(
        name-sig? sig-arity
        dup 2 >= if(
            "can't declare external with multiple return values" panic!,

            dup 1 >= if(
                "i64 " .,
                "void " .
            )
        )
        dip(dip(dup .name))
        " (" .
        over dup nonzero if(
            "i64" .
            1- while(dup nonzero,
                ", i64" .
                1-
            ) drop,
            drop
        ) ");" ;

        " void mw" . dip(dip(dup .name)) " (void) {" ;
        over while(dup nonzero,
            "    i64 x" . dup .n " = pop();" ;
            1-
        ) drop
        dup nonzero if("    push(", "    ") .
        dip(dip(dup .name))
        "(" .
        dip(dup nonzero if(
            "x1" .
            dup 1-
            while(dup nonzero,
                ", x" .
                dup2 - 1+ .n
                1-
            ) drop,
            id
        ))
        ")" .
        dup nonzero if(");", ";") ;
        "}" ;

        drop3,

        drop
    ))

def(c99-emit-word-sigs!, +IO,
    0
    while(dup num-names@ <,
        dup Int->Name c99-emit-word-sig!
        1+
    )
    "" ;
    drop)

def(c99-emit-word-sig!, Name -- +IO,
    name-is-word? if(
        " void mw" . .name " (void);" ;,
        drop
    ))

def(c99-emit-word-defs!, +IO,
    0
    while(dup num-names@ <,
        dup Int->Name c99-emit-word-def!
        1+)
    drop)

def(c99-emit-word-def!, Name -- +IO,
    name-is-word? if(
        dup typecheck-name!
        dup .w "{" ;
        name-word@ word-body@ c99-emit-run!
        "}" ;;,
        drop
    ))

def(c99-emit-run!, Token -- +IO,
    c99-depth++
    while(token-run-end? not,
        dup c99-emit-token!
        token-next
    ) drop
    c99-depth--)

def(c99-emit-token!, Token -- +IO,
    dup typecheck-token!

    token-type? TOKEN_INT = if(
        "    push(" . token-int@ .n ");" ;,

    token-type? TOKEN_STR = if(
        "    push((i64)(strings + " . token-value@ TokenValue->Int .n "));" ;, # FIXME: just push a string literal.

    token-type? TOKEN_NAME = if(
        c99-emit-word!,

        drop
    ))))

def(c99-emit-word!, Token -- +IO,
    token-name? PRIM_DIP Prim->Name = if(
        token-args-1
        "    { i64 d" . .d " = pop();" ;
        c99-emit-run!
        "      push(d" . .d "); }" ;,

    token-name? PRIM_IF Prim->Name = if(
        token-args-2
        "    if (pop()) {" ;
        dip(c99-emit-run!)
        "    } else {" ;
        c99-emit-run!
        "    }" ;,

    token-name? PRIM_WHILE Prim->Name = if(
        token-args-2
        "    while(1) {" ;
        dip(c99-emit-run!)
        "    if (!pop()) break;" ;
        c99-emit-run!
        "    }" ;,

        token-name@
        "    mw" . .name "();" ;
    ))))

def(c99-emit-main!, Token -- +IO,
    "int main (int argc, char** argv) {" ;
    c99-emit-run!
    "    return 0;" ;
    "}" ;
    )
