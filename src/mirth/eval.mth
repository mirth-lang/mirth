module(mirth/eval)
import(prelude)
import(mirth/data/name)
import(mirth/data/string)
import(mirth/data/token)
import(mirth/data/word)
import(mirth/data/external)

###############
# Value Stack #
###############

def(VSTACK_SIZE, Size, 0x100)
quad def-static-buffer(VSTACK_LEN)
VSTACK_SIZE quads def-static-buffer(VSTACK_BUF)

def(vstack-len@, Size +VSTACK, VSTACK_LEN @)
def(vstack-len!, Size -- +VSTACK, VSTACK_LEN !)
def(vstack-empty?, Bool +VSTACK, vstack-len@ 0 <=)
def(vstack-full?, Bool +VSTACK, vstack-len@ VSTACK_SIZE >=)
def(vstack-i64@, Size -- v +VSTACK, VSTACK_BUF quad@@ cast)
def(vstack-i64!, v Size -- +VSTACK, dip(cast) VSTACK_BUF quad!!)

def(vstack-pop!, v1 +VSTACK,
    vstack-empty? if(
        "stack underflow: attempted to pop on empty vstack" panic!,
        vstack-len@ 1- vstack-len!
        vstack-len@ vstack-i64@
    ))

def(vstack-pop2!, v1 v2 +VSTACK,
    vstack-pop! dip(vstack-pop!))

def(vstack-pop3!, v1 v2 v3 +VSTACK,
    vstack-pop! dip(vstack-pop2!))

def(vstack-pop4!, v1 v2 v3 v4 +VSTACK,
    vstack-pop! dip(vstack-pop3!))

def(vstack-pop5!, v1 v2 v3 v4 v5 +VSTACK,
    vstack-pop! dip(vstack-pop4!))

def(vstack-pop6!, v1 v2 v3 v4 v5 v6 +VSTACK,
    vstack-pop! dip(vstack-pop5!))

def(vstack-push!, v1 -- +VSTACK,
    vstack-full? if(
        "vstack overflow" panic!,
        vstack-len@ vstack-i64!
        vstack-len@ 1+ vstack-len!
    ))

def(vstack-push2!, v1 v2 -- +VSTACK,
    dip(vstack-push!) vstack-push!)

def(vstack-push3!, v1 v2 v3 -- +VSTACK,
    dip(vstack-push2!) vstack-push!)

def(vstack-top@, I64 +VSTACK,
    vstack-empty? if(
        "vstack underflow" panic!,
        vstack-len@ 1- vstack-i64@
    ))

def(vstack-top!, I64 -- +VSTACK,
    vstack-empty? if(
        "stack underflow: attempted to write to top of empty vstack" panic!,
        vstack-len@ 1- vstack-i64!
    ))

def(vstack-trace!, +VSTACK +IO,
    0
    while(dup vstack-len@ <,
        dup vstack-i64@
        int-trace-sp!
        1+
    ) drop trace-ln!)

###########
# Running #
###########

# Run directly from tokens! (FIXME: Use this only for top-level code.)
# No type checking. (FIXME: Add dynamic types.)
def(token-run!, Token -- +Mirth,
    while(token-run-end? not, token-run-one!)
    drop)

# Is this a token to stop running at?
def(token-run-end?, Token -- Token Bool +Mirth,
    dup Token->Int num-tokens@ >= if(
        true,
    token-type? TOKEN_NONE = if(
        true,
    token-type? TOKEN_COMMA = if(
        true,
        token-type? TOKEN_RPAREN =
    ))))

# Run a single token, return next token.
def(token-run-one!, Token -- Token +Mirth,
    dup typecheck-token!

    token-type? TOKEN_INT = if(
        0 1 arity-check!
        token-int? vstack-push!,
    token-type? TOKEN_STR = if(
        0 1 arity-check!
        token-str? vstack-push!,
    token-type? TOKEN_LPAREN = if(
        token-value@ TokenValue->Token,
    token-type? TOKEN_NAME = if(
        dup token-run-name!,

        dup "Unexpected token type in token-run!" emit-fatal-error!
    ))))

    token-succ)

# Run a single name token.
def(token-run-name!, Token -- +Mirth,
    token-name?

    name-is-prim? if(
        drop token-run-prim!,

    name-undefined? if(
        drop "Word is undefined." emit-fatal-error!,

    name-is-word? if(
        nip name-word@ word-body@ token-run!,

    name-is-buffer? if(
        nip name-buffer@ buffer-base@ vstack-push!,

        drop "Don't know how to run word." emit-fatal-error!
    )))))

# Run a single primitive name token.
def(token-run-prim!, Token --,

    token-name? Name->Prim

    dup PRIM_ID = if(
        drop
        0 0 arity-check!
        token-args-0,

    dup PRIM_SWAP = if(
        drop
        2 2 arity-check!
        token-args-0
        vstack-pop2!
        swap
        vstack-push2!,

    dup PRIM_DUP = if(
        drop
        1 2 arity-check!
        token-args-0
        vstack-pop!
        dup
        vstack-push2!,

    dup PRIM_DROP = if(
        drop
        1 0 arity-check!
        token-args-0
        vstack-pop!
        drop,

    dup PRIM_DIP = if(
        drop
        1 1 arity-check!
        token-args-1
        vstack-pop!
        dip(token-run!)
        vstack-push!,

    dup PRIM_IF = if(
        drop
        1 0 arity-check!
        token-args-2
        vstack-pop!
        if(drop, nip) token-run!,

    dup PRIM_WHILE = if(
        drop
        0 0 arity-check!
        token-args-2
        while(over token-run! vstack-pop!, dup token-run!)
        drop2,

    dup PRIM_INT_ADD = if(
        drop
        2 1 arity-check!
        token-args-0
        vstack-pop2!
        +
        vstack-push!,

    dup PRIM_INT_SUB = if(
        drop
        2 1 arity-check!
        token-args-0
        vstack-pop2!
        -
        vstack-push!,

    dup PRIM_INT_MUL = if(
        drop
        2 1 arity-check!
        token-args-0
        vstack-pop2!
        *
        vstack-push!,

    dup PRIM_INT_DIV = if(
        drop
        2 1 arity-check!
        token-args-0
        vstack-pop2!
        /
        vstack-push!,

    dup PRIM_INT_MOD = if(
        drop
        2 1 arity-check!
        token-args-0
        vstack-pop2!
        %
        vstack-push!,

    dup PRIM_INT_EQ = if(
        drop
        2 1 arity-check!
        token-args-0
        vstack-pop2!
        =
        vstack-push!,

    dup PRIM_INT_LT = if(
        drop
        2 1 arity-check!
        token-args-0
        vstack-pop2!
        <
        vstack-push!,

    dup PRIM_INT_LE = if(
        drop
        2 1 arity-check!
        token-args-0
        vstack-pop2!
        <=
        vstack-push!,

    dup PRIM_INT_AND = if(
        drop
        2 1 arity-check!
        token-args-0
        vstack-pop2!
        &
        vstack-push!,

    dup PRIM_INT_OR = if(
        drop
        2 1 arity-check!
        token-args-0
        vstack-pop2!
        |
        vstack-push!,

    dup PRIM_INT_XOR = if(
        drop
        2 1 arity-check!
        token-args-0
        vstack-pop2!
        ^
        vstack-push!,

    dup PRIM_INT_SHL = if(
        drop
        2 1 arity-check!
        token-args-0
        vstack-pop2!
        <<
        vstack-push!,

    dup PRIM_INT_SHR = if(
        drop
        2 1 arity-check!
        token-args-0
        vstack-pop2!
        >>
        vstack-push!,

    dup PRIM_MEM_GET = if(
        drop
        1 1 arity-check!
        token-args-0
        vstack-pop!
        @
        vstack-push!,

    dup PRIM_MEM_SET = if(
        drop
        2 0 arity-check!
        token-args-0
        vstack-pop2!
        !,

    dup PRIM_MEM_GET_BYTE = if(
        drop
        1 1 arity-check!
        token-args-0
        vstack-pop!
        u8@
        vstack-push!,

    dup PRIM_MEM_SET_BYTE = if(
        drop
        2 0 arity-check!
        token-args-0
        vstack-pop2!
        u8!,

    dup PRIM_MEM_GET_U8 = if(
        drop
        1 1 arity-check!
        token-args-0
        vstack-pop!
        u8@
        vstack-push!,
    dup PRIM_MEM_GET_U16 = if(
        drop
        1 1 arity-check!
        token-args-0
        vstack-pop!
        u16@
        vstack-push!,
    dup PRIM_MEM_GET_U32 = if(
        drop
        1 1 arity-check!
        token-args-0
        vstack-pop!
        u32@
        vstack-push!,
    dup PRIM_MEM_GET_U64 = if(
        drop
        1 1 arity-check!
        token-args-0
        vstack-pop!
        u64@
        vstack-push!,
    dup PRIM_MEM_GET_I8 = if(
        drop
        1 1 arity-check!
        token-args-0
        vstack-pop!
        i8@
        vstack-push!,
    dup PRIM_MEM_GET_I16 = if(
        drop
        1 1 arity-check!
        token-args-0
        vstack-pop!
        i16@
        vstack-push!,
    dup PRIM_MEM_GET_I32 = if(
        drop
        1 1 arity-check!
        token-args-0
        vstack-pop!
        i32@
        vstack-push!,
    dup PRIM_MEM_GET_I64 = if(
        drop
        1 1 arity-check!
        token-args-0
        vstack-pop!
        i64@
        vstack-push!,

    dup PRIM_MEM_SET_U8 = if(
        drop
        2 0 arity-check!
        token-args-0
        vstack-pop2!
        u8!,

    dup PRIM_MEM_SET_U16 = if(
        drop
        2 0 arity-check!
        token-args-0
        vstack-pop2!
        u16!,

    dup PRIM_MEM_SET_U32 = if(
        drop
        2 0 arity-check!
        token-args-0
        vstack-pop2!
        u32!,

    dup PRIM_MEM_SET_U64 = if(
        drop
        2 0 arity-check!
        token-args-0
        vstack-pop2!
        u64!,

    dup PRIM_MEM_SET_I8 = if(
        drop
        2 0 arity-check!
        token-args-0
        vstack-pop2!
        i8!,

    dup PRIM_MEM_SET_I16 = if(
        drop
        2 0 arity-check!
        token-args-0
        vstack-pop2!
        i16!,

    dup PRIM_MEM_SET_I32 = if(
        drop
        2 0 arity-check!
        token-args-0
        vstack-pop2!
        i32!,

    dup PRIM_MEM_SET_I64 = if(
        drop
        2 0 arity-check!
        token-args-0
        vstack-pop2!
        i64!,

    dup PRIM_POSIX_MMAP = if(
        drop
        6 1 arity-check!
        token-args-0
        vstack-pop6!
        posix-mmap!
        vstack-push!,

    dup PRIM_POSIX_WRITE = if(
        drop
        3 0 arity-check!
        token-args-0
        vstack-pop3!
        posix-write!,

    dup PRIM_POSIX_READ = if(
        drop
        3 1 arity-check!
        token-args-0
        vstack-pop3!
        posix-read!
        vstack-push!,

    dup PRIM_POSIX_OPEN = if(
        drop
        3 1 arity-check!
        token-args-0
        vstack-pop3!
        posix-open!
        vstack-push!,

    dup PRIM_POSIX_CLOSE = if(
        drop
        1 1 arity-check!
        token-args-0
        vstack-pop!
        posix-close!
        vstack-push!,

    dup PRIM_POSIX_EXIT = if(
        drop 1 0 arity-check! token-args-0
        vstack-pop! posix-exit!,

    dup PRIM_DEBUG = if(
        drop 0 0 arity-check! token-args-0
        "?? " str-trace!
        vstack-trace!,

    dup PRIM_DEF = if(
        drop
        0 0 arity-check!

        token-args-3
        rotl token-type? TOKEN_NAME = if(
            token-name? name-undefined? if(
                nip
                word-alloc!
                dup2 swap name-word!
                dup dip(word-name!)
                dup dip(word-body!)
                word-sig!,

                drop "word already defined" emit-fatal-error!
            ),
            "expected word name" emit-fatal-error!
        ),

    dup PRIM_DEF_EXTERNAL = if(
        drop
        token-args-2
        swap token-type? TOKEN_NAME = if(
            token-name? name-undefined? if(
                nip
                external-alloc!
                dup2 swap name-external!
                dup dip(external-name!)
                external-sig!,
                drop2 "word already defined" emit-fatal-error!
            ),
            nip "expected name" emit-fatal-error!
        ),


    dup PRIM_DEF_TYPE = if(
        drop
        0 0 arity-check!
        token-args-2
        swap sig-token-is-type-con? if(
            token-name? name-undefined? if(
                nip swap
                sig-token-is-type-con? if(
                    token-name?
                    name-is-type? if(
                        name-type@ nip,
                        drop "Unknown type." emit-error!
                        TYPE_ERROR
                    ),
                    "Expected a type." emit-error!
                    TYPE_ERROR
                )
                swap name-type!,

                drop "type already defined" emit-fatal-error!
            ),
            "expected type constructor" emit-fatal-error!
        ),

    dup PRIM_NOMINAL = if(
        drop
        0 0 arity-check!
        token-args-2
        swap sig-token-is-type-con? if(
            token-name? name-undefined? if(
                nip swap
                sig-token-is-type-con? if(
                    token-name?
                    name-is-type? if(
                        name-type@ nip,
                        drop "Unknown type." emit-error! TYPE_ERROR
                    ),
                    "Expected a type." emit-error! TYPE_ERROR
                )
                over dip(nominal-new! TNominal) name-type!,

                drop "type already defined" emit-fatal-error!
            ),
            "expected type constructor" emit-fatal-error!
        ),

    dup PRIM_DEF_STATIC_BUFFER = if(
        drop
        1 0 arity-check!
        token-args-1
        token-type? TOKEN_NAME = if(
            token-name? name-undefined? if(
                nip
                vstack-pop! over dip(buffer-alloc!) name-buffer!,
                drop "buffer already defined" emit-fatal-error!
            ),
            "expected buffer name" emit-fatal-error!
        ),

    dup PRIM_MODULE = if(
        drop
        token-args-1
        token-type? TOKEN_NAME = if(
            token-name?
            name-is-module? if(
                drop2,

            name-undefined? if(
                # just reserve the module name for now
                nip DEF_MODULE swap name-sort!,

                drop "module name is already taken" emit-fatal-error!
            )),

            "expected module name" emit-fatal-error!
        ),

    dup PRIM_IMPORT = if(
        drop
        token-args-1
        token-type? TOKEN_NAME = if(
            token-name?
            name-is-module? if(
                drop2, # module is already loaded

            name-undefined? if(
                nip DEF_MODULE over name-sort!
                name-load! ".mth" str-buf-push-str!
                num-tokens@ Int->Token
                STR_BUF Str->Path run-lexer!
                token-run!, # run the imported module

                drop "module name is already taken" emit-fatal-error!
            )),

            "expected module name" emit-fatal-error!
        ),

    dup PRIM_MIRTH_REVISION = if(
        drop
        0 1 arity-check!
        token-args-0
        NEW_MIRTH_REVISION
        vstack-push!,

    dup PRIM_RUNNING_OS = if(
        drop
        0 1 arity-check!
        token-args-0
        RUNNING_OS
        vstack-push!,

    dup PRIM_OUTPUT_C99 = if(
        drop
        1 0 arity-check!
        token-args-1
        vstack-pop!
        run-output-c99!,

    dup PRIM_CAST = if(
        drop
        1 1 arity-check!
        token-args-0,

    dup PRIM_PTR+ = if(
        drop
        2 1 arity-check!
        token-args-0
        vstack-pop2!
        +
        vstack-push!,

    dup PRIM_TRUE = if(
        drop
        0 1 arity-check!
        token-args-0
        true
        vstack-push!,

    dup PRIM_FALSE = if(
        drop
        0 1 arity-check!
        token-args-0
        false
        vstack-push!,

    dup PRIM_BOOL_AND = if(
        drop
        2 1 arity-check!
        token-args-0
        vstack-pop2!
        &&
        vstack-push!,

    dup PRIM_BOOL_OR = if(
        drop
        2 1 arity-check!
        token-args-0
        vstack-pop2!
        ||
        vstack-push!,

        drop
        "Dont know how to run prim yet." emit-fatal-error!
    ))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

# Assert stack arity of a primitive. If the
# arity would result in underflow/overflow,
# emits a fatal error.
def(arity-check!, Token Size Size -- Token,
    dip(dip(vstack-len@))
    dip(dup2 <) swap if(
        drop drop2 "Stack underflow." emit-fatal-error!,
        dip(-) + VSTACK_SIZE > if(
            "Stack overflow." emit-fatal-error!,
            id
        )
    ))
