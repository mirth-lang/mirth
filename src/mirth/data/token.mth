module(mirth/data/token)
import(mirth/data/common)
import(mirth/data/name)
import(mirth/data/string)
import(mirth/data/location)
import(mirth/data/error)

##########
# Tokens #
##########

def(num-tokens@, Int, Token.NUM @)

def(MAX_TOKENS, Size, 0x10000)
def(|Token|, Size, 2)
def(Token->U16, Token -- U16, Token->Int Int->U16)
def(U16->Token, U16 -- Token, U16->Int Int->Token)
def(Token->Int, Token -- Int, cast)
def(Int->Token, Int -- Token, cast)
def(token@, Ptr -- Token, u16@ U16->Token)
def(token!, Token Ptr --, dip(Token->U16) u16!)

def(token-alloc!, Token, Token.alloc!)

def(TokenType->U8, TokenType -- U8, TokenType.unwrap)
def(U8->TokenType, U8 -- TokenType, TokenType.wrap)
def(TOKEN_NONE, TokenType, 0 Int->U8 U8->TokenType)
def(TOKEN_LPAREN, TokenType, 1 Int->U8 U8->TokenType)
def(TOKEN_RPAREN, TokenType, 2 Int->U8 U8->TokenType)
def(TOKEN_COMMA, TokenType, 3 Int->U8 U8->TokenType)
def(TOKEN_NAME, TokenType, 4 Int->U8 U8->TokenType)
def(TOKEN_INT, TokenType, 5 Int->U8 U8->TokenType)
def(TOKEN_STR, TokenType, 6 Int->U8 U8->TokenType)
def(TOKEN_LBRACKET, TokenType, 7 Int->U8 U8->TokenType)
def(TOKEN_RBRACKET, TokenType, 8 Int->U8 U8->TokenType)
def(TOKEN_LBRACE, TokenType, 9 Int->U8 U8->TokenType)
def(TOKEN_RBRACE, TokenType, 10 Int->U8 U8->TokenType)
def(TOKEN_NEWLINE, TokenType, 11 Int->U8 U8->TokenType)

def(token-type-str, TokenType -- Str,
    dup TOKEN_NONE == if(drop "NONE",
    dup TOKEN_LPAREN == if(drop "LPAREN",
    dup TOKEN_RPAREN == if(drop "RPAREN",
    dup TOKEN_COMMA == if(drop "COMMA",
    dup TOKEN_NAME == if(drop "NAME",
    dup TOKEN_INT == if(drop "INT",
    dup TOKEN_STR == if(drop "STR",
    dup TOKEN_LBRACKET == if(drop "LBRACKET",
    dup TOKEN_RBRACKET == if(drop "RBRACKET",
    dup TOKEN_LBRACE == if(drop "LBRACE",
    dup TOKEN_RBRACE == if(drop "RBRACE",
    drop "???UNKNOWN???"))))))))))))
def(token-type-trace!, TokenType --,
    token-type-str str-trace!)

def(TokenValue->Int, TokenValue -- Int, TokenValue.unwrap)
def(TokenValue->Name, TokenValue -- Name, TokenValue->Int Int->Name)
def(TokenValue->Token, TokenValue -- Token, TokenValue->Int Int->Token)
def(TokenValue->StrLit, TokenValue -- StrLit, TokenValue->Int Int->StrLit)
def(TokenValue->Str, TokenValue -- Str, TokenValue->Int STRINGS_BUF ptr+)

def(Int->TokenValue, Int -- TokenValue, TokenValue.wrap)
def(StrLit->TokenValue, StrLit -- TokenValue, StrLit->Int Int->TokenValue)
def(Name->TokenValue, Name -- TokenValue, Name->Int Int->TokenValue)
def(Token->TokenValue, Token -- TokenValue, Token->Int Int->TokenValue)

def(token-is-int?, Token -- Token Bool,
    token-type? TOKEN_INT ==)
def(token-int@, Token -- Int,
    token-type? TOKEN_INT == if(
        token-value@ TokenValue->Int,
        "compiler error: token-int@ called on non-int token" emit-fatal-error!
    ))
def(token-int?, Token -- Token Int, dup token-int@)

def(token-is-str?, Token -- Token Bool,
    token-type? TOKEN_STR ==)
def(token-strlit@, Token -- StrLit,
    token-type? TOKEN_STR == if(
        token-value@ TokenValue->StrLit,
        "compiler error: token-str@ called on non-str token" emit-fatal-error!
    ))
def(token-strlit?, Token -- Token StrLit, dup token-strlit@)

def(token-str@, Token -- Str,
    token-type? TOKEN_STR == if(
        token-value@ TokenValue->Str,
        "compiler error: token-str@ called on non-str token" emit-fatal-error!
    ))
def(token-str?, Token -- Token Str, dup token-str@)

def(token-is-name?, Token -- Token Bool,
    token-type? TOKEN_NAME ==)
def(token-name@, Token -- Name,
    token-type? TOKEN_NAME == if(
        token-value@ TokenValue->Name,
        "compiler error: token-name@ called on non-name token" emit-fatal-error!
    ))
def(token-name?, Token -- Token Name, dup token-name@)

def(token-token@, Token -- Token,
    token-type? TOKEN_LPAREN == if(
        token-value@ TokenValue->Token,
    token-type? TOKEN_RPAREN == if(
        token-value@ TokenValue->Token,
    token-type? TOKEN_LBRACKET == if(
        token-value@ TokenValue->Token,
    token-type? TOKEN_RBRACKET == if(
        token-value@ TokenValue->Token,
    token-type? TOKEN_LBRACE == if(
        token-value@ TokenValue->Token,
    token-type? TOKEN_RBRACE == if(
        token-value@ TokenValue->Token,
        "compiler error: token-token@ called on non-paren token" emit-fatal-error!
    )))))))
def(token-token?, Token -- Token Token, dup token-token@)


def(token-location, Token -- Location,
    token-module? swap
    token-row? swap
    token-col@
    location-pack)

def(token-trace!, Token -- +IO,
    dup token-location location-trace!
    ": " str-trace!
    dup Token->Int int-trace! " " str-trace!
    token-type? token-type-trace!
    token-type? TOKEN_NAME == if(
        " " str-trace!
        token-name? name-load! str-buf-trace!,

    token-type? TOKEN_STR == if(
        " \"" str-trace!
        token-str? str-trace!
        "\"" str-trace!,
        # FIXME: print escaped

        " " str-trace!
        token-value? TokenValue->Int int-trace!))

    drop
    trace-ln!)

def(show-tokens!, --,
    0
    while(dup num-tokens@ <,
        dup Int->Token token-trace! 1+)
    drop)

# Get next token, without respecting nesting or arguments.
def(token-succ, Token -- Token,
    Token->Int 1+ Int->Token)

# Get prev token, without respecting nesting or arguments.
def(token-pred, Token -- Token,
    Token->Int 1- Int->Token)

# Get next token, respecting nesting of tokens and arguments.
def(token-next, Token -- Token,
    token-is-left-enclosure? if(
        token-token@ token-succ,

    token-type? TOKEN_NAME == if(
        token-succ
        token-type? TOKEN_LPAREN == if(
            token-token@ token-succ,
            id
        ),

        token-succ
    )))

# Get prev token, respecting nesting of tokens and arguments.
def(token-prev, Token -- Token,
    token-pred
    token-is-right-enclosure? if(
        token-token@
        token-type? TOKEN_LPAREN == if(
            dup token-pred token-is-name? if(
                nip,
                drop
            ),
            id
        ),

        id
    ))

# Get closest arg ending (COMMA, RPAREN or RBRACKET),
# while respecting the nesting of tokens.
def(token-next-arg-end, Token -- Token,
    while(token-is-arg-end? not, token-next))

# Is this an arg ending (COMMA, RPAREN or RBRACKET)?
def(token-is-arg-end?, Token -- Token Bool,
    token-type? TOKEN_COMMA == if(
        true,
    token-type? TOKEN_RPAREN == if(
        true,
    token-type? TOKEN_RBRACKET == if(
        true,
        token-type? TOKEN_RBRACE ==
    ))))

def(token-has-args?, Token -- Token Bool,
    token-type? TOKEN_NAME == if(
        dup token-succ token-type@ TOKEN_LPAREN ==,
        false
    ))

def(token-is-left-enclosure?, Token -- Token Bool,
    token-type? TOKEN_LPAREN == if(
        true,
    token-type? TOKEN_LBRACKET == if(
        true,
        token-type? TOKEN_LBRACE ==
    )))

def(token-is-right-enclosure?, Token -- Token Bool,
    token-type? TOKEN_RPAREN == if(
        true,
    token-type? TOKEN_RBRACKET == if(
        true,
        token-type? TOKEN_RBRACE ==
    )))


||| Get number of arguments or number of components in enclosed token.
def(token-num-args, Token -- Int,
    token-type? TOKEN_NAME == if(token-has-args? if(token-succ, id), id)
    token-is-left-enclosure? if(
        dip(0)
        while(token-is-right-enclosure? not,
            dip(1+) token-succ token-next-arg-end)
        drop,
        drop 0
    ))

# Verify that token has 0 args, and return them.
# Emits a fatal error if arity is wrong.
def(token-args-0, Token --,
    token-has-args? if(
        "expected no args" emit-fatal-error!,
        drop
    ))

# Verify that token has 1 arg, and return it.
# Emits a fatal error if arity is wrong.
def(token-args-1, Token -- Token,
    dup token-has-args? if(
        token-succ token-succ
        tuck token-next-arg-end
        token-type? TOKEN_RPAREN == if(
            drop2,
            drop
            "expected 1 arg, got too many"
            emit-fatal-error!
        ),
        drop
        "expected 1 arg, got none"
        emit-fatal-error!
    ))

# Verify that token has 2 args, and return them.
# Emits a fatal error if arity is wrong.
def(token-args-2, Token -- Token Token,
    dup token-has-args? if(
        token-succ token-succ
        tuck token-next-arg-end
        token-type? TOKEN_COMMA == if(
            token-succ tuck token-next-arg-end
            token-type? TOKEN_RPAREN == if(
                drop2,
                drop
                "expected 2 args, got too many"
                emit-fatal-error!
            ),
            drop
            "expected 2 args, got only 1"
            emit-fatal-error!
        ),
        drop
        "expected 2 args, got none"
        emit-fatal-error!
    ))

# Verify that token has 3 args, and return them.
# Emits a fatal error if arity is wrong.
def(token-args-3, Token -- Token Token Token,
    dup token-has-args? if(
        token-succ token-succ
        tuck token-next-arg-end
        token-type? TOKEN_COMMA == if(
            token-succ tuck token-next-arg-end
            token-type? TOKEN_COMMA == if(
                token-succ tuck token-next-arg-end
                token-type? TOKEN_RPAREN == if(
                    drop2,
                    drop
                    "expected 3 args, got too many"
                    emit-fatal-error!
                ),
                drop
                "expected 3 args, got only 2"
                emit-fatal-error!
            ),
            drop
            "expected 3 args, got only 1"
            emit-fatal-error!
        ),
        drop
        "expected 3 args, got none"
        emit-fatal-error!
    ))

def(token-is-lbracket?, Token -- Token Bool,
    token-type? TOKEN_LBRACKET ==)

# Verify that bracket has 1 arg, and return it.
# Emits a fatal error if arity is wrong.
def(token-bracket-arg, Token -- Token,
    dup token-is-lbracket? if(
        token-succ
        tuck token-next-arg-end
        token-type? TOKEN_RBRACKET == if(
            drop2,
            drop
            "bracket expected 1 arg, got too many"
            emit-fatal-error!
        ),
        drop
        "bracket expected 1 arg, got none"
        emit-fatal-error!
    ))

token-is-comma? : Token -- Token Bool
token-is-comma? = token-type? TOKEN_COMMA ==

token-is-lparen? : Token -- Token Bool
token-is-lparen? = token-type? TOKEN_LPAREN ==

token-is-rparen? : Token -- Token Bool
token-is-rparen? = token-type? TOKEN_RPAREN ==

def(token-is-lbrace?, Token -- Token Bool,
    token-type? TOKEN_LBRACE ==)

# Verify that brace has 1 arg, and return it.
# Emits a fatal error if arity is wrong.
def(token-brace-arg, Token -- Token,
    dup token-is-lbrace? if(
        token-succ
        tuck token-next-arg-end
        token-type? TOKEN_RBRACE == if(
            drop2,
            drop
            "brace expected 1 arg, got too many"
            emit-fatal-error!
        ),
        drop
        "brace expected 1 arg, got none"
        emit-fatal-error!
    ))

def(emit-warning!, Token Str -- +IO, dip(token-location) emit-warning-at!)
def(emit-error!, Token Str -- +IO, dip(token-location) emit-error-at!)
def(emit-fatal-error!, *a Token Str -- *b +IO, dip(token-location) emit-fatal-error-at!)
