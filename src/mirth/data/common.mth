module(mirth/data/common)
import(prelude)
import(mirth/data/path)

# mirth/data/name
data NameValue
    DEF_NONE
    DEF_MODULE -> Module
    DEF_TYPE -> Type
    DEF_TAG -> Tag
    DEF_PRIM -> Prim
    DEF_WORD -> Word
    DEF_BUFFER -> Buffer
    DEF_EXTERNAL -> External
end
table(Name)
field(name-str, Name, Str)
field(name-value, Name, NameValue)

# mirth/data/buffer
table(Buffer)
field(buffer-size, Buffer, Size)
field(buffer-base, Buffer, Ptr)
field(buffer-name, Buffer, Name)

# mirth/data/module
table(Module)
table(Token)
field(module-name, Module, Name)
field(module-path, Module, Path)
field(module-start, Module, Token)
field(module-end, Module, Token)

# mirth/data/location
data(Row, ROW -> Int)
data(Col, COL -> Int)
data(Location, LOCATION -> Module Row Col)

# mirth/data/token
data TokenValue
    TOKEN_NONE
    TOKEN_COMMA
    TOKEN_NEWLINE
    TOKEN_COLON
    TOKEN_EQUAL
    TOKEN_ARROW
    TOKEN_DASHES
    TOKEN_LPAREN -> Token
    TOKEN_RPAREN -> Token
    TOKEN_LSQUARE -> Token
    TOKEN_RSQUARE -> Token
    TOKEN_LCURLY -> Token
    TOKEN_RCURLY -> Token
    TOKEN_INT -> Int
    TOKEN_STR -> Str
    TOKEN_NAME -> Name
end
field(token-value, Token, TokenValue)
field(token-module, Token, Module)
field(token-row, Token, Row)
field(token-col, Token, Col)

# mirth/data/type
data Type
    TYPE_ERROR
    TYPE_DONT_CARE
    TPrim -> PrimType
    TMeta -> MetaVar
    THole -> Name
    TVar -> Var
    TTable -> Table
    TData -> Data
    TTensor -> Type Type
    TMorphism -> Type Type
    TApp -> Type Type
end

data PrimType
    PRIM_TYPE_UNIT
    PRIM_TYPE_TYPE
    PRIM_TYPE_STACK
    PRIM_TYPE_EFFECT
    PRIM_TYPE_INT
    PRIM_TYPE_PTR
    PRIM_TYPE_STR
    PRIM_TYPE_BOOL
    PRIM_TYPE_U64
    PRIM_TYPE_U32
    PRIM_TYPE_U16
    PRIM_TYPE_U8
    PRIM_TYPE_I64
    PRIM_TYPE_I32
    PRIM_TYPE_I16
    PRIM_TYPE_I8
end

table(MetaVar)
table(Data)
table(Tag)
data(Ctx, CTX -> List(Var))

field(meta-is-defined, MetaVar, Bool)
field(meta-type-raw, MetaVar, Type)

field(data-header, Data, Token)
field(data-name, Data, Name)
field(data-arity, Data, Int)
field(data-tags, Data, List(Tag))

field(tag-data, Tag, Data)
field(tag-name, Tag, Name)
field(tag-value, Tag, Int)
field(tag-sig, Tag, Token)
field(tag-has-sig, Tag, Bool)
field(tag-sig-is-checked, Tag, Bool)
field(tag-ctx, Tag, Ctx)
field(tag-type-raw, Tag, Type)

# mirth/data/var
table(Var)
field(var-is-implicit, Var, Bool)
field(var-name, Var, Name)
field(var-type, Var, Type)
field(var-auto-run, Var, Bool) # run variable by default

# mirth/data/type
data Subst
    SUBST -> Map(Var, Type)
end

# mirth/data/external
table(External)
field(external-name, External, Name)
field(external-type, External, Type)
field(external-sig, External, Token)
field(external-sig-is-checked, External, Bool)
field(external-ctx, External, Ctx)

# mirth/data/arrow
table(Arrow)
table(Atom)
table(Lambda)
table(Block)

data Arg
    ARG_BLOCK -> Block
    ARG_VAR_RUN -> Var
end
data Op
    OP_NONE
    OP_PRIM -> Prim
    OP_WORD -> Word
    OP_EXTERNAL -> External
    OP_BUFFER -> Buffer
    OP_INT -> Int
    OP_STR -> Str
    OP_TAG -> Tag
    OP_MATCH -> Match
    OP_LAMBDA -> Lambda
    OP_VAR -> Var
    OP_BLOCK -> Block
end

field(arrow-token-start, Arrow, Token)
field(arrow-token-end, Arrow, Token)
field(arrow-ctx, Arrow, Ctx)
field(arrow-dom, Arrow, Type)
field(arrow-cod, Arrow, Type)
field(arrow-atoms, Arrow, List(Atom))

field(atom-token, Atom, Token)
field(atom-ctx, Atom, Ctx)
field(atom-op, Atom, Op)
field(atom-args, Atom, List(Arg))
field(atom-dom, Atom, Type)
field(atom-cod, Atom, Type)
field(atom-subst, Atom, Subst)

field(lambda-token, Lambda, Token)
field(lambda-outer-ctx, Lambda, Ctx)
field(lambda-inner-ctx, Lambda, Ctx)
field(lambda-dom, Lambda, Type)
field(lambda-mid, Lambda, Type)
field(lambda-cod, Lambda, Type)
field(lambda-params, Lambda, List(Var))
field(lambda-body, Lambda, Arrow)

field(block-arrow, Block, Arrow)
field(block-needed, Block, Bool)

# mirth/data/prim
data Prim
    PRIM_CORE_ID
    PRIM_CORE_DUP
    PRIM_CORE_DROP
    PRIM_CORE_SWAP
    PRIM_CORE_DIP
    PRIM_CORE_IF
    PRIM_CORE_WHILE
    PRIM_CORE_DEBUG
    PRIM_CORE_RUN
    PRIM_CORE_MATCH
    PRIM_CORE_LAMBDA

    PRIM_VALUE_CAST
    PRIM_VALUE_EQ
    PRIM_VALUE_LT
    PRIM_VALUE_LE
    PRIM_VALUE_GET
    PRIM_VALUE_SET

    PRIM_INT_ADD
    PRIM_INT_SUB
    PRIM_INT_MUL
    PRIM_INT_DIV
    PRIM_INT_MOD
    PRIM_INT_AND
    PRIM_INT_OR
    PRIM_INT_XOR
    PRIM_INT_SHL
    PRIM_INT_SHR
    PRIM_INT_GET
    PRIM_INT_SET

    PRIM_BOOL_TRUE
    PRIM_BOOL_FALSE
    PRIM_BOOL_AND
    PRIM_BOOL_OR

    PRIM_PACK_NIL
    PRIM_PACK_CONS
    PRIM_PACK_UNCONS

    PRIM_PTR_ADD
    PRIM_PTR_SIZE
    PRIM_PTR_GET
    PRIM_PTR_SET
    PRIM_PTR_ALLOC
    PRIM_PTR_REALLOC
    PRIM_PTR_NUMBYTES

    PRIM_U8_GET
    PRIM_U8_SET
    PRIM_U16_GET
    PRIM_U16_SET
    PRIM_U32_GET
    PRIM_U32_SET
    PRIM_U64_GET
    PRIM_U64_SET

    PRIM_I8_GET
    PRIM_I8_SET
    PRIM_I16_GET
    PRIM_I16_SET
    PRIM_I32_GET
    PRIM_I32_SET
    PRIM_I64_GET
    PRIM_I64_SET

    PRIM_SYS_OS
    PRIM_SYS_ARGC
    PRIM_SYS_ARGV

    PRIM_POSIX_READ
    PRIM_POSIX_WRITE
    PRIM_POSIX_OPEN
    PRIM_POSIX_CLOSE
    PRIM_POSIX_EXIT
    PRIM_POSIX_MMAP

    PRIM_SYNTAX_MODULE
    PRIM_SYNTAX_IMPORT
    PRIM_SYNTAX_DEF
    PRIM_SYNTAX_DEF_TYPE
    PRIM_SYNTAX_BUFFER
    PRIM_SYNTAX_DEF_EXTERNAL
    PRIM_SYNTAX_TARGET_C99
    PRIM_SYNTAX_TABLE
    PRIM_SYNTAX_FIELD
    PRIM_SYNTAX_DATA
    PRIM_SYNTAX_END
end
field(prim-name, Prim, Name)
field(prim-ctx, Prim, Ctx)
field(prim-type, Prim, Type)

# mirth/data/word
table(Word)
field(word-name, Word, Name)
field(word-sig, Word, Token)
field(word-body, Word, Token)
field(word-ctx, Word, Ctx)
field(word-type, Word, Type)
field(word-arrow, Word, Arrow)
field(word-sig-is-checked, Word, Bool)
field(word-body-is-checked, Word, Bool)

# mirth/data/table
table(Table)
table(Field)
field(table-name, Table, Name)
field(table-num-buffer, Table, Buffer)
field(table-max-count, Table, Size)
field(field-name, Field, Name)
field(field-table, Field, Type)
field(field-type, Field, Type)
field(field-buffer-size, Field, Buffer)
field(field-buffer-ptr, Field, Buffer)
field(field-word-ptr, Field, Word)

# mirth/data/type
table(Match)
table(Case)
data Pattern
    PATTERN_UNDERSCORE
    PATTERN_TAG -> Tag
end

field(match-ctx, Match, Ctx)
field(match-dom, Match, Type)
field(match-cod, Match, Type)
field(match-token, Match, Token)
field(match-cases, Match, List(Case))
field(case-match, Case, Match)
field(case-token, Case, Token)
field(case-pattern, Case, Pattern)
field(case-subst, Case, Subst)
field(case-mid, Case, Type)
field(case-body, Case, Arrow)
