module(mirth/data/prim)
import(mirth/data/name)
import(mirth/data/type)

def(Int->Prim, Int -- Prim, cast)
def(Prim->Int, Prim -- Int, cast)
def(NameValue->Prim, NameValue -- Prim, NameValue->Int Int->Prim)
def(Prim->NameValue, Prim -- NameValue, Prim->Int Int->NameValue)
def(name-prim!, Prim Name --,
    DEF_PRIM over name-sort!
    dip(Prim->NameValue) name-value!)
def(name-prim@, Name -- Prim,
    name-is-prim? if(
        name-value@ NameValue->Prim,
        "compiler error: attempted to get prim definition for non-prim name" panic!
    ))

||| Does this name refer to this primitive?
name-prim= : Name Prim -- Bool
name-prim= =
    swap name-is-prim? if(
        name-prim@ ==,
        drop2 false
    )

def(PRIM_ID, Prim, 1 Int->Prim)
def(PRIM_DUP, Prim, 2 Int->Prim)
def(PRIM_DROP, Prim, 3 Int->Prim)
def(PRIM_SWAP, Prim, 4 Int->Prim)
def(PRIM_DIP, Prim, 5 Int->Prim)
def(PRIM_IF, Prim, 6 Int->Prim)
def(PRIM_WHILE, Prim, 7 Int->Prim)
def(PRIM_DEBUG, Prim, 47 Int->Prim)
def(PRIM_CAST, Prim, 71 Int->Prim)

def(PRIM_DEFINE, Prim, 13 Int->Prim)
def(PRIM_EQUALS, Prim, 87 Int->Prim)

def(PRIM_INT_ADD, Prim, 8 Int->Prim)
def(PRIM_INT_SUB, Prim, 9 Int->Prim)
def(PRIM_INT_MUL, Prim, 10 Int->Prim)
def(PRIM_INT_DIV, Prim, 11 Int->Prim)
def(PRIM_INT_MOD, Prim, 12 Int->Prim)
def(PRIM_INT_AND, Prim, 16 Int->Prim)
def(PRIM_INT_OR, Prim, 17 Int->Prim)
def(PRIM_INT_XOR, Prim, 18 Int->Prim)
def(PRIM_INT_SHL, Prim, 19 Int->Prim)
def(PRIM_INT_SHR, Prim, 20 Int->Prim)
def(PRIM_INT_LT, Prim, 14 Int->Prim)
def(PRIM_INT_LE, Prim, 15 Int->Prim)

def(PRIM_BOOL_TRUE, Prim, 74 Int->Prim)
def(PRIM_BOOL_FALSE, Prim, 75 Int->Prim)
def(PRIM_BOOL_AND, Prim, 76 Int->Prim)
def(PRIM_BOOL_OR, Prim, 77 Int->Prim)

def(PRIM_PACK_NIL, Prim, 83 Int->Prim)
def(PRIM_PACK_CONS, Prim, 84 Int->Prim)
def(PRIM_PACK_UNCONS, Prim, 85 Int->Prim)

def(PRIM_PTR_ADD, Prim, 72 Int->Prim)
def(PRIM_PTR_SIZE, Prim, 82 Int->Prim)

def(PRIM_MEM_GET, Prim, 21 Int->Prim)
def(PRIM_MEM_SET, Prim, 22 Int->Prim)
def(PRIM_MEM_GET_U8, Prim, 25 Int->Prim)
def(PRIM_MEM_SET_U8, Prim, 26 Int->Prim)
def(PRIM_MEM_GET_U16, Prim, 27 Int->Prim)
def(PRIM_MEM_SET_U16, Prim, 28 Int->Prim)
def(PRIM_MEM_GET_U32, Prim, 29 Int->Prim)
def(PRIM_MEM_SET_U32, Prim, 30 Int->Prim)
def(PRIM_MEM_GET_U64, Prim, 31 Int->Prim)
def(PRIM_MEM_SET_U64, Prim, 32 Int->Prim)
def(PRIM_MEM_GET_I8, Prim, 33 Int->Prim)
def(PRIM_MEM_SET_I8, Prim, 34 Int->Prim)
def(PRIM_MEM_GET_I16, Prim, 35 Int->Prim)
def(PRIM_MEM_SET_I16, Prim, 36 Int->Prim)
def(PRIM_MEM_GET_I32, Prim, 37 Int->Prim)
def(PRIM_MEM_SET_I32, Prim, 38 Int->Prim)
def(PRIM_MEM_GET_I64, Prim, 39 Int->Prim)
def(PRIM_MEM_SET_I64, Prim, 40 Int->Prim)

def(PRIM_SYS_OS, Prim, 49 Int->Prim)
def(PRIM_SYS_ARGC, Prim, 80 Int->Prim)
def(PRIM_SYS_ARGV, Prim, 81 Int->Prim)

def(PRIM_POSIX_READ, Prim, 41 Int->Prim)
def(PRIM_POSIX_WRITE, Prim, 42 Int->Prim)
def(PRIM_POSIX_OPEN, Prim, 43 Int->Prim)
def(PRIM_POSIX_CLOSE, Prim, 44 Int->Prim)
def(PRIM_POSIX_EXIT, Prim, 45 Int->Prim)
def(PRIM_POSIX_MMAP, Prim, 46 Int->Prim)

def(PRIM_DASHES, Prim, 56 Int->Prim)
def(PRIM_ARROW, Prim, 57 Int->Prim)

def(PRIM_MODULE, Prim, 68 Int->Prim)
def(PRIM_IMPORT, Prim, 69 Int->Prim)
def(PRIM_DEF, Prim, 50 Int->Prim)
def(PRIM_DEF_TYPE, Prim, 51 Int->Prim)
def(PRIM_NOMINAL, Prim, 70 Int->Prim)
def(PRIM_BUFFER, Prim, 52 Int->Prim)
def(PRIM_DEF_EXTERNAL, Prim, 53 Int->Prim)
def(PRIM_TARGET_C99, Prim, 55 Int->Prim)
def(PRIM_TABLE, Prim, 78 Int->Prim)
def(PRIM_FIELD, Prim, 79 Int->Prim)
def(PRIM_COLON, Prim, 86 Int->Prim)
def(PRIM_DATA, Prim, 88 Int->Prim)
def(PRIM_END, Prim, 89 Int->Prim)

# next primitive is 90

||| Auxilliary word for defining primitives.
def(def-prim!, Prim Str -- +Names,
    name-new! dup2 name-prim! swap prim-name!)

||| Initialize name table with list of primitives.
def(init-prims!, +Names,

    PRIM_ID "id" def-prim!
    PRIM_DUP "dup" def-prim!
    PRIM_DROP "drop" def-prim!
    PRIM_SWAP "swap" def-prim!
    PRIM_DIP "dip" def-prim!
    PRIM_IF "if" def-prim!
    PRIM_WHILE "while" def-prim!
    PRIM_DEBUG "??" def-prim!
    PRIM_CAST "prim.unsafe.cast" def-prim!

    PRIM_DEFINE "=" def-prim!
    PRIM_EQUALS "==" def-prim!

    PRIM_INT_ADD "+" def-prim!
    PRIM_INT_SUB "-" def-prim!
    PRIM_INT_MUL "*" def-prim!
    PRIM_INT_DIV "/" def-prim!
    PRIM_INT_MOD "%" def-prim!
    PRIM_INT_AND "&" def-prim!
    PRIM_INT_OR "|" def-prim!
    PRIM_INT_XOR "^" def-prim!
    PRIM_INT_SHL "<<" def-prim!
    PRIM_INT_SHR ">>" def-prim!
    PRIM_INT_LT "<" def-prim!
    PRIM_INT_LE "<=" def-prim!

    PRIM_BOOL_TRUE "true" def-prim!
    PRIM_BOOL_FALSE "false" def-prim!
    PRIM_BOOL_AND "&&" def-prim!
    PRIM_BOOL_OR "||" def-prim!

    PRIM_PACK_NIL "prim.pack.nil" def-prim!
    PRIM_PACK_CONS "prim.pack.cons" def-prim!
    PRIM_PACK_UNCONS "prim.pack.uncons" def-prim!

    PRIM_PTR_ADD "prim.unsafe.ptr+" def-prim!
    PRIM_PTR_SIZE "prim.unsafe.|ptr|" def-prim!

    PRIM_MEM_GET "@" def-prim!
    PRIM_MEM_SET "!" def-prim!
    PRIM_MEM_GET_U8 "u8@" def-prim!
    PRIM_MEM_SET_U8 "u8!" def-prim!
    PRIM_MEM_GET_U16 "u16@" def-prim!
    PRIM_MEM_SET_U16 "u16!" def-prim!
    PRIM_MEM_GET_U32 "u32@" def-prim!
    PRIM_MEM_SET_U32 "u32!" def-prim!
    PRIM_MEM_GET_U64 "u64@" def-prim!
    PRIM_MEM_SET_U64 "u64!" def-prim!
    PRIM_MEM_GET_I8 "i8@" def-prim!
    PRIM_MEM_SET_I8 "i8!" def-prim!
    PRIM_MEM_GET_I16 "i16@" def-prim!
    PRIM_MEM_SET_I16 "i16!" def-prim!
    PRIM_MEM_GET_I32 "i32@" def-prim!
    PRIM_MEM_SET_I32 "i32!" def-prim!
    PRIM_MEM_GET_I64 "i64@" def-prim!
    PRIM_MEM_SET_I64 "i64!" def-prim!

    PRIM_SYS_OS "RUNNING_OS" def-prim!
    PRIM_SYS_ARGC "argc" def-prim!
    PRIM_SYS_ARGV "argv" def-prim!

    PRIM_POSIX_READ "posix-read!" def-prim!
    PRIM_POSIX_WRITE "posix-write!" def-prim!
    PRIM_POSIX_OPEN "posix-open!" def-prim!
    PRIM_POSIX_CLOSE "posix-close!" def-prim!
    PRIM_POSIX_EXIT "posix-exit!" def-prim!
    PRIM_POSIX_MMAP "posix-mmap!" def-prim!

    PRIM_DASHES "--" def-prim!
    PRIM_ARROW "->" def-prim!

    PRIM_MODULE "module" def-prim!
    PRIM_IMPORT "import" def-prim!
    PRIM_DEF "def" def-prim!
    PRIM_DEF_TYPE "def-type" def-prim!
    PRIM_BUFFER "buffer" def-prim!
    PRIM_DEF_EXTERNAL "def-external" def-prim!
    PRIM_NOMINAL "nominal" def-prim!
    PRIM_TABLE "table" def-prim!
    PRIM_FIELD "field" def-prim!
    PRIM_TARGET_C99 "target-c99" def-prim!
    PRIM_COLON ":" def-prim!
    PRIM_DATA "data" def-prim!
    PRIM_END "end" def-prim!

    #
    # monomorphic prims
    #

    T0 T0 T->
    dup PRIM_ID prim-type!
    dup PRIM_DEBUG prim-type!
    drop

    TYPE_INT TYPE_INT T2 TYPE_INT T1 T->
    dup PRIM_INT_ADD prim-type!
    dup PRIM_INT_SUB prim-type!
    dup PRIM_INT_MUL prim-type!
    dup PRIM_INT_DIV prim-type!
    dup PRIM_INT_MOD prim-type!
    dup PRIM_INT_AND prim-type!
    dup PRIM_INT_OR prim-type!
    dup PRIM_INT_XOR prim-type!
    dup PRIM_INT_SHL prim-type!
    dup PRIM_INT_SHR prim-type!
    drop

    TYPE_INT TYPE_INT T2 TYPE_BOOL T1 T->
    dup PRIM_INT_LT prim-type!
    dup PRIM_INT_LE prim-type!
    drop

    TYPE_PTR T1 TYPE_INT T1 T-> PRIM_MEM_GET     prim-type!
    TYPE_PTR T1 TYPE_U8  T1 T-> PRIM_MEM_GET_U8  prim-type!
    TYPE_PTR T1 TYPE_U16 T1 T-> PRIM_MEM_GET_U16 prim-type!
    TYPE_PTR T1 TYPE_U32 T1 T-> PRIM_MEM_GET_U32 prim-type!
    TYPE_PTR T1 TYPE_U64 T1 T-> PRIM_MEM_GET_U64 prim-type!
    TYPE_PTR T1 TYPE_I8  T1 T-> PRIM_MEM_GET_I8  prim-type!
    TYPE_PTR T1 TYPE_I16 T1 T-> PRIM_MEM_GET_I16 prim-type!
    TYPE_PTR T1 TYPE_I32 T1 T-> PRIM_MEM_GET_I32 prim-type!
    TYPE_PTR T1 TYPE_I64 T1 T-> PRIM_MEM_GET_I64 prim-type!

    TYPE_INT TYPE_PTR T2 T0 T-> PRIM_MEM_SET     prim-type!
    TYPE_U8  TYPE_PTR T2 T0 T-> PRIM_MEM_SET_U8  prim-type!
    TYPE_U16 TYPE_PTR T2 T0 T-> PRIM_MEM_SET_U16 prim-type!
    TYPE_U32 TYPE_PTR T2 T0 T-> PRIM_MEM_SET_U32 prim-type!
    TYPE_U64 TYPE_PTR T2 T0 T-> PRIM_MEM_SET_U64 prim-type!
    TYPE_I8  TYPE_PTR T2 T0 T-> PRIM_MEM_SET_I8  prim-type!
    TYPE_I16 TYPE_PTR T2 T0 T-> PRIM_MEM_SET_I16 prim-type!
    TYPE_I32 TYPE_PTR T2 T0 T-> PRIM_MEM_SET_I32 prim-type!
    TYPE_I64 TYPE_PTR T2 T0 T-> PRIM_MEM_SET_I64 prim-type!

    TYPE_INT TYPE_PTR TYPE_INT T3 TYPE_INT T1 T->
    PRIM_POSIX_READ prim-type!

    TYPE_INT TYPE_PTR TYPE_INT T3 T0 T->
    PRIM_POSIX_WRITE prim-type!

    TYPE_PTR TYPE_INT TYPE_INT T3 TYPE_INT T1 T->
    PRIM_POSIX_OPEN prim-type!

    TYPE_INT T1 TYPE_INT T1 T->
    PRIM_POSIX_CLOSE prim-type!

    TYPE_PTR TYPE_INT TYPE_INT TYPE_INT TYPE_INT TYPE_INT T6
    TYPE_PTR T1 T->
    PRIM_POSIX_MMAP prim-type!

    TYPE_INT TYPE_PTR T2 TYPE_PTR T1 T->
    PRIM_PTR_ADD prim-type!

    T0 TYPE_INT T1 T->
    PRIM_PTR_SIZE prim-type!

    T0 TYPE_INT T1 T->
    PRIM_SYS_OS prim-type!

    T0 TYPE_INT T1 T->
    PRIM_SYS_ARGC prim-type!

    T0 TYPE_PTR T1 T->
    PRIM_SYS_ARGV prim-type!

    T0 TYPE_BOOL T1 T->
    dup PRIM_BOOL_TRUE prim-type!
    dup PRIM_BOOL_FALSE prim-type!
    drop

    TYPE_BOOL TYPE_BOOL T2 TYPE_BOOL T1 T->
    dup PRIM_BOOL_AND prim-type!
    dup PRIM_BOOL_OR prim-type!
    drop

    T0 T0 T1 T->
    PRIM_PACK_NIL prim-type!

    #
    # polymorphic prims -- we really need better technology to notate these
    #

    "a" name-new! var-new-implicit! TYPE_TYPE over var-type!
    dup ctx-empty swap ctx-new!
    PRIM_DROP prim-ctx!

    TVar T1 T0 T->
    PRIM_DROP prim-type!

    "a" name-new! var-new-implicit! TYPE_TYPE over var-type!
    dup ctx-empty swap ctx-new!
    PRIM_DUP prim-ctx!

    TVar dup T1 dup rotl T* T->
    PRIM_DUP prim-type!

    "a" name-new! var-new-implicit! TYPE_TYPE over var-type!
    dup ctx-empty swap ctx-new!
    PRIM_EQUALS prim-ctx!

    TVar dup T2 TYPE_BOOL T1 T->
    PRIM_EQUALS prim-type!

    "a" name-new! var-new-implicit! TYPE_TYPE over var-type!
    "b" name-new! var-new-implicit! TYPE_TYPE over var-type!
    dup2 ctx-empty swap ctx-new! swap ctx-new!
    PRIM_SWAP prim-ctx!

    dip(TVar) TVar
    dup2 T2 rotr swap T2 T->
    PRIM_SWAP prim-type!

    "a" name-new! var-new-implicit! TYPE_TYPE over var-type!
    "b" name-new! var-new-implicit! TYPE_TYPE over var-type!
    dup2 ctx-empty swap ctx-new! swap ctx-new!
    PRIM_CAST prim-ctx!

    dip(TVar T1) TVar T1 T->
    PRIM_CAST prim-type!

    "*a" name-new! var-new-implicit! TYPE_STACK over var-type!
    "*b" name-new! var-new-implicit! TYPE_STACK over var-type!
    dup2 ctx-empty swap ctx-new! swap ctx-new!
    PRIM_POSIX_EXIT prim-ctx!

    dip(TVar) TVar
    dip(TYPE_INT T*) T->
    PRIM_POSIX_EXIT prim-type!

    "*a" name-new! var-new-implicit! TYPE_STACK over var-type!
    "*b" name-new! var-new-implicit! TYPE_STACK over var-type!
    "c" name-new! var-new-implicit! TYPE_TYPE over var-type!
    dup3 ctx-empty swap ctx-new! swap ctx-new! swap ctx-new!
    PRIM_DIP prim-ctx!

    dip(dip(TVar) TVar) TVar
    dip(dup2 T-> P1 rotr)
    tuck T* dip(T*) T-> T=>
    PRIM_DIP prim-type!

    "*a" name-new! var-new-implicit! TYPE_STACK over var-type!
    "*b" name-new! var-new-implicit! TYPE_STACK over var-type!
    dup2 ctx-empty swap ctx-new! swap ctx-new!
    PRIM_IF prim-ctx!

    dip(TVar) TVar
    dup2 T-> dup P2
    dip(dip(TYPE_BOOL T*) T->)
    swap T=>
    PRIM_IF prim-type!

    "*a" name-new! var-new-implicit! TYPE_STACK over var-type!
    dup ctx-empty swap ctx-new!
    PRIM_WHILE prim-ctx!

    TVar
    dup dup TYPE_BOOL T* T->
    over dup T-> P2
    swap dup T-> T=>
    PRIM_WHILE prim-type!


    "*a" name-new! var-new-implicit! TYPE_STACK over var-type!
    "b" name-new! var-new-implicit! TYPE_TYPE over var-type!
    dup2 ctx-empty swap ctx-new! swap ctx-new!
    PRIM_PACK_CONS prim-ctx!

    dip(TVar) TVar
    dup2 T2 rotr T* T1 T->
    PRIM_PACK_CONS prim-type!

    "*a" name-new! var-new-implicit! TYPE_STACK over var-type!
    "b" name-new! var-new-implicit! TYPE_TYPE over var-type!
    dup2 ctx-empty swap ctx-new! swap ctx-new!
    PRIM_PACK_UNCONS prim-ctx!

    dip(TVar) TVar
    dup2 T* T1 rotr T2 T->
    PRIM_PACK_UNCONS prim-type!

    )
