module(mirth/data/prim)
import(mirth/data/name)
import(mirth/data/type)
import(mirth/data/ctx)

||| Does this name refer to this primitive?
name-prim= : Name Prim -- Bool
name-prim= =
    swap name-value@ match(
        DEF_PRIM -> ==,
        _ -> drop2 false
    )

||| Does the token refer to this primitive? Preserves the token.
token-prim=? : Token Prim -- Token Bool
token-prim=? = dip(dup) token-prim=

||| Does the token refer to this primitive?
token-prim= : Token Prim -- Bool
token-prim= =
    swap token-value@ match(
        TOKEN_NAME ->
            swap name-prim=,
        _ ->
            drop2 false
    )

||| Auxilliary word for defining primitives.
def(def-prim!, Prim Str -- +Names,
    name-new! dup2 name-prim! swap prim-name!)

||| Initialize name table with list of primitives.
def(init-prims!, +Names,

    PRIM_SYNTAX_MODULE "module" caststr def-prim!
    PRIM_SYNTAX_IMPORT "import" caststr def-prim!
    PRIM_SYNTAX_DEF "def" caststr def-prim!
    PRIM_SYNTAX_DEF_TYPE "def-type" caststr def-prim!
    PRIM_SYNTAX_BUFFER "buffer" caststr def-prim!
    PRIM_SYNTAX_DEF_EXTERNAL "def-external" caststr def-prim!
    PRIM_SYNTAX_TABLE "table" caststr def-prim!
    PRIM_SYNTAX_FIELD "field" caststr def-prim!
    PRIM_SYNTAX_TARGET_C99 "target-c99" caststr def-prim!
    PRIM_SYNTAX_DATA "data" caststr def-prim!
    PRIM_SYNTAX_END "end" caststr def-prim!

    PRIM_SYNTAX_MODULE "prim.syntax.module" caststr def-prim!
    PRIM_SYNTAX_IMPORT "prim.syntax.import" caststr def-prim!
    PRIM_SYNTAX_DEF "prim.syntax.def" caststr def-prim!
    PRIM_SYNTAX_DEF_TYPE "prim.syntax.def-type" caststr def-prim!
    PRIM_SYNTAX_BUFFER "prim.syntax.buffer" caststr def-prim!
    PRIM_SYNTAX_DEF_EXTERNAL "prim.syntax.def-external" caststr def-prim!
    PRIM_SYNTAX_TABLE "prim.syntax.table" caststr def-prim!
    PRIM_SYNTAX_FIELD "prim.syntax.field" caststr def-prim!
    PRIM_SYNTAX_TARGET_C99 "prim.syntax.target-c99" caststr def-prim!
    PRIM_SYNTAX_DATA "prim.syntax.data" caststr def-prim!
    PRIM_SYNTAX_END "prim.syntax.end" caststr def-prim!

    PRIM_CORE_DIP "dip" caststr def-prim!
    PRIM_CORE_IF "if" caststr def-prim!
    PRIM_CORE_WHILE "while" caststr def-prim!
    PRIM_CORE_MATCH "match" caststr def-prim!
    PRIM_CORE_LAMBDA "\\" caststr def-prim!

    PRIM_CORE_ID "prim.core.id" caststr def-prim!
    PRIM_CORE_DUP "prim.core.dup" caststr def-prim!
    PRIM_CORE_DROP "prim.core.drop" caststr def-prim!
    PRIM_CORE_SWAP "prim.core.swap" caststr def-prim!
    PRIM_CORE_DIP "prim.core.dip" caststr def-prim!
    PRIM_CORE_IF "prim.core.if" caststr def-prim!
    PRIM_CORE_WHILE "prim.core.while" caststr def-prim!
    PRIM_CORE_DEBUG "prim.core.debug" caststr def-prim!
    PRIM_CORE_RUN "prim.core.run" caststr def-prim!
    PRIM_CORE_MATCH "prim.core.match" caststr def-prim!
    PRIM_CORE_LAMBDA "prim.core.lambda" caststr def-prim!

    PRIM_VALUE_EQ "prim.value.eq" caststr def-prim!
    PRIM_VALUE_LT "prim.value.lt" caststr def-prim!
    PRIM_VALUE_LE "prim.value.le" caststr def-prim!
    PRIM_VALUE_CAST "prim.value.cast" caststr def-prim!
    PRIM_VALUE_GET "prim.value.get" caststr def-prim!
    PRIM_VALUE_SET "prim.value.set" caststr def-prim!

    PRIM_INT_ADD "prim.int.add" caststr def-prim!
    PRIM_INT_SUB "prim.int.sub" caststr def-prim!
    PRIM_INT_MUL "prim.int.mul" caststr def-prim!
    PRIM_INT_DIV "prim.int.div" caststr def-prim!
    PRIM_INT_MOD "prim.int.mod" caststr def-prim!
    PRIM_INT_AND "prim.int.and" caststr def-prim!
    PRIM_INT_OR "prim.int.or" caststr def-prim!
    PRIM_INT_XOR "prim.int.xor" caststr def-prim!
    PRIM_INT_SHL "prim.int.shl" caststr def-prim!
    PRIM_INT_SHR "prim.int.shr" caststr def-prim!
    PRIM_INT_GET "prim.int.get" caststr def-prim!
    PRIM_INT_SET "prim.int.set" caststr def-prim!

    PRIM_BOOL_TRUE "prim.bool.true" caststr def-prim!
    PRIM_BOOL_FALSE "prim.bool.false" caststr def-prim!
    PRIM_BOOL_AND "prim.bool.and" caststr def-prim!
    PRIM_BOOL_OR "prim.bool.or" caststr def-prim!

    PRIM_PACK_NIL "prim.pack.nil" caststr def-prim!
    PRIM_PACK_CONS "prim.pack.cons" caststr def-prim!
    PRIM_PACK_UNCONS "prim.pack.uncons" caststr def-prim!

    PRIM_PTR_ADD "prim.ptr.add" caststr def-prim!
    PRIM_PTR_SIZE "prim.ptr.size" caststr def-prim!
    PRIM_PTR_GET "prim.ptr.get" caststr def-prim!
    PRIM_PTR_SET "prim.ptr.set" caststr def-prim!
    PRIM_PTR_ALLOC "prim.ptr.alloc" caststr def-prim!
    PRIM_PTR_NUMBYTES "prim.ptr.numbytes" caststr def-prim!

    PRIM_U8_GET "prim.u8.get" caststr def-prim!
    PRIM_U8_SET "prim.u8.set" caststr def-prim!
    PRIM_U16_GET "prim.u16.get" caststr def-prim!
    PRIM_U16_SET "prim.u16.set" caststr def-prim!
    PRIM_U32_GET "prim.u32.get" caststr def-prim!
    PRIM_U32_SET "prim.u32.set" caststr def-prim!
    PRIM_U64_GET "prim.u64.get" caststr def-prim!
    PRIM_U64_SET "prim.u64.set" caststr def-prim!

    PRIM_I8_GET "prim.i8.get" caststr def-prim!
    PRIM_I8_SET "prim.i8.set" caststr def-prim!
    PRIM_I16_GET "prim.i16.get" caststr def-prim!
    PRIM_I16_SET "prim.i16.set" caststr def-prim!
    PRIM_I32_GET "prim.i32.get" caststr def-prim!
    PRIM_I32_SET "prim.i32.set" caststr def-prim!
    PRIM_I64_GET "prim.i64.get" caststr def-prim!
    PRIM_I64_SET "prim.i64.set" caststr def-prim!

    PRIM_SYS_OS "prim.sys.os" caststr def-prim!
    PRIM_SYS_ARGC "prim.sys.argc" caststr def-prim!
    PRIM_SYS_ARGV "prim.sys.argv" caststr def-prim!

    PRIM_POSIX_READ "prim.posix.read" caststr def-prim!
    PRIM_POSIX_WRITE "prim.posix.write" caststr def-prim!
    PRIM_POSIX_OPEN "prim.posix.open" caststr def-prim!
    PRIM_POSIX_CLOSE "prim.posix.close" caststr def-prim!
    PRIM_POSIX_EXIT "prim.posix.exit" caststr def-prim!
    PRIM_POSIX_MMAP "prim.posix.mmap" caststr def-prim!

    #
    # monomorphic prims
    #

    T0 T0 T->
    dup PRIM_CORE_ID prim-type!
    dup PRIM_CORE_DEBUG prim-type!
    drop

    TYPE_INT TYPE_INT T2 TYPE_INT T1 T->
    dup PRIM_INT_ADD prim-type!
    dup PRIM_INT_SUB prim-type!
    dup PRIM_INT_MUL prim-type!
    dup PRIM_INT_DIV prim-type!
    dup PRIM_INT_MOD prim-type!
    dup PRIM_INT_AND prim-type!
    dup PRIM_INT_OR prim-type!
    dup PRIM_INT_XOR prim-type!
    dup PRIM_INT_SHL prim-type!
    dup PRIM_INT_SHR prim-type!
    drop

    TYPE_PTR T1 TYPE_INT T1 T-> PRIM_INT_GET prim-type!
    TYPE_PTR T1 TYPE_PTR T1 T-> PRIM_PTR_GET prim-type!
    TYPE_PTR T1 TYPE_U8  T1 T-> PRIM_U8_GET  prim-type!
    TYPE_PTR T1 TYPE_U16 T1 T-> PRIM_U16_GET prim-type!
    TYPE_PTR T1 TYPE_U32 T1 T-> PRIM_U32_GET prim-type!
    TYPE_PTR T1 TYPE_U64 T1 T-> PRIM_U64_GET prim-type!
    TYPE_PTR T1 TYPE_I8  T1 T-> PRIM_I8_GET  prim-type!
    TYPE_PTR T1 TYPE_I16 T1 T-> PRIM_I16_GET prim-type!
    TYPE_PTR T1 TYPE_I32 T1 T-> PRIM_I32_GET prim-type!
    TYPE_PTR T1 TYPE_I64 T1 T-> PRIM_I64_GET prim-type!

    TYPE_INT TYPE_PTR T2 T0 T-> PRIM_INT_SET prim-type!
    TYPE_PTR TYPE_PTR T2 T0 T-> PRIM_PTR_SET prim-type!
    TYPE_U8  TYPE_PTR T2 T0 T-> PRIM_U8_SET  prim-type!
    TYPE_U16 TYPE_PTR T2 T0 T-> PRIM_U16_SET prim-type!
    TYPE_U32 TYPE_PTR T2 T0 T-> PRIM_U32_SET prim-type!
    TYPE_U64 TYPE_PTR T2 T0 T-> PRIM_U64_SET prim-type!
    TYPE_I8  TYPE_PTR T2 T0 T-> PRIM_I8_SET  prim-type!
    TYPE_I16 TYPE_PTR T2 T0 T-> PRIM_I16_SET prim-type!
    TYPE_I32 TYPE_PTR T2 T0 T-> PRIM_I32_SET prim-type!
    TYPE_I64 TYPE_PTR T2 T0 T-> PRIM_I64_SET prim-type!

    TYPE_INT TYPE_PTR TYPE_INT T3 TYPE_INT T1 T->
    PRIM_POSIX_READ prim-type!

    TYPE_INT TYPE_PTR TYPE_INT T3 TYPE_INT T1 T->
    PRIM_POSIX_WRITE prim-type!

    TYPE_PTR TYPE_INT TYPE_INT T3 TYPE_INT T1 T->
    PRIM_POSIX_OPEN prim-type!

    TYPE_INT T1 TYPE_INT T1 T->
    PRIM_POSIX_CLOSE prim-type!

    TYPE_PTR TYPE_INT TYPE_INT TYPE_INT TYPE_INT TYPE_INT T6
    TYPE_PTR T1 T->
    PRIM_POSIX_MMAP prim-type!

    TYPE_INT TYPE_PTR T2 TYPE_PTR T1 T->
    PRIM_PTR_ADD prim-type!

    T0 TYPE_INT T1 T->
    PRIM_PTR_SIZE prim-type!

    TYPE_INT T1 TYPE_PTR T1 T->
    PRIM_PTR_ALLOC prim-type!

    TYPE_PTR T1 TYPE_INT T1 T->
    PRIM_PTR_NUMBYTES prim-type!

    T0 TYPE_INT T1 T->
    PRIM_SYS_OS prim-type!

    T0 TYPE_INT T1 T->
    PRIM_SYS_ARGC prim-type!

    T0 TYPE_PTR T1 T->
    PRIM_SYS_ARGV prim-type!

    T0 TYPE_BOOL T1 T->
    dup PRIM_BOOL_TRUE prim-type!
    dup PRIM_BOOL_FALSE prim-type!
    drop

    TYPE_BOOL TYPE_BOOL T2 TYPE_BOOL T1 T->
    dup PRIM_BOOL_AND prim-type!
    dup PRIM_BOOL_OR prim-type!
    drop

    T0 T0 T1 T->
    PRIM_PACK_NIL prim-type!

    #
    # polymorphic prims -- we really need better technology to notate these
    #

    "a" caststr name-new! var-new-implicit! TYPE_TYPE over var-type!
    dup ctx-empty swap ctx-new!
    PRIM_CORE_DROP prim-ctx!

    TVar T1 T0 T->
    PRIM_CORE_DROP prim-type!

    "a" caststr name-new! var-new-implicit! TYPE_TYPE over var-type!
    dup ctx-empty swap ctx-new!
    PRIM_CORE_DUP prim-ctx!

    TVar dup T1 dup rotl T* T->
    PRIM_CORE_DUP prim-type!

    "a" caststr name-new! var-new-implicit! TYPE_TYPE over var-type!
    dup ctx-empty swap ctx-new!

    dup PRIM_VALUE_EQ prim-ctx!
    dup PRIM_VALUE_LT prim-ctx!
    dup PRIM_VALUE_LE prim-ctx!
    drop

    TVar dup T2 TYPE_BOOL T1 T->
    dup PRIM_VALUE_EQ prim-type!
    dup PRIM_VALUE_LT prim-type!
    dup PRIM_VALUE_LE prim-type!
    drop

    "a" caststr name-new! var-new-implicit! TYPE_TYPE over var-type!
    "b" caststr name-new! var-new-implicit! TYPE_TYPE over var-type!
    dup2 ctx-empty swap ctx-new! swap ctx-new!
    PRIM_CORE_SWAP prim-ctx!

    dip(TVar) TVar
    dup2 T2 rotr swap T2 T->
    PRIM_CORE_SWAP prim-type!

    "a" caststr name-new! var-new-implicit! TYPE_TYPE over var-type!
    "b" caststr name-new! var-new-implicit! TYPE_TYPE over var-type!
    dup2 ctx-empty swap ctx-new! swap ctx-new!
    PRIM_VALUE_CAST prim-ctx!

    dip(TVar T1) TVar T1 T->
    PRIM_VALUE_CAST prim-type!

    "*a" caststr name-new! var-new-implicit! TYPE_STACK over var-type!
    "*b" caststr name-new! var-new-implicit! TYPE_STACK over var-type!
    dup2 ctx-empty swap ctx-new! swap ctx-new!
    PRIM_CORE_RUN prim-ctx!

    dip(TVar) TVar
    dup2 T-> swap dip(T*) T->
    PRIM_CORE_RUN prim-type!

    "*a" caststr name-new! var-new-implicit! TYPE_STACK over var-type!
    "*b" caststr name-new! var-new-implicit! TYPE_STACK over var-type!
    dup2 ctx-empty swap ctx-new! swap ctx-new!
    PRIM_POSIX_EXIT prim-ctx!

    dip(TVar) TVar
    dip(TYPE_INT T*) T->
    PRIM_POSIX_EXIT prim-type!

    "*a" caststr name-new! var-new-implicit! TYPE_STACK over var-type!
    "*b" caststr name-new! var-new-implicit! TYPE_STACK over var-type!
    "c" caststr name-new! var-new-implicit! TYPE_TYPE over var-type!
    dup3 ctx-empty swap ctx-new! swap ctx-new! swap ctx-new!
    PRIM_CORE_DIP prim-ctx!

    dip(dip(TVar) TVar) TVar
    dip(dup2) tuck T* dip(T*)
    dip(dip(T->) swap T*) T->
    PRIM_CORE_DIP prim-type!

    "*a" caststr name-new! var-new-implicit! TYPE_STACK over var-type!
    "*b" caststr name-new! var-new-implicit! TYPE_STACK over var-type!
    dup2 ctx-empty swap ctx-new! swap ctx-new!
    PRIM_CORE_IF prim-ctx!

    dip(TVar) TVar
    dup2 T-> swap
    dip(dip(TYPE_BOOL T*) dup dip(T*) T*) T->
    PRIM_CORE_IF prim-type!

    "*a" caststr name-new! var-new-implicit! TYPE_STACK over var-type!
    dup ctx-empty swap ctx-new!
    PRIM_CORE_WHILE prim-ctx!

    TVar
    dup
    dup dip(dup T-> T*)
    dup dip(dup TYPE_BOOL T* T-> T*)
    T->
    PRIM_CORE_WHILE prim-type!

    "*a" caststr name-new! var-new-implicit! TYPE_STACK over var-type!
    "b" caststr name-new! var-new-implicit! TYPE_TYPE over var-type!
    dup2 ctx-empty swap ctx-new! swap ctx-new!
    PRIM_PACK_CONS prim-ctx!

    dip(TVar) TVar
    dup2 T2 rotr T* T1 T->
    PRIM_PACK_CONS prim-type!

    "*a" caststr name-new! var-new-implicit! TYPE_STACK over var-type!
    "b" caststr name-new! var-new-implicit! TYPE_TYPE over var-type!
    dup2 ctx-empty swap ctx-new! swap ctx-new!
    PRIM_PACK_UNCONS prim-ctx!

    dip(TVar) TVar
    dup2 T* T1 rotr T2 T->
    PRIM_PACK_UNCONS prim-type!

    "a" caststr name-new! var-new-implicit! TYPE_TYPE over var-type!
    dup ctx-empty swap ctx-new!
    PRIM_VALUE_GET prim-ctx!

    TVar
    dip(TYPE_PTR T1) T1 T->
    PRIM_VALUE_GET prim-type!

    "a" caststr name-new! var-new-implicit! TYPE_TYPE over var-type!
    dup ctx-empty swap ctx-new!
    PRIM_VALUE_SET prim-ctx!

    TVar
    TYPE_PTR T2 T0 T->
    PRIM_VALUE_SET prim-type!
    )
