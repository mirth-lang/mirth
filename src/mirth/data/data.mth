module(mirth.data.data)

import(prelude)
import(data.lazy)
import(data.list)
import(data.maybe)
import(mirth.data.ctx)
import(mirth.data.type)
import(mirth.data.token)
import(mirth.data.name)
import(mirth.data.def)

table(Data)
field(Data~head?, Data, Maybe(Token))
field(Data~name, Data, Name)
field(Data~arity, Data, Int)
field(Data~tags, Data, List(Tag))

def(Data.head?, Data -- Maybe(Token), ~head? @)
def(Data.name, Data -- Name, ~name @)
def(Data.arity, Data -- Int, ~arity @)
def(Data.tags, Data -- List(Tag), ~tags @)

var(DATA_BOOL, Data)
var(TAG_T, Tag)
var(TAG_F, Tag)
def(TYPE_BOOL, Type, DATA_BOOL @ TData)

var(DATA_U64, Data) var(TAG_U64, Tag)
var(DATA_U32, Data) var(TAG_U32, Tag)
var(DATA_U16, Data) var(TAG_U16, Tag)
var(DATA_U8, Data) var(TAG_U8, Tag)
var(DATA_I64, Data) var(TAG_I64, Tag)
var(DATA_I32, Data) var(TAG_I32, Tag)
var(DATA_I16, Data) var(TAG_I16, Tag)
var(DATA_I8, Data) var(TAG_I8, Tag)
def(TYPE_U64, Type, DATA_U64 @ TData)
def(TYPE_U32, Type, DATA_U32 @ TData)
def(TYPE_U16, Type, DATA_U16 @ TData)
def(TYPE_U8, Type, DATA_U8 @ TData)
def(TYPE_I64, Type, DATA_I64 @ TData)
def(TYPE_I32, Type, DATA_I32 @ TData)
def(TYPE_I16, Type, DATA_I16 @ TData)
def(TYPE_I8, Type, DATA_I8 @ TData)

def(make-data!, Str Mut(Data) List(Mut(Tag)) --,
    dip(dip(Data.alloc! dup) !)
    map(dip(Tag.alloc! dup) !)
    { Str Data List(Tag) }
    dip(
        dip(>Name)
        dup2 ~name !
        tuck TData DEF_TYPE swap ~Def !
    )
    { Data List(Tag) }
    dup for(dip(over) ~data !)
    over ~tags !
    { Data }
    0 over ~arity !
    NONE over ~head? !
    drop)


def(make-tag!, Str Int List(Type) Mut(Tag) --,
    @
    dip(sip(len) TT)
    sip(CTX0 rotr .data TData T1 T-> pack2 LAZY_READY) sip(~ctx-type !)
    sip(~num-type-inputs !)
    sip(0 swap ~num-resource-inputs !)
    sip(~value !)
    dip(>Name) dup2 ~name !
    DEF_TAG swap ~Def !)

def(init-data!, --,
    "Bool" DATA_BOOL TAG_F TAG_T L2 make-data!
    "F" 0 L0 TAG_F make-tag!
    "T" 1 L0 TAG_T make-tag!

    "U64" DATA_U64 TAG_U64 L1 make-data! "Int>U64-unsafe" 0 TYPE_INT L1 TAG_U64 make-tag!
    "U32" DATA_U32 TAG_U32 L1 make-data! "Int>U32-unsafe" 0 TYPE_INT L1 TAG_U32 make-tag!
    "U16" DATA_U16 TAG_U16 L1 make-data! "Int>U16-unsafe" 0 TYPE_INT L1 TAG_U16 make-tag!
    "U8"  DATA_U8  TAG_U8  L1 make-data! "Int>U8-unsafe"  0 TYPE_INT L1 TAG_U8  make-tag!
    "I64" DATA_I64 TAG_I64 L1 make-data! "Int>I64-unsafe" 0 TYPE_INT L1 TAG_I64 make-tag!
    "I32" DATA_I32 TAG_I32 L1 make-data! "Int>I32-unsafe" 0 TYPE_INT L1 TAG_I32 make-tag!
    "I16" DATA_I16 TAG_I16 L1 make-data! "Int>I16-unsafe" 0 TYPE_INT L1 TAG_I16 make-tag!
    "I8"  DATA_I8  TAG_I8  L1 make-data! "Int>I8-unsafe"  0 TYPE_INT L1 TAG_I8  make-tag!)

########
# DATA #
########

def(Data=, Data Data -- Bool, both(.id) =)
def(Data.num-tags, Data -- Int, tags len)

||| Adds constructor to data type, and gives tag its rank.
def(Data.add-tag!, Tag Data --,
    dup2 num-tags swap ~value !
    dup tags rotr dip(snoc) ~tags !)

def(Data.is-enum?, Data -- Bool,
    tags all?(dup num-type-inputs 0= and(dup num-resource-inputs 0=)) nip)

def(Data.is-transparent?, Data -- Bool,
    dup is-resource? if(
        drop F,
        tags match(
            L1 -> dup num-type-inputs 1 = swap num-resource-inputs 0 = &&,
            _ -> drop F
        )
    ))

def(Data.is-resource?, Data -- Bool,
    name could-be-resource-con)

#######
# TAG #
#######

table(Tag)
field(Tag~data, Tag, Data)
field(Tag~name, Tag, Name)
field(Tag~value, Tag, Int)
field(Tag~num-type-inputs, Tag, Int)
field(Tag~num-resource-inputs, Tag, Int)
field(Tag~sig?, Tag, Maybe(Token))
field(Tag~ctx-type, Tag, Lazy([Ctx ArrowType]))

def(Tag.data, Tag -- Data, ~data @)
def(Tag.name, Tag -- Name, ~name @)
def(Tag.value, Tag -- Int, ~value @)
def(Tag.num-type-inputs, Tag -- Int, ~num-type-inputs @)
def(Tag.num-resource-inputs, Tag -- Int, ~num-resource-inputs @)
def(Tag.sig?, Tag -- Maybe(Token), ~sig? @)
def(Tag.ctx-type, Tag -- Ctx ArrowType, ~ctx-type force! unpack2)
def(Tag.ctx, Tag -- Ctx, ctx-type drop)
def(Tag.type, Tag -- ArrowType, ctx-type nip)

def(Tag.num-type-inputs-from-sig, Tag -- Int,
    dup sig? if-some(
        run-length
        swap num-resource-inputs-from-sig -,
        drop 0
    ))

def(Tag.num-resource-inputs-from-sig, Tag -- Int,
    sig? if-some(
        run-tokens filter-some(name?)
        filter(dup could-be-resource-var or(dup could-be-resource-con))
        len,
        0
    ))

def(Tag.is-transparent?, Tag -- Bool,
    .data is-transparent?)

def(Tag.outputs-resource?, Tag -- Bool,
    .data is-resource?)

def(Tag=, Tag Tag -- Bool, both(.id) =)
