module(mirth.data.name)

import(prelude)
import(platform.posix)
import(data.byte)
import(data.str)
import(data.list)
import(data.lazy)
import(data.maybe)
import(mirth.data.def)

#########
# Names #
#########

table(Name)
field(Name~Str, Name, Str)
field(Name~Def, Name, Def)
field(Name~mangled, Name, Lazy(Str))

def(Name>Str, Name -- Str, ~Str @)
def(Name>Def, Name -- Def, ~Def @)
def(Name>mangled, Name -- Str, ~mangled force!)

def(Name=, Name Name -- Bool, both(Name.id) =)

data(Hash, HASH -> Int)
def(Hash>Int, Hash -- Int, HASH -> id)
def(Int>Hash, Int -- Hash, HASH_MAX % HASH)

def(HASH_MAX, Int, 0x10000)
buffer(HASH_BUF,   0x80000)
def(hash-name@, Hash -- Maybe(Name),
    >Int HASH_BUF @@I64 >Int
    dup 0= if(drop NONE, Name.from-id SOME))
def(hash-name!, Name Hash --,
    dip(Name.id >I64)
    >Int HASH_BUF !!I64)

||| Get hash for string.
def(Str.hash, Str -- Hash,
    0 swap str-bytes-for(>Int 17 * over 7 << ^ swap 27 >> ^)
    >Hash)

def(Name.hash, Name -- Hash, >Str hash)
def(Hash.next, Hash -- Hash, >Int 1+ >Hash)

def(Hash.keep-going?, Str Hash -- Str Hash Bool,
    dup hash-name@ match(
        NONE -> F,
        SOME -> >Str over2 <>
    ))

def(name-search, Str -- Maybe(Name),
    dup hash
    while(keep-going?, next)
    nip hash-name@)

def(name-new!, Str -- Name,
    dup hash
    while(keep-going?, next)
    dup hash-name@ match(
        NONE ->
            Name.alloc!
            tuck swap hash-name!
            tuck ~Str !
            DEF_NONE over ~Def !
            dup delay(mangle-compute!) over ~mangled !,
        SOME ->
            dip(drop2)
    ))

||| Add string to name, creating new name.
def(name-cat!, Name Str -- Name,
    dip(>Str) cat name-new!)

def(Name.trace!, Name --, >Str trace!)
def(Name.print!, Name --, >Str print!)

def(Name.head, Name -- Byte,
    >Str with-str-data(1 >= if(@Byte, drop BNUL)))
def(Name.tail-head, Name -- Byte,
    >Str with-str-data(2 >= if(dip(1) .offset-unsafe @Byte, drop BNUL)))
def(Name.tail, Name -- Name,
    >Str with-str-data(dup 2 >= if(dip(dip(1) .offset-unsafe) 1- prim-str-copy, drop2 "")) name-new!)

def(Name.could-be-type, Name -- Bool, head is-alpha)
def(Name.could-be-type-var, Name -- Bool, head is-lower)
def(Name.could-be-type-con, Name -- Bool, head is-upper)
def(Name.is-type-hole, Name -- Bool, dup head B'?' = swap tail-head dup BNUL = swap is-lower || &&)
def(Name.is-underscore, Name -- Bool, dup head B'_' = swap tail-head BNUL = &&)
def(Name.could-be-stack-var, Name -- Bool, dup head B'*' = swap tail-head is-lower &&)
def(Name.could-be-effect-con, Name -- Bool, dup head B'+' = swap tail-head is-upper &&)
def(Name.print-mangled!, Name --, >mangled print!)
def(Name.mangle-compute!, Name -- Str,
    build-str!(>Str str-bytes-for(
        dup is-alnum if(
            str-buf-push-byte!,
            dup B'-' = if(
                drop B'_' str-buf-push-byte!,
                B'_' str-buf-push-byte!
                to-hexdigits dip(str-buf-push-byte!) str-buf-push-byte!
                B'_' str-buf-push-byte!
            )
        )
    )))

def(Name.could-be-relative, Name -- Bool,
    head is-overload-trigger)

def(Name.to-overload-suffix, Name -- Str,
    dup head is-alpha if(
        "." swap >Str cat,
        >Str
    ))

########
# Defs #
########

def(name-undefined?, Name -- Name Bool, dup >Def is-none)
def(name-defined?, Name -- Name Bool, name-undefined? not)
