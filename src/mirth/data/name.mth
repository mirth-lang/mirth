module(mirth.data.name)
import(data.char)

#########
# Names #
#########

# mirth/data/name
data(Def,
    DEF_NONE,
    DEF_MODULE -> Module,
    DEF_TYPE -> Type,
    DEF_TAG -> Tag,
    DEF_PRIM -> Prim,
    DEF_WORD -> Word,
    DEF_BUFFER -> Buffer,
    DEF_EXTERNAL -> External,
    DEF_FIELDWORD -> FieldWord)
table(Name)
field(name-str, Name, Str)
field(name-def, Name, Def)
field(name-mangle-cached, Name, Str)

data(Hash, HASH -> Int)
def(Int->Hash, Int -- Hash, HASH)
def(Hash->Int, Hash -- Int, match(HASH -> id))

buffer(NAME_HASH_TABLE, 0x80000)
def(NAME_HASH_MAX, Size, 0x7FFF)
def(hash-name!, Name Hash --, Hash->Int NAME_HASH_TABLE value!!)
def(hash-name@, Hash -- Name, Hash->Int NAME_HASH_TABLE value@@)
def(hash-name?, Hash -- Hash Name, dup hash-name@)

||| Get hash for string.
def(hash, Str -- Hash,
    0 swap
    while(str-is-empty? not,
        dup str-tail
        dip(str-head Char->Int 5 * swap 18 * ^))
    drop
    NAME_HASH_MAX &
    Int->Hash)

def(name-hash, Name -- Hash, name-str@ hash)
def(next-hash, Hash -- Hash, Hash->Int 1+ NAME_HASH_MAX & Int->Hash)

def(name-keep-going?, Str Hash -- Str Hash Bool,
    hash-name? is-nil? if(
        drop false,
        dip(over) name-str@ str-eq not
    ))

def(name-new!, Str -- Name,
    dup hash
    while(name-keep-going?, next-hash)
    hash-name? is-nil? if(
        drop Name.alloc!
        tuck swap hash-name!
        tuck name-str!,
        nip nip
    ))

||| Add string to name, creating new name.
def(name-cat!, Name Str -- Name,
    dip(name-str@) str-cat name-new!)

def(name-trace!, Name --,
    name-str@ str-trace!)

def(name-print!, Name --,
    name-str@ str-print!)

def(name-could-be-type, Name -- Bool,
    name-str@ str-head is-alpha? nip)

def(name-could-be-type-var, Name -- Bool,
    name-str@ str-could-be-type-var)

def(str-could-be-type-var, Str -- Bool,
    str-head is-lower? nip)

def(name-could-be-type-con, Name -- Bool,
    name-str@ str-head is-upper? nip)

def(name-is-type-hole, Name -- Bool,
    name-str@ dup str-head is-question-mark? nip if(
        str-tail str-is-empty? if(
            drop true,
            str-could-be-type-var),
        drop false
    ))

def(name-is-underscore, Name -- Bool,
    name-str@ dup str-head is-underscore? nip if(
        str-tail str-is-empty,
        drop false
    ))

def(name-could-be-stack-var, Name -- Bool,
    name-str@ dup str-head is-asterisk? nip if(
        str-tail str-could-be-type-var,
        drop false
    ))

def(name-could-be-effect-con, Name -- Bool,
    name-str@ dup str-head is-plus? nip if(
        str-tail str-head is-upper? nip,
        drop false
    ))

def(name-print-mangled!, Name -- +IO,
    name-mangle! str-print!)

def(name-mangle!, Name -- Str,
    name-mangle-cached? is-nil? if(
        drop dup dip(name-mangle-compute! dup) name-mangle-cached!,
        nip
    ))

def(name-mangle-compute!, Name -- Str,
    name-str@ str-transduce(
        is-alpha? if( TS_CHAR,
        is-digit? if( TS_CHAR,
        is-underscore? if( TS_CHAR,
        is-dash? if( drop underscore TS_CHAR,
            char-hexdigits underscore swap cons underscore snoc TS_PUSH
        ))))
    ))

||| Turn character into a sequence of hex digits, in the order they
||| appear in UTF8 encoding.
def(char-hexdigits, Char -- List(Char),
    Char->Int
    char-hexdigits-first
    while(dup 0 >, char-hexdigits-next)
    drop)

def(char-hexdigits-first, Int -- List(Char) Int,
    dip(L0) char-hexdigits-next)

def(char-hexdigits-next, List(Char) Int -- List(Char) Int,
    dup dip(0xF & hexdigit) 4 >>
    dup dip(0xF & hexdigit) 4 >>
    dip(swap dip(snoc) snoc))

def(hexdigit, Int -- Char,
    dup 10 >= if(
        55 + Int->Char,
        48 + Int->Char
    ))

########
# Defs #
########

def(name-undefined?, Name -- Name Bool,
    name-def? match(DEF_NONE -> true, _ -> drop false))
def(name-defined?, Name -- Name Bool, name-undefined? not)
