module(mirth.data.name)
import(data.char)

#########
# Names #
#########

# mirth/data/name
data NameValue
    DEF_NONE
    DEF_MODULE -> Module
    DEF_TYPE -> Type
    DEF_TAG -> Tag
    DEF_PRIM -> Prim
    DEF_WORD -> Word
    DEF_BUFFER -> Buffer
    DEF_EXTERNAL -> External
end
table(Name)
field(name-str, Name, Str)
field(name-value, Name, NameValue)
field(name-mangle-cached, Name, Str)

table(Hash)
field(hash-name, Hash, Name)
def(Int->Hash, Int -- Hash, cast)
def(Hash->Int, Hash -- Int, cast)

def(NAME_HASH_MAX, Size, 0x7FFF)

||| Get hash for string.
def(hash, Str -- Hash,
    0 swap
    while(str-is-empty? not,
        dup str-tail
        dip(str-head Char->Int 5 * swap 18 * ^))
    drop
    NAME_HASH_MAX &
    Int->Hash)

def(name-hash, Name -- Hash, name-str@ hash)
def(next-hash, Hash -- Hash, Hash->Int 1+ NAME_HASH_MAX & Int->Hash)

def(name-keep-going?, Str Hash -- Str Hash Bool,
    hash-name? is-nil? if(
        drop false,
        dip(over) name-str@ str-eq not
    ))


def(name-new!, Str -- Name,
    dup hash
    while(name-keep-going?, next-hash)
    hash-name? is-nil? if(
        drop Name.alloc!
        tuck swap hash-name!
        tuck name-str!,
        nip nip
    ))

||| Add string to name, creating new name.
name-cat! : Name Str -- Name
name-cat! = dip(name-str@) str-cat name-new!

name-trace! : Name -- +IO
name-trace! = name-str@ str-trace!

name-print! : Name -- +IO
name-print! = name-str@ str-print!

def(name-could-be-type, Name -- Bool,
    name-str@ str-head is-alpha? nip)

def(name-could-be-type-var, Name -- Bool,
    name-str@ str-could-be-type-var)

def(str-could-be-type-var, Str -- Bool,
    str-head is-lower? nip)

def(name-could-be-type-con, Name -- Bool,
    name-str@ str-head is-upper? nip)

def(name-is-type-hole, Name -- Bool,
    name-str@ dup str-head is-question-mark? nip if(
        str-tail str-is-empty? if(
            drop true,
            str-could-be-type-var),
        drop false
    ))

def(name-is-underscore, Name -- Bool,
    name-str@ dup str-head is-underscore? nip if(
        str-tail str-is-empty,
        drop false
    ))

def(name-could-be-stack-var, Name -- Bool,
    name-str@ dup str-head is-asterisk? nip if(
        str-tail str-could-be-type-var,
        drop false
    ))

def(name-could-be-effect-con, Name -- Bool,
    name-str@ dup str-head is-plus? nip if(
        str-tail str-head is-upper? nip,
        drop false
    ))

def(name-print-mangled!, Name -- +IO,
    name-mangle! str-print!)

def(name-mangle!, Name -- Str,
    name-mangle-cached? is-nil? if(
        drop dup dip(name-mangle-compute! dup) name-mangle-cached!,
        nip
    ))

def(name-mangle-compute!, Name -- Str,
    name-str@ str-transduce(
        is-alpha? if( TS_CHAR,
        is-digit? if( TS_CHAR,
        is-underscore? if( TS_CHAR,
        is-dash? if( drop underscore TS_CHAR,
            dip(underscore) char-hexdigits underscore L4 TS_PUSH
        ))))
    ))

def(char-hexdigits, Char -- Char Char, # TODO: support non-ascii chars
    Char->Int
    dup  16 / hexdigit
    swap 16 % hexdigit)

def(hexdigit, Int -- Char,
    dup 10 >= if(
        55 + Int->Char,
        48 + Int->Char
    ))

########
# Defs #
########

def(name-undefined?, Name -- Name Bool,
    name-value? match(DEF_NONE -> true, _ -> drop false))
def(name-defined?, Name -- Name Bool, name-undefined? not)

name-word! : Word Name --
name-buffer! : Buffer Name --
name-type! : Type Name --
name-external! : External Name --
name-module! : Module Name --
name-prim! : Prim Name --
name-tag! : Tag Name --

name-word! = dip(DEF_WORD) name-value!
name-buffer! = dip(DEF_BUFFER) name-value!
name-type! = dip(DEF_TYPE) name-value!
name-external! = dip(DEF_EXTERNAL) name-value!
name-module! = dip(DEF_MODULE) name-value!
name-prim! = dip(DEF_PRIM) name-value!
name-tag! = dip(DEF_TAG) name-value!
