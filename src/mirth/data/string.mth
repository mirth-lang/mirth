module(mirth/data/string)
import(prelude)

#################
# Strings Table #
#################

# StrLit represents the offset of a string into the string table.
# This is enough to identify the string (for now ... because we just use
# nul-termination as the implicit ending for the string)
nominal(StrLit, Int)
def(StrLit->Int, StrLit -- Int, StrLit.unwrap)
def(Int->StrLit, Int -- StrLit, StrLit.wrap)

def(MAX_STRINGS, Size, 0x8000)
buffer(STRINGS_SIZE, 8)
buffer(STRINGS_BUF, 0x8000)

# Size of strings table.
def(strings-size@, -- Size +StrTable, STRINGS_SIZE @)

# Size of strings table.
def(strings-size!, Size -- +StrTable, STRINGS_SIZE !)

# Push byte onto strings table.
def(strings-push!, U8 -- +StrTable,
    strings-size@ MAX_STRINGS >= if(
        "strings buffer overflow" panic!,
        strings-size@ STRINGS_BUF u8!!
        strings-size@ 1+ strings-size!
    ))

# Load STR_BUF into strings table,
# returning the index of the new string.
def(strings-save!, StrLit +StrTable +StrBuf,
    strings-size@
    0
    while(dup str-buf-length? <,
        dup str-buf-u8@
        strings-push!
        1+
    )
    drop
    0 Int->U8 strings-push!
    Int->StrLit)

# Load string into STR_BUF.
def(strings-load!, Str -- +StrBuf,
    str-buf!)
