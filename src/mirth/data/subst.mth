module(mirth/data/subst)
import(mirth/data/type)

#########
# Subst #
#########

def(Subst->Int, Subst -- Int, cast)
def(Int->Subst, Int -- Subst, cast)

def(subst-alloc!, Subst,
    Subst.alloc!
    dup Subst->Int Subst.MAX >= if(
        "NUM_SUBST >= MAX_SUBST" panic!,
        id
    ))
def(subst-new!, Type Var Subst -- Subst,
    subst-alloc!
    tuck subst-rest!
    tuck subst-var!
    tuck subst-type!)

def(SUBST_NIL, Subst, 0 Int->Subst)
def(subst-is-nil, Subst -- Bool, SUBST_NIL =)
def(subst-is-nil?, Subst -- Subst Bool, dup subst-is-nil)

def(subst-has-var, Var Subst -- Bool,
    subst-is-nil? if(
        drop2 false,
        dup2 subst-var@ = if(
            drop2 true,
            subst-rest@ subst-has-var
        )
    ))
def(subst-has-var?, Var Subst -- Var Subst Bool,
    dup2 subst-has-var)

def(subst-get-var, Var Subst -- Type,
    subst-is-nil? if(
        drop2 TYPE_ERROR,
        dup2 subst-var@ = if(
            subst-type@ nip,
            subst-rest@ subst-get-var
        )
    ))
def(subst-get-var?, Var Subst -- Var Subst Type,
    dup2 subst-get-var)

# If variable is in subst, unify new type with type in subst.
# Otherwise, create larger subst with new binding.
def(subst-match-var, Type Var Subst -- Subst,
    subst-has-var? if(
        dup dip(subst-get-var type-unify! drop),
        subst-new!
    ))
