module(mirth/data/subst)

#########
# Subst #
#########

nominal(Subst, Int)
def(Subst->Int, Subst -- Int, cast)
def(Int->Subst, Int -- Subst, cast)
def(Subst->U32, Subst -- U32, Subst->Int Int->U32)
def(U32->Subst, U32 -- Subst, U32->Int Int->Subst)
def(|Subst|, Size, 4)
def(subst@, Ptr -- Subst, u32@ U32->Subst)
def(subst!, Subst Ptr --, dip(Subst->U32) u32!)

def(MAX_SUBST, Size, 0x8000)
quad def-static-buffer(NUM_SUBST)
def(subst-alloc!, Subst,
    NUM_SUBST @ 1+ dup NUM_SUBST !
    dup MAX_SUBST >= if(
        "NUM_SUBST >= MAX_SUBST" panic!,
        Int->Subst
    ))
def(subst-new!, Type Var Subst -- Subst,
    subst-alloc!
    tuck subst-rest!
    tuck subst-var!
    tuck subst-type!)

def(SUBST_NIL, Subst, 0 Int->Subst)
def(subst-is-nil, Subst -- Bool, SUBST_NIL =)
def(subst-is-nil?, Subst -- Subst Bool, dup subst-is-nil)

MAX_SUBST |Subst| * def-static-buffer(SUBST_REST)
def(subst-rest&, Subst -- Ptr, Subst->Int |Subst| * SUBST_REST ptr+)
def(subst-rest!, Subst Subst --, subst-rest& subst!)
def(subst-rest@, Subst -- Subst, subst-rest& subst@)
def(subst-rest?, Subst -- Subst Subst, dup subst-rest@)

MAX_SUBST |Var| * def-static-buffer(SUBST_VAR)
def(subst-var&, Subst -- Ptr, Subst->Int |Var| * SUBST_VAR ptr+)
def(subst-var!, Var Subst --, subst-var& var!)
def(subst-var@, Subst -- Var, subst-var& var@)
def(subst-var?, Subst -- Subst Var, dup subst-var@)

MAX_SUBST |Type| * def-static-buffer(SUBST_TYPE)
def(subst-type&, Subst -- Ptr, Subst->Int |Type| * SUBST_TYPE ptr+)
def(subst-type!, Type Subst --, subst-type& type!)
def(subst-type@, Subst -- Type, subst-type& type@)
def(subst-type?, Subst -- Subst Type, dup subst-type@)

def(subst-has-var, Var Subst -- Bool,
    subst-is-nil? if(
        drop2 false,
        dup2 subst-var@ = if(
            drop2 true,
            subst-rest@ subst-has-var
        )
    ))
def(subst-has-var?, Var Subst -- Var Subst Bool,
    dup2 subst-has-var)

def(subst-get-var, Var Subst -- Type,
    subst-is-nil? if(
        drop2 TYPE_ERROR,
        dup2 subst-var@ = if(
            subst-type@ nip,
            subst-rest@ subst-get-var
        )
    ))
def(subst-get-var?, Var Subst -- Var Subst Type,
    dup2 subst-get-var)

# If variable is in subst, unify new type with type in subst.
# Otherwise, create larger subst with new binding.
def(subst-match-var, Type Var Subst -- Subst,
    subst-has-var? if(
        dup dip(subst-get-var type-unify! drop),
        subst-new!
    ))
