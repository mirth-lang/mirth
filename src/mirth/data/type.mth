
module(mirth.data.type)

import(prelude)
import(platform.posix)
import(data.maybe)
import(data.map)
import(data.list)
import(data.lazy)
import(mirth.data.ctx)
import(mirth.data.name)
import(mirth.data.token)
import(mirth.data.arrow)
import(mirth.data.location)
import(mirth.data.def)
import(mirth.data.var)
import(mirth.data.table)
import(mirth.data.error)

data(Type,
    TYPE_ERROR,
    TYPE_DONT_CARE,
    TPrim -> PrimType,
    TMeta -> MetaVar,
    THole -> Name,
    TVar -> Var,
    TTable -> Table,
    TData -> Data,
    TTensor -> Type Type,
    TMorphism -> Type Type,
    TApp -> Type Type,
    TValue -> Value)

data(Value,
    VALUE_INT -> Int,
    VALUE_STR -> Str,
    VALUE_BLOCK -> Block)

data(PrimType,
    PRIM_TYPE_UNIT,
    PRIM_TYPE_TYPE,
    PRIM_TYPE_STACK,
    PRIM_TYPE_EFFECT,
    PRIM_TYPE_INT,
    PRIM_TYPE_PTR,
    PRIM_TYPE_STR,
    PRIM_TYPE_BOOL,
    PRIM_TYPE_U64,
    PRIM_TYPE_U32,
    PRIM_TYPE_U16,
    PRIM_TYPE_U8,
    PRIM_TYPE_I64,
    PRIM_TYPE_I32,
    PRIM_TYPE_I16,
    PRIM_TYPE_I8,
    PRIM_TYPE_MUT)

def(prim-type-is-physical, PrimType -- Bool,
    PRIM_TYPE_TYPE -> false,
    PRIM_TYPE_STACK -> false,
    PRIM_TYPE_EFFECT -> false,
    _ -> drop true)

table(MetaVar)
table(Data)
table(Tag)

field(meta-type, MetaVar, Maybe(Type))

field(data-header, Data, Token)
field(data-name, Data, Name)
field(data-arity, Data, Int)
field(data-tags, Data, List(Tag))

field(tag-data, Tag, Data)
field(tag-name, Tag, Name)
field(tag-value, Tag, Int)
field(tag-sig, Tag, Maybe(Token))
field(tag-ctx-type, Tag, Lazy([Ctx Type]))

def(def-type!, Type Str --, dip(DEF_TYPE) name-new! name-def !)

def(init-types!, --,
    TYPE_INT "Int" def-type!
    TYPE_PTR "Ptr" def-type!
    TYPE_STR "Str" def-type!
    TYPE_U8 "U8" def-type!
    TYPE_U16 "U16" def-type!
    TYPE_U32 "U32" def-type!
    TYPE_U64 "U64" def-type!
    TYPE_I8 "I8" def-type!
    TYPE_I16 "I16" def-type!
    TYPE_I32 "I32" def-type!
    TYPE_I64 "I64" def-type!
    TYPE_BOOL "Bool" def-type!
    TYPE_MUT "Mut" def-type!)

#########
# Types #
#########

def(T*, Type Type -- Type, TTensor)
def(T->, Type Type -- Type, TMorphism)
def(TMut, Type -- Type, TYPE_MUT swap TApp)

def(T0, Type, TYPE_UNIT)
def(T1, Type -- Type, dip(T0) T*)
def(T2, Type Type -- Type, dip(T1) T*)
def(T3, Type Type Type -- Type, dip(T2) T*)
def(T4, Type Type Type Type -- Type, dip(T3) T*)
def(T5, Type Type Type Type Type -- Type, dip(T4) T*)
def(T6, Type Type Type Type Type Type -- Type, dip(T5) T*)

# def(type-is-error, Type -- Bool, match(TYPE_ERROR -> true, _ -> drop false))
# def(type-is-dont-care, Type -- Bool, match(TYPE_DONT_CARE -> true, _ -> drop false))
# def(type-is-prim, Type -- Bool, match(TPrim -> drop true, _ -> drop false))
# def(type-is-var, Type -- Bool, match(TVar -> drop true, _ -> drop false))
# def(type-is-meta, Type -- Bool, match(TMeta -> drop true, _ -> drop false))
# def(type-is-tensor, Type -- Bool, match(TTensor -> drop2 true, _ -> drop false))
def(type-is-morphism, Type -- Bool,
    TMorphism -> drop2 true,
    _ -> drop false)
# def(type-is-table, Type -- Bool, match(TTable -> drop true, _ -> drop false))
# def(type-is-hole, Type -- Bool, match(THole -> drop true, _ -> drop false))
# def(type-is-app, Type -- Bool, match(TApp -> drop2 true, _ -> drop false))
# def(type-is-data, Type -- Bool, match(TData -> drop true, _ -> drop false))

# def(type-is-error?, Type -- Type Bool, dup type-is-error)
# def(type-is-dont-care?, Type -- Type Bool, dup type-is-dont-care)
# def(type-is-prim?, Type -- Type Bool, dup type-is-prim)
# def(type-is-var?, Type -- Type Bool, dup type-is-var)
# def(type-is-meta?, Type -- Type Bool, dup type-is-meta)
# def(type-is-tensor?, Type -- Type Bool, dup type-is-tensor)
def(type-is-morphism?, Type -- Type Bool, dup type-is-morphism)
# def(type-is-table?, Type -- Type Bool, dup type-is-table)
# def(type-is-hole?, Type -- Type Bool, dup type-is-hole)
# def(type-is-app?, Type -- Type Bool, dup type-is-app)
# def(type-is-data?, Type -- Type Bool, dup type-is-data)

def(type-is-physical, Type -- Bool,
    TMeta -> meta-expand-if(type-is-physical,
        "unbound meta at type-is-physical" panic!),
    TPrim -> prim-type-is-physical,
    _ -> drop true)

def(TYPE_TYPE, Type, PRIM_TYPE_TYPE TPrim) # type of types
def(TYPE_STACK, Type, PRIM_TYPE_STACK TPrim) # type of stack types
def(TYPE_EFFECT, Type, PRIM_TYPE_EFFECT TPrim) # type of effect types
def(TYPE_UNIT, Type, PRIM_TYPE_UNIT TPrim) # unit type
def(TYPE_BOOL, Type, PRIM_TYPE_BOOL TPrim) # bool type
def(TYPE_MUT, Type, PRIM_TYPE_MUT TPrim)
def(TYPE_INT, Type, PRIM_TYPE_INT TPrim) # generic integer type for integer literals
def(TYPE_PTR, Type, PRIM_TYPE_PTR TPrim) # generic pointer type (e.g. void*)
def(TYPE_STR, Type, PRIM_TYPE_STR TPrim) # string pointer (just a pointer but nominally)
def(TYPE_U8, Type, PRIM_TYPE_U8 TPrim) # fixed width integer type -- unsigned 8 bit
def(TYPE_U16, Type, PRIM_TYPE_U16 TPrim) # fixed width integer type -- unsigned 16 bit
def(TYPE_U32, Type, PRIM_TYPE_U32 TPrim) # fixed width integer type -- unsigned 32 bit
def(TYPE_U64, Type, PRIM_TYPE_U64 TPrim) # fixed width integer type -- unsigned 64 bit
def(TYPE_I8, Type, PRIM_TYPE_I8 TPrim) # fixed width integer type -- signed 8 bit
def(TYPE_I16, Type, PRIM_TYPE_I16 TPrim) # fixed width integer type -- signed 16 bit
def(TYPE_I32, Type, PRIM_TYPE_I32 TPrim) # fixed width integer type -- signed 32 bit
def(TYPE_I64, Type, PRIM_TYPE_I64 TPrim) # fixed width integer type -- signed 64 bit

def(type-expand, Type -- Type,
    TMeta -> meta-expand,
    _ -> id)

data(Gamma, GAMMA -> Token)
def(gamma-token@, Gamma -- Token, GAMMA -> id)
def(gamma-token?, Gamma -- Gamma Token, dup gamma-token@)

# Raise a type unification error.
def(type-unify-failed!, Gamma Type Type -- Gamma Type,
    dip2(gamma-token? token-location location-trace!)
    ": error: Failed to unify " str-trace!
    dip(type-trace!)
    " with " str-trace!
    type-trace!
    trace-ln!
    TYPE_ERROR
    num-errors modify(1+))

# Unify two types. Raises an elaboration error if unification is impossible.
def(type-unify!, Gamma Type Type -- Gamma Type,
    swap type-expand match(
        TYPE_ERROR -> drop TYPE_ERROR,
        TYPE_DONT_CARE -> id,
        THole -> type-hole-unify!,
        TMeta ->
            swap type-expand match(
                TYPE_ERROR -> drop TYPE_ERROR,
                TYPE_DONT_CARE -> TMeta,
                THole -> dip(TMeta) type-hole-unify!,
                _ -> swap meta-unify!,
            ),
        TVar ->
            swap type-expand match(
                TYPE_ERROR -> drop TYPE_ERROR,
                TYPE_DONT_CARE -> TVar,
                THole -> dip(TVar) type-hole-unify!,
                TMeta -> dip(TVar) meta-unify!,
                TVar -> type-var-unify!,
                _ -> dip(TVar) type-unify-failed!,
            ),
        TPrim ->
            swap type-expand match(
                TYPE_ERROR -> drop TYPE_ERROR,
                TYPE_DONT_CARE -> TPrim,
                THole -> dip(TPrim) type-hole-unify!,
                TMeta -> dip(TPrim) meta-unify!,
                TValue -> dip(TPrim) type-value-unify!,
                TPrim -> type-prim-unify!,
                _ -> dip(TPrim) type-unify-failed!,
            ),
        TData ->
            swap type-expand match(
                TYPE_ERROR -> drop TYPE_ERROR,
                TYPE_DONT_CARE -> TData,
                THole -> dip(TData) type-hole-unify!,
                TMeta -> dip(TData) meta-unify!,
                TValue -> dip(TData) type-value-unify!,
                TData -> type-data-unify!,
                _ -> dip(TData) type-unify-failed!,
            ),
        TTable ->
            swap type-expand match(
                TYPE_ERROR -> drop TYPE_ERROR,
                TYPE_DONT_CARE -> TTable,
                THole -> dip(TTable) type-hole-unify!,
                TMeta -> dip(TTable) meta-unify!,
                TValue -> dip(TTable) type-value-unify!,
                TTable -> type-table-unify!,
                _ -> dip(TTable) type-unify-failed!,
            ),
        TTensor ->
            rotl type-expand match(
                TYPE_ERROR -> drop2 TYPE_ERROR,
                TYPE_DONT_CARE -> TTensor,
                THole -> dip(TTensor) type-hole-unify!,
                TMeta -> dip(TTensor) meta-unify!,
                TValue -> dip(TTensor) type-value-unify!,
                TTensor -> type-unify-pair! TTensor,
                _ -> dip(TTensor) type-unify-failed!,
            ),
        TMorphism ->
            rotl type-expand match(
                TYPE_ERROR -> drop2 TYPE_ERROR,
                TYPE_DONT_CARE -> TMorphism,
                THole -> dip(TMorphism) type-hole-unify!,
                TMeta -> dip(TMorphism) meta-unify!,
                TValue -> dip(TMorphism) type-value-unify!,
                TMorphism -> type-unify-pair! TMorphism,
                _ -> dip(TMorphism) type-unify-failed!,
            ),
        TApp ->
            rotl type-expand match(
                TYPE_ERROR -> drop2 TYPE_ERROR,
                TYPE_DONT_CARE -> TApp,
                THole -> dip(TApp) type-hole-unify!,
                TMeta -> dip(TApp) meta-unify!,
                TValue -> dip(TApp) type-value-unify!,
                TApp -> type-unify-pair! TApp,
                _ -> dip(TApp) type-unify-failed!,
            ),
        TValue ->
            swap type-expand match(
                TYPE_ERROR -> drop TYPE_ERROR,
                TYPE_DONT_CARE -> TValue,
                THole -> dip(TValue) type-hole-unify!,
                TMeta -> dip(TValue) meta-unify!, # this might be bad?
                TValue -> value-unify!,
                _ -> value-type-unify!
            ),
    ))

def(value-unify!, Gamma Value Value -- Gamma Type,
    swap match(
        VALUE_INT -> swap match(
            VALUE_INT -> dup2 == if(drop VALUE_INT TValue, drop2 TYPE_INT),
            VALUE_STR ->
                drop2 gamma-token?
                "Can't unify int value with string value."
                emit-error! TYPE_ERROR,
            VALUE_BLOCK ->
                drop2 gamma-token?
                "Can't unify int value with block."
                emit-error! TYPE_ERROR,
        ),

        VALUE_STR -> swap match(
            VALUE_STR -> dup2 == if(drop VALUE_STR TValue, drop2 TYPE_STR),
            VALUE_INT ->
                drop2 gamma-token?
                "Can't unify string value with int value."
                emit-error! TYPE_ERROR,
            VALUE_BLOCK ->
                drop2 gamma-token?
                "Can't unify string value with block."
                emit-error! TYPE_ERROR,
        ),

        VALUE_BLOCK -> swap match(
            VALUE_BLOCK ->
                dup2 == if(
                    drop VALUE_BLOCK TValue,
                    block-infer-type!
                    block-unify-type!
                ),
            VALUE_INT ->
                drop2 gamma-token?
                "Can't unify block with int value."
                emit-error! TYPE_ERROR,
            VALUE_STR ->
                drop2 gamma-token?
                "Can't unify block with string value."
                emit-error! TYPE_ERROR
        ),
    ))

def(type-value-unify!, Gamma Type Value -- Gamma Type,
    match(
        VALUE_INT -> drop TYPE_INT type-unify!,
        VALUE_STR -> drop TYPE_STR type-unify!,
        VALUE_BLOCK -> swap block-unify-type!, # technically inaccurate?
    ))

def(value-type-unify!, Gamma Value Type -- Gamma Type,
    swap match(
        VALUE_INT -> drop TYPE_INT swap type-unify!,
        VALUE_STR -> drop TYPE_STR swap type-unify!,
        VALUE_BLOCK -> swap block-unify-type!,
    ))

def(arrow-type, Arrow -- Type,
    dup arrow-dom @ swap arrow-cod @ T->)
    # TODO effects

def(block-infer-type!, Block -- Type,
    block-arrow force! arrow-type)

def(type-unify-pair!, Gamma Type Type Type Type -- Gamma Type Type,
    dip(swap dip(type-unify! swap)) type-unify! dip(swap))

def(type-prim-unify!, Gamma PrimType PrimType -- Gamma Type,
    dup2 == if(
        drop TPrim,
        dip(TPrim) TPrim type-unify-failed!
    ))
def(type-data-unify!, Gamma Data Data -- Gamma Type,
    dup2 == if(
        drop TData,
        dip(TData) TData type-unify-failed!
    ))
def(type-table-unify!, Gamma Table Table -- Gamma Type,
    dup2 == if(
        drop TTable,
        dip(TTable) TTable type-unify-failed!
    ))
def(type-var-unify!, Gamma Var Var -- Gamma Type,
    dup2 == if(
        drop TVar,
        dip(TVar) TVar type-unify-failed!
    ))

def(type-has-meta?, MetaVar Type -- MetaVar Type Bool,
    dup2 type-has-meta)

def(type-has-meta, MetaVar Type -- Bool,
    TMeta -> meta-has-meta,
    TYPE_ERROR -> drop false,
    TYPE_DONT_CARE -> drop false,
    TPrim -> drop2 false,
    TVar -> drop2 false,
    THole -> drop2 false,
    TTensor -> type2-has-meta,
    TMorphism -> type2-has-meta,
    TApp -> type2-has-meta,
    TData -> drop2 false,
    TTable -> drop2 false,
    TValue -> value-type-has-meta)

def(type2-has-meta, MetaVar Type Type -- Bool,
    over2 swap type-has-meta if(drop2 true, type-has-meta))

def(meta-has-meta, MetaVar MetaVar -- Bool,
    dup meta-type @ match(
        NONE -> ==,
        SOME -> nip type-has-meta
    ))

def(value-type-has-meta, MetaVar Value -- Bool,
    VALUE_INT -> drop2 false,
    VALUE_STR -> drop2 false,
    VALUE_BLOCK -> sip(block-dom @) block-cod @ type2-has-meta)

def(type-trace-sig!, Type --,
    TMeta -> meta-expand-if(type-trace-sig!, meta-trace!),
    TYPE_ERROR -> "<ERROR>" str-trace!,
    TMorphism ->
        swap
        type-trace-stack-dom!
        "--" str-trace!
        type-trace-stack-cod!,
    _ -> type-trace-stack!)

def(type-trace-stack-dom!, Type --,
    type-expand dup TYPE_UNIT == if(
        drop,
        type-trace-stack!
        " " str-trace!
    ))

def(type-trace-stack-cod!, Type --,
    type-expand dup TYPE_UNIT == if(
        drop,
        " " str-trace!
        type-trace-stack!
    ))

def(type-trace-stack!, Type --,
    TMeta -> meta-expand-if(type-trace-stack!, meta-trace!),
    TTensor -> swap type-trace-stack-dom! type-trace!,
    TVar ->
        var-name @
        dup name-trace!
        name-could-be-stack-var
        if(id, " ." str-trace!),
    _ -> type-trace!)

def(type-trace!, Type --,
    TYPE_ERROR -> "<ERROR>" str-trace!,
    TYPE_DONT_CARE -> "_" str-trace!,
    TPrim -> type-trace-prim!,
    TVar -> var-name @ name-trace!,
    TMeta -> meta-trace!,
    TTensor -> "[" str-trace! TTensor type-trace-stack! "]" str-trace!,
    TMorphism -> "[" str-trace! TMorphism type-trace-sig! "]" str-trace!,
    TData -> data-name @ name-trace!,
    TTable -> table-name @ name-trace!,
    THole -> name-trace!,
    TApp -> app-type-trace!,
    TValue -> value-as-type type-trace!)

def(value-as-type, Value -- Type,
    match(
        VALUE_INT -> drop PRIM_TYPE_INT TPrim,
        VALUE_STR -> drop PRIM_TYPE_STR TPrim,
        VALUE_BLOCK -> sip(block-dom @) block-cod @ T->
    ))

def(type-trace-prim!, PrimType --,
    match(
        PRIM_TYPE_TYPE -> "<TYPE>",
        PRIM_TYPE_STACK -> "<STACK>",
        PRIM_TYPE_EFFECT -> "<EFFECT>",
        PRIM_TYPE_UNIT -> "[]",
        PRIM_TYPE_BOOL -> "Bool",
        PRIM_TYPE_INT -> "Int",
        PRIM_TYPE_PTR -> "Ptr",
        PRIM_TYPE_STR -> "Str",
        PRIM_TYPE_U8 -> "U8",
        PRIM_TYPE_U16 -> "U16",
        PRIM_TYPE_U32 -> "U32",
        PRIM_TYPE_U64 -> "U64",
        PRIM_TYPE_I8 -> "I8",
        PRIM_TYPE_I16 -> "I16",
        PRIM_TYPE_I32 -> "I32",
        PRIM_TYPE_I64 -> "I64",
        PRIM_TYPE_MUT -> "Mut",
    ) str-trace!)

||| Replace the stack rest with a metavar, if it's unit.
def(type-semifreshen-sig, Type -- Type,
    dup type-sig-needs-fresh-stack-rest if(
        type-semifreshen-sig-aux,
        id
    ))

def(type-semifreshen-sig-aux, Type -- Type,
    TMeta -> meta-expand-if(type-semifreshen-sig-aux, TMeta),
    TMorphism ->
        meta-alloc! TMeta rotr
        dip(type-semifreshen-sig-stack) swap
        dip(type-semifreshen-sig-stack) swap
        TMorphism nip,
    _ -> id)

def(type-semifreshen-sig-stack, Type Type -- Type Type,
    TMeta -> meta-expand-if(type-semifreshen-sig-stack, TMeta),
    TTensor -> dip(type-semifreshen-sig-stack) TTensor,
    TPrim ->
        match(
            PRIM_TYPE_UNIT -> dup,
            _ -> TPrim
        ),
    _ -> id)

||| Freshen a type signature in preparation for type sig application.
def(type-freshen-sig, Subst Type -- Subst Type,
    dup type-sig-needs-fresh-stack-rest if(
        type-freshen-sig-aux,
        type-freshen
    ))

def(type-stack-rest, Type -- Type,
    TMeta -> meta-expand-if(type-stack-rest, TMeta),
    TTensor -> drop type-stack-rest,
    _ -> id)

def(type-sig-needs-fresh-stack-rest, Type -- Bool,
    TMeta -> meta-expand-if(type-sig-needs-fresh-stack-rest, drop false),
    TMorphism ->
        type-stack-rest TYPE_UNIT == if(
            type-stack-rest TYPE_UNIT ==,
            drop false
        ),
    _ -> drop false)

def(type-freshen-sig-aux, Subst Type -- Subst Type,
    TMeta -> meta-expand-if(type-freshen-sig-aux, TMeta),
    TMorphism ->
        meta-alloc! TMeta rot4r
        dip(type-freshen-sig-stack) swap
        dip(type-freshen-sig-stack) swap
        TMorphism dip(nip),
    _ -> type-freshen)

def(type-freshen-sig-stack, Type Subst Type -- Type Subst Type,
    TMeta -> meta-expand-if(type-freshen-sig-stack, meta-freshen),
    TTensor ->
        dip(type-freshen-sig-stack) swap
        dip(type-freshen) swap
        TTensor,
    TPrim ->
        match(
            PRIM_TYPE_UNIT -> over,
            _ -> TPrim
        ),
    _ -> type-freshen)

def(type-freshen, Subst Type -- Subst Type,
    TYPE_ERROR -> TYPE_ERROR,
    TYPE_DONT_CARE -> TYPE_DONT_CARE,
    TPrim -> TPrim,
    THole -> THole,
    TData -> TData,
    TTable -> TTable,
    TValue -> TValue, # no need to freshen values
    TVar -> type-var-freshen,
    TMeta -> meta-freshen,
    TTensor -> type-pair-freshen TTensor,
    TMorphism -> type-pair-freshen TMorphism,
    TApp -> type-pair-freshen TApp)

def(type-pair-freshen, Subst Type Type -- Subst Type Type,
    dip(type-freshen swap) type-freshen dip(swap))

def(meta-freshen, Subst MetaVar -- Subst Type,
    meta-expand-if(type-freshen, drop meta-alloc! TMeta))

def(type-var-freshen, Subst Var -- Subst Type,
    swap subst-has-var? if(
        tuck subst-get-var,
        meta-alloc! TMeta dup
        dip(rotr subst-new!)
    ))

def(type-rigidify-sig!, Ctx Type -- Ctx Type,
    TMeta ->
        meta-expand-or-update!(
            meta-alloc! TMeta
            meta-alloc! TMeta TMorphism
        ) type-rigidify-sig!,
    _ -> type-rigidify!)

def(type-rigidify-stack!, Ctx Type -- Ctx Type,
    TMeta ->
        meta-expand-or-update!(
            ctx-make-fresh-stack-type-var! TVar
        ) type-rigidify-stack!,
    TTensor ->
        dip(type-rigidify-stack!) swap
        dip(type-rigidify!) swap
        TTensor,
    TVar -> TVar,
    _ -> type-rigidify!)

def(type-rigidify!, Ctx Type -- Ctx Type,
    TMeta ->
        meta-expand-or-update!(
            ctx-make-fresh-type-var! TVar
        ) type-rigidify!,
    TYPE_ERROR -> TYPE_ERROR,
    TYPE_DONT_CARE -> TYPE_DONT_CARE,
    TPrim -> TPrim,
    THole -> THole,
    TVar -> TVar,
    TTable -> TTable,
    TData -> TData,
    TApp ->
        dip(type-rigidify!) swap
        dip(type-rigidify!) swap
        TApp,
    TTensor ->
        dip(type-rigidify-stack!) swap
        dip(type-rigidify!) swap
        TTensor,
    TMorphism ->
        dip(type-rigidify-stack!) swap
        dip(type-rigidify-stack!) swap
        TMorphism,
    TValue ->
        type-rigidify-value!)

def(type-rigidify-value!, Ctx Value -- Ctx Type,
    VALUE_INT -> VALUE_INT TValue,
    VALUE_STR -> VALUE_STR TValue,
    VALUE_BLOCK -> block-arrow force! arrow-type type-rigidify-sig!)

def(prim-type-arity, PrimType -- Int,
    PRIM_TYPE_MUT -> 1,
    _ -> drop 0)

def(type-arity, Type -- Int,
    TMeta -> meta-expand-if(type-arity, drop 0),
    TData -> data-arity @,
    TApp -> drop type-arity 1-,
    TPrim -> prim-type-arity,
    _ -> drop 0)

||| Get head of type.
def(type-head, Type -- Type,
    TMeta -> meta-expand-if(type-head, TMeta),
    TApp -> drop type-head,
    _ -> id)

||| For types that can have a field associated with them,
||| get the number of values n, where the type's values
||| range from 0 to (n-1). This should not be too large.
|||
||| Do NOT return SOME(n) unless the type has values 0..n-1
def(type-max-count, Type -- Maybe(Int),
    TMeta -> meta-expand-if(type-max-count, drop NONE),
    TApp -> drop type-max-count,
    TTable -> table-max-count @ 1+ SOME,
    TData ->
        data-is-enum? if(
            data-tags @ len SOME,
            drop NONE
        ),
    _ -> drop NONE)

##################
# Meta-var Types #
##################

def(meta-trace!, MetaVar --,
    dup meta-type @ match(
        NONE -> "?" str-trace! MetaVar.id int-trace!,
        SOME -> nip type-trace!
    ))
def(meta-alloc!, MetaVar,
    MetaVar.alloc!
    NONE over meta-type !)
def(meta-expand-if(f,g), (*a Type -- *b, *a MetaVar -- *b) *a MetaVar -- *b,
    dup meta-type @ match(
        NONE -> g,
        SOME -> type-expand tuck SOME swap meta-type ! f
    ))
def(meta-expand, MetaVar -- Type,
    meta-expand-if(id, TMeta))
def(meta-unify!, Gamma Type MetaVar -- Gamma Type,
    dup meta-type @ match(
        SOME -> nip type-unify!,
        NONE -> dup2 TMeta == if(
            drop,
            swap type-has-meta? if(
                swap TMeta type-unify-failed!,
                tuck SOME swap meta-type !
            )
        )
    ))
def(meta-expand-or-update!(f), (*a -- *a Type) *a MetaVar -- *a Type,
    dup meta-type @ match(
        NONE -> dip(f dup SOME) meta-type !,
        SOME -> nip
    ))

##############
# Type Holes #
##############

def(type-hole-unify!, Type Name -- Type,
    dup name-is-nil if(
        drop,
        THole type-trace!
        " ~ " str-trace!
        dup type-trace!
        trace-ln!
    ))

##########
# Params #
##########

def(type-max-num-params, Type -- Int,
    TMeta -> meta-expand-if(type-max-num-params, drop 0),
    TMorphism -> drop type-num-morphisms-on-top,
    _ -> drop 0)

def(type-num-morphisms-on-top, Type -- Int,
    TMeta -> meta-expand-if(type-num-morphisms-on-top, drop 0),
    TTensor -> type-is-morphism if(type-num-morphisms-on-top 1+, drop 0),
    _ -> drop 0)

############
# APP TYPE #
############

def(app-type-trace!, Type Type --,
    app-type-trace-open! ")" str-trace!)

def(app-type-trace-open!, Type Type --,
    swap match(
        TApp ->
            app-type-trace-open!
            ", " str-trace!
            type-trace!,
        _ ->
            type-trace!
            "(" str-trace!
            type-trace!
    ))

#########
# Subst #
#########

# mirth/data/type
data(Subst, SUBST -> Map(Var, Type))
def(unSUBST, Subst -- Map(Var, Type), SUBST -> id)
def(subst-nil, Subst, map-empty SUBST)
def(subst-is-nil, Subst -- Bool, SUBST -> map-is-empty)
def(subst-new!, Type Var Subst -- Subst,
    unSUBST rotr pack2 map-insert SUBST)
def(subst-has-var, Var Subst -- Bool,
    unSUBST swap map-has)
def(subst-has-var?, Var Subst -- Var Subst Bool,
    dup2 subst-has-var)
def(subst-get-var, Var Subst -- Type,
    unSUBST swap map-lookup match(
        NONE -> TYPE_ERROR,
        SOME -> id
    ))
def(subst-get-var?, Var Subst -- Var Subst Type,
    dup2 subst-get-var)

||| If variable is in subst, unify new type with type in subst.
||| Otherwise, create larger subst with new binding.
def(subst-match-var, Gamma Type Var Subst -- Gamma Subst,
    subst-has-var? if(
        sip(subst-get-var type-unify! drop),
        subst-new!
    ))

#######
# TAG #
#######

def(tag-num-inputs?, Tag -- Tag Int,
    # TODO: this should actually be calculated & stored during elaboration based on the type
    dup tag-sig @ match(
        NONE -> 0,
        SOME ->
            0 swap
            while(token-run-end? not,
                token-next dip(1+))
            drop
    ))

def(tag-is-transparent?, Tag -- Tag Bool,
    dup tag-data @ data-is-transparent)

########
# DATA #
########

def(data-num-tags, Data -- Int, data-tags @ len)

||| Adds constructor to data type, and gives tag its rank.
def(data-add-tag!, Tag Data --,
    dup2 data-num-tags swap tag-value !
    dup data-tags @ rotr dip(snoc) data-tags !)

def(data-is-enum?, Data -- Data Bool,
    dup data-tags @ all?(tag-num-inputs? 0 ==) nip)

def(data-is-transparent, Data -- Bool,
    data-tags @ match(
        L1 -> tag-num-inputs? 1 == nip,
        _ -> drop false
    ))
