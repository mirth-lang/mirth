module(mirth/data/word)
import(prelude)
import(mirth/data/name)
import(mirth/data/type)
import(mirth/data/arrow)

def(init-words!, --,
    0 NUM_WORDS !)

#########
# WORDS #
#########

nominal(Word, Int)
def(Word->Int, Word -- Int, cast)
def(Int->Word, Int -- Word, cast)
# def(|Word|, Size, 8) # defined in mirth/var
def(word!, Word Ptr --, dip(Word->Int) !)
def(word@, Ptr -- Word, @ Int->Word)

def(MAX_WORDS, Size, 0x4000)
quad def-static-buffer(NUM_WORDS)
def(word-alloc!, Word +Words,
    NUM_WORDS @ dup 1+ NUM_WORDS !
    dup MAX_WORDS >= if(
        "compiler error: NUM_WORDS > MAX_WORDS" panic!,
        id
    )
    Int->Word
    0 Int->Name over word-name!
    0 Int->Token over word-sig!
    0 Int->Token over word-body!
    0 Int->WordStatus over word-status!
    ctx-empty over word-ctx!
    TYPE_ERROR over word-type!)

MAX_WORDS |Name| * def-static-buffer(WORD_NAME)
def(word-name&, Word -- Ptr, Word->Int |Name| * WORD_NAME ptr+)
def(word-name@, Word -- Name, word-name& name@)
def(word-name!, Name Word --, word-name& name!)

MAX_WORDS |Token| * def-static-buffer(WORD_SIG)
def(word-sig&, Word -- Ptr, Word->Int |Token| * WORD_SIG ptr+)
def(word-sig@, Word -- Token, word-sig& token@)
def(word-sig!, Token Word --, word-sig& token!)

MAX_WORDS |Token| * def-static-buffer(WORD_BODY)
def(word-body&, Word -- Ptr, Word->Int |Token| * WORD_BODY ptr+)
def(word-body@, Word -- Token, word-body& token@)
def(word-body!, Token Word --, word-body& token!)

MAX_WORDS |Ctx| * def-static-buffer(WORD_CTX)
def(word-ctx&, Word -- Ptr, Word->Int |Ctx| * WORD_CTX ptr+)
def(word-ctx@, Word -- Ctx, word-ctx& ctx@)
def(word-ctx!, Ctx Word --, word-ctx& ctx!)

MAX_WORDS |Type| * def-static-buffer(WORD_TYPE)
def(word-type&, Word -- Ptr, Word->Int |Type| * WORD_TYPE ptr+)
def(word-type@, Word -- Type, word-type& type@)
def(word-type!, Type Word --, word-type& type!)
def(word-dom@, Word -- Type, word-type@ type-get-morphism morphism-type-dom@)
def(word-cod@, Word -- Type, word-type@ type-get-morphism morphism-type-cod@)

MAX_WORDS |Arrow| * def-static-buffer(WORD_ARROW)
def(word-arrow&, Word -- Ptr, Word->Int |Arrow| * WORD_ARROW ptr+)
def(word-arrow!, Arrow Word --, word-arrow& arrow!)
def(word-arrow@, Word -- Arrow, word-arrow& arrow@)
def(word-arrow?, Word -- Word Arrow, dup word-arrow@)

MAX_WORDS def-static-buffer(WORD_STATUS)
nominal(WordStatus, U8)
def(WordStatus->U8, WordStatus -- U8, cast)
def(U8->WordStatus, U8 -- WordStatus, cast)
def(WordStatus->Int, WordStatus -- Int, WordStatus->U8 U8->Int)
def(Int->WordStatus, Int -- WordStatus, Int->U8 U8->WordStatus)
def(word-status&, Word -- Ptr, Word->Int WORD_STATUS ptr+)
def(word-status!, WordStatus Word --, dip(WordStatus->U8) word-status& u8!)
def(word-status@, Word -- WordStatus, word-status& u8@ U8->WordStatus)
def(word-status?, Word -- Word WordStatus, dup word-status@)

nominal(WordStatusFlag, Int)
def(Int->WordStatusFlag, Int -- WordStatusFlag, cast)
def(WordStatusFlag->Int, WordStatusFlag -- Int, cast)
def(word-status-get, WordStatus WordStatusFlag -- Bool,
    dip(WordStatus->Int) WordStatusFlag->Int & 0 !=)
def(word-status-set, WordStatus WordStatusFlag -- WordStatus,
    dip(WordStatus->Int) WordStatusFlag->Int | Int->WordStatus)

def(WORD_SIG_CHECKED, WordStatusFlag, 0x01 Int->WordStatusFlag)
def(word-sig-is-checked?, Word -- Word Bool,
    word-status? WORD_SIG_CHECKED word-status-get)
def(word-sig-is-checked!, Word --,
    word-status? WORD_SIG_CHECKED word-status-set swap word-status!)

def(WORD_BODY_CHECKED, WordStatusFlag, 0x02 Int->WordStatusFlag)
def(word-body-is-checked?, Word -- Word Bool,
    word-status? WORD_BODY_CHECKED word-status-get)
def(word-body-is-checked!, Word --,
    word-status? WORD_BODY_CHECKED word-status-set swap word-status!)
