module(mirth.data.word)

import(prelude)
import(data.lazy)
import(data.maybe)
import(mirth.data.token)
import(mirth.data.var)
import(mirth.data.name)
import(mirth.data.def)

table(Word)
field(Word~name, Word, Name)
field(Word~head, Word, Token)
field(Word~sig, Word, Maybe(Token))
field(Word~body, Word, Token)
field(Word~ctx-type, Word, Lazy([Ctx Type]))
field(Word~params, Word, Lazy(List(Param)))
field(Word~arrow, Word, Lazy(Arrow))

def(Word.name, Word -- Name, ~name @)
def(Word.head, Word -- Token, ~head @)
def(Word.sig, Word -- Maybe(Token), ~sig @)
def(Word.body, Word -- Token, ~body @)
def(Word.params, Word -- List(Param), ~params force!)
def(Word.arrow, Word -- Arrow, ~arrow force!)

def(Word.ctx-type, Word -- Ctx Type,
    dup ~ctx-type force-or!(
        head "recursive word needs type signature" emit-fatal-error!
    ) nip unpack2)
def(Word.ctx, Word -- Ctx, ctx-type drop)
def(Word.type, Word -- Type, ctx-type nip)

def(Word.new!, Token Token Name -- Word,
    Word.alloc!
    tuck ~name !
    tuck ~head !
    tuck ~body !
    NONE over ~sig !
    dup DEF_WORD over name ~Def !)
