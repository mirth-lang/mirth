module(mirth/data/ctx)
import(mirth/data/common)
import(mirth/data/var)

###########
# Context #
###########

# A context for types and terms.

unCTX : Ctx -- List(Var)
unCTX = match(CTX -> id)

ctx-new! : Ctx Var -- Ctx
ctx-new! = dip(unCTX) snoc CTX

ctx-vars@ : Ctx -- List(Var)
ctx-vars@ = unCTX

ctx-vars? : Ctx -- Ctx List(Var)
ctx-vars? = dup unCTX

ctx-var@ : Ctx -- Var
ctx-var@ = unCTX last

ctx-var? : Ctx -- Ctx Var
ctx-var? = dup ctx-var@

ctx-prev@ : Ctx -- Ctx
ctx-prev@ = unCTX unsnoc drop CTX

ctx-name@ : Ctx -- Name
ctx-name@ = ctx-var@ var-name@

ctx-empty : Ctx
ctx-empty = nil

ctx-is-empty : Ctx -- Bool
ctx-is-empty = is-nil

ctx-is-empty? : Ctx -- Ctx Bool
ctx-is-empty? = is-nil?

ctx-has : Name Ctx -- Bool
ctx-has = ctx-lookup is-some

ctx-has? : Name Ctx -- Name Ctx Bool
ctx-has? = dup2 ctx-has

ctx-lookup : Name Ctx -- Maybe(Var)
ctx-lookup = unCTX reverse-find(dup2 var-name@ ==) nip

ctx-lookup? : Name Ctx -- Name Ctx Maybe(Var)
ctx-lookup? = dup2 ctx-lookup

ctx-length : Ctx -- Size
ctx-length = 0 swap while(ctx-is-empty? not, dip(1+) ctx-prev@) drop

ctx-length? : Ctx -- Ctx Size
ctx-length? = dup ctx-length
