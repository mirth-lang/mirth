module(mirth.data.module)

import(prelude)
import(data.path)
import(data.str)
import(data.set)
import(data.byte)
import(mirth.data.name)

# mirth/data/module
table(Module)
field(module-name, Module, Name)
field(module-path, Module, Path)
field(module-start, Module, Token)
field(module-end, Module, Token)
field(module-imports, Module, Set(Module))

def(module-new!, Path -- Module,
    Module.alloc!
    set-nil over module-imports !
    tuck module-path !)

||| Add right module as import to left module.
def(module-add-import!, Module Module --,
    swap module-imports modify(set-cons))

||| Get source path associated with module.
def(module-source-path, Module -- Path,
    dup Module.nil == if(
        drop "<generated>" Str->Path,
        module-path @ make-source-path
    ))

def(module-path-from-name, Name -- Path,
    build-str!(
        name-str @ str-bytes-for(
            dup B'.' == if(
                drop B'/',
                dup byte-is-upper if(byte-to-lower, id)
            )
            str-buf-push-byte!
        )
        ".mth" str-buf-push-str!
    ) Str->Path)
