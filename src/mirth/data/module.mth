module(mirth.data.module)

import(prelude)
import(data.path)
import(data.char)
import(data.str)
import(data.set)

# mirth/data/module
table(Module)
field(module-name, Module, Name)
field(module-path, Module, Path)
field(module-start, Module, Token)
field(module-end, Module, Token)
field(module-imports, Module, Set(Module))

def(module-new!, Path -- Module,
    Module.alloc!
    set-nil over module-imports !
    tuck module-path !)

||| Add right module as import to left module.
def(module-add-import!, Module Module --,
    swap module-imports modify(set-cons))

||| Get source path associated with module.
def(module-source-path, Module -- Path,
    dup Module.nil == if(
        drop "<generated>" Str->Path,
        module-path @ make-source-path
    ))

||| Get expected module path from module name, relative to src.
def(module-path-from-name, Name -- Path,
    name-str @ str-transduce(
        dup is-dot if(
            drop "/" # path-separator # TODO: this should be path-separator, but breaks module import check on MSYS2 ... fix module import check / paths?
            TS_COPY,
        dup is-upper if(# TODO: be more specific -- is-upper-ascii?
            Char->Int 0x20 | Int->Char TS_CHAR,
            TS_CHAR
#            "--///error///--" TS_COPY
        ))
    ) ".mth" str-cat Str->Path)
