module(mirth/data/module)
import(mirth/data/common)
import(mirth/data/path)

def(Module->Int, Module -- Int, cast)
def(Int->Module, Int -- Module, cast)
def(Module->U16, Module -- U16, Module->Int Int->U16)
def(U16->Module, U16 -- Module, U16->Int Int->Module)

def(|Module|, Size, 2)
def(module@, Ptr -- Module, u16@ U16->Module)
def(module!, Module Ptr --, dip(Module->U16) u16!)

def(MAX_MODULES, Size, 0x200)
def(MODULE_PATH_SIZE, Size, 0x200)
buffer(MODULE_PATH_BUF, 0x40000)

def(module-alloc!, Module,
    Module.alloc!
    dup Module->Int MAX_MODULES >= if(
        "Module.NUM @ >= MAX_MODULES" panic!,
        id
    ))

def(module-new!, Path -- Module,
    module-alloc!
    tuck module-path!)

def(module-path@, Module -- Path,
    Module->Int MODULE_PATH_SIZE * MODULE_PATH_BUF ptr+ Str->Path)
def(module-path?, Module -- Module Path, dup module-path@)
def(module-path!, Path Module --,
    over Path->Str str-length MODULE_PATH_SIZE >= if(
        "Module path is too long!" panic!,
        module-path@ dip(Path->Str) Path->Str str-copy!
    ))

# Load a source path associated with a module into STR_BUF.
def(load-module-source-path!, Module --,
    module-path@ load-source-path!)
