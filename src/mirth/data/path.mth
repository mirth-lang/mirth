module(mirth/data/path)
import(prelude)

nominal(Path, Str)

Path->Str : Path -- Str
Path->Str = Path.unwrap

Str->Path : Str -- Path
Str->Path = Path.wrap

path@ : Ptr -- Path
path@ = ptr@ Str->Path

path! : Path Ptr --
path! = dip(Path->Str) ptr!

init-paths! : --
init-paths! = (
    "src" Str->Path source-path-root!
    "bin" Str->Path output-path-root!
)

buffer(SOURCE_PATH_ROOT, 8)

source-path-root@ : Path
source-path-root@ = SOURCE_PATH_ROOT path@

source-path-root! : Path --
source-path-root! = SOURCE_PATH_ROOT path!

buffer(OUTPUT_PATH_ROOT, 8)

output-path-root@ : Path
output-path-root@ = OUTPUT_PATH_ROOT path@

output-path-root! : Path --
output-path-root! = OUTPUT_PATH_ROOT path!

path-separator : Str
path-separator = RUNNING_OS WIN32 == if("\\", "/")

||| The nil path.
path-nil : Path
path-nil = 0 cast

||| Is the path nil?
path-nil? : Path -- Path Bool
path-nil? = dup path-nil ==

||| Load a path into STR_BUF. If the path is null,
||| clears STR_BUF instead.
str-buf-path! : Path --
str-buf-path! =
    path-nil? if(
        drop str-buf-clear!,
        Path->Str str-buf!
    )

||| Push a path to STR_BUF, adding the path separator if
||| str-buf is non-empty. (TODO: Add path separator
||| only if it isn't already present.)
str-buf-push-path! : Path --
str-buf-push-path! = (
    str-buf-empty? if(id, path-separator str-buf-push-str!)
    Path->Str str-buf-push-str!
)

||| Load a source path into STR_BUF.
load-source-path! : Path --
load-source-path! = (
    source-path-root@ str-buf-path!
    str-buf-push-path!
)

# Load an output path into STR_BUF.
load-output-path! : Path --
load-output-path! = (
    output-path-root@ str-buf-path!
    str-buf-push-path!
)
