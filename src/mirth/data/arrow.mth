module(mirth.data.arrow)
import(mirth.data.type)

##########
# ARROWS #
##########

# Each Mirth word is represented by a morphism in some category
# (or some class of categories). We provide special support for
# the morphisms of symmetric monoidal category theory, since we
# want to manipulate multiple pieces of data, like a string diagram,
# but we do not assume commutativity (i.e. that dip(f) g == g dip(f)),
# so that we can more easily represent computational effects like IO.
# As such, we actually provide special support for premonoidal
# categories, and we're really working with ordered string diagrams.

# The representation, for now, involves building up morphisms as a
# sequence of atomic morphisms. Atomic morphisms are morphisms that
# can't be broken down into a composition. These include calling
# words, primitives, control flow, and literal values. This is a
# nested intermediate representation.

# Originally this type was called Morphism but that's hard to spell and
# to type repeatedly so now it's called Arrow :-)


# mirth/data/arrow
table(Atom)
table(Arrow)
table(Lambda)
table(Block)

data Arg
    ARG_BLOCK -> Block
    ARG_VAR_RUN -> Var
end
data Op
    OP_NONE
    OP_PRIM -> Prim
    OP_WORD -> Word
    OP_EXTERNAL -> External
    OP_BUFFER -> Buffer
    OP_INT -> Int
    OP_STR -> Str
    OP_TAG -> Tag
    OP_MATCH -> Match
    OP_LAMBDA -> Lambda
    OP_VAR -> Var
    OP_BLOCK -> Block
end
data(Param, PARAM -> Var)
def(unPARAM, Param -- Var, match(PARAM -> id))
def(Var->Param, Var -- Param, PARAM)
def(Param->Var, Param -- Var, match(PARAM -> id))

field(arrow-token-start, Arrow, Token)
field(arrow-token-end, Arrow, Token)
field(arrow-ctx, Arrow, Ctx)
field(arrow-dom, Arrow, Type)
field(arrow-cod, Arrow, Type)
field(arrow-atoms, Arrow, List(Atom))

field(atom-token, Atom, Token)
field(atom-ctx, Atom, Ctx)
field(atom-op, Atom, Op)
field(atom-args, Atom, List(Arg))
field(atom-dom, Atom, Type)
field(atom-cod, Atom, Type)
field(atom-subst, Atom, Subst)

field(lambda-token, Lambda, Token)
field(lambda-outer-ctx, Lambda, Ctx)
field(lambda-inner-ctx, Lambda, Ctx)
field(lambda-dom, Lambda, Type)
field(lambda-mid, Lambda, Type)
field(lambda-cod, Lambda, Type)
field(lambda-params, Lambda, List(Param))
field(lambda-body, Lambda, Arrow)

field(block-deferred, Block, Bool)
field(block-forcing, Block, Bool)
field(block-ctx, Block, Ctx)
field(block-token, Block, Token)
field(block-arrow-raw, Block, Arrow)
field(block-needed, Block, Bool)

#######
# ARG #
#######

||| Add arg to atom.
atom-arg-add! : Atom Arg -- Atom
atom-arg-add! = dip(atom-args?) snoc over atom-args!

||| Add arg to last atom of arrow.
||| Will panic if arrow has no atoms.
arrow-arg-add! : Arrow Arg -- Arrow
arrow-arg-add! =
    over arrow-atoms@ last match(
        NONE -> "arrow-arg-add! on empty arrow" panic!,
        SOME -> swap atom-arg-add! drop
    )

||| Add atom to arrow.
arrow-atom-add! : Arrow Atom -- Arrow
arrow-atom-add! = dip(arrow-atoms?) snoc over arrow-atoms!

#########
# BLOCK #
#########

block-new! : Arrow -- Block
block-new! = (
    Block.alloc!
    over arrow-ctx@ over block-ctx!
    over arrow-token-start@ over block-token!
    tuck block-arrow-raw!
)

block-new-deferred! : Ctx Token -- Block
block-new-deferred! = (
    Block.alloc!
    true over block-deferred!
    tuck block-token!
    tuck block-ctx!
)

block-arrow@ : Block -- Arrow
block-arrow@ = (
    dup block-force!
    block-arrow-raw@
)

block-arrow? : Block -- Block Arrow
block-arrow? = dup block-arrow@

block-force! : Block --
block-force! =
    block-deferred? if(
        block-forcing? if(
            block-token@
            "Recursive type detected for block."
            emit-fatal-error!,

            true over block-forcing!

            block-ctx? over block-token@
            dip(meta-alloc! TMeta)
            ab-build!(elab-atoms!)
            over block-arrow-raw!
            false swap block-deferred!
        ),
        drop
    )

block-unify-type! : Gamma Block Type -- Gamma Type
block-unify-type! =
    swap block-deferred? if(
        block-forcing? if(
            block-token@
            "Recursive type detected for block."
            emit-fatal-error!,

            block-unify-type-aux!
        ),
        block-arrow-raw@ arrow-type swap type-unify!
    )

block-unify-type-aux! : Gamma Type Block -- Gamma Type
block-unify-type-aux! = (
    true over block-forcing!
    dip(over gamma-token@ elab-expand-morphism! drop)
    rotr dip(
        dip(block-ctx? over block-token@) swap
        ab-build!(elab-atoms!)

        dup2 swap block-arrow-raw!
        dip(false swap block-deferred!)
        arrow-cod@
    )
    type-unify!
)

# block-force-type! : Block Type --
#     block-deferred? if(
#         drop,
#     )

#     dip(block-token@)

#     ab-build!(elab-atoms!)

####################################
# Helpers for constructing arrows. #
####################################
# TODO: Use an effect, or something, to elaborate these with types.

atom-new-lambda! : Lambda -- Atom
atom-new-lambda! = OP_LAMBDA Atom.alloc! tuck atom-op!

atom-new-int! : Int -- Atom
atom-new-int! = OP_INT Atom.alloc! tuck atom-op!

atom-new-buffer! : Buffer -- Atom
atom-new-buffer! = OP_BUFFER Atom.alloc! tuck atom-op!

atom-new-external! : External -- Atom
atom-new-external! = OP_EXTERNAL Atom.alloc! tuck atom-op!

atom-new-prim! : Prim -- Atom
atom-new-prim! = OP_PRIM Atom.alloc! tuck atom-op!

atom-new-word! : Word -- Atom
atom-new-word! = OP_WORD Atom.alloc! tuck atom-op!

arrow-new-lambda! : Lambda -- Arrow
arrow-new-lambda! = Arrow.alloc! swap arrow-push-lambda!

arrow-new-int! : Int -- Arrow
arrow-new-int! = Arrow.alloc! swap arrow-push-int!

arrow-new-buffer! : Buffer -- Arrow
arrow-new-buffer! = Arrow.alloc! swap arrow-push-buffer!

arrow-new-external! : External -- Arrow
arrow-new-external! = Arrow.alloc! swap arrow-push-external!

arrow-new-prim! : Prim -- Arrow
arrow-new-prim! = Arrow.alloc! swap arrow-push-prim!

arrow-new-word! : Word -- Arrow
arrow-new-word! = Arrow.alloc! swap arrow-push-word!

arrow-push-lambda! : Arrow Lambda -- Arrow
arrow-push-lambda! = atom-new-lambda! arrow-atom-add!

arrow-push-int! : Arrow Int -- Arrow
arrow-push-int! = atom-new-int! arrow-atom-add!

arrow-push-buffer! : Arrow Buffer -- Arrow
arrow-push-buffer! = atom-new-buffer! arrow-atom-add!

arrow-push-external! : Arrow External -- Arrow
arrow-push-external! = atom-new-external! arrow-atom-add!

arrow-push-prim! : Arrow Prim -- Arrow
arrow-push-prim! = atom-new-prim! arrow-atom-add!

arrow-push-word! : Arrow Word -- Arrow
arrow-push-word! = atom-new-word! arrow-atom-add!


#########
# MATCH #
#########

# mirth/data/type
table(Match)
table(Case)
data Pattern
    PATTERN_UNDERSCORE
    PATTERN_TAG -> Tag
end

field(match-ctx, Match, Ctx)
field(match-dom, Match, Type)
field(match-cod, Match, Type)
field(match-token, Match, Token)
field(match-cases, Match, List(Case))
field(case-match, Case, Match)
field(case-token, Case, Token)
field(case-pattern, Case, Pattern)
field(case-subst, Case, Subst)
field(case-mid, Case, Type)
field(case-body, Case, Arrow)

match-is-empty? : Match -- Match Bool
match-is-empty? = match-cases? is-nil

match-num-cases? : Match -- Match Int
match-num-cases? = match-cases? len

match-add-case! : Match Case -- Match
match-add-case! =
    dip(match-cases?) cases-cover-case? if(
        case-token@ "Case is unreachable." emit-error! drop,
        snoc over match-cases!
    )

match-has-default-case : Match -- Bool
match-has-default-case = match-cases@ cases-have-default-case

match-has-default-case? : Match -- Match Bool
match-has-default-case? = dup match-has-default-case

||| Get type we're matching over.
match-scrutinee-type? : Match -- Match Maybe(Type)
match-scrutinee-type? =
    match-dom? type-expand match(
        TTensor -> nip SOME,
        _ -> drop NONE
    )

||| Get "data" associated with scrutinee.
match-scrutinee-data? : Match -- Match Maybe(Data)
match-scrutinee-data? =
    match-scrutinee-type? maybe-bind(
        type-head match(
            TData -> SOME,
            _ -> drop NONE
        )
    )

match-is-transparent? : Match -- Match Bool
match-is-transparent? =
    match-scrutinee-data? match(
        SOME -> data-is-transparent? nip,
        NONE -> false
    )

########
# CASE #
########

cases-cover-case? : List(Case) Case -- List(Case) Case Bool
cases-cover-case? = dup2 cases-cover-case

cases-cover-case : List(Case) Case -- Bool
cases-cover-case = swap any(case-is-covered?) nip

case-is-covered? : Case Case -- Case Case Bool
case-is-covered? = dup2 case-is-covered

||| Ask whether the second case covers the first case already.
case-is-covered : Case Case -- Bool
case-is-covered = dip(case-pattern@) case-pattern@ pattern-is-covered

cases-have-default-case : List(Case) -- Bool
cases-have-default-case = any(case-is-default-case?)

case-is-default-case? : Case -- Case Bool
case-is-default-case? = dup case-is-default-case

case-is-default-case : Case -- Bool
case-is-default-case = case-pattern@ PATTERN_UNDERSCORE ==

###########
# PATTERN #
###########

||| Asks whether the second pattern already covers the case of the first pattern.
pattern-is-covered : Pattern Pattern -- Bool
pattern-is-covered =
    match(
        PATTERN_UNDERSCORE -> drop true,
        _ -> ==
    )

int-false-prime : Int -- Int Bool
int-false-prime = dup 2 == or(dup 2 % 1 ==)
