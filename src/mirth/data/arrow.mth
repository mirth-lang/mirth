module(mirth/data/arrow)
import(mirth/data/subst)
import(mirth/data/common)
import(mirth/data/word)
import(mirth/data/prim)

##########
# ARROWS #
##########

# Each Mirth word is represented by a morphism in some category
# (or some class of categories). We provide special support for
# the morphisms of symmetric monoidal category theory, since we
# want to manipulate multiple pieces of data, like a string diagram,
# but we do not assume commutativity (i.e. that dip(f) g == g dip(f)),
# so that we can more easily represent computational effects like IO.
# As such, we actually provide special support for premonoidal
# categories, and we're really working with ordered string diagrams.

# The representation, for now, involves building up morphisms as a
# sequence of atomic morphisms. Atomic morphisms are morphisms that
# can't be broken down into a composition. These include calling
# words, primitives, control flow, and literal values. This is a
# nested intermediate representation, but, to reduce indirection,
# we represent it as a flat sequence.

# Originally this type was called Morphism but that's hard to spell and
# to type repeatedly so now they're called Arrow :-)

def(ARROW_NIL, Arrow, 0 cast)
def(arrow-is-nil?, Arrow -- Arrow Bool, dup ARROW_NIL =)

def(arrow-alloc!, Arrow, Arrow.alloc!)

def(Op->U8, Op -- U8, Op.unwrap)
def(U8->Op, U8 -- Op, Op.wrap)
def(Op->Int, Op -- Int, Op->U8 U8->Int)
def(Int->Op, Int -- Op, Int->U8 U8->Op)
def(|Op|, Size, 1)
def(op@, Ptr -- Op, u8@ U8->Op)
def(op!, Op Ptr --, dip(Op->U8) u8!)
def(OP_NONE, Op, 0 Int->Op)
def(OP_PRIM, Op, 1 Int->Op)
def(OP_WORD, Op, 2 Int->Op)
def(OP_EXTERNAL, Op, 3 Int->Op)
def(OP_BUFFER, Op, 4 Int->Op)
def(OP_INT, Op, 5 Int->Op)
def(OP_STR, Op, 6 Int->Op)

def(arrow-op-is-none?, Arrow -- Arrow Bool, arrow-op? OP_NONE =)
def(arrow-op-is-prim?, Arrow -- Arrow Bool, arrow-op? OP_PRIM =)
def(arrow-op-is-word?, Arrow -- Arrow Bool, arrow-op? OP_WORD =)
def(arrow-op-is-external?, Arrow -- Arrow Bool, arrow-op? OP_EXTERNAL =)
def(arrow-op-is-buffer?, Arrow -- Arrow Bool, arrow-op? OP_BUFFER =)
def(arrow-op-is-int?, Arrow -- Arrow Bool, arrow-op? OP_INT =)
def(arrow-op-is-str?, Arrow -- Arrow Bool, arrow-op? OP_STR =)

def(arrow-op-prim!, Prim Arrow --,
    OP_PRIM over arrow-op!
    dip(Prim->Int) arrow-op-value!)
def(arrow-op-prim@, Arrow -- Prim,
    arrow-op? OP_PRIM = if(
        arrow-op-value@ Int->Prim,
        "compiler error: attempted to get prim associated with non-prim arrow" panic!
    ))
def(arrow-op-prim?, Arrow -- Arrow Prim,
    dup arrow-op-prim@)

def(arrow-op-word!, Word Arrow --,
    OP_WORD over arrow-op!
    dip(Word->Int) arrow-op-value!)
def(arrow-op-word@, Arrow -- Word,
    arrow-op? OP_WORD = if(
        arrow-op-value@ Int->Word,
        "compiler error: attempted to get word associated with non-word arrow" panic!
    ))
def(arrow-op-word?, Arrow -- Arrow Word,
    dup arrow-op-word@)

def(arrow-op-external!, External Arrow --,
    OP_EXTERNAL over arrow-op!
    dip(External->Int) arrow-op-value!)
def(arrow-op-external@, Arrow -- External,
    arrow-op? OP_EXTERNAL = if(
        arrow-op-value@ Int->External,
        "compiler error: attempted to get external associated with non-external arrow" panic!
    ))
def(arrow-op-external?, Arrow -- Arrow External,
    dup arrow-op-external@)

def(arrow-op-buffer!, Buffer Arrow --,
    OP_BUFFER over arrow-op!
    dip(Buffer->Int) arrow-op-value!)
def(arrow-op-buffer@, Arrow -- Buffer,
    arrow-op? OP_BUFFER = if(
        arrow-op-value@ Int->Buffer,
        "compiler error: attempted to get external associated with non-external arrow" panic!
    ))
def(arrow-op-buffer?, Arrow -- Arrow Buffer,
    dup arrow-op-buffer@)

def(arrow-op-int!, Int Arrow --,
    OP_INT over arrow-op!
    arrow-op-value!)
def(arrow-op-int@, Arrow -- Int,
    arrow-op? OP_INT = if(
        arrow-op-value@,
        "compiler error: attempted to get int associated with non-int arrow" panic!
    ))
def(arrow-op-int?, Arrow -- Arrow Int,
    dup arrow-op-int@)

def(arrow-op-str!, StrLit Arrow --,
    OP_STR over arrow-op!
    dip(StrLit->Int) arrow-op-value!)
def(arrow-op-str@, Arrow -- StrLit,
    arrow-op? OP_STR = if(
        arrow-op-value@ Int->StrLit,
        "compiler error: attempted to get str associated with non-str arrow" panic!
    ))
def(arrow-op-str?, Arrow -- Arrow StrLit,
    dup arrow-op-str@)

#######
# ARG #
#######

def(Arrow->Arg, Arrow -- Arg, Arg.wrap)
def(Arg->Arrow, Arg -- Arrow, Arg.unwrap)

########
# ARGS #
########

def(Int->Args, Int -- Args, cast)
def(Args->Int, Args -- Int, cast)
def(args@, Ptr -- Args, @ Int->Args)
def(args!, Args Ptr --, dip(Args->Int) !)
def(args-alloc!, Args, Args.alloc!)

def(ARGS_NIL, Args, 0 Int->Args)
def(args-is-nil, Args -- Bool, ARGS_NIL =)
def(args-is-nil?, Args -- Args Bool, dup args-is-nil)

def(args-len, Args -- Int,
    0 swap while(args-is-nil? not, dip(1+) args-tail@) drop)

# Get pointer to last args var in args list.
def(arrow-args-last&, Arrow -- Ptr,
    arrow-args& while(
        dup args@ args-is-nil not,
        args@ args-tail&
    ))

def(arrow-arg-add!, Arrow Arg -- Arrow,
    args-alloc! tuck args-head!
    over arrow-args-last& args!)

def(arrow-args-0, Arrow --,
    arrow-args?
    args-len 0 = if(
        drop,
        arrow-token@ "compiler error: expected no args in arrow" emit-fatal-error!
    ))

def(arrow-args-1, Arrow -- Arg,
    arrow-args?
    args-len 1 = if(
        arrow-args@ args-head@,
        arrow-token@ "compiler error: expected 1 arg in arrow" emit-fatal-error!
    ))

def(arrow-args-2, Arrow -- Arg Arg,
    arrow-args?
    args-len 2 = if(
        arrow-args@ args-head? swap
        args-tail@ args-head@,

        arrow-token@ "compiler error: expected 2 args in arrow" emit-fatal-error!
    ))

####################################
# Helpers for constructing arrows. #
####################################

def(arrow-new-int!, Int -- Arrow,  arrow-alloc! tuck arrow-op-int!)
def(arrow-new-buffer!, Buffer -- Arrow, arrow-alloc! tuck arrow-op-buffer!)
def(arrow-new-external!, External -- Arrow, arrow-alloc! tuck arrow-op-external!)
def(arrow-new-prim!, Prim -- Arrow, arrow-alloc! tuck arrow-op-prim!)
def(arrow-new-word!, Word -- Arrow,  arrow-alloc! tuck arrow-op-word!)

def(arrow-push-int!, Arrow Int -- Arrow, arrow-new-int! tuck swap arrow-next!)
def(arrow-push-buffer!, Arrow Buffer -- Arrow, arrow-new-buffer! tuck swap arrow-next!)
def(arrow-push-external!, Arrow External -- Arrow, arrow-new-external! tuck swap arrow-next!)
def(arrow-push-prim!, Arrow Prim -- Arrow, arrow-new-prim! tuck swap arrow-next!)
def(arrow-push-word!, Arrow Word -- Arrow, arrow-new-word! tuck swap arrow-next!)
