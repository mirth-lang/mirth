module(mirth.data.arrow)

import(prelude)
import(data.maybe)
import(data.list)
import(data.lazy)
import(mirth.data.token)
import(mirth.data.type)
import(mirth.elab)

##########
# ARROWS #
##########

# Each Mirth word is represented by a morphism in some category
# (or some class of categories). We provide special support for
# the morphisms of symmetric monoidal category theory, since we
# want to manipulate multiple pieces of data, like a string diagram,
# but we do not assume commutativity (i.e. that dip(f) g == g dip(f)),
# so that we can more easily represent computational effects like IO.
# As such, we actually provide special support for premonoidal
# categories, and we're really working with ordered string diagrams.

# The representation, for now, involves building up morphisms as a
# sequence of atomic morphisms. Atomic morphisms are morphisms that
# can't be broken down into a composition. These include calling
# words, primitives, control flow, and literal values. This is a
# nested intermediate representation.

# Originally this type was called Morphism but that's hard to spell and
# to type repeatedly so now it's called Arrow :-)

# mirth/data/arrow
table(Atom)
table(Arrow)
table(Lambda)
table(Block)

data(Arg, ARG_BLOCK -> Block)

data(Op,
    OP_NONE,
    OP_PRIM -> Prim,
    OP_WORD -> Word,
    OP_EXTERNAL -> External,
    OP_BUFFER -> Buffer,
    OP_VARIABLE -> Variable,
    OP_CONSTANT -> Constant,
    OP_FIELD -> Field,
    OP_INT -> Int,
    OP_STR -> Str,
    OP_TAG -> Tag,
    OP_MATCH -> Match,
    OP_LAMBDA -> Lambda,
    OP_VAR -> Var,
    OP_BLOCK -> Block)

data(Param, PARAM -> Var)
def(unPARAM, Param -- Var, PARAM -> id)
def(Var->Param, Var -- Param, PARAM)
def(Param->Var, Param -- Var, PARAM -> id)

field(arrow-token-start, Arrow, Token)
field(arrow-token-end, Arrow, Token)
field(arrow-home, Arrow, Maybe(Word))
field(arrow-homeidx, Arrow, Int)
field(arrow-ctx, Arrow, Ctx)
field(arrow-dom, Arrow, Type)
field(arrow-cod, Arrow, Type)
field(arrow-atoms, Arrow, List(Atom))

field(atom-token, Atom, Token)
field(atom-ctx, Atom, Ctx)
field(atom-op, Atom, Op)
field(atom-args, Atom, List(Arg))
field(atom-dom, Atom, Type)
field(atom-cod, Atom, Type)
field(atom-subst, Atom, Subst)

field(lambda-token, Lambda, Token)
field(lambda-outer-ctx, Lambda, Ctx)
field(lambda-inner-ctx, Lambda, Ctx)
field(lambda-dom, Lambda, Type)
field(lambda-mid, Lambda, Type)
field(lambda-cod, Lambda, Type)
field(lambda-params, Lambda, List(Param))
field(lambda-body, Lambda, Arrow)

field(block-ctx, Block, Ctx)
field(block-token, Block, Token)
field(block-dom, Block, Type)
field(block-cod, Block, Type)
field(block-arrow, Block, Lazy(Arrow))

#######
# ARG #
#######

||| Add arg to atom, on the left.
def(atom-arg-add-left!, Atom Arg -- Atom,
    over atom-args modify(cons))

||| Add atom to arrow.
def(arrow-atom-add!, Arrow Atom -- Arrow,
    over arrow-atoms modify(swap snoc))

#########
# BLOCK #
#########

def(block-new!, Arrow -- Block,
    Block.alloc!
    over arrow-ctx @ over block-ctx !
    over arrow-token-start @ over block-token !
    over arrow-dom @ over block-dom !
    over arrow-cod @ over block-cod !
    swap ready over block-arrow !)

def(block-new-deferred!, Ctx Token -- Block,
    Block.alloc!
    tuck block-token !
    tuck block-ctx !
    meta-alloc! TMeta over block-dom !
    meta-alloc! TMeta over block-cod !
    dup delay(
        dup block-ctx @ swap
        dup block-dom @ swap
        dup block-cod @ swap
        block-token @
        elab-arrow-hom!
    ) over block-arrow !)

def(block-force!, Block --,
    block-arrow force! drop)

def(block-unify-type!, Gamma Block Type -- Gamma Type,
    over2 gamma-token@ elab-expand-morphism! drop
    dip(swap sip(block-dom @ type-unify! drop))
    swap sip(block-cod @ type-unify! drop)
    block-arrow force! arrow-type)

#########
# MATCH #
#########

# mirth/data/type
table(Match)
table(Case)
data(Pattern, PATTERN_UNDERSCORE, PATTERN_TAG -> Tag)

field(match-ctx, Match, Ctx)
field(match-dom, Match, Type)
field(match-cod, Match, Type)
field(match-token, Match, Token) # where the diagnostics go
field(match-body, Match, Token) # where the cases start
field(match-cases, Match, List(Case))
field(case-match, Case, Match)
field(case-token, Case, Token)
field(case-pattern, Case, Pattern)
field(case-subst, Case, Subst)
field(case-mid, Case, Type)
field(case-body, Case, Arrow)

def(match-add-case!, Match Case -- Match,
    dip(dup match-cases @) cases-cover-case? if(
        case-token @ "Case is unreachable." emit-error! drop,
        snoc over match-cases !
    ))

def(match-is-exhaustive?, Match -- Match Bool,
    match-has-default-case? if(
        true,
        match-scrutinee-data? match(
            SOME ->
                data-num-tags
                over match-cases @ len ==,
            NONE ->
                true # presume exhaustiveness
        )
    ))

def(match-has-default-case?, Match -- Match Bool,
    dup match-cases @ cases-have-default-case)

||| Get type we're matching over.
def(match-scrutinee-type?, Match -- Match Maybe(Type),
    dup match-dom @ type-expand match(
        TTensor -> nip SOME,
        _ -> drop NONE
    ))

||| Get "data" associated with scrutinee.
def(match-scrutinee-data?, Match -- Match Maybe(Data),
    match-scrutinee-type? maybe-bind(
        type-head match(
            TData -> SOME,
            _ -> drop NONE
        )
    ))

def(match-is-transparent?, Match -- Match Bool,
    match-scrutinee-data? match(
        SOME -> data-is-transparent,
        NONE -> false
    ))

########
# CASE #
########

def(cases-cover-case?, List(Case) Case -- List(Case) Case Bool,
    dup2 cases-cover-case)

def(cases-cover-case, List(Case) Case -- Bool,
    swap any(dup2 case-is-covered) nip)

||| Ask whether the second case covers the first case already.
def(case-is-covered, Case Case -- Bool,
    dip(case-pattern @) case-pattern @ pattern-is-covered)

def(cases-have-default-case, List(Case) -- Bool,
    any(dup case-is-default-case))

def(case-is-default-case, Case -- Bool,
    case-pattern @ PATTERN_UNDERSCORE ==)

###########
# PATTERN #
###########

||| Asks whether the second pattern already
||| covers the case of the first pattern.
def(pattern-is-covered, Pattern Pattern -- Bool,
    dup PATTERN_UNDERSCORE == if(drop2 true, ==))
