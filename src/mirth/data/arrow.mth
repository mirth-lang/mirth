module(mirth/data/arrow)
import(mirth/data/common)
import(mirth/data/word)
import(mirth/data/prim)

##########
# ARROWS #
##########

# Each Mirth word is represented by a morphism in some category
# (or some class of categories). We provide special support for
# the morphisms of symmetric monoidal category theory, since we
# want to manipulate multiple pieces of data, like a string diagram,
# but we do not assume commutativity (i.e. that dip(f) g == g dip(f)),
# so that we can more easily represent computational effects like IO.
# As such, we actually provide special support for premonoidal
# categories, and we're really working with ordered string diagrams.

# The representation, for now, involves building up morphisms as a
# sequence of atomic morphisms. Atomic morphisms are morphisms that
# can't be broken down into a composition. These include calling
# words, primitives, control flow, and literal values. This is a
# nested intermediate representation.

# Originally this type was called Morphism but that's hard to spell and
# to type repeatedly so now it's called Arrow :-)

ARROW_NIL : Arrow
ARROW_NIL = nil

arrow-is-nil? : Arrow -- Arrow Bool
arrow-is-nil? = is-nil?

arrow-alloc! : Arrow
arrow-alloc! = Arrow.alloc!

arrow-op-prim! : Prim Arrow --
arrow-op-prim! = dip(OP_PRIM) arrow-op!

arrow-op-word! : Word Arrow --
arrow-op-word! = dip(OP_WORD) arrow-op!

arrow-op-tag! :  Tag Arrow --
arrow-op-tag! = dip(OP_TAG) arrow-op!

arrow-op-match! : Match Arrow --
arrow-op-match! = dip(OP_MATCH) arrow-op!

arrow-op-external! : External Arrow --
arrow-op-external! = dip(OP_EXTERNAL) arrow-op!

arrow-op-buffer! : Buffer Arrow --
arrow-op-buffer! = dip(OP_BUFFER) arrow-op!

arrow-op-int! : Int Arrow --
arrow-op-int! = dip(OP_INT) arrow-op!

arrow-op-str! : StrLit Arrow --
arrow-op-str! = dip(OP_STR) arrow-op!

#######
# ARG #
#######

Arrow->Arg : Arrow -- Arg
Arrow->Arg = ARG_ARROW

Arg->Arrow : Arg -- Arrow
Arg->Arrow = match(ARG_ARROW -> id)

arrow-arg-add! : Arrow Arg -- Arrow
arrow-arg-add! = dip(arrow-args?) snoc over arrow-args!

####################################
# Helpers for constructing arrows. #
####################################
# TODO: Use an effect, or something, to elaborate these with types.

arrow-new-int! : Int -- Arrow
arrow-new-int! = OP_INT arrow-alloc! tuck arrow-op!

arrow-new-buffer! : Buffer -- Arrow
arrow-new-buffer! = OP_BUFFER arrow-alloc! tuck arrow-op!

arrow-new-external! : External -- Arrow
arrow-new-external! = OP_EXTERNAL arrow-alloc! tuck arrow-op!

arrow-new-prim! : Prim -- Arrow
arrow-new-prim! = OP_PRIM arrow-alloc! tuck arrow-op!

arrow-new-word! : Word -- Arrow
arrow-new-word! = OP_WORD arrow-alloc! tuck arrow-op!

arrow-push! : Arrow Arrow -- Arrow
arrow-push! = tuck swap arrow-next!

arrow-push-int! : Arrow Int -- Arrow
arrow-push-int! = arrow-new-int! arrow-push!

arrow-push-buffer! : Arrow Buffer -- Arrow
arrow-push-buffer! = arrow-new-buffer! arrow-push!

arrow-push-external! : Arrow External -- Arrow
arrow-push-external! = arrow-new-external! arrow-push!

arrow-push-prim! : Arrow Prim -- Arrow
arrow-push-prim! = arrow-new-prim! arrow-push!

arrow-push-word! : Arrow Word -- Arrow
arrow-push-word! = arrow-new-word! arrow-push!
