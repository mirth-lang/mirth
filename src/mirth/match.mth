module(mirth.match)

import(std.prelude)
import(std.maybe)
import(std.list)
import(mirth.type)
import(mirth.data)
import(mirth.token)
import(mirth.ctx)
import(mirth.arrow)

#########
# MATCH #
#########

data(Match, MATCH ->
    home:Home token:Token body:Token
    ctx:Ctx dom:StackType cod:StackType
    cases:List(Case))

data(+Match, +MATCH ->
    home:Home token:Token body:Token
    ctx:Ctx dom:StackType cod:StackType
    cases:List(Case))

def(Match.thaw, Match -- +Match, MATCH -> +MATCH)
def(+Match.freeze, +Match -- Match, +MATCH -> MATCH)

data(Case, CASE -> pattern:Pattern body:Arrow)
def(Case.outer-ctx, Case -- Ctx, pattern outer-ctx)
def(Case.inner-ctx, Case -- Ctx, pattern inner-ctx)

def(Match.is-exhaustive?, Match -- Bool,
    dup has-default-case? or(
        dup scrutinee-data? match(
            SOME ->
                num-tags
                over cases len ==,
            NONE ->
                dup cases len 0>,
                # presume exhaustiveness generally.
                # and don't support empty matches for now.
        )
    ) nip)

def(Match.has-default-case?, Match -- Bool,
    cases any(dup is-default-case?))

||| Get "data" associated with scrutinee. Only returns Data if all the
||| TAG patterns use it.
def(Match.scrutinee-data?, Match -- Maybe(Data),
    cases filter(dup is-default-case? not) dup
    first bind(pattern single-tag?) map(.data) if-some(
        swap all(dup pattern single-tag? if-some(dip(over) .data ==, F)) if(
            SOME,
            drop NONE
        ),
        drop NONE
    ))

def(Match.is-transparent?, Match -- Bool,
    cases /L1
    bind(pattern atoms /L1)
    and-some(op match(
        PATOP_TAG -> .data is-transparent?,
        PATOP_UNDERSCORE -> T
    )))

def(+Match.add-case, Case +Match -- +Match,
    dup case-redundant? if(
        pattern token-start "Case is unreachable." emit-error!,
        cases(swap snoc)
    ))

def(+Match.case-redundant?, Case +Match -- Bool +Match,
    cases any(dup2 covers?) nip)

########
# CASE #
########

||| Ask whether the second case covers the first case.
def(Case.covers?, Case Case -- Bool, both(pattern) covers?)

||| Is this a "default" case?
def(Case.is-default-case?, Case -- Bool, pattern is-default?)

###########
# PATTERN #
###########

data(Pattern, PATTERN ->
    home:Home
    token-start:Token
    token-end:Token
    outer-ctx:Ctx       # Context coming from outside.
    inner-ctx:Ctx       # Context for case body.
    saved:List(Type)    # List of types set aside by underscores.
    mid:StackType       # Stack type on the left of the pattern.
    cod:StackType       # Stack type coming from outside match.
    atoms:List(PatternAtom))
def(Pattern.dom, Pattern -- StackType, sip:mid saved for(STCons))
def(Pattern.thaw, Pattern -- +Pattern, >pattern +PATTERN)

def(Pattern.single-tag?, Pattern -- Maybe(Tag),
    atoms /L1 bind(op /PATOP_TAG))

def(Pattern.is-default?, Pattern -- Bool,
    atoms all(dup op /PATOP_UNDERSCORE))

data(+Pattern, +PATTERN -> pattern:Pattern)
def(+Pattern.freeze, +Pattern -- Pattern, /+PATTERN pattern>)

data(PatternAtom, PATATOM ->
    token:Token
    ctx:Ctx
    saved:List(Type)
    dom:StackType
    cod:StackType
    subst:Subst
    op:PatternOp)

data(PatternOp,
    PATOP_UNDERSCORE,
    PATOP_TAG -> Tag)

def(+Pattern.op!, PatternOp +Pattern -- +Pattern,
    PATOP_UNDERSCORE -> underscore!,
    PATOP_TAG -> tag!)

def(+Pattern.underscore!, +Pattern -- +Pattern,
    pattern token-start >token
    pattern inner-ctx >ctx
    pattern mid >cod
    SUBST_NIL >subst
    PATOP_UNDERSCORE >op
    pattern mid force-cons?! match(
        NONE ->
            pattern token-start "pattern expects something on stack" emit-error!
            STACK_TYPE_ERROR TYPE_ERROR,
        SOME ->
            unpack2
    )
    dup pattern:saved:cons
    L1 >saved dup >dom pattern:mid!
    PATATOM pattern:atoms:cons)

def(+Pattern.tag!, +Pattern Tag -- +Pattern,
    dup PATOP_TAG >op L0 >saved
    pattern token-start >token
    pattern inner-ctx >ctx
    dip:SUBST_NIL type freshen-sig unpack
    dip(pattern token-start GAMMA pattern mid) unify! >cod drop
    dup >dom pattern:mid!
    >subst PATATOM pattern:atoms:cons)

||| Asks whether the second pattern covers the first pattern.
def(Pattern.covers?, Pattern Pattern -- Bool,
    both(atoms /L1) zip match(
        NONE -> F,
        SOME -> unpack2 op match(
            PATOP_UNDERSCORE -> drop T,
            PATOP_TAG -> swap op match(
                PATOP_UNDERSCORE -> drop F,
                PATOP_TAG -> ==
            )
        )
    ))

def(PatternOp./PATOP_TAG, PatternOp -- Maybe(Tag), PATOP_TAG -> SOME, _ -> drop NONE)
def(PatternOp./PATOP_UNDERSCORE, PatternOp -- Bool, PATOP_UNDERSCORE -> T, _ -> drop F)

## TODO: introduce or trees
