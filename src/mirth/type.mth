
module(mirth.type)

import(std.prelude)
import(std.maybe)
import(std.list)
import(std.lazy)
import(posix.posix)
import(mirth.ctx)
import(mirth.name)
import(mirth.token)
import(mirth.arrow)
import(mirth.location)
import(mirth.def)
import(mirth.var)
import(mirth.table)
import(mirth.tycon)
import(mirth.typedef)
import(mirth.error)
import(mirth.data)

data(Type,
    TYPE_ERROR,
    TYPE_DONT_CARE,
    TPrim -> PrimType,
    TMeta -> MetaVar,
    THole -> Name,
    TVar -> Var,
    TTable -> Table,
    TData -> Data,
    TTensor -> StackType,
    TMorphism -> ArrowType,
    TApp -> Type Type,
    TMut -> Type,
    TValue -> Value)

data(Value,
    VALUE_INT -> Int,
    VALUE_STR -> Str,
    VALUE_BLOCK -> Block)

data(PrimType,
    PRIM_TYPE_TYPE,
    PRIM_TYPE_STACK,
    PRIM_TYPE_RESOURCE,
    PRIM_TYPE_INT,
    PRIM_TYPE_PTR,
    PRIM_TYPE_STR,
    PRIM_TYPE_WORLD,
    )

def(PrimType.is-physical?, PrimType -- Bool,
    PRIM_TYPE_TYPE -> F,
    PRIM_TYPE_STACK -> F,
    PRIM_TYPE_RESOURCE -> F,
    _ -> drop T)

||| Get type constructor name for a type, if possible.
def(Type.tycon?, Type -- Maybe(Tycon),
    TYPE_ERROR -> NONE,
    TYPE_DONT_CARE -> NONE,
    TPrim -> TYCON_PRIM SOME,
    TMeta -> expand-if(tycon?, drop NONE),
    THole -> drop NONE,
    TVar -> drop NONE,
    TTable -> TYCON_TABLE SOME,
    TData -> TYCON_DATA SOME,
    TMorphism -> drop NONE,
    TTensor -> drop NONE,
    TApp -> drop tycon?,
    TMut -> tycon?,
    TValue -> tycon?)

||| Get primitive type constructor name.
def(PrimType.tycon-qname, PrimType -- QName,
    PRIM_TYPE_TYPE -> "TYPE" QName.prim,
    PRIM_TYPE_STACK -> "STACK" QName.prim,
    PRIM_TYPE_RESOURCE -> "RESOURCE" QName.prim,
    PRIM_TYPE_INT -> "Int" QName.prim,
    PRIM_TYPE_STR -> "Str" QName.prim,
    PRIM_TYPE_PTR -> "Ptr" QName.prim,
    PRIM_TYPE_WORLD -> "+World" QName.prim)

||| Get value type constructor name.
def(Value.tycon?, Value -- Maybe(Tycon),
    VALUE_INT -> drop PRIM_TYPE_INT TYCON_PRIM SOME,
    VALUE_STR -> drop PRIM_TYPE_STR TYCON_PRIM SOME,
    VALUE_BLOCK -> drop NONE)

def(PrimType.>Int, PrimType -- Int, PrimType.tag)
def(PrimType.==, PrimType PrimType -- Bool, both(>Int) ==)

def(def-prim-type!, Type Str --,
    dip(Namespace.prim) >Name QNAME
    swap NONE rotr
    TypeDef.new! drop)

def(init-types!, --,
    TYPE_INT "Int" def-prim-type!
    TYPE_PTR "Ptr" def-prim-type!
    TYPE_STR "Str" def-prim-type!
    TYPE_WORLD "+World" def-prim-type!
    init-data!)

#########
# Types #
#########

def(T+, StackType Resource -- StackType, STWith)
def(T*, StackType Type -- StackType, STCons)
def(T*+, StackType Either(Type, Resource) -- StackType, match(LEFT -> T*, RIGHT -> T+))
def(T->, StackType StackType -- ArrowType, ARROW_TYPE)

def(TT, List(Type) -- StackType, T0 swap for(T*))
def(T0, StackType, STACK_TYPE_UNIT)
def(T1, Type -- StackType, dip(T0) T*)
def(T2, Type Type -- StackType, dip(T1) T*)
def(T3, Type Type Type -- StackType, dip(T2) T*)
def(T4, Type Type Type Type -- StackType, dip(T3) T*)
def(T5, Type Type Type Type Type -- StackType, dip(T4) T*)
def(T6, Type Type Type Type Type Type -- StackType, dip(T5) T*)

# def(type-is-error, Type -- Bool, match(TYPE_ERROR -> T, _ -> drop F))
# def(type-is-dont-care, Type -- Bool, match(TYPE_DONT_CARE -> T, _ -> drop F))
# def(type-is-prim, Type -- Bool, match(TPrim -> drop T, _ -> drop F))
# def(type-is-var, Type -- Bool, match(TVar -> drop T, _ -> drop F))
# def(type-is-meta, Type -- Bool, match(TMeta -> drop T, _ -> drop F))
# def(type-is-tensor, Type -- Bool, match(TTensor -> drop2 T, _ -> drop F))
# def(type-is-table, Type -- Bool, match(TTable -> drop T, _ -> drop F))
# def(type-is-hole, Type -- Bool, match(THole -> drop T, _ -> drop F))
# def(type-is-app, Type -- Bool, match(TApp -> drop2 T, _ -> drop F))
# def(type-is-data, Type -- Bool, match(TData -> drop T, _ -> drop F))

def(Type.error?, Type -- Bool, expand match(TYPE_ERROR -> T, _ -> drop F))
def(Type.morphism?, Type -- Maybe(ArrowType), expand match(TMorphism -> SOME, _ -> drop NONE))
def(Type.prim?, Type -- Maybe(PrimType), expand match(TPrim -> SOME, _ -> drop NONE))
def(Type.data?, Type -- Maybe(Data),
    type-head match(TData -> SOME, _ -> drop NONE)) # TODO fix this
def(Type.mut?, Type -- Maybe(Type),
    expand match(TMut -> SOME, _ -> drop NONE))

def(Type.tensor?, Type -- Maybe(StackType), expand match(TTensor -> SOME, _ -> drop NONE))
def(Type.unit?, Type -- Bool, tensor? if-some(unit?, F))

def(Type.meta=, MetaVar Type -- Bool,
    TMeta -> ==,
    _ -> drop2 F)

def(Type.is-physical?, Type -- Bool,
    TMeta -> expand-if(is-physical?, "unbound meta at Type.is-physical?" panic!),
    TPrim -> is-physical?,
    _ -> drop T)

def(TYPE_UNIT, Type, STACK_TYPE_UNIT TTensor) # unit type
def(TYPE_TYPE, Type, PRIM_TYPE_TYPE TPrim) # type of types
def(TYPE_STACK, Type, PRIM_TYPE_STACK TPrim) # type of stack types
def(TYPE_RESOURCE, Type, PRIM_TYPE_RESOURCE TPrim) # type of (linear) resources
def(TYPE_INT, Type, PRIM_TYPE_INT TPrim) # generic integer type for integer literals
def(TYPE_PTR, Type, PRIM_TYPE_PTR TPrim) # generic pointer type (e.g. void*)
def(TYPE_STR, Type, PRIM_TYPE_STR TPrim) # string pointer (just a pointer but nominally)
# def(TYPE_U8, Type, PRIM_TYPE_U8 TPrim) # fixed width integer type -- unsigned 8 bit
# def(TYPE_U16, Type, PRIM_TYPE_U16 TPrim) # fixed width integer type -- unsigned 16 bit
# def(TYPE_U32, Type, PRIM_TYPE_U32 TPrim) # fixed width integer type -- unsigned 32 bit
# def(TYPE_U64, Type, PRIM_TYPE_U64 TPrim) # fixed width integer type -- unsigned 64 bit
# def(TYPE_I8, Type, PRIM_TYPE_I8 TPrim) # fixed width integer type -- signed 8 bit
# def(TYPE_I16, Type, PRIM_TYPE_I16 TPrim) # fixed width integer type -- signed 16 bit
# def(TYPE_I32, Type, PRIM_TYPE_I32 TPrim) # fixed width integer type -- signed 32 bit
# def(TYPE_I64, Type, PRIM_TYPE_I64 TPrim) # fixed width integer type -- signed 64 bit
def(TYPE_WORLD, Type, PRIM_TYPE_WORLD TPrim)
def(RESOURCE_WORLD, Resource, TYPE_WORLD RESOURCE)

def(Type.expand, Type -- Type,
    TMeta -> expand,
    _ -> id)

data(Gamma, GAMMA -> Token)
def(Gamma.token, Gamma -- Token, GAMMA -> )

||| Raise a type unification error.
def(Type.unify-failed!, Gamma Type Type -- Gamma Type,
    over2 token location trace!
    ": error: Failed to unify " trace!
    dip(trace!)
    " with " trace!
    trace!
    line-trace!
    TYPE_ERROR
    num-errors modify(1+))

||| Unify types directly, without regard to metavariables and other metatypes.
def(Type.unify-simple!, Gamma Type Type -- Gamma Type,
    TVar -> swap match(TVar -> unify!, _ -> dip(TVar) unify-failed!),
    TPrim -> swap match(TPrim -> unify!, _ -> dip(TPrim) unify-failed!),
    TData -> swap match(TData -> unify!, _ -> dip(TData) unify-failed!),
    TTable -> swap match(TTable -> unify!, _ -> dip(TTable) unify-failed!),
    TTensor -> swap match(TTensor -> unify! >Type, _ -> dip(TTensor) unify-failed!),
    TMorphism -> swap match(TMorphism -> unify! TMorphism, _ -> dip(TMorphism) unify-failed!),
    TApp -> rotl match(TApp -> unify2! TApp, _ -> dip(TApp) unify-failed!),
    TMut -> swap match(TMut -> unify! TMut, _ -> dip(TMut) unify-failed!),
    _ -> unify-failed!)

||| Unify expanded types.
def(Type.unify-aux!, Gamma Type Type -- Gamma Type,
    TYPE_ERROR -> drop TYPE_ERROR,
    TYPE_DONT_CARE -> id,
    THole -> type-hole-unify!,
    TMeta ->
        swap match(
            TYPE_ERROR -> drop TYPE_ERROR,
            TYPE_DONT_CARE -> TMeta,
            THole -> dip(TMeta) type-hole-unify!,
            TMeta -> dip(TMeta) unify!,
            TValue -> dip(TMeta) unify-type!,
            _ -> swap unify!,
        ),
    TValue ->
        swap match(
            TYPE_ERROR -> drop TYPE_ERROR,
            TYPE_DONT_CARE -> TValue,
            THole -> dip(TValue) type-hole-unify!,
            TMeta -> dip(TValue) unify!,
            TValue -> unify!,
            _ -> swap unify-type!
        ),
    _ ->
        swap match(
            TYPE_ERROR -> drop TYPE_ERROR,
            TYPE_DONT_CARE -> id,
            THole -> type-hole-unify!,
            TMeta -> unify!,
            TValue -> unify-type!,
            _ -> unify-simple!
        )
    )

||| Unify two types. Raises a unification error if unification is impossible.
def(Type.unify!, Gamma Type Type -- Gamma Type,
    both(expand) unify-aux!)

def(Value.unify!, Gamma Value Value -- Gamma Type,
    swap match(
        VALUE_INT -> swap match(
            VALUE_INT -> dup2 == if(drop VALUE_INT TValue, drop2 TYPE_INT),
            VALUE_STR ->
                drop2 dup token
                "Can't unify int value with string value."
                emit-error! TYPE_ERROR,
            VALUE_BLOCK ->
                drop2 dup token
                "Can't unify int value with block."
                emit-error! TYPE_ERROR,
        ),

        VALUE_STR -> swap match(
            VALUE_STR -> dup2 == if(drop VALUE_STR TValue, drop2 TYPE_STR),
            VALUE_INT ->
                drop2 dup token
                "Can't unify string value with int value."
                emit-error! TYPE_ERROR,
            VALUE_BLOCK ->
                drop2 dup token
                "Can't unify string value with block."
                emit-error! TYPE_ERROR,
        ),

        VALUE_BLOCK -> swap match(
            VALUE_BLOCK ->
                dup2 == if(
                    drop VALUE_BLOCK TValue,
                    arrow type block-unify-type! >Type
                ),
            VALUE_INT ->
                drop2 dup token
                "Can't unify block with int value."
                emit-error! TYPE_ERROR,
            VALUE_STR ->
                drop2 dup token
                "Can't unify block with string value."
                emit-error! TYPE_ERROR
        ),
    ))

def(Value.unify-type!, Gamma Type Value -- Gamma Type,
    VALUE_INT -> drop TYPE_INT unify!,
    VALUE_STR -> drop TYPE_STR unify!,
    VALUE_BLOCK -> swap unify-block!)

def(Type.unify-block!, Gamma Block Type -- Gamma Type,
    expand match(
        TMeta -> over dip(dip(type >Type) unify! drop) arrow type >Type,
        TMorphism -> block-unify-type! >Type,
        _ -> dip(type >Type) unify!
    ))

def(Type.unify2!, Gamma Type Type Type Type -- Gamma Type Type,
    dip(swap dip(unify! swap)) unify! dip(swap))

def(PrimType.unify!, Gamma PrimType PrimType -- Gamma Type,
    dup2 == if(drop TPrim, both(TPrim) unify-failed!))
def(Data.unify!, Gamma Data Data -- Gamma Type,
    dup2 == if(drop TData, both(TData) unify-failed!))
def(Table.unify!, Gamma Table Table -- Gamma Type,
    dup2 == if(drop TTable, both(TTable) unify-failed!))
def(Var.unify!, Gamma Var Var -- Gamma Type,
    dup2 == if(drop TVar, both(TVar) unify-failed!))

def(Type.has-meta?, MetaVar Type -- Bool,
    TMeta -> has-meta?,
    TYPE_ERROR -> drop F,
    TYPE_DONT_CARE -> drop F,
    TPrim -> drop2 F,
    TVar -> drop2 F,
    THole -> drop2 F,
    TTensor -> has-meta?,
    TMorphism -> has-meta?,
    TApp -> has-meta2?,
    TData -> drop2 F,
    TTable -> drop2 F,
    TValue -> has-meta?,
    TMut -> has-meta?)

def(Type.has-meta2?, MetaVar Type Type -- Bool,
    dip(over) has-meta? if(drop2 T, has-meta?))

def(Value.has-meta?, MetaVar Value -- Bool,
    type has-meta?)

def(Type.trace-sig!, Type --,
    TMeta -> expand-if(trace-sig!, trace!),
    TYPE_ERROR -> "<ERROR>" trace!,
    TMorphism -> trace!,
    _ -> trace!)

def(Type.trace!, Type --,
    TYPE_ERROR -> "<ERROR>" trace!,
    TYPE_DONT_CARE -> "_" trace!,
    TPrim -> trace!,
    TVar -> trace!,
    TMeta -> trace!,
    TTensor -> "[" trace! trace! "]" trace!,
    TMorphism -> "[" trace! TMorphism trace-sig! "]" trace!,
    TData -> name trace!,
    TTable -> name trace!,
    THole -> trace!,
    TApp -> trace-app!,
    TValue -> type trace!,
    TMut -> "Mut(" trace! trace! ")" trace!)

def(Value.type, Value -- Type,
    VALUE_INT -> drop PRIM_TYPE_INT TPrim,
    VALUE_STR -> drop PRIM_TYPE_STR TPrim,
    VALUE_BLOCK -> type >Type)

def(PrimType.trace!, PrimType --,
    match(
        PRIM_TYPE_TYPE -> "<TYPE>",
        PRIM_TYPE_STACK -> "<STACK>",
        PRIM_TYPE_RESOURCE -> "<RESOURCE>",
        PRIM_TYPE_INT -> "Int",
        PRIM_TYPE_PTR -> "Ptr",
        PRIM_TYPE_STR -> "Str",
        PRIM_TYPE_WORLD -> "+World"
    ) trace!)

# ||| Freshen a type signature in preparation for type sig application.
# def(Type.freshen-sig, Subst Type -- Subst Type,
#     dup sig-needs-fresh-stack-rest? if(
#         freshen-sig-aux,
#         freshen
#     ))

# def(Type.sig-needs-fresh-stack-rest?, Type -- Bool,
#     TMeta -> expand-if(sig-needs-fresh-stack-rest?, drop F),
#     TMorphism -> needs-fresh-stack-rest?,
#     _ -> drop F)

# def(Type.freshen-sig-aux, Subst Type -- Subst Type,
#     TMeta -> expand-if(freshen-sig-aux, TMeta),
#     TMorphism -> freshen-sig-aux TMorphism,
#     _ -> freshen)

||| Replace free type vars and free metavars with brand new metavars.
def(Type.freshen, Subst Type -- Subst Type,
    TYPE_ERROR -> TYPE_ERROR,
    TYPE_DONT_CARE -> TYPE_DONT_CARE,
    TPrim -> TPrim,
    THole -> THole,
    TData -> TData,
    TTable -> TTable,
    TValue -> TValue, # no need to freshen values
    TVar -> freshen,
    TMeta -> freshen,
    TTensor -> freshen TTensor,
    TMorphism -> freshen TMorphism,
    TApp -> freshen2 TApp,
    TMut -> freshen TMut,
    )

def(Type.freshen2, Subst Type Type -- Subst Type Type,
    dip(freshen swap) freshen dip(swap))

def(Var.freshen, Subst Var -- Subst Type,
    swap dup2 has-var? if(
        tuck get-var,
        MetaVar.new! TMeta dup
        dip(rotr cons)
    ))

def(Type.rigidify-sig!, Ctx Type -- Ctx Type,
    TMeta ->
        expand-or-update!(
            MetaVar.new! STMeta
            MetaVar.new! STMeta T-> >Type
        ) rigidify-sig!,
    _ -> rigidify!)

||| Replace unbound metavars with new vars, adding them to context.
def(Type.rigidify!, Ctx Type -- Ctx Type,
    TMeta ->
        expand-or-update!(
            fresh-type-var! TVar
        ) rigidify!,
    TYPE_ERROR -> TYPE_ERROR,
    TYPE_DONT_CARE -> TYPE_DONT_CARE,
    TPrim -> TPrim,
    THole -> THole,
    TVar -> TVar,
    TTable -> TTable,
    TData -> TData,
    TApp ->
        dip(rigidify!) swap
        dip(rigidify!) swap
        TApp,
    TTensor -> rigidify! TTensor,
    TMorphism -> rigidify! TMorphism,
    TValue -> rigidify!,
    TMut -> rigidify! TMut)

def(Value.rigidify!, Ctx Value -- Ctx Type,
    VALUE_INT -> VALUE_INT TValue,
    VALUE_STR -> VALUE_STR TValue,
    VALUE_BLOCK -> arrow type rigidify! >Type)

||| How many types does this type take as an argument?
def(Type.arity, Type -- Int,
    TMeta -> expand-if(arity, drop 0),
    TData -> arity,
    TApp -> drop arity 1-,
    _ -> drop 0)

||| Get head of type.
def(type-head, Type -- Type,
    TMeta -> expand-if(type-head, TMeta),
    TApp -> drop type-head,
    _ -> id)

||| For types that can have a field associated with them,
||| get the number of values n, where the type's values
||| range from 0 to (n-1). This should not be too large.
|||
||| Do NOT return SOME(n) unless the type has values 0..n-1
def(type-max-count, Type -- Maybe(Nat),
    TMeta -> expand-if(type-max-count, drop NONE),
    TApp -> drop type-max-count,
    TTable -> max-count 1+ SOME,
    TData ->
        dup is-enum? if(
            num-tags SOME,
            drop NONE
        ),
    _ -> drop NONE)

##################
# Meta-var Types #
##################

table(MetaVar)
field(MetaVar.~type?, MetaVar, Maybe(Type))
def(MetaVar.type?, MetaVar -- Maybe(Type), ~type? @)

def(MetaVar.has-meta?, MetaVar MetaVar -- Bool,
    dup type? match(
        NONE -> ==,
        SOME -> nip has-meta?
    ))

def(MetaVar.trace!, MetaVar --,
    dup type? match(
        NONE -> "?" trace! MetaVar.id trace!,
        SOME -> nip trace!
    ))
def(MetaVar.new!, MetaVar,
    MetaVar.alloc!
    NONE over ~type? !)

def(MetaVar.expand-if(f,g), (*a Type -- *b, *a MetaVar -- *b) *a MetaVar -- *b,
    dup type? match(
        NONE -> g,
        SOME -> expand tuck SOME swap ~type? ! f
    ))
def(MetaVar.expand, MetaVar -- Type,
    expand-if(id, TMeta))
def(MetaVar.unify!, Gamma Type MetaVar -- Gamma Type,
    dup type? match(
        SOME -> nip unify!,
        NONE -> dup2 swap meta= if(
            drop,
            swap dup2 has-meta? if(
                swap TMeta unify-failed!,
                tuck SOME swap ~type? !
            )
        )
    ))
def(MetaVar.expand-or-update!(f), (*a -- *a Type) *a MetaVar -- *a Type,
    dup type? match(
        NONE -> dip(f dup SOME) ~type? !,
        SOME -> nip
    ))

def(MetaVar.==, MetaVar MetaVar -- Bool, both(.id) ==)

def(MetaVar.freshen, Subst MetaVar -- Subst Type,
    expand-if(freshen, drop MetaVar.new! TMeta))

##############
# Type Holes #
##############

def(type-hole-unify!, Type Name -- Type,
    THole trace!
    " ~ " trace!
    dup trace!
    line-trace!)

############
# APP TYPE #
############

def(Type.trace-app!, Type Type --,
    trace-app-open! ")" trace!)

def(Type.trace-app-open!, Type Type --,
    swap expand match(
        TApp ->
            trace-app-open!
            ", " trace!
            trace!,
        _ ->
            trace!
            "(" trace!
            trace!
    ))

#################
# RESOURCE TYPE #
#################

data(Resource, RESOURCE -> Type)
def(Resource.>Type, Resource -- Type, RESOURCE -> id)
def(Type.>Resource, Type -- Resource, RESOURCE)
def(Resource.has-meta?, MetaVar Resource -- Bool, >Type has-meta?)
def(Resource.unify!, Gamma Resource Resource -- Gamma Resource,
    both(>Type) unify! >Resource)
def(Resource.trace!, Resource --, >Type trace!)
def(Resource.freshen, Subst Resource -- Subst Resource,
    >Type freshen >Resource)
def(Resource.rigidify!, Ctx Resource -- Ctx Resource,
    >Type rigidify! >Resource)

##############
# STACK TYPE #
##############

data(StackType,
    STACK_TYPE_ERROR,
    STACK_TYPE_DONT_CARE,
    STACK_TYPE_UNIT,
    STVar -> Var,
    STMeta -> MetaVar,
    STCons -> StackType Type,
    STWith -> StackType Resource)

def(Type.>StackType, Type -- StackType,
    TYPE_ERROR -> STACK_TYPE_ERROR,
    TYPE_DONT_CARE -> STACK_TYPE_DONT_CARE,
    TVar -> STVar,
    TMeta -> STMeta,
    TTensor -> id,
    _ -> "kind error! expected stack type, got regular type." panic!)

def(StackType.>Type, StackType -- Type,
    STACK_TYPE_ERROR -> TYPE_ERROR,
    STACK_TYPE_DONT_CARE -> TYPE_DONT_CARE,
    STVar -> TVar,
    STMeta -> TMeta,
    _ -> TTensor)

def(StackType.expand, StackType -- StackType,
    STMeta -> expand >StackType,
    _ -> id)

def(StackType.unit?, StackType -- Bool,
    expand match(
        STACK_TYPE_UNIT -> T,
        _ -> drop F
    ))

||| Split stack type into base, types, and resources.
def(StackType.split3, StackType -- StackType List(Type) List(Resource),
    expand match(
        STCons -> dip(split3) swap dip(snoc),
        STWith -> dip(split3) snoc,
        _ -> L0 L0
    ))

||| Get bottom of stack.
def(StackType.base, StackType -- StackType, split3 drop2)

||| Get types on stack.
def(StackType.types, StackType -- List(Type), split3 drop nip)

||| Get resources on stack.
def(StackType.resources, StackType -- List(Resource), split3 dip(drop2))

||| Get top stack type if possible.
def(StackType.top-type?, StackType -- Maybe(Type),
    expand match(
        STCons -> nip SOME,
        STWith -> drop top-type?,
        _ -> drop NONE
    ))

||| Get the top type constructor name.
def(StackType.top-tycon?, StackType -- Maybe(Tycon),
    top-type? bind(tycon?))

||| Get top resource if possible.
def(StackType.top-resource?, StackType -- Maybe(Resource),
    expand match(
        STWith -> nip SOME,
        STCons -> drop top-resource?,
        _ -> drop NONE
    ))

||| Get the top resource name.
def(StackType.top-resource-tycon?, StackType -- Maybe(Tycon),
    top-resource? bind(>Type tycon?))

def(StackType.has-meta?, MetaVar StackType -- Bool,
    expand match(
        STMeta -> ==,
        STACK_TYPE_ERROR -> drop F,
        STACK_TYPE_DONT_CARE -> drop F,
        STVar -> drop2 F,
        STACK_TYPE_UNIT -> drop F,
        STCons -> dip(over) has-meta? if(drop2 T, has-meta?),
        STWith -> dip(over) has-meta? if(drop2 T, has-meta?),
    ))

def(StackType.unify-failed!, Gamma StackType StackType -- Gamma StackType,
    # "yo" panic! )
   both(>Type) unify-failed! >StackType)

def(StackType.unify!, Gamma StackType StackType -- Gamma StackType,
    swap expand match(
        STACK_TYPE_ERROR -> drop STACK_TYPE_ERROR,
        STACK_TYPE_DONT_CARE -> id,
        STMeta -> swap expand match(
            STACK_TYPE_ERROR -> drop STACK_TYPE_ERROR,
            STACK_TYPE_DONT_CARE -> STMeta,
            STMeta -> dip(TMeta) unify! >StackType,
            _ -> >Type swap unify! >StackType,
        ),
        STVar -> swap expand match(
            STACK_TYPE_ERROR -> drop STACK_TYPE_ERROR,
            STACK_TYPE_DONT_CARE -> STVar,
            STMeta -> dip(TVar) unify! >StackType,
            STVar -> unify! >StackType,
            _ -> dip(STVar) unify-failed!
        ),
        STACK_TYPE_UNIT -> expand match(
            STACK_TYPE_ERROR -> STACK_TYPE_ERROR,
            STMeta -> dip(STACK_TYPE_UNIT >Type) unify! >StackType,
            STACK_TYPE_DONT_CARE -> STACK_TYPE_UNIT,
            STACK_TYPE_UNIT -> STACK_TYPE_UNIT,
            _ -> STACK_TYPE_UNIT unify-failed!
        ),
        STCons -> rotl expand match(
            STACK_TYPE_ERROR -> drop2 STACK_TYPE_ERROR,
            STMeta -> dip(STCons >Type) unify! >StackType,
            STACK_TYPE_DONT_CARE -> STCons,
            _ -> dup force-cons?! if-some(
                nip unpack2 dip(swap dip(unify! swap)) unify! dip(swap) STCons,
                dip(STCons) unify-failed!
            )
        ),
        STWith -> rotl expand match(
            STACK_TYPE_ERROR -> drop2 STACK_TYPE_ERROR,
            STMeta -> dip(STWith >Type) unify! >StackType,
            STACK_TYPE_DONT_CARE -> STWith,
            _ -> dup force-with?! if-some(
                nip unpack2 dip(swap dip(unify! swap)) unify! dip(swap) STWith,
                dip(STWith) unify-failed!
            )
        ),
    ))

def(StackType.force-cons?!, StackType -- Maybe([StackType Type]),
    expand match(
        STACK_TYPE_ERROR -> STACK_TYPE_ERROR TYPE_ERROR pack2 SOME,
        STACK_TYPE_DONT_CARE -> STACK_TYPE_DONT_CARE TYPE_DONT_CARE pack2 SOME,
        STACK_TYPE_UNIT -> NONE,
        STVar -> drop NONE,
        STCons -> pack2 SOME,
        STWith -> swap force-cons?! map(unpack2 dip(over STWith) pack2) nip,
        STMeta ->
            dip(MetaVar.new! STMeta
                MetaVar.new! TMeta
                dup2 STCons >Type SOME) ~type? !
            pack2 SOME,
    ))

def(StackType.force-with?!, StackType -- Maybe([StackType Resource]),
    expand match(
        STACK_TYPE_ERROR -> STACK_TYPE_ERROR TYPE_ERROR RESOURCE pack2 SOME,
        STACK_TYPE_DONT_CARE -> STACK_TYPE_DONT_CARE TYPE_DONT_CARE RESOURCE pack2 SOME,
        STACK_TYPE_UNIT -> NONE,
        STVar -> drop NONE,
        STWith -> pack2 SOME,
        STCons -> swap force-with?! map(unpack2 dip(over STCons) pack2) nip,
        STMeta ->
            dip(MetaVar.new! STMeta
                MetaVar.new! TMeta RESOURCE
                dup2 STWith >Type SOME) ~type? !
            pack2 SOME,
    ))

def(StackType.trace-dom!, StackType --,
    expand dup unit? if(
        drop,
        trace!
        " " trace!
    ))

def(StackType.trace-cod!, StackType --,
    expand dup unit? if(
        drop,
        " " trace!
        trace!
    ))

def(StackType.trace-base!, StackType -- Bool,
    match(
        STACK_TYPE_UNIT -> id F,
        STMeta -> "*" trace! trace! T,
        STVar -> dup trace! is-stack? else(" " trace!) T,
        _ -> >Type trace! T
    ))

def(StackType.trace!, StackType --,
    split3
    dip2(trace-base!)
    dip(for(swap then(" " trace!) trace! T))
    for(swap then(" " trace!) trace! T) drop)

    # rotl match(
    #     STVar -> dup Var.trace! is-stack? else(" " trace!),
    #     _ -> >Type trace!,
    # )


    # )

    # expand match(
    #     STACK_TYPE_ERROR -> TYPE_ERROR trace!,
    #     STACK_TYPE_DONT_CARE -> TYPE_DONT_CARE trace!,
    #     STMeta -> MetaVar.trace!,
    #     STVar ->
    #     STACK_TYPE_UNIT -> id,
    #     STCons -> dip(trace-dom!) trace!,
    #     STWith -> dip(trace-dom!) trace!,
    # ))

def(StackType.semifreshen, StackType StackType -- StackType StackType,
    expand match(
        STACK_TYPE_UNIT -> dup,
        STCons -> dip(semifreshen) STCons,
        STWith -> dip(semifreshen) STWith,
        _ -> "expected unit-based stack in semifreshen!" panic!
    ))

def(StackType.freshen, Subst StackType -- Subst StackType,
    expand match(
        STACK_TYPE_UNIT -> STACK_TYPE_UNIT,
        STCons -> dip(freshen) swap dip(freshen) swap STCons,
        STWith -> dip(freshen) swap dip(freshen) swap STWith,
        _ -> >Type freshen >StackType
    ))

def(StackType.freshen-aux, StackType Subst StackType -- StackType Subst StackType,
    expand match(
        STACK_TYPE_UNIT -> over,
        STCons -> dip(freshen-aux) swap dip(freshen) swap STCons,
        STWith -> dip(freshen-aux) swap dip(freshen) swap STWith,
        _ -> >Type freshen >StackType
    ))

def(StackType.rigidify!, Ctx StackType -- Ctx StackType,
    STACK_TYPE_ERROR -> STACK_TYPE_ERROR,
    STACK_TYPE_DONT_CARE -> STACK_TYPE_DONT_CARE,
    STACK_TYPE_UNIT -> STACK_TYPE_UNIT,
    STMeta -> expand-or-update!(fresh-stack-type-var! TVar) >StackType rigidify!,
    STVar -> STVar,
    STCons -> dip(rigidify!) swap dip(rigidify!) swap STCons,
    STWith -> dip(rigidify!) swap dip(rigidify!) swap STWith)

def(StackType.num-morphisms-on-top, StackType -- Nat,
    STMeta -> expand-if(>StackType num-morphisms-on-top, drop 0 >Nat),
    STCons -> morphism? .if(num-morphisms-on-top 1+, drop 0 >Nat),
    STWith -> drop num-morphisms-on-top,
    _ -> drop 0 >Nat)

##############
# ARROW TYPE #
##############

data(ArrowType, ARROW_TYPE -> StackType StackType)
def(ArrowType.>Type, ArrowType -- Type, TMorphism)

def(ArrowType.unpack, ArrowType -- StackType StackType, ARROW_TYPE -> id)
def(ArrowType.dom, ArrowType -- StackType, unpack drop)
def(ArrowType.cod, ArrowType -- StackType, unpack nip)
def(ArrowType.unify!, Gamma ArrowType ArrowType -- Gamma ArrowType,
    dip(unpack) unpack
    dip(swap dip(unify!)) rotl
    dip(unify!) swap
    ARROW_TYPE)
def(ArrowType.has-meta?, MetaVar ArrowType -- Bool,
    unpack dip(over) has-meta? if(drop2 T, has-meta?))

def(ArrowType.trace!, ArrowType --,
    unpack swap
    trace-dom!
    "--" trace!
    trace-cod!)

||| Replace the stack rest with a metavar, if they're both unit.
def(ArrowType.semifreshen-sig, ArrowType -- ArrowType,
    dup needs-fresh-stack-rest? then(semifreshen-aux))

def(ArrowType.semifreshen-aux, ArrowType -- ArrowType,
    MetaVar.new! STMeta swap unpack
    dip(semifreshen) swap
    dip(semifreshen) swap
    ARROW_TYPE nip)

def(ArrowType.needs-fresh-stack-rest?, ArrowType -- Bool,
    unpack base unit? if(
        base unit?,
        drop F
    ))

def(ArrowType.freshen-sig, Subst ArrowType -- Subst ArrowType,
    dup needs-fresh-stack-rest? if(
        freshen-sig-aux,
        freshen
    ))

def(ArrowType.freshen-sig-aux, Subst ArrowType -- Subst ArrowType,
    MetaVar.new! STMeta rotr unpack
    dip(freshen-aux) swap
    dip(freshen-aux) swap
    ARROW_TYPE dip(nip))

def(ArrowType.freshen, Subst ArrowType -- Subst ArrowType,
    unpack
    dip(freshen) swap
    dip(freshen) swap
    ARROW_TYPE)

def(ArrowType.rigidify!, Ctx ArrowType -- Ctx ArrowType,
    unpack
    dip(rigidify!) swap
    dip(rigidify!) swap
    ARROW_TYPE)

def(ArrowType.max-num-params, ArrowType -- Nat,
    dom num-morphisms-on-top)

#########
# Subst #
#########

# mirth/data/type
data(Subst,
    SUBST_NIL,
    SUBST_CON -> Subst Type Var)

def(Subst.nil?, Subst -- Bool, SUBST_NIL -> T, _ -> drop F)
def(Subst.con?, Subst -- Maybe([Subst Type Var]),
    SUBST_CON -> pack3 SOME,
    _ -> drop NONE)

def(Subst.nil, Subst, SUBST_NIL)
def(Subst.cons, Type Var Subst -- Subst, rotr SUBST_CON)
def(Subst.has-var?, Var Subst -- Bool,
    SUBST_NIL -> drop F,
    SUBST_CON -> nip over2 == if(drop2 T, has-var?))
def(Subst.get-var, Var Subst -- Type,
    SUBST_NIL -> drop TYPE_ERROR,
    SUBST_CON -> over3 == if(dip(drop2), drop get-var))

||| If variable is in subst, unify new type with type in subst.
||| Otherwise, create larger subst with new binding.
def(Subst.match-var, Gamma Type Var Subst -- Gamma Subst,
    dup2 has-var? if(
        sip(get-var unify! drop),
        cons
    ))
