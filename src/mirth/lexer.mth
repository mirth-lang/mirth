module(mirth/lexer)
import(prelude)
import(mirth/data/name)
import(mirth/data/string)
import(mirth/data/token)
import(mirth/data/error)
import(mirth/input)

#########
# LEXER #
#########

buffer(LEXER_MODULE, 8)
def(lexer-module@, -- Module +Lexer, LEXER_MODULE module@)
def(lexer-module!, Module -- +Lexer, LEXER_MODULE module!)

buffer(LEXER_ROW, 8)
def(lexer-row@, -- Row +Lexer, LEXER_ROW u16@ U16->Row)
def(lexer-row!, Row -- +Lexer, Row->U16 LEXER_ROW u16!)

buffer(LEXER_COL, 8)
def(lexer-col@, -- Col +Lexer, LEXER_COL u16@ U16->Col)
def(lexer-col!, Col -- +Lexer, Col->U16 LEXER_COL u16!)

buffer(LEXER_STACK_LENGTH, 8)
buffer(LEXER_STACK_BUF, 0x1000)
def(LEXER_STACK_SIZE, Size, 0x200)

def(lexer-stack-length@, Size +Lexer,
    LEXER_STACK_LENGTH u16@ U16->Int)

def(lexer-stack-length!, Size -- +Lexer,
    Int->U16 LEXER_STACK_LENGTH u16!)

def(lexer-stack-clear!, +Lexer,
    0 lexer-stack-length!)

def(lexer-stack-empty?, Bool +Lexer,
    lexer-stack-length@ 0 <=)

def(lexer-stack-full?, Bool +Lexer,
    lexer-stack-length@ LEXER_STACK_SIZE >=)

def(lexer-stack-push!, Token -- +Lexer,
    lexer-stack-full? if(
        "lexer stack overflow" panic!,
        Token->Int
        lexer-stack-length@
        dup 1+ lexer-stack-length!
        LEXER_STACK_BUF quad!!
    ))

def(lexer-stack-pop!, -- Token +Lexer,
    lexer-stack-empty? if(
        "lexer stack underflow" panic!,
        lexer-stack-length@ 1-
        dup lexer-stack-length!
        LEXER_STACK_BUF quad@@
        Int->Token
    ))

def(run-lexer!, Path -- Module +Lexer,
    module-new! lexer-module!

    lexer-module@ load-module-source-path!
    STR_BUF open-file!
    input-start!

    1 Int->Row lexer-row!
    1 Int->Col lexer-col!

    num-tokens@ 1+ Int->Token lexer-module@ module-start!

    while(lexer-done? not, lexer-next!)

    input-end!

    lexer-stack-empty? if(
        TOKEN_NONE 0 Int->TokenValue lexer-emit!,

        lexer-stack-pop!
        "Mismatched left parenthesis."
        emit-fatal-error!
    )

    num-tokens@  Int->Token lexer-module@ module-end!

    lexer-module@)


# Is the lexer done?
def(lexer-done?, Bool +Lexer, input-done?)

# Create a token, and add it to the token buffer,
# returning the new token.
def(lexer-make!, TokenType TokenValue -- Token,
    token-alloc!
    tuck token-value!
    tuck token-type!
    dip(lexer-module@) dup dip(token-module!)
    dip(lexer-row@) dup dip(token-row!)
    dip(lexer-col@) dup dip(token-col!))

# Create a token, and add it to the token buffer.
def(lexer-emit!, TokenType TokenValue --, lexer-make! drop)

# Lex the next token.
def(lexer-next!, --,
    lexer-peek

    is-name-char? if(
        drop
        lexer-emit-name!,

    is-newline? if(
        drop
        lexer-emit-newline!,

    is-whitespace? if(
        drop,

    is-pound? if(
        drop
        lexer-skip-comment!,

    is-comma? if(
        drop
        TOKEN_COMMA 0 Int->TokenValue lexer-emit!,

    is-lparen? if(
        drop
        lexer-emit-lparen!,

    is-rparen? if(
        drop
        lexer-emit-rparen!,

    is-lbracket? if(
        drop
        lexer-emit-lbracket!,

    is-rbracket? if(
        drop
        lexer-emit-rbracket!,

    is-lbrace? if(
        drop
        lexer-emit-lbrace!,

    is-rbrace? if(
        drop
        lexer-emit-rbrace!,

    is-quote? if(
        drop
        lexer-emit-string!,

        drop # LATER emit lexer error
    )))))))))))

    lexer-move!))


def(lexer-emit-newline!, +Lexer,
    lexer-row@ Row->Int 1+ Int->Row lexer-row!
    0 Int->Col lexer-col!)

def(lexer-emit-lparen!, +Lexer,
    TOKEN_LPAREN 0 Int->TokenValue lexer-make!
    lexer-stack-push!)

def(lexer-emit-rparen!, +Lexer,
    lexer-stack-empty? if(
        "Mismatched right parenthesis." lexer-emit-fatal-error!,
        TOKEN_RPAREN lexer-stack-pop! dup
        token-type? TOKEN_LPAREN = if(
            dip(Token->TokenValue lexer-make!)
            dip(Token->TokenValue) token-value!,
            "Mismatched right parenthesis." lexer-emit-fatal-error!
    )))

def(lexer-emit-lbracket!, +Lexer,
    TOKEN_LBRACKET 0 Int->TokenValue lexer-make!
    lexer-stack-push!)

def(lexer-emit-rbracket!, +Lexer,
    lexer-stack-empty? if(
        "Mismatched right bracket." lexer-emit-fatal-error!,
        TOKEN_RBRACKET lexer-stack-pop! dup
        token-type? TOKEN_LBRACKET = if(
            dip(Token->TokenValue lexer-make!)
            dip(Token->TokenValue) token-value!,
            "Mismatched right bracket." lexer-emit-fatal-error!
    )))

def(lexer-emit-lbrace!, +Lexer,
    TOKEN_LBRACE 0 Int->TokenValue lexer-make!
    lexer-stack-push!)

def(lexer-emit-rbrace!, +Lexer,
    lexer-stack-empty? if(
        "Mismatched right brace." lexer-emit-fatal-error!,
        TOKEN_RBRACE lexer-stack-pop! dup
        token-type? TOKEN_LBRACE = if(
            dip(Token->TokenValue lexer-make!)
            dip(Token->TokenValue) token-value!,
            "Mismatched right brace." lexer-emit-fatal-error!
    )))

def(lexer-emit-name!, +Lexer,
    str-buf-clear!
    str-buf-zero!

    lexer-module@
    lexer-row@
    lexer-col@

    lexer-peek while(is-name-char?,
        str-buf-push!
        lexer-move!
        lexer-peek
    )
    drop

    str-buf-is-doc-start? if(
        drop3
        lexer-skip-doc!, # TODO: save the doc in a token-doc field for the proceeding token
    str-buf-is-int? if(
        token-alloc!
        TOKEN_INT over token-type!
        str-buf-int? Int->TokenValue over token-value!
        tuck token-col!
        tuck token-row!
        token-module!,

        token-alloc!
        TOKEN_NAME over token-type!
        name-save! Name->TokenValue over token-value!
        tuck token-col!
        tuck token-row!
        token-module!
    )))

def(str-buf-is-doc-start?, Bool +StrBuf,
    str-buf-length? 3 = if(
        0 str-buf-u8@ is-pipe-char
        1 str-buf-u8@ is-pipe-char &&
        2 str-buf-u8@ is-pipe-char &&,
        false
    ))

def(is-pipe-char, U8 -- Bool, U8->Int 0x7C =)

def(str-buf-is-int?, Bool +StrBuf,
    str-buf-is-dec-int? if(true, str-buf-is-hex-int?))

def(str-buf-is-dec-int?, Bool +StrBuf,
    0 # number of digits
    0 # current index
    dup str-buf-u8@ is-sign? nip if(
        1+,
        id
    )
    while(dup str-buf-u8@ is-digit? nip,
        dip(1+) 1+)
    swap 1 >= if(
        str-buf-length? =,
        drop false
    ))

def(is-zero-char, Char -- Bool, U8->Int 48 =)
def(is-xX-char, Char -- Bool, U8->Int dup 88 = dip(120 =) ||)

def(str-buf-is-hex-int?, Bool +StrBuf,
    0 # number of digits
    0 # current index
    dup str-buf-u8@ is-sign? nip if(
        1+,
        id
    )
    dup str-buf-u8@ is-zero-char if(
        1+
        dup str-buf-u8@ is-xX-char if(
            1+
            while(dup str-buf-u8@ is-hexdigit? nip, dip(1+) 1+)
            swap 1 >= if(
                str-buf-length? =,
                drop false
            ),

            drop2 false
        ),

        drop2 false
    ))

def(str-buf-int?, Int +StrBuf,
    str-buf-is-dec-int? if(
        str-buf-dec-int?,
        str-buf-hex-int?
    ))

def(str-buf-dec-int?, Int +StrBuf,
    1 # sign multiplier
    0 # accumulated value
    0 # current index
    dup str-buf-u8@ is-sign? if(
        is-minus-sign? nip if(
            dip(dip(drop -1)),
            id
        )
        1+,
        drop
    )
    while(dup str-buf-length? <,
        dup dip(
            str-buf-u8@ U8->Int
            dip(10 *) 48 - +
        )
        1+)
    drop *)

def(str-buf-hex-int?, Int +StrBuf,
    1 # sign multiplier
    0 # accumulated value
    0 # current index
    dup str-buf-u8@ is-sign? if(
        is-minus-sign? nip if(
            dip(dip(drop -1)),
            id
        )
        1+,
        drop
    )
    2 + # skip 0x prefix
    while(dup str-buf-length? <,
        dup dip(
            str-buf-u8@
            dip(16 *) hexdigit-value +
        )
        1+)
    drop *)

def(hexdigit-value, Char -- Int,
    is-digit? if(
        U8->Int 48 -,
        is-upper-hexdigit? if(
            U8->Int 55 -,
            U8->Int 87 -
        )
    ))

def(lexer-emit-string!, +Lexer,
    str-buf-clear!
    TOKEN_STR 0 Int->TokenValue lexer-make!

    lexer-move!
    lexer-peek while(is-string-end? not,
        lexer-push-string-char!
        lexer-move!
        lexer-peek
    )
    drop

    strings-save! StrLit->Int
    Int->TokenValue swap token-value!)

def(lexer-push-string-char!, Char -- +Lexer,
    is-backslash? if(
        drop lexer-move! lexer-peek

        is-newline? if(
            drop,

        is-n? if(
            drop 10 Int->U8 str-buf-push!,

        is-r? if(
            drop 13 Int->U8 str-buf-push!,

        is-t? if(
            drop 9 Int->U8 str-buf-push!,

        is-quote? if(
            str-buf-push!,

        is-backslash? if(
            str-buf-push!,

            str-buf-push!

            "Unknown character escape sequence."
            lexer-emit-warning!

        )))))),

        str-buf-push!
    ))

def(lexer-skip-comment!, +Lexer,
    while(lexer-comment-end? not, lexer-move!)
    lexer-peek is-newline? if(
        lexer-emit-newline! drop,
        drop
    ))

def(lexer-skip-doc!, +Lexer, while(lexer-comment-end? not, lexer-move!))

def(lexer-comment-end?, Bool +Lexer,
    lexer-done? if(
        true,
        lexer-peek is-newline? nip
    ))

def(lexer-peek, Char +Lexer, input-peek)
def(lexer-move!, +Lexer, input-move!
    lexer-col@ Col->Int 1+ Int->Col lexer-col!)

def(is-newline?, Char -- Char Bool, dup U8->Int 10 =)
def(is-whitespace?, Char -- Char Bool,
    dup U8->Int 9 = dip(dup U8->Int 32 =) ||)
def(is-pound?, Char -- Char Bool, dup U8->Int 35 =)
def(is-lparen?, Char -- Char Bool, dup U8->Int 40 =)
def(is-rparen?, Char -- Char Bool, dup U8->Int 41 =)
def(is-lbracket?, Char -- Char Bool, dup U8->Int 91 =)
def(is-rbracket?, Char -- Char Bool, dup U8->Int 93 =)
def(is-lbrace?, Char -- Char Bool, dup U8->Int 123 =)
def(is-rbrace?, Char -- Char Bool, dup U8->Int 125 =)
def(is-comma?, Char -- Char Bool, dup U8->Int 44 =)
def(is-quote?, Char -- Char Bool, dup U8->Int 34 =)
def(is-digit?, Char -- Char Bool, dup U8->Int 48 57 in-range)
def(is-upper-hexdigit?, Char -- Char Bool, dup U8->Int 65 70 in-range)
def(is-lower-hexdigit?, Char -- Char Bool, dup U8->Int 97 102 in-range)
def(is-hexdigit?, Char -- Char Bool, is-digit? dip(is-upper-hexdigit?) || dip(is-lower-hexdigit?) ||)
def(is-nul?, Char -- Char Bool, dup U8->Int 0=)
def(is-sign?, Char -- Char Bool, is-plus-sign? dip(is-minus-sign?) ||)
def(is-asterisk?, Char -- Char Bool, dup U8->Int 42 =)
def(is-plus-sign?, Char -- Char Bool, dup U8->Int 43 =)
def(is-minus-sign?, Char -- Char Bool, dup U8->Int 45 =)
def(is-alpha?, Char -- Char Bool, is-lower? dip(is-upper?) ||)
def(is-upper?, Char -- Char Bool, dup U8->Int 65 90 in-range)
def(is-lower?, Char -- Char Bool, dup U8->Int 97 122 in-range)

def(is-string-end?, Char -- Char Bool, is-quote? dip(is-newline?) || dip(is-nul?) ||)
def(is-dash?, Char -- Char Bool, dup U8->Int 45 =)
def(is-underscore?, Char -- Char Bool, dup U8->Int 95 =)
def(is-backslash?, Char -- Char Bool, dup U8->Int 92 =)
def(is-n?, Char -- Char Bool, dup U8->Int 110 =)
def(is-r?, Char -- Char Bool, dup U8->Int 114 =)
def(is-t?, Char -- Char Bool, dup U8->Int 116 =)
def(underscore, Char, 95 Int->U8)

def(is-name-char?, Char -- Char Bool,
    is-special-char? not
    dip(dup U8->Int 33 126 in-range) &&)

def(is-special-char?, Char -- Char Bool,
    is-quote?
    dip(is-lparen?) ||
    dip(is-rparen?) ||
    dip(is-lbracket?) ||
    dip(is-rbracket?) ||
    dip(is-lbrace?) ||
    dip(is-rbrace?) ||
    dip(is-comma?) ||
    dip(is-pound?) ||
    )

def(in-range, Int Int Int -- Bool,
    dip(over dip(>=)) <= &&)

def(lexer-trace-prefix!, +IO,
    lexer-module@ load-module-source-path! str-buf-trace! ":" str-trace!
    lexer-row@ Row->Int int-trace! ":" str-trace!
    lexer-col@ Col->Int int-trace! ":" str-trace-sp!)

def(lexer-location, Module Row Col +Lexer,
    lexer-module@ lexer-row@ lexer-col@)

def(lexer-emit-warning!, Str -- +IO, dip(lexer-location) emit-warning-at!)
def(lexer-emit-error!, Str -- +IO, dip(lexer-location) emit-error-at!)
def(lexer-emit-fatal-error!, *a Str -- *b +IO, dip(lexer-location) emit-fatal-error-at!)
