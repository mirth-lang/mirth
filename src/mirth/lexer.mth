module(mirth.lexer)

import(std.prelude)
import(std.byte)
import(std.stack)
import(std.path)
import(std.str)
import(std.maybe)
import(std.list)

import(posix.posix)
import(posix.file)
import(posix.input)

import(mirth.location)
import(mirth.name)
import(mirth.token)
import(mirth.error)
import(mirth.module)


#########
# LEXER #
#########

data(+Lexer, +LEXER -> Module Row Col Stack(Token) +Input)
def(-LEXER, +Lexer -- Module Row Col Stack(Token) +Input, +LEXER -> id)

def(lexer-module@, +Lexer -- Module +Lexer, -LEXER over3 dip(+LEXER))
def(lexer-row@, +Lexer -- Row +Lexer, -LEXER over2 dip(+LEXER))
def(lexer-col@, +Lexer -- Col +Lexer, -LEXER over dip(+LEXER))
def(lexer-stack@, +Lexer -- Stack(Token) +Lexer, -LEXER dup dip(+LEXER))

def(lexer-module!, Module +Lexer -- +Lexer, -LEXER rot4l drop +LEXER)
def(lexer-row!, Row +Lexer -- +Lexer, dip(-LEXER rotl drop) rotr +LEXER)
def(lexer-col!, Col +Lexer -- +Lexer, dip(-LEXER swap drop) swap +LEXER)
def(lexer-stack!, Stack(Token) +Lexer -- +Lexer, dip(-LEXER drop) +LEXER)
def(lexer-stack-push!, Token +Lexer -- +Lexer,
    dip(-LEXER) swap cons +LEXER)
def(lexer-stack-pop!, +Lexer -- Maybe(Token) +Lexer,
    -LEXER uncons swap dip(+LEXER))

def(run-lexer!, Path +World -- Module +World,
    Module.new! dup source-path open-file! input-start!
    1 >Row
    1 >Col
    STACK_NIL
    +LEXER

    Token.alloc-none!

    while(lexer-done? not, lexer-next!)
    TOKEN_NONE lexer-emit!
    -LEXER input-end! +File.close-file!
    uncons drop for("Mismatched left parenthesis." emit-fatal-error!) drop2

    Token.alloc-none! over ~end !
    swap succ over ~start !)

# Is the lexer done?
def(lexer-done?, +Lexer -- Bool +Lexer, -LEXER input-done? dip(+LEXER))

# Create a token, and add it to the token buffer,
# returning the new token.
def(lexer-make!, TokenValue +Lexer -- Token +Lexer,
    Token.alloc!
    tuck ~value !
    lexer-module@ over ~module !
    lexer-row@ over ~row !
    lexer-col@ over ~col !)

# Create a token, and add it to the token buffer.
def(lexer-emit!, TokenValue +Lexer -- +Lexer, lexer-make! drop)

# Lex the next token.
def(lexer-next!, +Lexer -- +Lexer, lexer-peek match(
    BLF -> lexer-newline! lexer-move!,
    BSPACE -> lexer-move!,
    BHT -> lexer-move!,
    BVT -> lexer-move!,
    BCR -> lexer-move!,
    BHASH -> lexer-skip-comment! lexer-move!,
    BCOMMA -> TOKEN_COMMA lexer-emit! lexer-move!,
    BLPAREN -> lexer-emit-lparen! lexer-move!,
    BRPAREN -> lexer-emit-rparen! lexer-move!,
    BLSQUARE -> lexer-emit-lsquare! lexer-move!,
    BRSQUARE -> lexer-emit-rsquare! lexer-move!,
    BLCURLY -> lexer-emit-lcurly! lexer-move!,
    BRCURLY -> lexer-emit-rcurly! lexer-move!,
    BQUOTE -> lexer-emit-string! lexer-move!,
    _ -> is-name-byte if(
        lexer-emit-name!,
        "Unrecognized byte." lexer-emit-fatal-error!
    )))

def(lexer-newline!, +Lexer -- +Lexer,
    lexer-row@ >Int 1+ >Row lexer-row!
    0 >Col lexer-col!)

def(lexer-emit-lparen!, +Lexer -- +Lexer,
    TOKEN_LPAREN_OPEN lexer-make!
    lexer-stack-push!)
def(lexer-emit-rparen!, +Lexer -- +Lexer,
    lexer-stack-pop! match(
        NONE -> "Mismatched right parenthesis." lexer-emit-fatal-error!,
        SOME -> dup lparen-open? if(
            dup TOKEN_RPAREN lexer-make!
            TOKEN_LPAREN swap ~value !,
            "Mismatched right parenthesis." lexer-emit-fatal-error!
        )
    ))

def(lexer-emit-lsquare!, +Lexer -- +Lexer,
    TOKEN_LSQUARE_OPEN lexer-make!
    lexer-stack-push!)
def(lexer-emit-rsquare!, +Lexer -- +Lexer,
    lexer-stack-pop! match(
        NONE -> "Mismatched right square bracket." lexer-emit-fatal-error!,
        SOME -> dup lsquare-open? if(
            dup TOKEN_RSQUARE lexer-make!
            TOKEN_LSQUARE swap ~value !,
            "Mismatched right square bracket." lexer-emit-fatal-error!
        )
    ))

def(lexer-emit-lcurly!, +Lexer -- +Lexer,
    TOKEN_LCURLY_OPEN lexer-make!
    lexer-stack-push!)
def(lexer-emit-rcurly!, +Lexer -- +Lexer,
    lexer-stack-pop! match(
        NONE -> "Mismatched right curly brace." lexer-emit-fatal-error!,
        SOME -> dup lcurly-open? if(
            dup TOKEN_RCURLY lexer-make!
            TOKEN_LCURLY swap ~value !,
            "Mismatched right curly brace." lexer-emit-fatal-error!
        )
    ))

def(lexer-emit-name!, +Lexer -- +Lexer,
    rdip("" thaw)
    lexer-module@
    lexer-row@
    lexer-col@

    lexer-peek while(dup is-name-byte,
        rdip(str-buf-push-byte-unsafe!)
        lexer-move!
        lexer-peek)
    drop

    rdip(str-buf-is-doc-start?) if(
        drop3
        lexer-skip-doc!,
        # TODO: save the doc in the token-doc field for the next token

        rdip(str-buf-is-int? if(
            str-buf-int? TOKEN_INT,
            str-buf-dname? match(
                SOME -> TOKEN_DNAME,
                NONE -> str-buf-name? TOKEN_NAME
            )
        ))

        Token.alloc!
        tuck ~value !
        tuck ~col !
        tuck ~row !
        ~module !
    )
    rdip(freeze drop))

def(str-buf-name?, +Str -- Name +Str, str-buf-dup! >Name)

def(str-buf-dname?, +Str -- Maybe(DName) +Str,
    BDOT str-buf-split-byte
    uncons >List+ match(
        NONE -> drop NONE,
        SOME ->
            dip(dup empty? if(drop NONE, >Name SOME))
            map(>Name) DNAME SOME
    ))

def(str-buf-is-doc-start?, +Str -- Bool +Str,
    str-buf-dup! "|||" ==)

def(str-buf-is-arrow?, +Str -- Bool +Str,
    str-buf-dup! "->" ==)

def(str-buf-is-dashes?, +Str -- Bool +Str,
    str-buf-dup! "--" ==)

def(str-buf-is-int?, +Str -- Bool +Str,
    str-buf-is-dec-int? or(str-buf-is-hex-int?) or(str-buf-is-oct-int?))

def(str-buf-is-dec-int?, +Str -- Bool +Str,
    0 >Size # number of digits
    0 >Offset # current index
    dup str-buf-byte@ is-sign if(1+, id)
    while(dup str-buf-byte@ is-digit, dip(1+) 1+)
    swap 0> if(str-buf-num-bytes? >Offset ==, drop F))
   
def(str-buf-is-hex-int?, +Str -- Bool +Str,
    0 >Size # number of digits
    0 >Offset # current index
    dup str-buf-byte@ is-sign if(
        1+,
        id
    )
    dup str-buf-byte@ B'0' == if(
        1+
        dup str-buf-byte@ B'x' == if(
            1+
            while(dup str-buf-byte@ is-hexdigit, dip(1+) 1+)
            swap 0> if(
                str-buf-num-bytes? >Offset ==,
                drop F
            ),

            drop2 F
        ),

        drop2 F
    ))

def(str-buf-is-oct-int?, +Str -- Bool +Str,
    0 >Size # number of digits
    0 >Offset # current index
    dup str-buf-byte@ is-sign if(
        1+,
        id
    )
    dup str-buf-byte@ B'0' == if(
        1+
        dup str-buf-byte@ B'o' == if(
            1+
            while(dup str-buf-byte@ B'0' B'7' in-range, dip(1+) 1+)
            swap 0> if(
                str-buf-num-bytes? >Offset ==,
                drop F
            ),

            drop2 F
        ),

        drop2 F
    ))

def(str-buf-int?, +Str -- Int +Str,
    str-buf-is-dec-int? if(
        str-buf-dec-int?,
	str-buf-is-hex-int? if(
            str-buf-hex-int?,
	    str-buf-oct-int?
	)
    ))

def(byte-sign-multiplier, Byte -- Int,
    B'-' -> -1,
    B'+' -> +1,
    _ -> drop "unexpected byte in byte-sign-multiplier" panic!)

||| process int sign and return initial state for rest of int lexing.
||| returns: (sign multiplier) (accumulated value == 0) (str-buf index)
def(str-buf-int-sign, +Str -- Int Int Offset +Str,
    0 >Offset str-buf-byte@ byte-sign-value-index)

def(byte-sign-value-index, Byte -- Int Int Offset,
    B'-' -> -1 0 1 >Offset,
    B'+' -> +1 0 1 >Offset,
    _ -> drop +1 0 0 >Offset)

def(str-buf-dec-int?, +Str -- Int +Str,
    str-buf-int-sign
    while(dup str-buf-num-bytes? >Offset <,
        sip(
            str-buf-byte@ >Int
            dip(10 *) 48 - +
        )
        1+)
    drop *)

def(str-buf-hex-int?, +Str -- Int +Str,
    str-buf-int-sign 1+ 1+ # skip 0x prefix
    while(dup str-buf-num-bytes? >Offset <,
        sip(
            str-buf-byte@
            dip(16 *) hexdigit-value +
        )
        1+)
    drop *)

def(str-buf-oct-int?, +Str -- Int +Str,
    str-buf-int-sign 1+ 1+ # skip 0x prefix
    while(dup str-buf-num-bytes? >Offset <,
        sip(
            str-buf-byte@ >Int 
            dip(8 *) 48 - +
        )
        1+)
    drop *)

def(hexdigit-value, Byte -- Int,
    dup is-digit if(
        >Int 48 -,
        >Int 55 -
    ))

def(lexer-emit-string!, +Lexer -- +Lexer,
    rdip("" thaw)
    TOKEN_NONE lexer-make!

    lexer-move!
    lexer-peek while(dup is-string-end not,
        lexer-push-string-byte!
        lexer-move!
        lexer-peek
    )
    drop

    rdip(freeze TOKEN_STR)
    swap ~value !)

def(lexer-push-string-byte!, +Str +Lexer Byte -- +Str +Lexer,
    B'\' -> lexer-move! lexer-peek lexer-push-string-escape-byte!,
    _ -> rdip(str-buf-push-byte-unsafe!))

def(lexer-push-string-escape-byte!, +Str +Lexer Byte -- +Str +Lexer,
    BLF -> id,
    B'n' -> BLF rdip(str-buf-push-byte-ascii!),
    B'r' -> BCR rdip(str-buf-push-byte-ascii!),
    B't' -> BHT rdip(str-buf-push-byte-ascii!),
    B'\' -> B'\' rdip(str-buf-push-byte-ascii!),
    BQUOTE -> BQUOTE rdip(str-buf-push-byte-ascii!),
    _ -> rdip(str-buf-push-byte-unsafe!)
    "Unknown character escape sequence." lexer-emit-warning!)

def(lexer-skip-comment!, +Lexer -- +Lexer,
    while(lexer-comment-end? not, lexer-move!)
    lexer-peek BLF == then(lexer-newline!))

def(lexer-skip-doc!, +Lexer -- +Lexer, while(lexer-comment-end? not, lexer-move!))

def(lexer-comment-end?, +Lexer -- Bool +Lexer,
    lexer-done? if(
        T,
        lexer-peek dup BLF == nip
    ))

def(lexer-peek, +Lexer -- Byte +Lexer, -LEXER input-peek dip(+LEXER))
def(lexer-move!, +Lexer -- +Lexer, -LEXER input-move! +LEXER
    lexer-col@ >Int 1+ >Col lexer-col!)

def(lexer-location, +Lexer -- Location +Lexer,
    lexer-module@ lexer-row@ lexer-col@ LOCATION)

def(lexer-emit-warning!, Str +Lexer -- +Lexer, dip(lexer-location) emit-warning-at!)
def(lexer-emit-error!, Str +Lexer -- +Lexer, dip(lexer-location) emit-error-at!)
def(lexer-emit-fatal-error!, *a Str +Lexer -- *b, dip(lexer-location) emit-fatal-error-at!)
