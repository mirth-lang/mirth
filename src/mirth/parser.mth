# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

import base/unit
import base/maybe
import base/result
import base/list
import base/str
import mirth/loc
import mirth/lexer
import mirth/token
import mirth/syntax

export mirth/parser
  type SyntaxError
  type Parser(t)

  syntaxErrorLocSet : SyntaxError -- LocSet
  syntaxErrorMsg : SyntaxError -- Str
  syntaxError->str : SyntaxError -- Str

  runParser : List(L(Token)) Parser(t) -- Result(SyntaxError, L(t))

  parseModule : Parser(Module)
  parseImport : Parser(Import)
  parseExport : Parser(Export)
  parseDecl : Parser(Decl)
  parseSig : Parser(Sig)
  parseTypeSig : Parser(TypeSig)
  parseDataDef : Parser(DataDef)
  parseWordSig : Parser(WordSig)
  parseWordDef : Parser(WordDef)
  parseAssertion : Parser(Assertion)
  parseParams : Parser(Params)
  parseParam : Parser(Param)
  parseType : Parser(Type)
  parseExpr : Parser(Expr)
  parseAtom : Parser(Atom)
  parseWord : Parser(Word)
  parseArgs : Parser(Args)
  parseInterface : Parser(Interface)
  parseName : Parser(Name)
  parseDocs : Parser(Maybe(L(Docs)))
end

data SyntaxError
  mkSyntaxError : LocSet Str -- SyntaxError
end

syntaxErrorLocSet = match( mkSyntaxError -> drop )
syntaxErrorMsg = match( mkSyntaxError -> nip )
syntaxError->str = match( mkSyntaxError ->
  dip(locSet->str) <>
)

||| Parse State
data PS
  psNil  : PS
  psSnoc : L(Token) List(L(Token)) -- PS
end

mkPS : List(L(Token)) -- PS
mkPS = lmatchL(psNil, psSnoc)

psCurLoc : PS -- LocSet
psCurLoc =
  match(
    psNil -> locSetNull,
    psSnoc -> drop unL drop
  )

psNil? : PS -- PS Bool
psNil? =
  match(
    psNil -> psNil true,
    psSnoc -> psSnoc false
  )

psErr : PS Str -- SyntaxError
psErr = dip(psCurLoc) mkSyntaxError

||| Parse Result
data PR(t)
  prFail : SyntaxError -- PR(t)
  prSome : L(t) Bool -- PR(t)   # bool true iff a token was consumed
  prNone : Bool -- PR(t)        # bool true iff a token was consumed
end

data Parser(t)
  mkParser(f: PS a -- PS PR(b)) : a -- Parser(b)
end

unParser : PS Parser(b) -- PS PR(b)
unParser = match(mkParser(f) -> f)

runParser =
  dip(mkPS) unParser match(
    prFail -> nip Err,
    prNone -> drop "Syntax Error" psErr Err,
    prSome ->
      drop cond(
        dip?(psNil?) -> nip Ok,
        drop "Syntax Error: Leftover Tokens" psErr Err
      )
  )

pureP : t -- Parser(t)
pureP = mkParser(pureL false prSome)

read(p: Token -- Token Bool, f: Token -- t) : Parser(t)
read(p,f) =
  0 mkParser(
    drop match(
      psNil -> psNil false prNone,
      psSnoc ->
        dip?(withL?(p)) if(
          mkPS swap mapL(f) true prSome,
          psSnoc false prNone
        )
    )
  )

failP : Str -- Parser(a)
failP = mkParser(dip(dup) psErr prFail)

seq2(f: L(a) L(b) -- c) : Parser(a) Parser(b) -- Parser(c)
seq2(f) =
  pack2 mkParser(
    unpack2
    dip(unParser) swap
    match(
      prFail -> nip prFail,
      prNone -> nip prNone,
      prSome ->
        dip2(unParser) rotl
        match(
          prFail -> dip(drop2) prFail,
          prNone -> or nip prNone,
          prSome -> rotl or dip(cobindL2(f)) prSome
        )
    )
  )

seq1(f: L(a) -- b) : Parser(a) -- Parser(b)
seq1(f) = 0 pureP seq2(drop f)

alt2 : Parser(t) Parser(t) -- Parser(t)
alt2 =
  pack2 mkParser(
    unpack2
    dip(unParser) swap
    match(
      prFail -> nip prFail,
      prSome -> dip2(drop) prSome,
      prNone -> if(drop true prNone, unParser)
    )
  )

starAux : Parser(a) L(List(L(a))) Bool -- Parser(List(L(a)))
starAux =
  pack3 mkParser(
    unpack3
    dip2(dup dip(unParser) swap) rotl
    match(
      prFail -> dip(drop3) prFail,
      prNone ->
        if(
          drop3 true prNone,
          dip2(drop) prSome
        ),
      prSome ->
        dip(swap dip(cobindL2(dip(getL) cons)))
        if(
          drop true starAux unParser,
          dip2(drop) prSome
        )
    )
  )

star : Parser(a) -- Parser(List(L(a)))
star = nil pureL false starAux

lazyP(p: Parser(a)) : Parser(a)
lazyP(p) = 0 mkParser(drop p unParser)

################################
### Extra Parser Combinators ###
################################

token(p: Token -- Token Bool) : Parser(Token)
token(p) = read(p, id)

prefixP : Parser(t) Parser(a) -- Parser(t)
suffixP : Parser(t) Parser(a) -- Parser(t)
prefixP = swap seq2(nip getL)
suffixP = seq2(drop getL)

prefix(p: Token -- Token Bool) : Parser(t) -- Parser(t)
suffix(p: Token -- Token Bool) : Parser(t) -- Parser(t)
prefix(p) = token(p) prefixP
suffix(p) = token(p) suffixP

munchNewlines : Parser(t) -- Parser(t)
munchNewlines = token(tokenIsNewline?) star suffixP

seq3(f: L(a) L(b) L(c) -- d): Parser(a) Parser(b) Parser(c) -- Parser(d)
seq3(f) = seq2(pack2) seq2(getL unpack2 f)

seq4(f: L(a) L(b) L(c) L(d) -- e): Parser(a) Parser(b) Parser(c) Parser(d) -- Parser(e)
seq4(f) = seq2(pack2) seq3(getL unpack2 f)

bracket(lp: Token -- Token Bool, rp: Token -- Token Bool) : Parser(t) -- Parser(t)
bracket(lp, rp) = suffix(rp) prefix(lp)

plussep(cp: Token -- Token Bool) : Parser(a) -- Parser(List(L(a)))
plussep(cp) = dup prefix(cp) star seq2(getL snoc)

tryP : Parser(a) -- Parser(a)
tryP =
  mkParser(
    dip(dup) unParser
    match(
      prFail -> dip2(drop) prFail,
      prSome -> dip3(drop) prSome,
      prNone -> drop2 false prNone
    )
  )

expectP : Parser(t) Str -- Parser(t)
expectP = failP alt2

expectNewlineP : Parser(t) Str -- Parser(t)
expectNewlineP = token(tokenIsNewline?) swap expectP suffixP

#####################
### Mirth Parsers ###
#####################

parseModule = lazyP(
  token(tokenIsNewline?) star
  parseImport tryP star
  parseExport tryP star
  parseDecl star
  seq4(dip3(drop) mkModule)
)

parseImport = lazyP(
  token(tokenIsImport?)
  parseInterface
    "Expected interface name after 'import'" expectP
    "Expected newline after 'import INTERFACE'" expectNewlineP
  seq2(nip mkImport)
)

parseExport = lazyP(
  parseDocs
  token(tokenIsExport?)
    suffixP
  parseInterface
    "Expected interface name after 'export'" expectP
    "Expected newline after 'export INTERFACE'" expectNewlineP
  parseSig star
    "Invalid syntax in export bloc." expectP
  token(tokenIsEnd?)
    "Expected 'end' to close export block." expectP
    "Expected newline after 'end'" expectNewlineP
    suffixP
  seq3(dip2(getL) getL mkExport)
)

parseDecl = lazyP(
  parseTypeSig tryP seq1(declTypeSig)
  parseDataDef tryP seq1(declDataDef) alt2
  parseWordSig tryP seq1(declWordSig) alt2
  parseWordDef tryP seq1(declWordDef) alt2
  parseAssertion tryP seq1(declAssertion) alt2
  token(tokenIsEnd? not) "Expected declaration." failP swap prefixP alt2
)

parseSig = lazyP(
  parseTypeSig tryP seq1(sigTypeSig)
  parseWordSig tryP seq1(sigWordSig) alt2
  parseAssertion tryP seq1(sigAssertion) alt2
  token(tokenIsEnd? not) "Expected signature." failP swap prefixP alt2
)

parseTypeSig = lazyP(
  parseDocs
  token(tokenIsType?)
    suffixP
  parseName
    "Expected type name after 'type'" expectP
  parseParams
    "Expected params or newline after 'type NAME'" expectP
    "Expected newline after 'type NAME PARAMS'" expectNewlineP
  seq3(dip2(getL) mkTypeSig)
)

parseDataDef = lazyP(
  parseDocs
  token(tokenIsData?)
    suffixP
  parseName
    "Expected type name after 'data'" expectP
  parseParams
    "Expected params or newline after 'data NAME'" expectP
    "Expected newline after 'data NAME PARAMS'" expectNewlineP
  parseSig star
    "Invalid syntax in data block." expectP
  token(tokenIsEnd?)
    "Expected 'end' to close data block." expectP
    "Expected newline after 'end'." expectNewlineP
    suffixP
  seq4(dip3(getL) getL mkDataDef)
)

parseWordSig = lazyP(
  parseDocs
  parseName
  parseParams
    munchNewlines
    suffix(tokenIsColon?)
    munchNewlines
  parseType
    "Expected type expression in type signature." expectP
    "Expected newline after type signature." expectNewlineP
  seq4(dip3(getL) mkWordSig)
)

parseWordDef = lazyP(
  parseDocs
  parseName
  parseParams
    munchNewlines
    suffix(tokenIsEqual?)
    munchNewlines
  parseExpr
    "Expected expression in word definition." expectP
    "Expected newline after word definition." expectNewlineP
  seq4(dip3(getL) mkWordDef)
)

parseAssertion = lazyP(
  parseExpr
    munchNewlines
    suffix(tokenIsEqual2?)
    munchNewlines
  parseExpr
    "Expected right-hand side expression in assertion." expectP
    "Expected newline after assertion." expectNewlineP
  seq2(mkAssertion)
)

parseParams = lazyP(
  # option 1
  token(tokenIsLParen?)
  parseParam plussep(tokenIsComma?)
  suffix(tokenIsRParen?)
  seq2(nip getL mkParams)

  # option 2
  nil mkParams pureP

  alt2
)

parseParam = lazyP(
  parseName
  parseParams

  # option 1
  token(tokenIsColon?)
  parseType
  seq2(nip Some)

  # option 2
  None pureP

  alt2
  seq3(getL mkParam)
)

parseType = lazyP(
  parseExpr

  # option 1
  token(tokenIsDash2?)
  parseExpr
  seq2(nip Some)

  # option2
  None pureP

  alt2
  seq2(
    getL
    maybe(
      dip(nil mkExpr pureL) mkType,
      mkType
    )
  )

)

parseExpr = lazyP(
  parseAtom star seq1(getL mkExpr)
)

parseAtom = lazyP(
  read(tokenIsInt?, tokenGetInt) seq1(atomInt)
  read(tokenIsStr?, tokenGetStr) seq1(atomStr) alt2
  parseWord seq1(atomWord) alt2
)

parseWord = lazyP(
  parseName parseArgs seq2(mkWord)
)

parseArgs = lazyP(
  parseExpr plussep(tokenIsComma?) seq1(getL mkArgs)
  bracket(tokenIsLParen?, tokenIsRParen?)
  nil mkArgs pureP alt2
)

parseInterface = read(tokenIsName?, tokenGetName mkInterface)

parseName = read(tokenIsName?, tokenGetName mkName)

parseDocs = lazyP(
  read(tokenIsDoc?, tokenGetDoc)
    "Expected newline after docs." expectNewlineP
    star
  seq1(
    unL nil? if(
      drop2 None,
      map(getL) mkDocs mkL Some
    )
  )
)

####################
### parser tests ###
####################
