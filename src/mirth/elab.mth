module(mirth.elab)
import(mirth.data.name)
import(mirth.data.token)
import(mirth.data.type)
import(mirth.data.ctx)
import(mirth.data.external)
import(mirth.data.word)
import(mirth.data.var)
import(mirth.data.buffer)
import(mirth.data.table)
import(mirth.data.var)
import(mirth.data.arrow)

import(data.lazy)

####################
# Type Elaboration #
####################

data(HolesAllowed, ALLOW_HOLES, FORBID_HOLES)
def(HolesAllowed->Bool, HolesAllowed -- Bool, ALLOW_HOLES ==)

data(TypeElab, TYPE_ELAB -> HolesAllowed Ctx)
def(type-elab-default, TypeElab, FORBID_HOLES ctx-empty TYPE_ELAB)
def(type-elab-stack-assertion, Ctx -- TypeElab, dip(ALLOW_HOLES) TYPE_ELAB)
def(type-elab-holes-allowed?, TypeElab -- TypeElab HolesAllowed,
    dup match(TYPE_ELAB -> drop))
def(type-elab-ctx, TypeElab -- Ctx,
    match(TYPE_ELAB -> nip))
def(type-elab-ctx?, TypeElab -- TypeElab Ctx, dup type-elab-ctx)
def(type-elab-ctx!, TypeElab Ctx -- TypeElab,
    swap match(TYPE_ELAB -> drop swap TYPE_ELAB))

def(elab-type-sig!, TypeElab Token -- TypeElab Type Token,
    elab-type-stack!
    token-is-dashes? if(
        token-next
        swap dip(elab-type-stack!) swap,
        dip(TYPE_UNIT))
    while(sig-token-is-effect-con?, token-next) # TODO: elaborate effect type
    dip(swap TMorphism))

def(elab-type-stack!, TypeElab Token -- TypeElab Type Token,
    sig-token-is-stack-var? if(
        elab-stack-var! dip(TVar),
        dip(TYPE_UNIT)
    )
    elab-type-stack-rest!)

def(elab-type-stack-rest!, TypeElab Type Token -- TypeElab Type Token,
    while(sig-is-stack-end2? not,
        swap dip(elab-type-atom!) swap
        dip(swap TTensor)
    ))

def(elab-type-arg!, TypeElab Token -- TypeElab Type Token,
    elab-type-atom!
    token-is-arg-end? if(
        id,
        "Unexpected token after type." emit-fatal-error!
    ))

def(elab-type-atom!, TypeElab Token -- TypeElab Type Token,
    sig-token-is-type-var? if(
        elab-type-var! dip(TVar),

    sig-token-is-type-con? if(
        elab-type-con!,

    token-is-underscore? if(
        elab-type-dont-care!,

    sig-token-is-type-hole? if(
        elab-type-hole!,

    token-is-lsquare? if(
        elab-type-quote!,

        dup "Expected type, got unknown token." emit-error!
        dip(TYPE_ERROR) token-next
    ))))))

def(elab-stack-var!, TypeElab Token -- TypeElab Var Token,
    TYPE_STACK elab-implicit-var!)

def(elab-type-var!, TypeElab Token -- TypeElab Var Token,
    TYPE_TYPE elab-implicit-var!)

def(elab-implicit-var!, TypeElab Token Type -- TypeElab Var Token,
    dip2(type-elab-ctx?) over
    dip2(token-name@ dup2 swap ctx-lookup)
    rotl match(
        SOME ->
            rotr dip2(nip var-type?)
            elab-type-unify! nip,
        NONE ->
            dip(
                dip(var-new-implicit!)
                over var-type!
                dup dip(ctx-new!)
            )
    )
    token-next
    dip2(type-elab-ctx!))

def(elab-type-con!, TypeElab Token -- TypeElab Type Token,
    token-name? name-def@ match(
        DEF_TYPE ->
            over token-num-args
            over type-arity == if(
                elab-type-args!,

                drop dup
                "Wrong number of arguments for type." emit-error!
                TYPE_ERROR
            ),
        DEF_NONE ->
            dup "Unknown type." emit-error! TYPE_ERROR,
        _ ->
            drop dup "Not a type." emit-error! TYPE_ERROR
    )
    swap token-next)

def(elab-type-args!, TypeElab Token Type -- TypeElab Token Type,
    dip(token-has-args?) swap if(
        dip(tuck) swap token-succ
        while(token-is-right-enclosure? not,
            token-succ swap
            dip(elab-type-arg!) swap
            dip(swap TApp))
        drop dip(swap),

        id
    ))

def(elab-type-hole!, TypeElab Token -- TypeElab Type Token,
    dip(type-elab-holes-allowed?) swap HolesAllowed->Bool if(
        token-has-args? if(
            dup "Types with args not yet supported." emit-error! TYPE_ERROR,
            token-name? THole)
        swap token-next,
        "type holes are not allowed here" emit-fatal-error!
    ))

def(elab-type-dont-care!, TypeElab Token -- TypeElab Type Token,
    dip(type-elab-holes-allowed?) swap HolesAllowed->Bool if(
        token-has-args? if(
            dup "Types with args not yet supported." emit-error! TYPE_ERROR,
            TYPE_DONT_CARE)
        swap token-next,
        "type don't care is not allowed here" emit-fatal-error!
    ))

def(elab-type-quote!, TypeElab Token -- TypeElab Type Token,
    token-args-1
    sig-has-dashes? if(
        elab-type-sig!,
        elab-type-stack!
    )
    token-next)

def(elab-type-unify!, Type Type Token -- Type Token,
    dup dip(GAMMA rotr type-unify! nip))

def(elab-simple-type-arg!, Token -- Type,
    dip(type-elab-default) elab-type-arg! drop nip)

####################
# Word Elaboration #
####################

# AB = Arrow Builder = Arrow Elaborator
buffer(AB_HOME, 16)
def(ab-home@, Word, AB_HOME value@)
def(ab-home!, Word --, AB_HOME value!)
buffer(AB_ARROW, 16)
def(ab-arrow@, Arrow +AB, AB_ARROW value@)
def(ab-arrow!, Arrow -- +AB, AB_ARROW value!)
def(ab-ctx@, Ctx +AB, ab-arrow@ arrow-ctx@)
def(ab-ctx!, Ctx -- +AB, ab-arrow@ arrow-ctx!)
def(ab-token@, Token +AB, ab-arrow@ arrow-token-end@)
def(ab-token!, Token -- +AB, ab-arrow@ arrow-token-end!)
def(ab-type@, Type +AB, ab-arrow@ arrow-cod@)
def(ab-type!, Type -- +AB, ab-arrow@ arrow-cod!)

def(ab-save!, *a [ *a -- *b ] -- *b,
    \([f] -> ab-arrow@ dip(f) ab-arrow!))

def(ab-build!, *a Ctx Type Token [ *a -- *b ] -- *b Arrow,
    \([f] -> ab-save!(
        Arrow.alloc!
        ab-home@ over arrow-home!
        tuck dup2 arrow-token-start! arrow-token-end!
        tuck dup2 arrow-dom! arrow-cod!
        tuck arrow-ctx!
        ab-arrow!
        f
        ab-arrow@
    )))

def(ab-build-word!, *a Word [ *a -- *b ] -- *b Word,
    \([f] ->
        dup ab-home!
        dup dip(elab-word-ctx-sig!)
        word-body? swap
        dip(elab-expand-morphism! swap)

        { *a Ctx Type Token Type Word }
        dip(
            dip(ab-build!(f)) over
            arrow-cod? swap arrow-token-end@
            elab-type-unify! drop2
            ready
        )
        tuck word-arrow!
        nil ab-home!
    ))

def(ab-unify-type!, Type --,
    dip(ab-token@ GAMMA ab-type@) type-unify! ab-type! drop)

def(ab-atom!, Atom --,
    atom-token? ab-token!
    # atom-dom? ab-unify-type!     # moved to ab-expand-opsig!
        # ^ a sanity check to make sure
        # atom dom matches ab-arrow cod
    atom-cod? ab-type!
    dip(ab-arrow@ arrow-atoms@)
    ab-optimized-snoc!
    ab-arrow@ arrow-atoms!)

||| Add an atom to a list of atoms ... smartly.
def(ab-optimized-snoc!, List(Atom) Atom -- List(Atom),
    while(dip?(atoms-has-last-block?) and(atom-accepts-args?),
        swap atoms-turn-last-block-to-arg swap)
    snoc)

def(atom-accepts-args?, Atom -- Atom Bool,
    atom-op? match(
        OP_WORD -> dip(atom-args? len) elab-word-sig! type-max-num-params <,
        OP_PRIM ->
            match(
                PRIM_CORE_RUN -> atom-args? len 1 <, # this one's dubious
                PRIM_CORE_DIP -> atom-args? len 1 <,
                PRIM_CORE_IF -> atom-args? len 2 <,
                PRIM_CORE_WHILE -> atom-args? len 2 <,
                _ -> drop false
            ),
        _ -> drop false
    ))

def(atoms-has-last-block?, List(Atom) -- List(Atom) Bool,
    dup last match(
        NONE -> false,
        SOME ->
            atom-op@ match(
                OP_BLOCK -> drop true,
                _ -> drop false
            )
    ))

def(atoms-turn-last-block-to-arg, Atom List(Atom) -- Atom List(Atom),
    List->List+ match(
        NONE -> L0,
        SOME ->
            unsnoc atom-op? match(
                OP_BLOCK ->
                    { Atom List(Atom) Atom Block }
                    dip(atom-cod@ rotl tuck atom-dom!)
                    { List(Atom) Atom Block }
                    block-to-arg atom-arg-add!
                    swap,
                _ -> drop snoc
            )
    ))

def(block-to-arg, Block -- Arg,
    block-arrow? arrow-to-run-var match(
        NONE -> ARG_BLOCK,
        SOME -> ARG_VAR_RUN nip
    ))

def(arrow-to-run-var, Arrow -- Maybe(Var),
    arrow-atoms@ match(
        L1 -> atom-to-run-var,
        _ -> drop NONE
    ))

def(atom-to-run-var, Atom -- Maybe(Var),
    atom-op@ match(
        OP_VAR -> var-auto-run? if(SOME, drop NONE),
        _ -> drop NONE
    ))

def(ab-op!, Op --,
    Atom.alloc!
    ab-ctx@ over atom-ctx!
    ab-token@ over atom-token!
    dup2 atom-op!
    swap elab-op-fresh-sig!
    dip(over atom-subst!)
    ab-expand-opsig!
    dip(over atom-dom!) over atom-cod!
    ab-atom!)

def(ab-expand-opsig!, OpSig -- Type Type,
    match(
        OPSIG_ID -> ab-type@ dup,
        OPSIG_PUSH -> dip(ab-type@ dup) TTensor,
        OPSIG_APPLY ->
            dip(ab-type@)
            ab-token@ elab-expand-morphism!
            swap dip(elab-type-unify! drop)
    ))

def(ab-int!, Int --, OP_INT ab-op!)
def(ab-str!, Str --, OP_STR ab-op!)
def(ab-buffer!, Buffer --, OP_BUFFER ab-op!)
def(ab-var!, Var --, OP_VAR ab-op!)
def(ab-tag!, Tag --, OP_TAG ab-op!)
def(ab-prim!, Prim --,
    prim-type? is-nil if(
        ab-token@ "compiler error: prim type missing" emit-fatal-error!,
        OP_PRIM ab-op!
    ))
def(ab-word!, Word --, OP_WORD ab-op!)
def(ab-external!, External --, OP_EXTERNAL ab-op!)
def(ab-fieldword!, FieldWord --, OP_FIELDWORD ab-op!)

def(ab-block-at!, *a Token [ *a -- *b ] -- *b,
    \([f] ->
        Block.alloc! dip(
            ab-ctx@ meta-alloc! TMeta rotl ab-build!(f)
        ) tuck block-arrow-raw! OP_BLOCK ab-op!
    ))

def(ab-block!, *a [ *a -- *b ] -- *b,
    \([f] -> ab-token@ ab-block-at!(f)))

def(ab-dip!, *a [ *a -- *b ] -- *b,
    \([f] -> ab-block!(f) PRIM_CORE_DIP ab-prim!))

def(ab-if!, *a [ *a -- *b ] [ *b -- *c ] -- *c,
    dip(ab-block!) ab-block! PRIM_CORE_IF ab-prim!)
    # FIXME TODO there's a problem with multiples somewhere ...

def(ab-while!, *a [ *a -- *b ] [ *b -- *c ] -- *c,
    dip(ab-block!) ab-block! PRIM_CORE_WHILE ab-prim!)
    # FIXME TODO there's a problem with multiples somewhere ...
    # I probably got the InlineKey's backwards :-(

def(ab-lambda!, *a List(Param) [*a -- *b ] -- *b ,
    \([f] ->
        Lambda.alloc!
        ab-ctx@ over lambda-outer-ctx!
        ab-type@ over lambda-dom!
        ab-token@ over lambda-token!
        dup2 lambda-params!
        dip(ab-ctx@ ab-type@ rotl for(
            swap dip(Param->Var ctx-new!)
            ab-token@ elab-expand-tensor! drop2
        ))
        tuck lambda-mid!
        tuck lambda-inner-ctx!

        { *a Lambda }

        lambda-inner-ctx?
        over lambda-mid@
        ab-token@
        ab-build!(
            dip(f)
            ab-type@ over lambda-cod!
        )
        over lambda-body!
        OP_LAMBDA ab-op!
    ))

data(OpSig,
    OPSIG_ID,
    OPSIG_PUSH -> Type,
    OPSIG_APPLY -> Type)

def(elab-op-fresh-sig!, Op -- Subst OpSig,
    subst-nil swap match(
        OP_NONE -> OPSIG_ID,
        OP_INT -> VALUE_INT TValue OPSIG_PUSH,
        OP_STR -> VALUE_STR TValue OPSIG_PUSH,
        OP_BUFFER -> drop TYPE_PTR OPSIG_PUSH,
        OP_TAG -> elab-tag-sig! type-freshen-sig OPSIG_APPLY,
        OP_WORD -> elab-word-sig! type-freshen-sig OPSIG_APPLY,
        OP_PRIM -> prim-type@ type-freshen-sig OPSIG_APPLY,
        OP_EXTERNAL -> elab-external-sig! type-freshen-sig OPSIG_APPLY,
        OP_FIELDWORD -> elab-field-word-type! type-freshen-sig OPSIG_APPLY,
        OP_BLOCK -> elab-block-sig!,
        OP_VAR -> elab-var-sig!,
        OP_MATCH -> elab-match-sig!,
        OP_LAMBDA -> elab-lambda-sig!,
    ))

def(elab-block-sig!, Block -- OpSig,
    VALUE_BLOCK TValue OPSIG_PUSH)

def(elab-match-sig!, Match -- OpSig,
    match-dom? swap match-cod@ T-> OPSIG_APPLY)

def(elab-lambda-sig!, Lambda -- OpSig,
    lambda-dom? swap lambda-cod@ T-> OPSIG_APPLY)

def(elab-var-sig!, Var -- OpSig,
    var-auto-run? if(
        var-type@ type-semifreshen-sig OPSIG_APPLY,
        var-type@ OPSIG_PUSH
    ))

def(elab-tag-sig!, Tag -- Type +Elab,
    elab-tag-ctx-sig! nip)

def(elab-tag-ctx!, Tag -- Ctx +Elab,
    elab-tag-ctx-sig! drop)

def(elab-tag-ctx-sig!, Tag -- Ctx Type +Elab,
    tag-sig-is-checked? if(
        tag-type-raw? dip(tag-ctx@),

        type-elab-default over

        { Tag TypeElab Tag }
        tag-data@ data-header@ elab-type-atom! drop T1
        { Tag TypeElab Type }
        dip(
            over tag-has-sig?
            if(
                tag-sig@ T0 swap elab-type-stack-rest!
                token-run-end? if(drop, "syntax error" emit-fatal-error!),

                drop T0
            )
        )
        { Tag TypeElab Type Type }
        T-> dip(type-elab-ctx)
        { Tag Ctx Type }
        dup2 dip2(
            rotl
            tuck tag-type-raw!
            tuck tag-ctx!
            true swap tag-sig-is-checked!
        )
    ))


def(elab-external-sig!, External -- Type +Elab,
    elab-external-ctx-sig! nip)

def(elab-external-ctx!, External -- Ctx +Elab,
    elab-external-ctx-sig! drop)

def(elab-external-ctx-sig!, External -- Ctx Type +Elab,
    external-sig-is-checked? if(
        external-type? dip(external-ctx@),

        external-sig?
        dip(type-elab-default)
        elab-type-sig! drop dip(type-elab-ctx)
        dup2 dip2(
            rotl
            tuck external-type!
            tuck external-ctx!
            true swap external-sig-is-checked!
        )
    ))

def(elab-word-sig!, Word -- Type, elab-word-ctx-sig! nip)
def(elab-word-ctx!, Word -- Ctx, elab-word-ctx-sig! drop)
def(elab-word-ctx-sig!, Word -- Ctx Type,
    word-ctx-type@ force2)

def(elab-word-body!, Word -- Arrow, word-arrow@ force)

def(elab-arrow!, Ctx Type Token -- Arrow,
    elab-expand-morphism! elab-arrow-hom!)

def(elab-arrow-hom!, Ctx Type Type Token -- Arrow,
    swap dip(
        elab-arrow-fwd!
        arrow-token-end? GAMMA
        over arrow-cod@
    )
    type-unify! drop2)

def(elab-arrow-fwd!, Ctx Type Token -- Arrow,
    ab-build!(elab-atoms!))

def(elab-atoms!, --,
    while(
        elab-atoms-done? not,
        elab-atom! ab-token@ token-next ab-token!
    ))

def(elab-atoms-done?, Bool,
    ab-token@ token-run-end? nip)

def(elab-atom!, --,
    ab-token@ token-value@ match(
        TOKEN_NAME -> elab-atom-name!,
        TOKEN_INT -> ab-int!,
        TOKEN_STR -> ab-str!,
        TOKEN_LSQUARE -> drop elab-atom-block!,
        TOKEN_LCURLY -> drop elab-atom-assert!,
        _ -> ab-token@ "Unexpected token in elab-atom!" emit-fatal-error!
    ))

def(elab-atom-block!, --,
    ab-token@ token-args-1 elab-block-at!)

def(elab-block-at!, Token --,
    ab-ctx@ swap block-new-deferred! OP_BLOCK ab-op!)

def(elab-args!, --,
    ab-token@ token-args reverse-for(elab-block-at!))

def(elab-no-args!, --,
    ab-token@ token-args-0)

def(elab-atom-name!, Name --,
    dup ab-ctx@ ctx-lookup match(
        SOME -> nip elab-args! ab-var!,
        NONE -> name-def@ match(
            DEF_BUFFER -> elab-no-args! ab-buffer!,
            DEF_EXTERNAL -> elab-no-args! ab-external!,
            DEF_FIELDWORD -> elab-no-args! ab-fieldword!,
            DEF_WORD -> elab-args! ab-word!,
            DEF_TAG -> elab-args! ab-tag!,
            DEF_PRIM -> elab-prim!,
            _ -> drop ab-token@ "Unknown word." emit-error! TYPE_ERROR ab-type!
        )
    ))

def(elab-prim!, Prim --,
    match(
        PRIM_CORE_MATCH -> elab-atom-match!,
        PRIM_CORE_LAMBDA -> elab-atom-lambda!,
        _ -> elab-args! ab-prim!
    ))

def(elab-atom-assert!, --,
    ab-token@ GAMMA
    ab-ctx@ type-elab-stack-assertion
    ab-token@ token-args-1 elab-type-stack!
    drop nip ab-type@ swap type-unify! drop2)

def(elab-atom-lambda!, --,
    Lambda.alloc!
    ab-ctx@ over lambda-outer-ctx!
    ab-type@ over lambda-dom!
    ab-token@ over lambda-token!
    elab-lambda!
    OP_LAMBDA ab-op!)

def(elab-atom-match!, --,
    Match.alloc!
    ab-ctx@ over match-ctx!
    ab-type@ over match-dom!
    ab-token@ over match-token!
    meta-alloc! TMeta over match-cod!
    elab-match!
    OP_MATCH ab-op!)

def(elab-lambda!, Lambda -- Lambda,
    elab-lambda-params!
    elab-lambda-body!)

def(elab-expand-tensor!, Type Token -- Type Type Token,
    swap type-expand match(
        TYPE_ERROR -> dip(TYPE_ERROR TYPE_ERROR),
        TTensor -> id rotl,
        TMeta ->
            dip(meta-alloc! TMeta
                meta-alloc! TMeta
                dup2 TTensor)
            meta-type! rotl,
        _ ->
            drop dup "expected tuple type" emit-error!
            dip(TYPE_ERROR TYPE_ERROR)
    ))

def(elab-expand-morphism!, Type Token -- Type Type Token,
    swap type-expand match(
        TYPE_ERROR -> dip(TYPE_ERROR TYPE_ERROR),
        TMorphism -> id rotl,
        TMeta ->
            dip(meta-alloc! TMeta
                meta-alloc! TMeta
                dup2 TMorphism)
            meta-type! rotl,
        _ ->
            drop dup "expected block type" emit-error!
            dip(TYPE_ERROR TYPE_ERROR)
    ))

def(elab-lambda-pop-from-mid!, Lambda Token -- Lambda Type Token,
    dip(lambda-mid?)
    elab-expand-tensor!
    dip2(over lambda-mid!))

def(token-is-lambda-param?, Token -- Token Bool,
    sig-token-is-type-var? if(
        token-has-args? not,
    token-is-lsquare? if(
        dup true
        dip(token-succ sig-token-is-type-var?) &&
        dip(token-succ token-is-rsquare?) &&
        nip,
        false
    )))

def(elab-lambda-params!, Lambda -- Lambda,
    lambda-outer-ctx? over lambda-inner-ctx!
    lambda-dom? over lambda-mid!
    lambda-token? token-args-1
    while(token-is-lambda-param?, token-next)
    expect-token-arrow token-prev
    while(token-is-lambda-param?,
        elab-lambda-pop-from-mid! dup dip(
            sig-token-is-type-var? if(
                token-name@ var-new! tuck var-type!,

                token-succ dip(type-expand type-is-morphism?) swap if(
                    token-name@ var-new!
                    true over var-auto-run!
                    tuck var-type!,

                    "block pattern on non-block argument" emit-fatal-error!
                )
            )
            dip(lambda-params?) dup dip(Var->Param swap cons over lambda-params!)
            dip(lambda-inner-ctx?) ctx-new! over lambda-inner-ctx!
        )
        token-prev)
    drop)

def(elab-lambda-body!, Lambda -- Lambda,
    lambda-token? token-args-1
    while(token-is-lambda-param?, token-next) token-succ
    dip(lambda-mid? dip(lambda-inner-ctx?))
    elab-arrow-fwd!
    dup2 swap lambda-body!
    arrow-cod@ over lambda-cod!)

||| Elaborate `match(...)` expression.
def(elab-match!, Match -- Match,
    elab-match-cases!
    elab-match-exhaustive!)

||| Check that match is exhaustive.
def(elab-match-exhaustive!, Match -- Match,
    match-is-exhaustive? if(
        id,
        match-token? "Pattern match not exhaustive." emit-error!
    ))

||| Elaborate match cases.
def(elab-match-cases!, Match -- Match,
    match-token? token-has-args? if(
        token-succ token-succ
        while(token-is-rparen? not, elab-match-case!)
        drop,
        "match expects an arg" emit-fatal-error!
    ))

||| Elaborate a single match case `pattern -> body ,`
def(elab-match-case!, Match Token -- Match Token,
    Case.alloc!
    dup2 case-token!
    swap dip(dup2 case-match!)
    elab-case-pattern!
    expect-token-arrow token-succ
    elab-case-body!
    dip(match-add-case!)
    token-is-comma? if(token-succ, id))

||| Elaborate case pattern.
def(elab-case-pattern!, Case Token -- Case Token,
    token-is-underscore? if(
        # set case pattern
        dip(PATTERN_UNDERSCORE over case-pattern!)

        # set case mid
        dip(case-match? match-dom@ TYPE_DONT_CARE TYPE_DONT_CARE T*)
        elab-type-unify! dip(over case-mid!)

        # advance token
        token-succ,

    token-is-name? if(
        token-name? name-def@ match(
            DEF_TAG -> { Case Token Tag }

                # set case pattern
                dup PATTERN_TAG rotr
                dip2(over case-pattern!)

                # set case mid
                dip2(case-match? match-dom@) { Case Type Token Tag }
                elab-tag-sig! subst-nil swap type-freshen-sig
                { Case Type Token Subst Type }
                rotr dip(
                    elab-expand-morphism!
                    dip2(swap) elab-type-unify! nip
                    dip(over case-mid!)
                )
                swap dip(over case-subst!)

                # advance token
                token-succ,

            DEF_NONE ->
                "Unknown constructor." emit-fatal-error!,

            _ ->
                drop "Not a constructor." emit-fatal-error!
        ),

        "Expected constructor name." emit-fatal-error!
    )))

||| Elaborate case body.
def(elab-case-body!, Case Token -- Case Token,
    dip(case-mid? dip(case-match? match-ctx@)) elab-arrow-fwd!
    arrow-token-end? dip(arrow-cod?) { Case Arrow Type Token }
    dip2(over case-body!) { Case Type Token }
    dip2(case-match? match-cod@) elab-type-unify! nip)

######################
# Module Elaboration #
######################

||| Elaborate all of a module.
def(elab-module!, Module -- Module +Mirth,
    module-start?
    elab-module-header!
    while(token-is-module-end? not, elab-module-decl!)
    drop)

||| Check that the `module(M)` statement exists and save the name.
def(elab-module-header!, Token -- Token,
    PRIM_SYNTAX_MODULE token-prim=? if(
        dup token-args-1
        token-is-name? if(id, "Expected module name." emit-fatal-error!)
        token-name? name-defined?
        if(drop "Module name already taken." emit-fatal-error!, id)
        over token-module@
        dup2 module-name!
        dup2 DEF_MODULE swap name-def!
        module-path@ Path->Str swap
        module-path-from-name Path->Str str-eq if(drop,
            "Module name should match path." emit-error!)
        token-next,
        dup "Expected module header." emit-error!
    ))

||| Elaborate a declaration. Returns the next token.
def(elab-module-decl!, Token -- Token,
    token-value? match(
        TOKEN_NAME -> name-def@ match(
            DEF_PRIM -> prim-decl@ is-nil? if(
                drop "unknown declaration" emit-fatal-error!,
                run
            ),
            _ -> drop "unknown declaration" emit-fatal-error!
        ),
        _ -> drop "unsupported declaration" emit-fatal-error!
    ))

||| Elaborate `import(M)` statement. Return token after import.
def(elab-module-import!, Token -- Token,
    dup dip(token-next)
    token-args-1 token-value? match(
        TOKEN_NAME ->
            name-def? match(
                DEF_MODULE ->
                    dip(drop2 token-module?)
                    module-add-import!,
                    # module is already loaded

                DEF_NONE ->
                    module-path-from-name run-lexer!
                    elab-module!
                    dip(drop token-module?) module-add-import!,
                    # elab the imported module
                    # TODO: avoid elaborating here,
                    # use a single loop to dispatch top-level module elaboration.

                _ ->
                    drop2 "module name already taken" emit-fatal-error!
            ),
        _ ->
            drop "expected module name" emit-fatal-error!
    ))

||| Elaborate a data definition `data(T, ...)`
def(elab-data!, Token -- Token,
    dup dip(
        Data.alloc! swap token-args+
        uncons dip(elab-data-header!)
        for(elab-data-tag!)
        drop
    ) token-next)

||| Get the header, name, arity for a data type.
def(elab-data-header!, Data Token -- Data,
    dup2 swap data-header!
    sig-token-is-type-con? if(id,
        "Expected type name." emit-fatal-error!)
    dup2 token-name@
    name-undefined? if(id,
        drop2 "Name already defined." emit-fatal-error!)
    over TData DEF_TYPE over name-def!
    swap data-name!
    # TODO check header args are well-formed / elaborate them properly
    token-num-args over data-arity!)

||| Get a tag associated with a data type.
||| This looks like either "TAG" or "TAG -> TYPE1 ... TYPEN".
def(elab-data-tag!, Data Token -- Data,
    token-is-name? if(id, "Expected constructor name." emit-fatal-error!)
    token-name? name-undefined? if(id,
        drop "Name already defined. (Overlapping tags not supported.)" emit-fatal-error!)

    Tag.alloc!
    dup2 DEF_TAG swap name-def!
    tuck tag-name!
    { Data Token Tag }
    dip(over) dup2 tag-data!
    tuck dip(data-add-tag!)
    { Data Token Tag }
    swap token-succ
    token-is-arrow? if(
        dip(true over tag-has-sig!)
        token-succ tuck dip(tag-sig!)
        while(token-run-end? not, token-next),
    token-run-end? if(
        nip,
        "Expected arrow, comma, or right paren." emit-fatal-error!
    ))
    { Data Token }
    drop)

def(expect-token-comma, Token -- Token,
    token-is-comma? if(id, "Expected comma." emit-fatal-error!))

def(expect-token-rparen, Token -- Token,
    token-is-rparen? if(id, "Expected right parenthesis." emit-fatal-error!))

def(expect-token-arrow, Token -- Token,
    token-is-arrow? if(id, "Expected arrow." emit-fatal-error!))

||| Elaborate a word definition `def(w, t, b)`.
def(elab-def!, Token -- Token,
    dup dip(token-next) token-args-3
    rotl token-is-name? if(id, "expected word name" emit-fatal-error!)
    token-name?
    name-undefined? if(id, drop "word already defined" emit-fatal-error!)
    nip
    Word.alloc!
    dup2 DEF_WORD swap name-def!
    dup dip(word-name!)
    dup dip(word-body!)
    dup dip(word-sig!)

    dup delay(
        type-elab-default
        swap word-sig@ elab-type-sig!
        drop dip(type-elab-ctx) pack2
    )
    dup2 swap word-ctx-type!
    over delay2(
        dup ab-home!
        dip(force2) word-body@ elab-arrow!
        nil ab-home!
    ) swap word-arrow!)

||| Elaborate an external declaration `def-external(w, t)`
def(elab-def-external!, Token -- Token,
    dup dip(token-next) token-args-2
    swap token-is-name? if(
        token-name? name-undefined? if(
            nip
            External.alloc!
            dup2 DEF_EXTERNAL swap name-def!
            tuck external-name!
            external-sig!,

            drop "word already defined" emit-fatal-error!
        ),
        "expected word name" emit-fatal-error!
    ))

||| Elaborate a type definition `def-type(t1, t2)`.
def(elab-def-type!, Token -- Token,
    dup dip(token-next) token-args-2
    swap sig-token-is-type-con? if(
        token-name? name-undefined? if(
            nip swap
            elab-simple-type-arg!
            DEF_TYPE swap name-def!,

            drop "type already defined" emit-fatal-error!
        ),
        "expected type constructor" emit-fatal-error!
    ))

||| Elaborate a buffer definition `buffer(B, size)`.
def(elab-buffer!, Token -- Token,
    dup dip(token-next) token-args-2
    swap token-is-name? if(
        token-name? name-undefined? if(
            nip swap
            token-int@ buffer-new! drop,
            drop "buffer already defined" emit-fatal-error!
        ),
        "expected buffer name" emit-fatal-error!
    ))

||| Elaborate a table definition `table(T)`.
def(elab-table!, Token -- Token,
    dup dip(token-next) token-args-1
    sig-token-is-type-con? if(
        token-name@ table-new! drop,
        "expected table name" emit-fatal-error!
    ))

||| Elaborate C99 build target.
def(elab-target-c99!, Token -- Token,
    typecheck-everything!

    dup dip(token-next) token-args-2
    dip(token-str@ Str->Path)
    dip(ctx-empty T0 T0 T->)
    elab-arrow!
    swap run-output-c99!)

||| Ensure that everything so far has been typechecked.
def(typecheck-everything!, --,
    Name.for(typecheck-name!))

||| Typecheck name.
def(typecheck-name!, Name --,
    name-def@ match(
        DEF_NONE -> id,
        DEF_MODULE -> drop,
        DEF_BUFFER -> drop,
        DEF_PRIM -> drop,
        DEF_TYPE -> drop,
        DEF_EXTERNAL -> elab-external-sig! drop,
        DEF_WORD -> word-arrow@ force drop,
        DEF_FIELDWORD -> elab-field-word-type! drop,
        DEF_TAG -> elab-tag-sig! drop,
    ))

#########
# TABLE #
#########

def(TABLE_MAX_SIZE, Int, 0x20000)

def(table-new!, Name -- Table,
    Table.alloc!
    dup2 TTable DEF_TYPE swap name-def!
    tuck table-name!

    TABLE_MAX_SIZE over table-max-count!

    # Table.MAX
    table-name? ".MAX" name-cat!
    Word.alloc!
    dup2 DEF_WORD swap name-def!
    tuck word-name!

    L0 CTX
    T0 TYPE_INT T1 T->
    ready2 over word-ctx-type!

    ab-build-word!(
        TABLE_MAX_SIZE ab-int!
    ) drop

    # Table.NUM
    table-name? ".NUM" name-cat!
    8 buffer-new!
    over table-num-buffer!

    # Table.id
    table-name? ".id" name-cat!
    Word.alloc!
    dup2 DEF_WORD swap name-def!
    tuck word-name!

    L0 CTX
    over2 TTable T1 TYPE_INT T1 T->
    ready2 over word-ctx-type!

    ab-build-word! (
        PRIM_UNSAFE_CAST ab-prim!
    ) drop

    # Table.succ
    table-name? ".succ" name-cat!
    Word.alloc!
    dup2 DEF_WORD swap name-def!
    tuck word-name!

    L0 CTX
    over2 TTable T1 dup T->
    ready2 over word-ctx-type!

    ab-build-word! (
        PRIM_UNSAFE_CAST ab-prim!
        1 ab-int!
        PRIM_INT_ADD ab-prim!
        table-num-buffer? ab-buffer!
        PRIM_INT_GET ab-prim!
        1 ab-int!
        PRIM_INT_ADD ab-prim!
        PRIM_INT_MOD ab-prim!
        PRIM_UNSAFE_CAST ab-prim!
    ) drop

    # Table.succ
    table-name? ".pred" name-cat!
    Word.alloc!
    dup2 DEF_WORD swap name-def!
    tuck word-name!

    L0 CTX
    over2 TTable T1 dup T->
    ready2 over word-ctx-type!

    ab-build-word! (
        PRIM_UNSAFE_CAST ab-prim!
        PRIM_CORE_DUP ab-prim!
        0 ab-int!
        PRIM_VALUE_EQ ab-prim!
        ab-if!(
            id,
            1 ab-int!
            PRIM_INT_SUB ab-prim!
        )
        PRIM_UNSAFE_CAST ab-prim!
    ) drop

    # Table.for
    table-name? ".for" name-cat!
    Word.alloc!
    dup2 DEF_WORD swap name-def!
    tuck word-name!
    "x" name-new! var-new!
    \(t w x ->

        "a" name-new! var-new-implicit!
        TYPE_STACK over var-type!
        dup L1 CTX
        swap

        TVar \( a ->
            a a t TTable T* a T-> T* a T->
            ready2 w word-ctx-type!

            a t TTable T* a T-> x var-type!
            true x var-auto-run!
        )

        w ab-build-word! (
            x Var->Param L1 ab-lambda! (
                1 ab-int!
                ab-while! (
                    PRIM_CORE_DUP ab-prim!
                    t table-num-buffer@ ab-buffer!
                    PRIM_INT_GET ab-prim!
                    PRIM_VALUE_LE ab-prim!,

                    PRIM_CORE_DUP ab-prim!
                    ab-dip! (
                        PRIM_UNSAFE_CAST ab-prim!
                        x ab-var!
                    )
                    1 ab-int!
                    PRIM_INT_ADD ab-prim!
                )
                PRIM_CORE_DROP ab-prim!
            )
        ) drop

    t)

    # Table.alloc!
    table-name? ".alloc!" name-cat!
    Word.alloc!
    dup2 DEF_WORD swap name-def!
    tuck word-name!

    L0 CTX
    T0 over3 TTable T1 T->
    ready2 over word-ctx-type!

    ab-build-word! (
        table-num-buffer? ab-buffer!
        PRIM_INT_GET ab-prim!
        1 ab-int!
        PRIM_INT_ADD ab-prim!
        PRIM_CORE_DUP ab-prim!
        table-num-buffer? ab-buffer!
        PRIM_INT_SET ab-prim!
        PRIM_UNSAFE_CAST ab-prim!
    )
    drop
    )

#########
# FIELD #
#########

||| Elaborate a field definition `field(f, T1, T2)`.
def(elab-field!, Token -- Token,
    dup dip(token-next)
    token-args-3 rotl token-value? match(
        TOKEN_NAME ->
            nip rotr field-new! drop,
        _ ->
            drop "expected field name" emit-fatal-error!
    ))


def(field-new!, Name Token Token -- Field,

    Field.alloc!
    tuck field-type-sig!
    tuck field-table-sig!
    tuck field-name!

    dup FIELD@ FIELDWORD DEF_FIELDWORD
    over field-name@ "@" name-cat!
    name-def!

    dup FIELD? FIELDWORD DEF_FIELDWORD
    over field-name@ "?" name-cat!
    name-def!

    dup FIELD! FIELDWORD DEF_FIELDWORD
    over field-name@ "!" name-cat!
    name-def!)

def(elab-field-sig!, Field -- Type Type,
    field-sig-is-checked? if(
        id,

        field-table-sig?
        dup elab-simple-type-arg! type-max-count? match(
            NONE -> drop "expected table type or enum" emit-fatal-error!,
            SOME -> drop nip
        )
        over field-table!

        field-type-sig?
        elab-simple-type-arg!
        over field-type!

        true
        over field-sig-is-checked!
    )

    field-table? swap
    field-type@)

def(elab-field-word-type!, FieldWord -- Type,
    unFIELDWORD dip(elab-field-sig!)
    match(
        FIELD@ -> dip(T1) T1 T->,
        FIELD? -> dip(T1 dup) T* T->,
        FIELD! -> swap T2 T0 T->,
    ))
