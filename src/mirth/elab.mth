module(mirth.elab)
import(mirth.data.name)
import(mirth.data.token)
import(mirth.data.type)
import(mirth.data.ctx)
import(mirth.data.external)
import(mirth.data.word)
import(mirth.data.var)
import(mirth.data.buffer)
import(mirth.data.variable)
import(mirth.data.table)
import(mirth.data.var)
import(mirth.data.arrow)

import(data.lazy)

####################
# Type Elaboration #
####################

data(TypeElab, TYPE_ELAB -> Bool Ctx)
def(type-elab-default, TypeElab, false ctx-empty TYPE_ELAB)
def(type-elab-stack-assertion, Ctx -- TypeElab, dip(true) TYPE_ELAB)
def(type-elab-holes-allowed, TypeElab -- Bool, TYPE_ELAB -> drop)
def(type-elab-ctx, TypeElab -- Ctx, TYPE_ELAB -> nip)
def(type-elab-ctx?, TypeElab -- TypeElab Ctx, dup type-elab-ctx)
def(type-elab-ctx-replace, TypeElab Ctx -- TypeElab,
    swap match(TYPE_ELAB -> drop swap TYPE_ELAB))

def(elab-type-sig!, TypeElab Token -- TypeElab Type Token,
    token-run-end? if(dup "expected type signature" emit-error!, id)
    elab-type-sig-params! dip(swap)
    elab-type-stack! dip(swap)
    token-is-dashes? if(
        token-next elab-type-stack! dip(swap),
        dip(T0 rotr))
    token-run-end? if(id, dup "expected right paren or comma" emit-error!)
    dip(rot4r dip(swap for(T*)) T->))

def(elab-type-sig-params!, TypeElab Token -- TypeElab List(Type) Token,
    token-is-lparen? if(
        dup token-next dip(
            L0 rotr token-args
            for(elab-type-sig! drop swap dip(snoc))
            swap
        ),
        L0 swap
    ))

def(elab-type-stack!, TypeElab Token -- TypeElab Type Token,
    sig-token-is-stack-var? if(
        elab-stack-var! dip(TVar),
        dip(TYPE_UNIT)
    )
    elab-type-stack-rest!)

def(elab-type-stack-rest!, TypeElab Type Token -- TypeElab Type Token,
    while(sig-is-stack-end2? not,
        swap dip(elab-type-atom!) swap
        dip(swap TTensor)
    ))

def(elab-type-arg!, TypeElab Token -- TypeElab Type Token,
    elab-type-atom!
    token-is-arg-end? if(
        id,
        "Unexpected token after type." emit-fatal-error!
    ))

def(elab-type-atom!, TypeElab Token -- TypeElab Type Token,
    sig-token-is-type-var? if(
        elab-type-var! dip(TVar),

    sig-token-is-type-con? if(
        elab-type-con!,

    token-is-underscore? if(
        elab-type-dont-care!,

    sig-token-is-type-hole? if(
        elab-type-hole!,

    token-is-lsquare? if(
        elab-type-quote!,

        dup "Expected type, got unknown token." emit-error!
        dip(TYPE_ERROR) token-next
    ))))))

def(elab-stack-var!, TypeElab Token -- TypeElab Var Token,
    TYPE_STACK elab-implicit-var!)

def(elab-type-var!, TypeElab Token -- TypeElab Var Token,
    TYPE_TYPE elab-implicit-var!)

def(elab-implicit-var!, TypeElab Token Type -- TypeElab Var Token,
    dip2(type-elab-ctx?) over
    dip2(token-name@ dup2 swap ctx-lookup)
    rotl match(
        SOME ->
            rotr dip2(nip dup var-type @)
            elab-type-unify! nip,
        NONE ->
            dip(
                dip(var-new-implicit!)
                over var-type !
                sip(ctx-new!)
            )
    )
    token-next
    dip2(type-elab-ctx-replace))

def(elab-type-con!, TypeElab Token -- TypeElab Type Token,
    token-name? name-def @ match(
        DEF_TYPE ->
            over token-num-args
            over type-arity == if(
                elab-type-args!,

                drop dup
                "Wrong number of arguments for type." emit-error!
                TYPE_ERROR
            ),
        DEF_NONE ->
            dup "Unknown type." emit-error! TYPE_ERROR,
        _ ->
            drop dup "Not a type." emit-error! TYPE_ERROR
    )
    swap token-next)

def(elab-type-args!, TypeElab Token Type -- TypeElab Token Type,
    dip(token-has-args?) swap if(
        dip(tuck) swap token-succ
        while(token-is-right-enclosure? not,
            token-succ swap
            dip(elab-type-arg!) swap
            dip(swap TApp))
        drop dip(swap),

        id
    ))

def(elab-type-hole!, TypeElab Token -- TypeElab Type Token,
    over type-elab-holes-allowed if(
        token-has-args? if(
            dup "Types with args not yet supported." emit-error! TYPE_ERROR,
            token-name? THole)
        swap token-next,
        "type holes are not allowed here" emit-fatal-error!
    ))

def(elab-type-dont-care!, TypeElab Token -- TypeElab Type Token,
    over type-elab-holes-allowed if(
        token-has-args? if(
            dup "Types with args not yet supported." emit-error! TYPE_ERROR,
            TYPE_DONT_CARE)
        swap token-next,
        "type don't care is not allowed here" emit-fatal-error!
    ))

def(elab-type-quote!, TypeElab Token -- TypeElab Type Token,
    token-args-1
    sig-has-dashes? if(
        elab-type-sig!,
        elab-type-stack!
    )
    token-next)

def(elab-type-unify!, Type Type Token -- Type Token,
    sip(GAMMA rotr type-unify! nip))

def(elab-simple-type-arg!, Token -- Type,
    dip(type-elab-default) elab-type-arg! drop nip)

####################
# Word Elaboration #
####################

# AB = Arrow Builder = Arrow Elaborator
var(ab-home, Word)
var(ab-homeidx, Int)
var(ab-arrow, Arrow)
def(ab-ctx, Mut(Ctx), ab-arrow @ arrow-ctx)
def(ab-token, Mut(Token), ab-arrow @ arrow-token-end)
def(ab-type, Mut(Type), ab-arrow @ arrow-cod)

def(ab-save!(f), (*a -- *b) *a -- *b,
    ab-arrow @ dip(f) ab-arrow !)

def(ab-build!(f), (*a -- *b) *a Ctx Type Token -- *b Arrow,
    ab-save!(
        Arrow.alloc!
        ab-home @ over arrow-home !
        ab-homeidx @ over arrow-homeidx !
        ab-homeidx modify(1+)
        tuck dup2 arrow-token-start ! arrow-token-end !
        tuck dup2 arrow-dom ! arrow-cod !
        tuck arrow-ctx !
        ab-arrow !
        f
        ab-arrow @
    ))

||| Like ab-build! but takes a morphism type to build
||| instead of just the domain. The codomain is placed
||| on the stack for (in)convenience. (You can ignore it with dip.)
def(ab-build-hom!(f), (*a Type -- *b Type) *a Ctx Type Token -- *b Arrow,
    elab-expand-morphism! dip(rotr)
    ab-build!(f ab-unify-type!))
def(ab-build-word-arrow!(f), (*a Type -- *b Type) *a Word -- *b Arrow,
    dup ab-home ! 0 ab-homeidx !
    sip(elab-word-ctx-sig-weak!)
    word-body @ ab-build-hom!(f)
    word-nil ab-home !)
def(ab-build-word!(f), (*a -- *b) *a Word -- *b Word,
    sip(ab-build-word-arrow!(dip(f)) ready)
    tuck word-arrow !)

def(ab-unify-type!, Type --,
    dip(ab-token @ GAMMA ab-type @) type-unify! ab-type ! drop)

def(ab-atom!, Atom --,
    dup atom-token @ ab-token !
    # atom-dom? ab-unify-type!     # moved to ab-expand-opsig!
        # ^ a sanity check to make sure
        # atom dom matches ab-arrow cod
    dup atom-cod @ ab-type !
    dip(ab-arrow @ arrow-atoms @)
    ab-optimized-snoc!
    ab-arrow @ arrow-atoms !)

||| Add an atom to a list of atoms ... smartly.
def(ab-optimized-snoc!, List(Atom) Atom -- List(Atom),
    while(dip?(atoms-has-last-block?) and(atom-accepts-args?),
        swap atoms-turn-last-block-to-arg swap)
    snoc)

def(atom-accepts-args?, Atom -- Atom Bool,
    dup atom-op @ match(
        OP_WORD -> dip(dup atom-args @ len) elab-word-sig! type-max-num-params <,
        OP_PRIM ->
            match(
                PRIM_CORE_RUN -> dup atom-args @ len 1 <, # this one's dubious
                PRIM_CORE_DIP -> dup atom-args @ len 1 <,
                PRIM_CORE_IF -> dup atom-args @ len 2 <,
                PRIM_CORE_WHILE -> dup atom-args @ len 2 <,
                _ -> drop false
            ),
        _ -> drop false
    ))

def(atoms-has-last-block?, List(Atom) -- List(Atom) Bool,
    dup last match(
        NONE -> false,
        SOME ->
            atom-op @ match(
                OP_BLOCK -> drop true,
                _ -> drop false
            )
    ))

def(atoms-turn-last-block-to-arg, Atom List(Atom) -- Atom List(Atom),
    List->List+ match(
        NONE -> L0,
        SOME ->
            unsnoc dup atom-op @ match(
                OP_BLOCK ->
                    { Atom List(Atom) Atom Block }
                    dip(atom-cod @ rotl tuck atom-dom !)
                    { List(Atom) Atom Block }
                    block-to-arg atom-arg-add-left!
                    swap,
                _ -> drop snoc
            )
    ))

def(block-to-arg, Block -- Arg,
    dup block-arrow force! arrow-to-run-var match(
        NONE -> ARG_BLOCK,
        SOME -> ARG_VAR_RUN nip
    ))

def(arrow-to-run-var, Arrow -- Maybe(Var),
    arrow-atoms @ match(
        L1 -> atom-to-run-var,
        _ -> drop NONE
    ))

def(atom-to-run-var, Atom -- Maybe(Var),
    atom-op @ match(
        OP_VAR -> dup var-auto-run @ if(SOME, drop NONE),
        _ -> drop NONE
    ))

def(ab-op!, Op --,
    Atom.alloc!
    ab-ctx @ over atom-ctx !
    ab-token @ over atom-token !
    dup2 atom-op !
    swap elab-op-fresh-sig!
    dip(over atom-subst !)
    ab-expand-opsig!
    dip(over atom-dom !) over atom-cod !
    ab-atom!)

def(ab-expand-opsig!, OpSig -- Type Type,
    match(
        OPSIG_ID -> ab-type @ dup,
        OPSIG_PUSH -> dip(ab-type @ dup) TTensor,
        OPSIG_APPLY ->
            dip(ab-type @)
            ab-token @ elab-expand-morphism!
            swap dip(elab-type-unify! drop)
    ))

def(ab-int!, Int --, OP_INT ab-op!)
def(ab-str!, Str --, OP_STR ab-op!)
def(ab-buffer!, Buffer --, OP_BUFFER ab-op!)
def(ab-variable!, Variable --, OP_VARIABLE ab-op!)
def(ab-constant!, Value --, OP_CONSTANT ab-op!)
def(ab-field!, Field --, OP_FIELD ab-op!)
def(ab-var!, Var --, OP_VAR ab-op!)
def(ab-tag!, Tag --, OP_TAG ab-op!)
def(ab-prim!, Prim --,
    dup prim-type @ TYPE_ERROR == if(
        ab-token @ "prim does not have type" emit-fatal-error!,
        OP_PRIM ab-op!
    ))
def(ab-word!, Word --, OP_WORD ab-op!)
def(ab-external!, External --, OP_EXTERNAL ab-op!)

def(ab-block-at!(f), (*a -- *b) *a Token -- *b,
    ab-ctx @ meta-alloc! TMeta rotl ab-build!(f)
    block-new! OP_BLOCK ab-op!)

def(ab-block!(f), (*a -- *b) *a -- *b,
    ab-token @ ab-block-at!(f))

def(ab-dip!(f), (*a -- *b) *a -- *b,
    ab-block!(f) PRIM_CORE_DIP ab-prim!)

def(ab-if!(f,g), (*a -- *b, *b -- *c) *a -- *c,
    ab-block!(f) ab-block!(g) PRIM_CORE_IF ab-prim!)

def(ab-while!(f,g), (*a -- *b, *b -- *c) *a -- *c,
    ab-block!(f) ab-block!(g) PRIM_CORE_WHILE ab-prim!)

def(ab-lambda!(f), (*a -- *b) *a List(Param) -- *b ,
    Lambda.alloc!
    ab-ctx @ over lambda-outer-ctx !
    ab-type @ over lambda-dom !
    ab-token @ over lambda-token !
    dup2 lambda-params !
    dip(ab-ctx @ ab-type @ rotl reverse-for(
        swap dip(Param->Var dup dip(ctx-new!))
        ab-token @ elab-expand-tensor!
        dip(rotl var-type @) elab-type-unify! drop2
    ))
    tuck lambda-mid !
    tuck lambda-inner-ctx !

    { *a Lambda }

    dup lambda-inner-ctx @
    over lambda-mid @
    ab-token @
    ab-build!(
        dip(f)
        ab-type @ over lambda-cod !
    )
    over lambda-body !
    OP_LAMBDA ab-op!)

data(OpSig,
    OPSIG_ID,
    OPSIG_PUSH -> Type,
    OPSIG_APPLY -> Type)

def(elab-op-fresh-sig!, Op -- Subst OpSig,
    subst-nil swap match(
        OP_NONE -> OPSIG_ID,
        OP_INT -> VALUE_INT TValue OPSIG_PUSH,
        OP_STR -> VALUE_STR TValue OPSIG_PUSH,
        OP_BUFFER -> drop TYPE_PTR OPSIG_PUSH,
        OP_VARIABLE -> variable-type force! TMut OPSIG_PUSH,
        OP_CONSTANT -> TValue OPSIG_PUSH,
        OP_TAG -> elab-tag-sig! type-freshen-sig OPSIG_APPLY,
        OP_WORD -> elab-word-sig! type-freshen-sig OPSIG_APPLY,
        OP_PRIM -> prim-type @ type-freshen-sig OPSIG_APPLY,
        OP_EXTERNAL -> elab-external-sig! type-freshen-sig OPSIG_APPLY,
        OP_FIELD -> elab-field-type! type-freshen-sig OPSIG_APPLY,
        OP_BLOCK -> elab-block-sig!,
        OP_VAR -> elab-var-sig!,
        OP_MATCH -> elab-match-sig!,
        OP_LAMBDA -> elab-lambda-sig!,
    ))

def(elab-block-sig!, Block -- OpSig,
    VALUE_BLOCK TValue OPSIG_PUSH)

def(elab-match-sig!, Match -- OpSig,
    sip(match-dom @) match-cod @ T-> OPSIG_APPLY)

def(elab-lambda-sig!, Lambda -- OpSig,
    sip(lambda-dom @) lambda-cod @ T-> OPSIG_APPLY)

def(elab-var-sig!, Var -- OpSig,
    dup var-auto-run @ if(
        var-type @ type-semifreshen-sig OPSIG_APPLY,
        var-type @ OPSIG_PUSH
    ))

def(elab-tag-sig!, Tag -- Type, elab-tag-ctx-sig! nip)
def(elab-tag-ctx!, Tag -- Ctx , elab-tag-ctx-sig! drop)
def(elab-tag-ctx-sig!, Tag -- Ctx Type, tag-ctx-type force2!)

def(elab-external-sig!, External -- Type, elab-external-ctx-sig! nip)
def(elab-external-ctx!, External -- Ctx, elab-external-ctx-sig! drop)
def(elab-external-ctx-sig!, External -- Ctx Type, external-ctx-type force2!)

def(elab-word-sig!, Word -- Type, elab-word-ctx-sig! nip)
def(elab-word-ctx!, Word -- Ctx, elab-word-ctx-sig! drop)
def(elab-word-ctx-sig!, Word -- Ctx Type,
    dup word-ctx-type
    force-or!(emit-recursive-word-fatal-error!)
    nip unpack2)

def(emit-recursive-word-fatal-error!, *a Word -- *b,
    word-head @ "recursive word needs type signature" emit-fatal-error!)

def(elab-word-ctx-sig-weak!, Word -- Ctx Type,
    dup word-sig @ match(
        NONE -> word-ctx-type @ match(
            LAZY_READY -> unpack2,
            _ -> drop ctx-empty meta-alloc! TMeta meta-alloc! TMeta T->
        ),
        SOME -> drop elab-word-ctx-sig!
    ))

def(elab-word-body!, Word -- Arrow, word-arrow force!)

def(elab-arrow!, Ctx Type Token -- Arrow,
    elab-expand-morphism! elab-arrow-hom!)

def(elab-arrow-hom!, Ctx Type Type Token -- Arrow,
    swap dip(
        elab-arrow-fwd!
        dup arrow-token-end @ GAMMA
        over arrow-cod @
    )
    type-unify! drop2)

def(elab-arrow-fwd!, Ctx Type Token -- Arrow,
    ab-build!(elab-atoms!))

def(elab-atoms!, --,
    while(
        elab-atoms-done? not,
        elab-atom! ab-token modify(token-next)
    ))

def(elab-atoms-done?, Bool,
    ab-token @ token-run-end? nip)

def(elab-atom!, --,
    ab-token @ token-value @ match(
        TOKEN_NAME -> elab-atom-name!,
        TOKEN_INT -> ab-int!,
        TOKEN_STR -> ab-str!,
        TOKEN_LSQUARE -> drop elab-atom-block!,
        TOKEN_LCURLY -> drop elab-atom-assert!,
        _ -> ab-token @ "Unexpected token in elab-atom!" emit-fatal-error!
    ))

def(elab-atom-block!, --,
    ab-token @ token-args-1 elab-block-at!)

def(elab-block-at!, Token --,
    ab-ctx @ swap block-new-deferred! OP_BLOCK ab-op!)

def(elab-args!, --,
    ab-token @ token-args for(elab-block-at!))

def(elab-no-args!, --,
    ab-token @ token-args-0)

def(elab-atom-name!, Name --,
    dup ab-ctx @ ctx-lookup match(
        SOME -> nip elab-args! ab-var!,
        NONE -> name-def @ match(
            DEF_BUFFER -> elab-no-args! ab-buffer!,
            DEF_VARIABLE -> elab-no-args! ab-variable!,
            DEF_CONSTANT -> elab-no-args! ab-constant!,
            DEF_EXTERNAL -> elab-no-args! ab-external!,
            DEF_FIELD -> elab-no-args! ab-field!,
            DEF_WORD -> elab-args! ab-word!,
            DEF_TAG -> elab-args! ab-tag!,
            DEF_PRIM -> elab-prim!,
            _ -> drop ab-token @ "Unknown word." emit-error! TYPE_ERROR ab-type !
        )
    ))

def(elab-prim!, Prim --,
    match(
        PRIM_CORE_MATCH -> elab-atom-match!,
        PRIM_CORE_LAMBDA -> elab-atom-lambda!,
        _ -> elab-args! ab-prim!
    ))

def(elab-atom-assert!, --,
    ab-token @ GAMMA
    ab-ctx @ type-elab-stack-assertion
    ab-token @ token-args-1 elab-type-stack!
    drop nip ab-type @ swap type-unify! drop2)

def(elab-atom-lambda!, --,
    Lambda.alloc!
    ab-ctx @ over lambda-outer-ctx !
    ab-type @ over lambda-dom !
    ab-token @ over lambda-token !
    elab-lambda!
    OP_LAMBDA ab-op!)

||| Elaborate a match body within AB. Takes the output stack type,
||| and the token for the body of the match, from the stack. Takes
||| the rest from the AB environment.
def(elab-match-at!, Type Token --,
    Match.alloc!
    ab-ctx @ over match-ctx !
    ab-type @ over match-dom !
    ab-token @ over match-token !
    tuck match-body !
    tuck match-cod !
    elab-match-cases!
    elab-match-exhaustive!
    OP_MATCH ab-op!)

def(elab-atom-match!, --,
    meta-alloc! TMeta
    ab-token @ token-args+ first+
    elab-match-at!)

def(elab-lambda!, Lambda -- Lambda,
    elab-lambda-params!
    elab-lambda-body!)

def(elab-expand-tensor!, Type Token -- Type Type Token,
    swap type-expand match(
        TYPE_ERROR -> dip(TYPE_ERROR TYPE_ERROR),
        TTensor -> id rotl,
        TMeta ->
            dip(meta-alloc! TMeta
                meta-alloc! TMeta
                dup2 T* SOME)
            meta-type ! rotl,
        _ ->
            drop dup "expected tuple type" emit-error!
            dip(TYPE_ERROR TYPE_ERROR)
    ))

def(elab-expand-morphism!, Type Token -- Type Type Token,
    swap type-expand match(
        TYPE_ERROR -> dip(TYPE_ERROR TYPE_ERROR),
        TMorphism -> id rotl,
        TMeta ->
            dip(meta-alloc! TMeta
                meta-alloc! TMeta
                dup2 T-> SOME)
            meta-type ! rotl,
        _ ->
            drop dup "expected block type" emit-error!
            dip(TYPE_ERROR TYPE_ERROR)
    ))

def(elab-lambda-pop-from-mid!, Lambda Token -- Lambda Type Token,
    dip(dup lambda-mid @)
    elab-expand-tensor!
    dip2(over lambda-mid !))

def(token-is-lambda-param?, Token -- Token Bool,
    sig-token-is-type-var? if(
        token-has-args? not,
    token-is-lsquare? if(
        dup true
        dip(token-succ sig-token-is-type-var?) &&
        dip(token-succ token-is-rsquare?) &&
        nip,
        false
    )))

def(elab-lambda-params!, Lambda -- Lambda,
    dup lambda-outer-ctx @ over lambda-inner-ctx !
    dup lambda-dom @ over lambda-mid !
    dup lambda-token @ token-args-1
    while(token-is-lambda-param?, token-next)
    expect-token-arrow token-prev
    while(token-is-lambda-param?,
        elab-lambda-pop-from-mid! sip(
            sig-token-is-type-var? if(
                token-name@ var-new! tuck var-type !,

                token-succ dip(type-expand type-is-morphism?) swap if(
                    token-name@ var-new!
                    true over var-auto-run !
                    tuck var-type !,

                    "block pattern on non-block argument" emit-fatal-error!
                )
            )
            dip(dup lambda-params @) sip(Var->Param swap cons over lambda-params !)
            dip(dup lambda-inner-ctx @) ctx-new! over lambda-inner-ctx !
        )
        token-prev)
    drop)

def(elab-lambda-body!, Lambda -- Lambda,
    dup lambda-token @ token-args-1
    while(token-is-lambda-param?, token-next) token-succ
    dip(dup lambda-mid @ dip(dup lambda-inner-ctx @))
    elab-arrow-fwd!
    dup2 swap lambda-body !
    arrow-cod @ over lambda-cod !)

||| Check that match is exhaustive.
def(elab-match-exhaustive!, Match -- Match,
    match-is-exhaustive? if(
        id,
        dup match-token @ "Pattern match not exhaustive." emit-error!
    ))

||| Elaborate match cases.
def(elab-match-cases!, Match -- Match,
    dup match-body @
    while(token-is-rparen? not, elab-match-case!)
    drop)

||| Elaborate a single match case `pattern -> body ,`
def(elab-match-case!, Match Token -- Match Token,
    Case.alloc!
    dup2 case-token !
    swap dip(dup2 case-match !)
    elab-case-pattern!
    expect-token-arrow token-succ
    elab-case-body!
    dip(match-add-case!)
    token-is-comma? if(token-succ, id))

||| Elaborate case pattern.
def(elab-case-pattern!, Case Token -- Case Token,
    token-is-underscore? if(
        # set case pattern
        dip(PATTERN_UNDERSCORE over case-pattern !)

        # set case mid
        dip(dup case-match @ match-dom @ TYPE_DONT_CARE TYPE_DONT_CARE T*)
        elab-type-unify! dip(over case-mid !)

        # advance token
        token-succ,

    token-is-name? if(
        token-name? name-def @ match(
            DEF_TAG -> { Case Token Tag }

                # set case pattern
                dup PATTERN_TAG rotr
                dip2(over case-pattern !)

                # set case mid
                dip2(dup case-match @ match-dom @) { Case Type Token Tag }
                elab-tag-sig! subst-nil swap type-freshen-sig
                { Case Type Token Subst Type }
                rotr dip(
                    elab-expand-morphism!
                    dip2(swap) elab-type-unify! nip
                    dip(over case-mid !)
                )
                swap dip(over case-subst !)

                # advance token
                token-succ,

            DEF_NONE ->
                "Unknown constructor." emit-fatal-error!,

            _ ->
                drop "Not a constructor." emit-fatal-error!
        ),

        "Expected constructor name." emit-fatal-error!
    )))

||| Elaborate case body.
def(elab-case-body!, Case Token -- Case Token,
    dip(dup case-mid @ dip(dup case-match @ match-ctx @)) elab-arrow-fwd!
    dup arrow-token-end @ dip(dup arrow-cod @) { Case Arrow Type Token }
    dip2(over case-body !) { Case Type Token }
    dip2(dup case-match @ match-cod @) elab-type-unify! nip)

######################
# Module Elaboration #
######################

||| Elaborate all of a module.
def(elab-module!, Module -- Module,
    dup module-start @
    elab-module-header!
    while(token-is-module-end? not, elab-module-decl!)
    drop)

||| Check that the `module(M)` statement exists and save the name.
def(elab-module-header!, Token -- Token,
    # dup token-name@ name-str @ str-trace-ln!
    PRIM_SYNTAX_MODULE token-prim=? if(
        dup token-args-1
        token-is-name? if(id, "Expected module name." emit-fatal-error!)
        token-name? name-defined?
        if(drop "Module name already taken." emit-fatal-error!, id)
        over token-module @
        dup2 module-name !
        dup2 DEF_MODULE swap name-def !
        module-path @ Path->Str swap
        module-path-from-name Path->Str str-eq if(drop,
            "Module name should match path." emit-error!)
        token-next,
        dup "Expected module header." emit-error!
    ))

||| Elaborate a declaration. Returns the next token.
def(elab-module-decl!, Token -- Token,
    dup token-value @ match(
        TOKEN_NAME -> dup name-def @ match(
            DEF_PRIM -> prim-decl @ match(
                NONE ->
                    name-str @ str-trace-ln!
                    "unknown declaration, prim prim" emit-fatal-error!,
                SOME -> nip run
            ),
            _ -> drop name-str @ str-trace-ln!
                 "unknown declaration, not prim" emit-fatal-error!
        ),
        _ -> drop "unsupported declaration" emit-fatal-error!
    ))

||| Elaborate `import(M)` statement. Return token after import.
def(elab-module-import!, Token -- Token,
    sip(token-next)
    token-args-1 dup token-value @ match(
        TOKEN_NAME ->
            dup name-def @ match(
                DEF_MODULE ->
                    dip(drop2 dup token-module @)
                    module-add-import!,
                    # module is already loaded

                DEF_NONE ->
                    module-path-from-name run-lexer!
                    elab-module!
                    dip(drop dup token-module @) module-add-import!,
                    # elab the imported module
                    # TODO: avoid elaborating here,
                    # use a single loop to dispatch top-level module elaboration.

                _ ->
                    drop2 "module name already taken" emit-fatal-error!
            ),
        _ ->
            drop "expected module name" emit-fatal-error!
    ))

||| Elaborate a data definition `data(T, ...)`
def(elab-data!, Token -- Token,
    sip(
        Data.alloc! swap token-args+
        uncons dip(elab-data-header!)
        for(elab-data-tag!)
        drop
    ) token-next)

||| Get the header, name, arity for a data type.
def(elab-data-header!, Data Token -- Data,
    dup2 swap data-header !
    sig-token-is-type-con? if(id,
        "Expected type name." emit-fatal-error!)
    dup2 token-name@
    name-undefined? if(id,
        drop2 "Name already defined." emit-fatal-error!)
    over TData DEF_TYPE over name-def !
    swap data-name !
    # TODO check header args are well-formed / elaborate them properly
    token-num-args over data-arity !)

||| Get a tag associated with a data type.
||| This looks like either "TAG" or "TAG -> TYPE1 ... TYPEN".
def(elab-data-tag!, Data Token -- Data,
    token-is-name? if(id, "Expected constructor name." emit-fatal-error!)
    token-name? name-undefined? if(id,
        drop "Name already defined. (Overlapping tags not supported.)" emit-fatal-error!)

    Tag.alloc!
    dup2 DEF_TAG swap name-def !
    tuck tag-name !
    { Data Token Tag }
    dip(over) dup2 tag-data !
    tuck dip(data-add-tag!)
    { Data Token Tag }
    swap token-succ
    token-is-arrow? if(
        token-succ SOME over tag-sig !,
    token-run-end? if(
        drop NONE over tag-sig !,
        "Expected arrow, comma, or right paren." emit-fatal-error!
    ))
    { Data Tag }
    dup delay(
        type-elab-default
        over tag-data @ data-header @ elab-type-atom! drop T1
        dip(T0 rotl tag-sig @ match(
            NONE -> id,
            SOME ->
                elab-type-stack-rest!
                token-run-end? if(drop, "syntax error" emit-fatal-error!)
        ))
        T-> dip(type-elab-ctx) pack2
    )
    swap tag-ctx-type !)

def(expect-token-comma, Token -- Token,
    token-is-comma? if(id, "Expected comma." emit-fatal-error!))

def(expect-token-rparen, Token -- Token,
    token-is-rparen? if(id, "Expected right parenthesis." emit-fatal-error!))

def(expect-token-arrow, Token -- Token,
    token-is-arrow? if(id, "Expected arrow." emit-fatal-error!))


||| Break apart the arguments for `def` into three categories:
|||     - head: the name of the definition, plus params
|||     - (optional) sig: the type signature
|||     - body: a nonempty list of body arguments
def(token-def-args, Token -- Token Maybe(Token) List+(Token),
    dup token-args len? 2 >= if(nip,
        drop "def expects at least two arguments" emit-fatal-error!)
    List->List+ unwrap uncons
    List->List+ unwrap uncons
    dup list-is-empty if(
        drop L1+ dip(NONE),
        over token-run-has-arrow if(
            cons+ dip(NONE),
            List->List+ unwrap dip(SOME)
        )
    ))

||| Elaborate a missing word definition `def-missing(w,t,b...)`
def(elab-def-missing!, Token -- Token,
    dup token-succ token-succ token-name@ name-defined? nip if(
        token-next,
        elab-def!
    ))

||| Elaborate a word definition `def(w, t, b...)`.
def(elab-def!, Token -- Token,
    sip(token-next) token-def-args
    uncons list-is-empty if(id,
        dup token-run-has-arrow if(id,
            "expected match case" emit-fatal-error!))
    rotl token-is-name? if(id, "expected word name" emit-fatal-error!)
    token-name?
    name-undefined? if(id, drop "word already defined" emit-fatal-error!)
    Word.alloc!
    dup2 DEF_WORD swap name-def !
    tuck word-name !
    tuck word-head !
    tuck word-body !
    tuck word-sig !

    dup delay(
        type-elab-default
        over word-sig @ match(
            NONE -> type-elab-ctx over word-arrow
                force-or!(swap emit-recursive-word-fatal-error!)
                arrow-type type-rigidify-sig!,
            SOME -> elab-type-sig! drop dip(type-elab-ctx)
        )
        pack2 nip
    ) over word-ctx-type !
    dup delay(elab-def-params!) over word-params !
    dup delay(
        dup ab-build-word-arrow!(
            swap word-params force! dup list-is-empty if(
                drop elab-def-body!,
                ab-lambda!(elab-def-body!)
            )
        )
    ) swap word-arrow !)

||| Elaborate a word's parameters from its type and declaration.
def(elab-def-params!, Word -- List(Param),
    L0 over elab-word-ctx-sig-weak! nip
    rotl word-head @
    elab-expand-morphism! nip
    token-args reverse-for(
        token-is-param-name? if(id,
            "expected parameter name" emit-fatal-error!)
        dup token-succ token-run-end? if(drop,
            "expected right paren or comma" emit-fatal-error!)
        elab-expand-tensor!
        dip(dup) elab-expand-morphism! dip(drop2)
        # dip(type-is-morphism?) swap if(id,
        #     "need function type for param" emit-fatal-error!)
        token-name@ var-new!
        tuck var-type !
        true over var-auto-run !
        PARAM rotr dip(cons)
    ) drop)

||| Elaborate the body of a `def`. Takes the codomain from the stack,
||| and the rest from the AB environment.
def(elab-def-body!, Type -- Type,
    ab-token @ token-run-has-arrow if(
        dup ab-token @ elab-match-at!,
        elab-atoms!
    ))

||| Elaborate an external declaration `def-external(w, t)`
def(elab-def-external!, Token -- Token,
    sip(token-next) token-args-2
    swap token-is-name? if(
        token-name? name-undefined? if(
            nip
            External.alloc!
            dup2 DEF_EXTERNAL swap name-def !
            tuck external-name !
            tuck external-sig !
            dup delay(
                type-elab-default swap external-sig @
                elab-type-sig! drop dip(type-elab-ctx) pack2
            ) swap external-ctx-type !,

            drop "word already defined" emit-fatal-error!
        ),
        "expected word name" emit-fatal-error!
    ))

||| Elaborate a type definition `def-type(t1, t2)`.
def(elab-def-type!, Token -- Token,
    sip(token-next) token-args-2
    swap sig-token-is-type-con? if(
        token-name? name-undefined? if(
            nip swap
            elab-simple-type-arg!
            DEF_TYPE swap name-def !,

            drop "type already defined" emit-fatal-error!
        ),
        "expected type constructor" emit-fatal-error!
    ))

||| Elaborate a buffer definition `buffer(B, size)`.
def(elab-buffer!, Token -- Token,
    sip(token-next) token-args-2
    swap token-is-name? if(
        token-name? name-undefined? if(
            nip swap
            token-int@ buffer-new! drop,
            drop "buffer already defined" emit-fatal-error!
        ),
        "expected buffer name" emit-fatal-error!
    ))

||| Elaborate a var declaration `var(v, type)`.
def(elab-variable!, Token -- Token,
    dup token-args-2
    swap token-is-name? if(id, "expected variable name" emit-fatal-error!)
    token-name? name-undefined? if(id,
        drop "name already defined" emit-fatal-error!)
    nip swap delay(elab-simple-type-arg!) variable-new! drop
    token-next)

||| Elaborate a table definition `table(T)`.
def(elab-table!, Token -- Token,
    sip(token-next) token-args-1
    sig-token-is-type-con? if(
        token-name@ table-new! drop,
        "expected table name" emit-fatal-error!
    ))

||| Elaborate C99 build target.
def(elab-target-c99!, Token -- Token,
    typecheck-everything!

    sip(token-next) token-args-2
    dip(token-str@ Str->Path)
    dip(ctx-empty T0 T0 T->)
    elab-arrow!
    swap run-output-c99!)

||| Embed a file as a string, embed-str(name, "path").
||| The path is relative to compiler's cwd, not source root.
def(elab-embed-str!, Token -- Token,
    sip(token-next) token-args-2
    swap token-is-name? if(id,
        "expected name" emit-fatal-error!)
    token-name? name-undefined? if(id,
        drop "name already defined" emit-fatal-error!)
    nip

    swap token-is-str? if(id,
        "expected path" emit-fatal-error!)
    token-str? with-open-file!(read-file! nip,
        "could not open file" emit-fatal-error!)

    VALUE_STR DEF_CONSTANT swap name-def !)

||| Ensure that everything so far has been typechecked.
def(typecheck-everything!, --,
    Name.for(name-def @ typecheck-def!)
    Block.for(block-force!))

||| Typecheck a definition.
def(typecheck-def!, Def --,
    DEF_NONE -> id,
    DEF_MODULE -> drop,
    DEF_BUFFER -> drop,
    DEF_PRIM -> drop,
    DEF_TYPE -> drop,
    DEF_EXTERNAL -> elab-external-sig! drop,
    DEF_WORD -> word-arrow force! drop,
    DEF_FIELD -> elab-field-type! drop,
    DEF_TAG -> elab-tag-sig! drop,
    DEF_VARIABLE -> variable-type force! drop,
    DEF_CONSTANT -> drop)

#########
# TABLE #
#########

def(TABLE_MAX_SIZE, Int, 0x10000)

def(table-new!, Name -- Table,
    Table.alloc!
    dup2 TTable DEF_TYPE swap name-def !
    tuck table-name !

    TABLE_MAX_SIZE over table-max-count !

    # Table.MAX
    dup table-name @ ".MAX" name-cat!
    Word.alloc!
    dup2 DEF_WORD swap name-def !
    tuck word-name !

    L0 CTX
    T0 TYPE_INT T1 T->
    ready2 over word-ctx-type !

    ab-build-word!(
        TABLE_MAX_SIZE ab-int!
    ) drop

    # Table.NUM
    dup table-name @ ".NUM" name-cat!
    8 buffer-new!
    over table-num-buffer !

    # Table.id
    dup table-name @ ".id" name-cat!
    Word.alloc!
    dup2 DEF_WORD swap name-def !
    tuck word-name !

    L0 CTX
    over2 TTable T1 TYPE_INT T1 T->
    ready2 over word-ctx-type !

    ab-build-word! (
        PRIM_UNSAFE_CAST ab-prim!
    ) drop

    # Table.succ
    dup table-name @ ".succ" name-cat!
    Word.alloc!
    dup2 DEF_WORD swap name-def !
    tuck word-name !

    L0 CTX
    over2 TTable T1 dup T->
    ready2 over word-ctx-type !

    ab-build-word! (
        PRIM_UNSAFE_CAST ab-prim!
        1 ab-int!
        PRIM_INT_ADD ab-prim!
        dup table-num-buffer @ ab-buffer!
        PRIM_INT_GET ab-prim!
        1 ab-int!
        PRIM_INT_ADD ab-prim!
        PRIM_INT_MOD ab-prim!
        PRIM_UNSAFE_CAST ab-prim!
    ) drop

    # Table.succ
    dup table-name @ ".pred" name-cat!
    Word.alloc!
    dup2 DEF_WORD swap name-def !
    tuck word-name !

    L0 CTX
    over2 TTable T1 dup T->
    ready2 over word-ctx-type !

    ab-build-word! (
        PRIM_UNSAFE_CAST ab-prim!
        PRIM_CORE_DUP ab-prim!
        0 ab-int!
        PRIM_VALUE_EQ ab-prim!
        ab-if!(
            id,
            1 ab-int!
            PRIM_INT_SUB ab-prim!
        )
        PRIM_UNSAFE_CAST ab-prim!
    ) drop

    # Table.for
    dup table-name @ ".for" name-cat!
    Word.alloc!
    dup2 DEF_WORD swap name-def !
    tuck word-name !
    "x" name-new! var-new!
    \(t w x ->

        "a" name-new! var-new-implicit!
        TYPE_STACK over var-type !
        dup L1 CTX
        swap

        TVar \( a ->
            a a t TTable T* a T-> T* a T->
            ready2 w word-ctx-type !

            a t TTable T* a T-> x var-type !
            true x var-auto-run !
        )

        w ab-build-word! (
            x Var->Param L1 ab-lambda! (
                1 ab-int!
                ab-while! (
                    PRIM_CORE_DUP ab-prim!
                    t table-num-buffer @ ab-buffer!
                    PRIM_INT_GET ab-prim!
                    PRIM_VALUE_LE ab-prim!,

                    PRIM_CORE_DUP ab-prim!
                    ab-dip! (
                        PRIM_UNSAFE_CAST ab-prim!
                        x ab-var!
                    )
                    1 ab-int!
                    PRIM_INT_ADD ab-prim!
                )
                PRIM_CORE_DROP ab-prim!
            )
        ) drop

    t)

    # Table.alloc!
    dup table-name @ ".alloc!" name-cat!
    Word.alloc!
    dup2 DEF_WORD swap name-def !
    tuck word-name !

    L0 CTX
    T0 over3 TTable T1 T->
    ready2 over word-ctx-type !

    ab-build-word! (
        dup table-num-buffer @ ab-buffer!
        PRIM_INT_GET ab-prim!
        1 ab-int!
        PRIM_INT_ADD ab-prim!
        PRIM_CORE_DUP ab-prim!
        dup table-num-buffer @ ab-buffer!
        PRIM_INT_SET ab-prim!
        PRIM_UNSAFE_CAST ab-prim!
    )
    drop
    )

#########
# FIELD #
#########

||| Elaborate a field definition `field(f, T1, T2)`.
def(elab-field!, Token -- Token,
    sip(token-next)
    token-args-3 rotl dup token-value @ match(
        TOKEN_NAME ->
            name-undefined? if(id,
                drop "name already defined" emit-fatal-error!)
            nip rotr field-new! drop,
        _ ->
            drop "expected field name" emit-fatal-error!
    ))

def(field-new!, Name Token Token -- Field,
    Field.alloc!
    swap delay(elab-simple-type-arg!) over field-value-type !
    swap delay(elab-simple-type-arg!) over field-index-type !
    tuck dup2 field-name !
    DEF_FIELD swap name-def !)

def(elab-field-type!, Field -- Type,
    sip(field-index-type force! T1)
    field-value-type force! TMut T1 T->)
