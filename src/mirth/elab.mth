module(mirth/elab)
import(mirth/data/name)
import(mirth/data/token)
import(mirth/data/type)
import(mirth/data/table)

####################
# Type Elaboration #
####################

def(elab-type-sig!, HolesAllowed Ctx Token -- HolesAllowed Ctx Type Token,
    elab-type-stack!
    token-is-dashes? if(
        token-next
        swap dip(elab-type-stack!) swap,
        dip(TYPE_UNIT))
    dip(swap morphism-type-new! TMorphism)
    ) # TODO: elaborate effect type too

def(elab-type-stack!, HolesAllowed Ctx Token -- HolesAllowed Ctx Type Token,
    sig-token-is-stack-var? if(
        elab-stack-var! dip(TVar),
        dip(TYPE_UNIT)
    )
    elab-type-stack-rest!)

def(elab-type-stack-rest!, HolesAllowed Ctx Type Token -- HolesAllowed Ctx Type Token,
    while(sig-is-stack-end2? not,
        swap dip(elab-type-atom!) swap
        dip(swap tensor-type-new! TTensor)
    ))

def(elab-type-atom!, HolesAllowed Ctx Token -- HolesAllowed Ctx Type Token,
    sig-token-is-type-var? if(
        elab-type-var! dip(TVar),

    sig-token-is-type-con? if(
        elab-type-con!,

    sig-token-is-type-dont-care? if(
        elab-type-dont-care!,

    sig-token-is-type-hole? if(
        elab-type-hole!,

    token-is-lbracket? if(
        elab-type-quote!,

        dup "Expected type, got unknown token." emit-error!
        dip(TYPE_ERROR) token-next
    ))))))

def(elab-stack-var!, Ctx Token -- Ctx Var Token,
    TYPE_STACK elab-implicit-var!)

def(elab-type-var!, Ctx Token -- Ctx Var Token,
    TYPE_TYPE elab-implicit-var!)

def(elab-implicit-var!, Ctx Token Type -- Ctx Var Token,
    over
    dip(dip(
        token-name@
        dup2 swap ctx-has-name
    ))
    rotl if(
        dip(dip(over ctx-lookup var-type?))
        elab-type-unify! nip,

        dip(
            dip(var-new-implicit!)
            over var-type!
            dup dip(ctx-new!)
        )
    )
    token-next)

def(elab-type-con!, Ctx Token -- Ctx Type Token,
    token-has-args? if(
        dup "Types with args not yet supported." emit-error! TYPE_ERROR,

        token-name?
        name-is-type? if(
            name-type@,

        name-undefined? if(
            drop dup "Unknown type." emit-error! TYPE_ERROR,
            drop dup "Not a type." emit-error! TYPE_ERROR
        ))
    )
    swap token-next)

nominal(HolesAllowed, Bool)
def(HolesAllowed->Bool, HolesAllowed -- Bool, cast)
def(allow-holes, HolesAllowed, true cast)
def(forbid-holes, HolesAllowed, true cast)

def(elab-type-hole!, HolesAllowed Ctx Token -- HolesAllowed Ctx Type Token,
    dip(dip(dup)) rotl HolesAllowed->Bool if(
        token-has-args? if(
            dup "Types with args not yet supported." emit-error! TYPE_ERROR,
            token-name? THole)
        swap token-next,
        "type holes are not allowed here" emit-fatal-error!
    ))

def(elab-type-dont-care!, HolesAllowed Ctx Token -- HolesAllowed Ctx Type Token,
    dip(dip(dup)) rotl HolesAllowed->Bool if(
        token-has-args? if(
            dup "Types with args not yet supported." emit-error! TYPE_ERROR,
            TYPE_DONT_CARE)
        swap token-next,
        "type don't care is not allowed here" emit-fatal-error!
    ))

def(elab-type-quote!, HolesAllowed Ctx Token -- HolesAllowed Ctx Type Token,
    token-bracket-arg
    sig-has-dashes? if(
        elab-type-sig!,
        elab-type-stack!
    )
    token-next)

def(elab-type-unify!, Type Type Token -- Type Token,
    elab-token@ dip(
        dup elab-token! dip(type-unify!)
    ) elab-token!)
    # TODO treat token as an input in type-unify

####################
# Word Elaboration #
####################

def(elab-external-sig!, External -- Type +Elab,
    elab-external-ctx-sig! nip)

def(elab-external-ctx!, External -- Ctx +Elab,
    elab-external-ctx-sig! drop)

def(elab-external-ctx-sig!, External -- Ctx Type +Elab,
    external-sig-is-checked? if(
        external-type? dip(external-ctx@),

        external-sig? ctx-empty swap
        dip(dip(forbid-holes))
        elab-type-sig! drop dip(dip(drop)) dup2
        dip(dip(
            rotl
            tuck external-type!
            tuck external-ctx!
            external-sig-is-checked!
        ))
    ))

def(elab-word-sig!, Word -- Type +Elab,
    elab-word-ctx-sig! nip)

def(elab-word-ctx!, Word -- Ctx +Elab,
    elab-word-ctx-sig! drop)

def(elab-word-ctx-sig!, Word -- Ctx Type +Elab,
    word-sig-is-checked? if(
        word-type? dip(word-ctx@),

        word-sig? ctx-empty swap

        dip(dip(forbid-holes))
        elab-type-sig! drop dip(dip(drop)) dup2
        dip(dip(
            rotl
            tuck word-type!
            tuck word-ctx!
            word-sig-is-checked!
        ))
    ))

def(elab-word-body!, Word -- Arrow +Elab,
    word-body-is-checked? if(
        word-arrow@,
        dup dip(elab-word-ctx-sig!)
        dup dip(word-body@ elab-arrow!)
        dup2 word-arrow!
        word-body-is-checked!
    ))

def(elab-arrow!, Ctx Type Token -- Arrow,
    dip(type-get-morphism morphism-type-unpack) swap
    dip(elab-arrow-fwd! arrow-dom? swap arrow-token@)
    swap elab-type-unify! drop2)

def(elab-arrow-fwd!, Ctx Type Token -- Arrow Arrow,
    arrow-alloc!
    tuck arrow-token!
    tuck arrow-dom!
    tuck arrow-ctx!
    dup
    while(elab-arrow-done? not,
        elab-arrow-step!))

||| Is this arrow at the end of a run?
def(elab-arrow-done?, Arrow -- Arrow Bool,
    arrow-token? token-run-end? nip)

||| From the {ctx, dom, token} fields, elaborate the
||| arrow's {op, arg, next} fields, returning
||| the next arrow with {ctx, dom, token} set.
def(elab-arrow-step!, Arrow -- Arrow,
    dup elab-arrow-op!
    arrow-alloc! tuck arrow-dom!
    dip(arrow-token? token-next) tuck arrow-token!
    dip(arrow-ctx?) tuck arrow-ctx!
    tuck dip(arrow-next!))

||| From the {ctx, dom, token} fields, elaborate the
||| arrow's {op, arg} fields, returning the
||| codomain of the operation.
def(elab-arrow-op!, Arrow -- Type,
    arrow-token?
    token-is-name? if(
        token-name@
        elab-arrow-op-name!,
    token-is-int? if(
        token-int@
        elab-arrow-op-int!,
    token-is-str? if(
        token-strlit@
        elab-arrow-op-str!,
    token-is-lbrace? if(
        elab-arrow-op-stack-assertion!,
        "compiler error: Unknown token in elab-arrow-step!" emit-fatal-error!
    )))))

def(elab-arrow-op-name!, Arrow Name -- Type,
    name-is-buffer? if(
        name-buffer@ elab-arrow-op-buffer!,
    name-is-external? if(
        name-external@ elab-arrow-op-external!,
    name-is-word? if(
        name-word@ elab-arrow-op-word!,
    name-is-prim? if(
        name-prim@ elab-arrow-op-prim!,

        drop
        arrow-token@ "Unknown word." emit-error!
        TYPE_ERROR
    )))))

def(elab-arrow-op-int!, Arrow Int -- Type,
    over arrow-op-int!
    arrow-dom@ TYPE_INT T*)

def(elab-arrow-op-str!, Arrow StrLit -- Type,
    over arrow-op-str!
    arrow-dom@ TYPE_PTR T*)

def(elab-arrow-op-buffer!, Arrow Buffer -- Type,
    over arrow-op-buffer!
    arrow-dom@ TYPE_PTR T*)

def(elab-arrow-op-stack-assertion!, Arrow Token -- Type,
    dip(allow-holes over arrow-ctx@)
    token-succ elab-type-stack!
    drop dip(drop2)
    over arrow-token@
    dip(dip(arrow-dom@ dup))
    elab-type-unify! drop2)

def(elab-arrow-op-external!, Arrow External -- Type,
    dup2 swap arrow-op-external!
    elab-external-sig! elab-arrow-op-apply-fresh!)

def(elab-arrow-op-word!, Arrow Word -- Type,
    dup2 swap arrow-op-word!
    elab-word-sig! elab-arrow-op-apply-fresh!)

def(elab-arrow-op-prim!, Arrow Prim -- Type,
    prim-type? TYPE_ERROR = if(
        drop arrow-token@ "compiler error: prim type missing" emit-fatal-error!,

        dup2 swap arrow-op-prim!
        prim-type@ elab-arrow-op-apply-fresh!
    ))

def(elab-arrow-op-dip!, Arrow -- Type,
    arrow-token? token-args-1 dip(arrow-dom? dip(arrow-ctx?))
    dip(type-expand-tensor tensor-type-unpack) swap
    dip(elab-arrow-fwd! arrow-dom@) T*
    dip(Arrow->Arg arrow-arg-add! drop))

||| Apply a type signature after freshening to get a codomain.
def(elab-arrow-op-apply-fresh!, Arrow Type -- Type,
    SUBST_NIL swap type-freshen-sig
    dip(over arrow-subst!)
    elab-arrow-op-apply!)

||| Apply a type signature to get a codomain.
def(elab-arrow-op-apply!, Arrow Type -- Type,
    type-expand

    over arrow-token@ token-num-args
    over type-num-params != if(
        over arrow-token@
        "Wrong number of arguments." emit-fatal-error!
        drop2 TYPE_ERROR, # TODO: improve error message

    type-is-param? if(
        type-get-param param-type-unpack
        type-expand-morphism morphism-type-unpack
        dip(swap dip(elab-arrow-unify-dom!))
        dip(elab-arrow-op-args! drop),

        type-expand-morphism morphism-type-unpack
        dip(elab-arrow-unify-dom! drop)
    )))


||| Unify a type with the dom of an arrow, returning the original arrow.
def(elab-arrow-unify-dom!, Arrow Type -- Arrow,
    over arrow-dom? swap arrow-token@ elab-type-unify! drop2)

||| Elaborate the args of an arrow.
def(elab-arrow-op-args!, Arrow Param -- Arrow,
    dip(arrow-token? token-succ)
    while(param-empty? not,
        dip(token-succ)
        param-unpack
        dip(
            over
            dip(dip(over arrow-ctx@))
            elab-arrow! Arrow->Arg
            swap token-next-arg-end
            dip(arrow-arg-add!)
        )
    )
    drop2)

######################
# Module Elaboration #
######################

||| Elaborate all of a module.
def(elab-module!, Module -- Module +Mirth,
    module-start?
    elab-module-header!
    elab-module-imports!
    elab-module-decls!
    typecheck-everything!
    drop)

||| Check that the `module(M)` statement exists and save the name.
def(elab-module-header!, Module Token -- Module Token +Mirth,
    PRIM_MODULE token-prim=? if(
        dup2 elab-module-name! token-next,
        dup "Expected module header." emit-error!
    ))

||| Check & save the module name from the module header `module(M)`.
def(elab-module-name!, Module Token -- +Mirth,
    token-args-1 token-is-name? if(
        token-name?
        name-defined? if(
            drop "Module name already taken." emit-fatal-error!,
            dip(swap)
            dup2 swap module-name!
            dup2 name-module!

            # check module name matches module path
            name-load! ".mth" str-buf-push-str!
            module-path@ Path->Str STR_BUF str-eq if(
                drop,
                "Module name should match path." emit-error!
            )
        ),
        "Expected module name." emit-fatal-error!
    ))


||| Elaborate module imports. Return token after imports.
def(elab-module-imports!, Module Token -- Module Token +Mirth,
    while(PRIM_IMPORT token-prim=?, elab-module-import!))

||| Elaborate `import(M)` statement. Return token after import.
def(elab-module-import!, Module Token -- Module Token +Mirth,
    dup dip(token-next)
    token-args-1 token-is-name? if(
        token-name?

        name-is-module? if(
            drop2, # module is already loaded (TODO: add import to a list)

        name-undefined? if(
            nip name-load! ".mth" str-buf-push-str!
            STR_BUF Str->Path run-lexer!
            elab-module! drop, # elab the imported module (TODO: add import to a list)

            drop "module name already taken" emit-fatal-error!
        )),
        "expected module name" emit-fatal-error!
    ))

||| Elaborate the rest of the module.
def(elab-module-decls!, Module Token -- Module Token +Mirth,
    while(token-is-module-end? not, elab-module-decl!))

||| Elaborate a declaration. Returns the next token.
def(elab-module-decl!, Module Token -- Module Token +Mirth,
    PRIM_DEF token-prim=? if( elab-def!,
    PRIM_DEF_EXTERNAL token-prim=? if( elab-def-external!,
    PRIM_DEF_TYPE token-prim=? if( elab-def-type!,
    PRIM_NOMINAL token-prim=? if( elab-nominal!,
    PRIM_BUFFER token-prim=? if( elab-buffer!,
    PRIM_TABLE token-prim=? if( elab-table!,
    PRIM_FIELD token-prim=? if( elab-field!,
    PRIM_TARGET_C99 token-prim=? if(elab-target-c99!,
    "unknown declaration" emit-fatal-error!)))))))))

||| Elaborate a word definition `def(w, t, b)`.
def(elab-def!, Module Token -- Module Token +Mirth,
    dup dip(token-next) token-args-3
    rotl token-type? TOKEN_NAME = if(
        token-name? name-undefined? if(
            nip
            word-alloc!
            dup2 swap name-word!
            dup dip(word-name!)
            dup dip(word-body!)
            word-sig!,

            drop "word already defined" emit-fatal-error!
        ),
        "expected word name" emit-fatal-error!
    ))

||| Elaborate an external declaration `def-external(w, t)`
def(elab-def-external!, Module Token -- Module Token +Mirth,
    dup dip(token-next) token-args-2
    swap token-type? TOKEN_NAME = if(
        token-name? name-undefined? if(
            nip
            external-alloc!
            dup2 swap name-external!
            tuck external-name!
            external-sig!,

            drop "word already defined" emit-fatal-error!
        ),
        "expected word name" emit-fatal-error!
    ))

||| Elaborate a type definition `def-type(t1, t2)`.
def(elab-def-type!, Module Token -- Module Token +Mirth,
    dup dip(token-next) token-args-2
    swap sig-token-is-type-con? if(
        token-name? name-undefined? if(
            nip swap
            sig-token-is-type-con? if(
                token-name?
                name-is-type? if(
                    name-type@ nip,
                    drop "Unknown type." emit-error!
                    TYPE_ERROR
                ),
                "Expected a type." emit-error!
                TYPE_ERROR
            )
            swap name-type!,

            drop "type already defined" emit-fatal-error!
        ),
        "expected type constructor" emit-fatal-error!
    ))

||| Elaborate a nominal type definition `nominal(t1, t2)`.
def(elab-nominal!, Module Token -- Module Token +Mirth,
    dup dip(token-next) token-args-2
    swap sig-token-is-type-con? if(
        token-name? name-undefined? if(
            nip swap
            sig-token-is-type-con? if(
                token-name?
                name-is-type? if(
                    name-type@ nip,
                    drop "Unknown type." emit-error! TYPE_ERROR
                ),
                "Expected a type." emit-error! TYPE_ERROR
            )
            over dip(nominal-new! TNominal) name-type!,

            drop "type already defined" emit-fatal-error!
        ),
        "expected type constructor" emit-fatal-error!
    ))

||| Elaborate a buffer definition `buffer(B, size)`.
def(elab-buffer!, Module Token -- Module Token +Mirth,
    dup dip(token-next) token-args-2
    swap token-type? TOKEN_NAME = if(
        token-name? name-undefined? if(
            nip swap
            token-type? TOKEN_INT = if(
                token-int@ buffer-alloc! drop,
                "expected buffer size" emit-fatal-error!
            ),
            drop "buffer already defined" emit-fatal-error!
        ),
        "expected buffer name" emit-fatal-error!
    ))

||| Elaborate a table definition `table(T)`.
def(elab-table!, Module Token -- Module Token +Mirth,
    dup dip(token-next) token-args-1
    sig-token-is-type-con? if(
        token-name@ table-new! drop,
        "expected table name" emit-fatal-error!
    ))

||| Elaborate a field definition `field(f, T1, T2)`.
def(elab-field!, Module Token -- Module Token +Mirth,
    dup dip(token-next) token-args-3
    rotl token-type? TOKEN_NAME = if(
        token-name@
        rotl token-type? TOKEN_NAME = if(
            token-name?
            name-is-table? if(
                nip name-type@ type-get-table
                rotl sig-token-is-type-con? if(
                    token-name?
                    name-is-type? if(
                        nip name-type@ field-new! drop,
                        drop "unknown field type" emit-fatal-error!
                    ),
                    "expected field type" emit-fatal-error!
                ),
                drop "unknown table name" emit-fatal-error!
            ),
            "expected table name" emit-fatal-error!
        ),
        "expected field name" emit-fatal-error!
    ))

||| Elaborate C99 build target.
def(elab-target-c99!, Module Token -- Module Token +Mirth,
    typecheck-everything!

    dup dip(token-next) token-args-2
    swap token-type? TOKEN_STR = if(
        dip(
            dip(ctx-empty T0 T0 T->)
            elab-arrow!
        )

        token-str@ Str->Path run-output-c99!,
        "Expected relative C file path (a string)." emit-fatal-error!
    ))

||| Ensure that everything so far has been typechecked.
def(typecheck-everything!, --,
    1
    while(dup num-names@ <=,
        dup Int->Name
        typecheck-name!
        1+)
    drop)

||| Typecheck name.
def(typecheck-name!, Name --,
    name-is-external? if(
        name-external@ elab-external-sig! drop,
    name-is-word? if(
        name-word@ elab-word-body! drop,
        drop
    )))
