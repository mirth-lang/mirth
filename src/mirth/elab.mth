module(mirth/elab)
import(mirth/data/name)
import(mirth/data/token)
import(mirth/data/type)

##############
# Elaborator #
##############

|Token| def-static-buffer(ELAB_TOKEN)
def(elab-token@, -- Token +Elab, ELAB_TOKEN token@)
def(elab-token!, Token -- +Elab, ELAB_TOKEN token!)
def(elab-emit-warning!, Str -- +Elab, dip(elab-token@) emit-warning!)
def(elab-emit-error!, Str -- +Elab, dip(elab-token@) emit-error!)
def(elab-emit-fatal-error!, Str -- +Elab, dip(elab-token@) emit-fatal-error!)


|Type| def-static-buffer(ELAB_STACK)
def(elab-stack@, -- Type +Elab, ELAB_STACK type@)
def(elab-stack!, Type -- +Elab, ELAB_STACK type!)

|Ctx| def-static-buffer(ELAB_CTX)
def(elab-ctx@, -- Ctx +Elab, ELAB_CTX ctx@)
def(elab-ctx!, Ctx -- +Elab, ELAB_CTX ctx!)

####################
# Type Elaboration #
####################

# Elaborate a type signature into a morphism type.
def(elab-sig!, Token -- Type +Elab,
    sig-has-dashes? if(
        dup elab-stack-type!
        swap sig-skip-dashes elab-stack-type!
        morphism-type-new!
        TMorphism,

        dip(TYPE_UNIT)
        elab-stack-type!
        morphism-type-new!
        TMorphism
    ))

# Elaborate a stack signature into a stack type.
def(elab-stack-type!, Token -- Type +Elab,
    sig-token-is-stack-var? if(
        dup token-next
        dip(elab-implicit-stack-var! TVar),
        dip(TYPE_UNIT)
    )
    while(sig-is-stack-end? if(false, sig-token-is-effect-con? not),
        dup
        dip(elab-type! tensor-type-new! TTensor)
        token-succ
    )
    drop)

# Elaborate an atom into a value type.
def(elab-type!, Token -- Type,
    dup elab-token!
    sig-token-is-stack-var? if(
        "Expected type, not stack variable." elab-emit-error!
        drop TYPE_ERROR,

    sig-token-is-type-var? if(
        elab-implicit-type-var! TVar,

    sig-token-is-type-con? if(
        elab-type-con!,

    sig-token-is-effect-con? if(
        "Unexpected effect constructor." elab-emit-error!
        drop TYPE_ERROR,

        "Expected a type." elab-emit-error!
        drop TYPE_ERROR
    )))))

def(elab-implicit-stack-var!, Token -- Var,
    TYPE_STACK swap elab-implicit-var!)

def(elab-implicit-type-var!, Token -- Var,
    TYPE_TYPE swap elab-implicit-var!)

# Elaborate a potentially implicit variable with the given type.
# This will add the variable to the context if it doesn't yet exist.
# If the variable already exists, this will unify the expected type.
# Returns the resulting variable.
def(elab-implicit-var!, Type Token -- Var,
    token-type? TOKEN_NAME = if(
        token-name? elab-ctx@ ctx-has-name if(
            token-name@ elab-ctx@ ctx-lookup
            dup dip(var-type@ type-unify! drop),

            elab-new-implicit-var!
        ),

        "elab-implicit-var! expects a name token." elab-emit-error!
        drop2 VAR_ERROR
    ))

def(elab-new-implicit-var!, Type Token -- Var +Elab,
    token-name? var-new-implicit!
    tuck var-name-token!
    tuck var-type!
    elab-ctx@ over ctx-new! elab-ctx!)

# Elaborate a type constructor token.
def(elab-type-con!, Token -- Type,
    sig-token-is-type-con? if(
        token-has-args? if(
            "Types with args are not yet supported." elab-emit-error!
            drop TYPE_ERROR,

            token-name@
            name-is-type? if(
                name-type@,

            name-undefined? if(
                "Unknown type." elab-emit-error! drop TYPE_ERROR,
                "Not a type." elab-emit-error! drop TYPE_ERROR
            ))
        ),

        "elab-type-con! expects type constructor." elab-emit-error!
        drop TYPE_ERROR
    ))

####################
# Word Elaboration #
####################


def(elab-external-sig!, External -- Type +Elab,
    external-sig-is-checked? if(
        external-type@,

        elab-ctx@ dip(
        elab-token@ dip(
            ctx-empty elab-ctx!
            dup external-sig@ elab-sig!
            over external-sig-is-checked!
            over dip(elab-ctx@) external-ctx!
            dup dip(swap external-type!)
        ) elab-token!
        ) elab-ctx!
    ))

def(elab-word-sig!, Word -- Type +Elab,
    word-sig-is-checked? if(
        word-type@,

        elab-ctx@ dip(
        elab-token@ dip(
            ctx-empty elab-ctx!
            dup word-sig@ elab-sig!
            over word-sig-is-checked!
            over dip(elab-ctx@) word-ctx!
            dup dip(swap word-type!)
        ) elab-token!
        ) elab-ctx!
    ))


def(elab-word-body!, Word -- Arrow +Elab,
    word-body-is-checked? if(
        word-arrow@,
        dup elab-word-sig! drop

        elab-ctx@ dip(
        elab-token@ dip(
        elab-stack@ dip(
            dup word-ctx@ elab-ctx!
            dup word-body@ elab-token!
            dup word-dom@ elab-stack!

            dup word-body@

            # dup token-location Col->Int 1- Int->Col location-trace!
            # ": warning: domain = " str-trace!
            # elab-stack@ type-trace! trace-ln!

            elab-arrow!

            over word-cod@

            # elab-token@ token-location location-trace!
            # ": warning: codomain = " str-trace!
            # dup type-trace! trace-ln!

            elab-stack@ type-unify! drop
            over word-body-is-checked!
            tuck swap word-arrow!
        ) elab-stack!
        ) elab-token!
        ) elab-ctx!
    ))

def(elab-stack-pop!, Type +Elab,
    elab-stack@
    type-expand
    dup TYPE_ERROR = if(
        dup,

    type-is-meta? if(
        type-expand-tensor tensor-type-unpack,

    type-is-tensor? if(
        type-get-tensor tensor-type-unpack,

        "(temporary?) stack underflow" elab-emit-warning!
        drop TYPE_ERROR TYPE_ERROR
    )))
    dip(elab-stack!))

def(elab-stack-pop2!, Type Type +Elab,
    elab-stack-pop! dip(elab-stack-pop!))

def(elab-stack-pop3!, Type Type Type +Elab,
    elab-stack-pop! dip(elab-stack-pop2!))

def(elab-stack-push!, Type -- +Elab,
    elab-stack@ swap tensor-type-new! TTensor elab-stack!)

def(elab-stack-push2!, Type Type -- +Elab,
    dip(elab-stack-push!) elab-stack-push!)

def(elab-stack-push3!, Type Type Type -- +Elab,
    dip(elab-stack-push2!) elab-stack-push!)

def(elab-token-next!, +Elab,
    elab-token@ token-next elab-token!)

def(elab-arrow!, Token -- Arrow +Elab,
    elab-token!
    elab-arrow-step! dup
    while(elab-token@ token-is-arg-end? nip not,
        elab-token-next!
        elab-arrow-step!
        dup dip(swap arrow-next!))
    drop)

def(elab-arrow-step!, Arrow +Elab,
    arrow-alloc!
    elab-stack@ over arrow-dom!
    elab-token@ over arrow-token!

    elab-token@
    token-is-arg-end? if(
        drop,
    token-is-int? if(
        token-int@ elab-arrow-step-int!,
    token-is-str? if(
        token-value@ TokenValue->Int Int->StrLit elab-arrow-step-str!, # TODO: fix this
    token-is-name? if(
        token-name@ elab-arrow-step-name!,
        drop "compiler error: unexpected token type" elab-emit-fatal-error!
    )))))

def(elab-arrow-step-name!, Arrow Name -- Arrow +Elab,
    name-is-buffer? if(
        name-buffer@ elab-arrow-step-buffer!,
    name-is-external? if(
        name-external@ elab-arrow-step-external!,
    name-is-word? if(
        name-word@ elab-arrow-step-word!,
    name-is-prim? if(
        Name->Prim elab-arrow-step-prim!,

        drop
        "Unknown word" elab-emit-error!
        TYPE_ERROR elab-stack!
    )))))

def(elab-arrow-step-int!, Arrow Int -- Arrow +Elab,
    over arrow-op-int!
    TYPE_INT elab-stack-push!)

def(elab-arrow-step-str!, Arrow StrLit -- Arrow +Elab,
    over arrow-op-str!
    TYPE_PTR elab-stack-push!) # TODO: add primitive STR type?

def(elab-arrow-step-buffer!, Arrow Buffer -- Arrow +Elab,
    over arrow-op-buffer!
    TYPE_PTR elab-stack-push!)

def(elab-arrow-step-external!, Arrow External -- Arrow +Elab,
    dup2 swap arrow-op-external!
    elab-token@ token-args-0 # high order not yet supported
    elab-external-sig! elab-arrow-apply-sig-type!)

def(elab-arrow-step-word!, Arrow Word -- Arrow +Elab,
    dup2 swap arrow-op-word!
    elab-token@ token-args-0 # high order not yet supported
    elab-word-sig! elab-arrow-apply-sig-type!)

def(elab-arrow-apply-sig-type!, Arrow Type -- Arrow +Elab,
    type-expand-morphism morphism-type-unpack swap
    type-expand
    dip(SUBST_NIL)
    while(type-is-tensor?,
        type-get-tensor
        tensor-type-unpack
        dip(swap) type-freshen drop dip(swap)
        elab-stack-pop! type-unify! drop
        type-expand
    )
    dup TYPE_ERROR = if(
        dip(drop2) elab-stack!,

    dup TYPE_UNIT = if( # save arrow codip depth ?
        drop swap type-freshen drop
        nip # TODO save arrow subst
        elab-stack@ swap stack-type-concat elab-stack!,

        drop swap type-freshen drop
        nip # TODO save arrow subst
        elab-stack!
    )))

def(stack-type-concat, Type Type -- Type,
    type-expand
    dup TYPE_ERROR = if(
        drop2 TYPE_ERROR,

    dup TYPE_UNIT = if(
        drop,

    type-is-tensor? if(
        type-get-tensor tensor-type-unpack dip(stack-type-concat)
        tensor-type-new! TTensor,

        "compiler error: expected stack type in stack-type-concat" elab-emit-fatal-error!
        nip
    ))))

def(elab??, +Elab,
    elab-token@ token-location location-trace! ": warning: stack = " str-trace!
    elab-stack@ type-trace! trace-ln!)

def(elab-arrow-step-prim!, Arrow Prim -- Arrow +Elab,
    dup2 swap arrow-op-prim!

    dup PRIM_DIP = if(
        drop elab-arrow-step-dip!,
    dup PRIM_IF = if(
        drop elab-arrow-step-if!,
    dup PRIM_WHILE = if(
        drop elab-arrow-step-while!,

    dup PRIM_ID = if(
        drop elab-token@ token-args-0,
    dup PRIM_DROP = if(
        drop elab-token@ token-args-0
        elab-stack-pop! drop,
    dup PRIM_SWAP = if(
        drop elab-token@ token-args-0
        elab-stack-pop2! swap elab-stack-push2!,
    dup PRIM_DUP = if(
        drop elab-token@ token-args-0
        elab-stack@
        dup TYPE_ERROR = if(
            drop,
            type-expand-tensor tensor-type-snd@ elab-stack-push!
        ),
    dup PRIM_INT_ADD = if(
        drop elab-token@ token-args-0
        elab-stack-pop2! elab+ elab-stack-push!,
    dup PRIM_INT_SUB = if(
        drop elab-token@ token-args-0
        elab-stack-pop2! elab- elab-stack-push!,
    dup PRIM_INT_MUL = if(
        drop elab-token@ token-args-0
        elab-stack-pop2! elab* elab-stack-push!,
    dup PRIM_INT_DIV = if(
        drop elab-token@ token-args-0
        elab-stack-pop2! elab/ elab-stack-push!,
    dup PRIM_INT_MOD = if(
        drop elab-token@ token-args-0
        elab-stack-pop2! elab% elab-stack-push!,
    dup PRIM_INT_EQ = if(
        drop elab-token@ token-args-0
        elab-stack-pop2! elab= elab-stack-push!,
    dup PRIM_INT_LT = if(
        drop elab-token@ token-args-0
        elab-stack-pop2! elab= elab-stack-push!,
    dup PRIM_INT_LE = if(
        drop elab-token@ token-args-0
        elab-stack-pop2! elab= elab-stack-push!,
    dup PRIM_INT_AND = if(
        drop elab-token@ token-args-0
        elab-stack-pop2! elab& elab-stack-push!,
    dup PRIM_INT_OR = if(
        drop elab-token@ token-args-0
        elab-stack-pop2! elab& elab-stack-push!,
    dup PRIM_INT_XOR = if(
        drop elab-token@ token-args-0
        elab-stack-pop2! elab& elab-stack-push!,
    dup PRIM_INT_SHL = if(
        drop elab-token@ token-args-0
        elab-stack-pop2! elab& elab-stack-push!,
    dup PRIM_INT_SHR = if(
        drop elab-token@ token-args-0
        elab-stack-pop2! elab& elab-stack-push!,

    dup PRIM_MEM_GET = if(
        drop elab-token@ token-args-0
        elab-stack-pop! elab@ elab-stack-push!,
    dup PRIM_MEM_GET_BYTE = if(
        drop elab-token@ token-args-0
        elab-stack-pop! elab@ elab-stack-push!,
    dup PRIM_MEM_SET = if(
        drop elab-token@ token-args-0
        elab-stack-pop2! elab!,
    dup PRIM_MEM_SET_BYTE = if(
        drop elab-token@ token-args-0
        elab-stack-pop2! elab!,

    dup PRIM_MEM_GET_U8 = if(
        drop elab-token@ token-args-0
        elab-stack-pop! TYPE_PTR type-unify! drop TYPE_U8 elab-stack-push!,
    dup PRIM_MEM_GET_U16 = if(
        drop elab-token@ token-args-0
        elab-stack-pop! TYPE_PTR type-unify! drop TYPE_U16 elab-stack-push!,
    dup PRIM_MEM_GET_U32 = if(
        drop elab-token@ token-args-0
        elab-stack-pop! TYPE_PTR type-unify! drop TYPE_U32 elab-stack-push!,
    dup PRIM_MEM_GET_U64 = if(
        drop elab-token@ token-args-0
        elab-stack-pop! TYPE_PTR type-unify! drop TYPE_U64 elab-stack-push!,
    dup PRIM_MEM_GET_I8 = if(
        drop elab-token@ token-args-0
        elab-stack-pop! TYPE_PTR type-unify! drop TYPE_I8 elab-stack-push!,
    dup PRIM_MEM_GET_I16 = if(
        drop elab-token@ token-args-0
        elab-stack-pop! TYPE_PTR type-unify! drop TYPE_I16 elab-stack-push!,
    dup PRIM_MEM_GET_I32 = if(
        drop elab-token@ token-args-0
        elab-stack-pop! TYPE_PTR type-unify! drop TYPE_I32 elab-stack-push!,
    dup PRIM_MEM_GET_I64 = if(
        drop elab-token@ token-args-0
        elab-stack-pop! TYPE_PTR type-unify! drop TYPE_I64 elab-stack-push!,

    dup PRIM_MEM_SET_U8 = if(
        drop elab-token@ token-args-0
        elab-stack-pop2! TYPE_PTR type-unify! drop TYPE_U8 type-unify! drop,
    dup PRIM_MEM_SET_U16 = if(
        drop elab-token@ token-args-0
        elab-stack-pop2! TYPE_PTR type-unify! drop TYPE_U16 type-unify! drop,
    dup PRIM_MEM_SET_U32 = if(
        drop elab-token@ token-args-0
        elab-stack-pop2! TYPE_PTR type-unify! drop TYPE_U32 type-unify! drop,
    dup PRIM_MEM_SET_U64 = if(
        drop elab-token@ token-args-0
        elab-stack-pop2! TYPE_PTR type-unify! drop TYPE_U64 type-unify! drop,
    dup PRIM_MEM_SET_I8 = if(
        drop elab-token@ token-args-0
        elab-stack-pop2! TYPE_PTR type-unify! drop TYPE_I8 type-unify! drop,
    dup PRIM_MEM_SET_I16 = if(
        drop elab-token@ token-args-0
        elab-stack-pop2! TYPE_PTR type-unify! drop TYPE_I16 type-unify! drop,
    dup PRIM_MEM_SET_I32 = if(
        drop elab-token@ token-args-0
        elab-stack-pop2! TYPE_PTR type-unify! drop TYPE_I32 type-unify! drop,
    dup PRIM_MEM_SET_I64 = if(
        drop elab-token@ token-args-0
        elab-stack-pop2! TYPE_PTR type-unify! drop TYPE_I64 type-unify! drop,

    dup PRIM_POSIX_EXIT = if(
        drop elab-token@ token-args-0
        elab-stack-pop! TYPE_INT type-unify! drop
        meta-alloc! TMeta elab-stack!,
    dup PRIM_POSIX_READ = if(
        drop elab-token@ token-args-0
        elab-stack-pop3! elab-posix-read elab-stack-push!,
    dup PRIM_POSIX_WRITE = if(
        drop elab-token@ token-args-0
        elab-stack-pop3! elab-posix-write,
    dup PRIM_POSIX_OPEN = if(
        drop elab-token@ token-args-0
        elab-stack-pop3! elab-posix-open elab-stack-push!,
    dup PRIM_POSIX_CLOSE = if(
        drop elab-token@ token-args-0
        elab-stack-pop! elab-posix-close elab-stack-push!,
    dup PRIM_POSIX_MMAP = if(
        drop elab-token@ token-args-0
        elab-stack-pop3! dip(dip(dip(elab-stack-pop3!)))
        elab-posix-mmap elab-stack-push!, # not always a pointer...

    dup PRIM_DEBUG = if(
        drop elab-token@ token-args-0,
    dup PRIM_MIRTH_REVISION = if(
        drop elab-token@ token-args-0
        TYPE_INT elab-stack-push!,
    dup PRIM_RUNNING_OS = if(
        drop elab-token@ token-args-0
        TYPE_INT elab-stack-push!,

    dup PRIM_CAST = if(
        drop elab-token@ token-args-0
        elab-stack-pop! drop meta-alloc! TMeta elab-stack-push!,
    dup PRIM_PTR+ = if(
        drop elab-token@ token-args-0
        elab-stack-pop2! TYPE_INT TYPE_PTR expect2
        if(TYPE_PTR, TYPE_ERROR) elab-stack-push!,

    dup PRIM_TRUE = if(
        drop elab-token@ token-args-0
        TYPE_BOOL elab-stack-push!,
    dup PRIM_FALSE = if(
        drop elab-token@ token-args-0
        TYPE_BOOL elab-stack-push!,
    dup PRIM_BOOL_AND = if(
        drop elab-token@ token-args-0
        elab-stack-pop2! elab&& elab-stack-push!,
    dup PRIM_BOOL_OR = if(
        drop elab-token@ token-args-0
        elab-stack-pop2! elab&& elab-stack-push!,

        drop TYPE_ERROR elab-stack!
        "compiler error: unknown prim in elaborator" elab-emit-warning!
    ))))))))))))))))))))))))))))))))))))))))))))))))))))))))

def(elab-arrow-step-dip!, Arrow -- Arrow +Elab,
    elab-token@ dip(
    elab-stack-pop! dip(
        elab-token@ token-args-1
        elab-arrow! Arrow->Arg arrow-arg-add!
    ) elab-stack-push!
    ) elab-token!
    )

def(elab-arrow-step-if!, Arrow -- Arrow +Elab,
    elab-stack-pop! TYPE_BOOL type-unify! drop
    elab-token@ dup dip(
        token-args-2
        elab-stack@ dip(
            dip(elab-arrow! Arrow->Arg arrow-arg-add!)
        )
        elab-stack@ dip(
            elab-stack! elab-arrow! Arrow->Arg arrow-arg-add!
        )
    ) elab-token!
    elab-stack@ type-unify! drop)

def(elab-arrow-step-while!, Arrow -- Arrow +Elab,
    elab-token@ dip(
        elab-stack@ dip(
            elab-token@ token-args-2
            dip(elab-arrow! Arrow->Arg arrow-arg-add!)
            elab-stack-pop! TYPE_BOOL type-unify! drop
        )
        elab-stack@ type-unify! dip(
            elab-arrow! Arrow->Arg arrow-arg-add!
        )
        elab-stack@ type-unify!
        elab-stack!
    ) elab-token!)

#################
# Type Checking #
#################

MAX_NAMES def-static-buffer(DEF_CHECKED)
def(name-checked!, Bool Name --, dip(if(1,0) Int->U8) Name->Int DEF_CHECKED u8!!)
def(name-checked@, Name -- Bool, Name->Int DEF_CHECKED u8@@ U8->Int 0 = not)
def(name-checked?, Name -- Name Bool, dup name-checked@)

def(typecheck-token!, Token --,
    token-type? TOKEN_NAME = if(
        token-name?

        name-is-prim? if(
            drop2,

        name-undefined? if(
            drop "Word is undefined." emit-fatal-error!,

            nip typecheck-name!
        )),

        drop
    ))

def(typecheck-name!, Name --,
    name-checked? if(
        drop,

        true over name-checked!

        name-is-prim? if(
            drop,

        name-undefined? if(
            "error: Name undefined: " str-trace!
            name-load! str-buf-trace! trace-ln!,

        name-is-word? if(
            typecheck-word!,

        name-is-buffer? if(
            drop,

        name-is-external? if(
            drop, # TODO: check the signature

        name-is-type? if(
            drop, # TODO

            "error: Dont know how to typecheck name: "
            str-trace! name-load! str-buf-trace! trace-ln!
            1 posix-exit!

        ))))))
    ))

def(typecheck-word!, Name --,
    name-word@ dup
    elab-word-sig! drop
    elab-word-body! drop)


#############
# Type Sigs #
#############

def(token-is-dashes, Token -- Bool,
    token-type? TOKEN_NAME = if(
        token-name@ PRIM_DASHES Prim->Name =,
        drop false
    ))

def(token-is-dashes?, Token -- Token Bool,
    dup token-is-dashes)

def(sig-is-stack-end?, Token -- Token Bool,
    token-is-dashes? if(
        true,
        token-run-end?
    ))

def(sig-has-dashes, Token -- Bool,
    while(sig-is-stack-end? not, token-next)
    token-is-dashes)

def(sig-has-dashes?, Token -- Token Bool,
    dup sig-has-dashes)

def(sig-arity, Token -- Int Int,
    sig-has-dashes? if(
        sig-count-types
        token-next
        sig-count-types
        drop,

        dip(0)
        sig-count-types
        drop
    ))

def(sig-count-types, Token -- Int Token,
    dip(0)
    while(sig-is-stack-end? not,
        sig-token-is-type? if(dip(1+), id)
        token-next
    ))

def(sig-token-is-type?, Token -- Token Bool,
    token-type? TOKEN_NAME = if(
        token-name? name-could-be-type,
        false
    ))

def(sig-token-is-type-con?, Token -- Token Bool,
    token-type? TOKEN_NAME = if(
        token-name? name-could-be-type-con,
        false
    ))

def(sig-token-is-type-var?, Token -- Token Bool,
    token-type? TOKEN_NAME = if(
        token-name? name-could-be-type-var,
        false
    ))

def(sig-token-is-stack-var?, Token -- Token Bool,
    token-type? TOKEN_NAME = if(
        token-name? name-could-be-stack-var,
        false
    ))

def(sig-token-is-effect-con?, Token -- Token Bool,
    token-type? TOKEN_NAME = if(
        token-name? name-could-be-effect-con,
        false
    ))

def(sig-skip-dashes, Token -- Token,
    sig-has-dashes? if(
        while(token-is-dashes? not, token-next) token-next,
        id
    ))


# elab type for + primitive
def(elab+, Type Type -- Type, TYPE_INT type-unify! type-unify!)

# elab type for - primitive
def(elab-, Type Type -- Type, TYPE_INT type-unify! type-unify!)

# elab for * primitive
def(elab*, Type Type -- Type, TYPE_INT type-unify! type-unify!)

# elab for / primitive
def(elab/, Type Type -- Type, TYPE_INT type-unify! type-unify!)

# elab type for % primitive
def(elab%, Type Type -- Type, TYPE_INT type-unify! type-unify!)

# elab for =, <, <= primitives
def(elab=, Type Type -- Type, type-unify! drop TYPE_BOOL)

# elab for &, ^, | primitives
def(elab&, Type Type -- Type, TYPE_INT type-unify! type-unify!)

# elab for &&, || primitives
def(elab&&, Type Type -- Type, TYPE_BOOL type-unify! type-unify!)

# elab for @ primitive
def(elab@, Type -- Type, TYPE_PTR expect1 drop TYPE_INT)

def(elab!, Type Type --, TYPE_INT TYPE_PTR expect2 drop)

def(elab-posix-exit, Type -- +Elab,
    TYPE_INT expect1 drop) # TODO: set absurd flag

def(elab-posix-read, Type Type Type -- Type +Elab,
    TYPE_INT TYPE_PTR TYPE_INT expect3
    if(TYPE_INT, TYPE_ERROR))

def(elab-posix-write, Type Type Type -- +Elab,
    TYPE_INT TYPE_PTR TYPE_INT expect3 drop)

def(elab-posix-open, Type Type Type -- Type +Elab,
    TYPE_PTR TYPE_INT TYPE_INT expect3
    if(TYPE_INT, TYPE_ERROR))

def(elab-posix-close, Type -- Type +Elab,
    TYPE_INT expect1 if(TYPE_INT, TYPE_ERROR))

def(elab-posix-mmap, Type Type Type Type Type Type -- Type +Elab,
    TYPE_INT TYPE_INT TYPE_INT expect3 if(
        TYPE_PTR TYPE_INT TYPE_INT expect3 if(
            TYPE_PTR,
            TYPE_ERROR
        ),
        drop3 TYPE_ERROR
    )) # TODO: improve diagnostics

def(expect1, Type Type -- Bool +Elab,
    type-unify! TYPE_ERROR = not)

def(expect2, Type Type Type Type -- Bool +Elab,
    dip(swap) expect1 if(expect1, drop2 false)
    ) # TODO: improve diagnostics

def(expect3, Type Type Type Type Type Type -- Bool +Elab,
    dip(rotl) expect1 if(
        expect2,
        drop2 drop2 false
    )) # TODO: improve diagnostics
