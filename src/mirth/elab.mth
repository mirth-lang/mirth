module(mirth/elab)
import(mirth/data/name)
import(mirth/data/token)
import(mirth/data/type)

##############
# Elaborator #
##############

quad def-static-buffer(ELAB_TOKEN)
def(elab-token@, -- Token +Elab, ELAB_TOKEN token@)
def(elab-token!, Token -- +Elab, ELAB_TOKEN token!)
def(elab-emit-warning!, Str -- +Elab, dip(elab-token@) emit-warning!)
def(elab-emit-error!, Str -- +Elab, dip(elab-token@) emit-error!)
def(elab-emit-fatal-error!, Str -- +Elab, dip(elab-token@) emit-fatal-error!)

|Ctx| def-static-buffer(ELAB_CTX)
def(elab-ctx@, -- Ctx +Elab, ELAB_CTX ctx@)
def(elab-ctx!, Ctx -- +Elab, ELAB_CTX ctx!)

####################
# Type Elaboration #
####################

# Elaborate a type signature into a morphism type.
def(elab-sig!, Token -- Type +Elab,
    sig-has-dashes? if(
        dup elab-stack!
        swap sig-skip-dashes elab-stack!
        morphism-type-new!
        TMorphism,

        dip(TYPE_UNIT)
        elab-stack!
        morphism-type-new!
        TMorphism
    ))

# Elaborate a stack signature into a stack type.
def(elab-stack!, Token -- Type +Elab,
    sig-token-is-stack-var? if(
        dup token-next
        dip(elab-implicit-stack-var! TVar),
        dip(TYPE_UNIT)
    )
    while(sig-is-stack-end? if(0, sig-token-is-effect-con? not),
        dup
        dip(elab-type! tensor-type-new! TTensor)
        token-succ
    )
    drop)

# Elaborate an atom into a value type.
def(elab-type!, Token -- Type,
    dup elab-token!
    sig-token-is-stack-var? if(
        "Expected type, not stack variable." elab-emit-error!
        drop TYPE_ERROR,

    sig-token-is-type-var? if(
        elab-implicit-type-var! TVar,

    sig-token-is-type-con? if(
        elab-type-con!,

    sig-token-is-effect-con? if(
        "Unexpected effect constructor." elab-emit-error!
        drop TYPE_ERROR,

        "Expected a type." elab-emit-error!
        drop TYPE_ERROR
    )))))

def(elab-implicit-stack-var!, Token -- Var,
    TYPE_STACK swap elab-implicit-var!)

def(elab-implicit-type-var!, Token -- Var,
    TYPE_TYPE swap elab-implicit-var!)

# Elaborate a potentially implicit variable with the given type.
# This will add the variable to the context if it doesn't yet exist.
# If the variable already exists, this will unify the expected type.
# Returns the resulting variable.
def(elab-implicit-var!, Type Token -- Var,
    token-type? TOKEN_NAME = if(
        token-name? elab-ctx@ ctx-has-name if(
            token-name@ elab-ctx@ ctx-lookup
            dup dip(var-type@ type-unify! drop),

            elab-new-implicit-var!
        ),

        "elab-implicit-var! expects a name token." elab-emit-error!
        drop2 VAR_ERROR
    ))

def(elab-new-implicit-var!, Type Token -- Var +Elab,
    token-name? var-new-implicit!
    tuck var-name-token!
    tuck var-type!
    elab-ctx@ over ctx-new! elab-ctx!)

# Elaborate a type constructor token.
def(elab-type-con!, Token -- Type,
    sig-token-is-type-con? if(
        token-has-args? if(
            "Types with args are not yet supported." elab-emit-error!
            drop TYPE_ERROR,

            token-name@
            name-is-type? if(
                name-type@,

            name-undefined? if(
                "Unknown type." elab-emit-error!,
                "Not a type." elab-emit-error!
            ))
        ),

        "elab-type-con! expects type constructor." elab-emit-error!
        drop TYPE_ERROR
    ))

####################
# Word Elaboration #
####################

def(elab-word-sig!, Word -- Type +Elab,
    word-sig-is-checked? if(
        word-type@,

        elab-ctx@ dip(
        elab-token@ dip(
            ctx-empty elab-ctx!
            dup word-sig@ elab-sig!
            over word-sig-is-checked!
            over dip(elab-ctx@) word-ctx!
            dup dip(swap word-type!)
        ) elab-token!
        ) elab-ctx!
    ))

# def(elab-word-body!, Word -- Morphism +Elab,
#     word-body-is-checked? if(
#         word-morphism@,
#         drop MORPHISM_ERROR # TODO
#     ))

    # ctx-empty elab-ctx!
    # name-sig? elab-sig! over name-type!
    # over name-load! str-buf-trace!
    # elab-ctx@ ctx-is-empty? if(
    #     drop,
    #     " (" str-trace! ctx-trace! ")" str-trace!
    # )
    # " : " str-trace!
    # type-trace-sig! trace-ln!

#################
# Type Checking #
#################

MAX_NAMES def-static-buffer(DEF_CHECKED)
def(name-checked!, Bool Name --, dip(Int->U8) Name->Int DEF_CHECKED u8!!)
def(name-checked@, Name -- Bool, Name->Int DEF_CHECKED u8@@ U8->Int)
def(name-checked?, Name -- Name Bool, dup name-checked@)

def(TSTACK_SIZE, Size, VSTACK_SIZE)
quad def-static-buffer(TSTACK_LEN)
quad def-static-buffer(TSTACK_BASE)
TSTACK_SIZE quads def-static-buffer(TSTACK_BUF)

def(tstack-len!, Size --, TSTACK_LEN !)
def(tstack-len@, Size, TSTACK_LEN @)

def(tstack-base!, Size --, TSTACK_BASE !)
def(tstack-base@, Size, TSTACK_BASE @)

def(tstack-length?, Size +TSTACK, tstack-len@ tstack-base@ -)
def(tstack-empty?, Bool, tstack-len@ tstack-base@ <=)
def(tstack-full?, Bool, tstack-len@ TSTACK_SIZE >=)
def(tstack-clear!, +TSTACK, tstack-base@ tstack-len!)

def(tstack!, Int Offset --, TSTACK_BUF quad!!)
def(tstack@, Offset -- Int, TSTACK_BUF quad@@)

def(tstack-pop-int!, -- Int,
    tstack-empty? if(
        "tstack underflow" panic! 0,
        tstack-len@ 1- dup tstack-len! tstack@
    ))
def(tstack-push-int!, Int --,
    tstack-full? if(
        "tstack overflow" panic! drop,
        tstack-len@ dup 1+ tstack-len! tstack!
    ))

def(tstack-pop!, -- Type, tstack-pop-int! Int->Type)
def(tstack-push!, Type --, Type->Int tstack-push-int!)

def(tstack-pop2!, -- Type Type, tstack-pop! dip(tstack-pop!))
def(tstack-pop3!, -- Type Type Type, tstack-pop! dip(tstack-pop2!))
def(tstack-push2!, Type Type --, dip(tstack-push!) tstack-push!)

def(tstack-enter!, --,
    tstack-base@ tstack-push-int!
    tstack-len@ tstack-base!
    )

def(tstack-leave!, --,
    tstack-base@ 0 <= if(
        "Compiler error: Attempt to leave empty tstack frame." panic!,
        tstack-base@
        1- dup tstack-len!
        tstack@ tstack-base!
    ))

# Create a copy of the current tstack frame as a new tstack frame.
def(tstack-frame-dup!, -- +TSTACK,
    tstack-len@ tstack-base@
    tstack-enter!
    while(dup2 >,
        dup tstack@ tstack-push-int!
        1+)
    drop2)

quad def-static-buffer(TSTACK_NUM_STASHES)
def(tstack-num-stashes@, Size +TSTACK, TSTACK_NUM_STASHES @)
def(tstack-num-stashes!, Size -- +TSTACK, TSTACK_NUM_STASHES !)

nominal(Stash, Int)
def(Stash->Int, Stash -- Int, cast)
def(Int->Stash, Int -- Stash, cast)

TSTACK_SIZE quads def-static-buffer(TSTACK_STASH_LEN)
def(tstack-stash-len@, Stash -- Size +TSTACK, Stash->Int TSTACK_STASH_LEN quad@@)
def(tstack-stash-len!, Size Stash -- +TSTACK, Stash->Int TSTACK_STASH_LEN quad!!)

def(tstack-stash-len-push!, Size -- +TSTACK,
    tstack-num-stashes@ TSTACK_SIZE < if(
        tstack-num-stashes@ Int->Stash tstack-stash-len!
        tstack-num-stashes@ 1+ tstack-num-stashes!,
        "compiler error: tstack stash overflow" panic! drop
    ))

def(tstack-stash-len-pop!, Size +TSTACK,
    tstack-num-stashes@ 0 > if(
        tstack-num-stashes@ 1- tstack-num-stashes!
        tstack-num-stashes@ Int->Stash tstack-stash-len@,
        "compiler error: tstack stash underflow" panic! 0
    ))

# Stash the top tstack frame.
def(tstack-frame-stash!, -- +TSTACK,
    tstack-length? tstack-stash-len-push!
    tstack-leave!) # FIXME: actually save the values

# Pop the stashed tstack frame & unify it with the top tstack frame.
def(tstack-frame-unify!, Token -- Token +TSTACK,
    tstack-length? tstack-stash-len-pop!
    dup2 = if(
        drop2,
        dip(dip(dup token-location location-trace! ": " str-trace!))
        "error: Failed to unify branches. First branch has " str-trace!
        int-trace!
        " outputs, second branch has " str-trace!
        int-trace!
        " outputs." str-trace-ln!
        1 posix-exit!
    ))

def(typecheck-token!, Token --,
    token-type? TOKEN_NAME = if(
        token-name?

        name-is-prim? if(
            drop2,

        name-undefined? if(
            drop "Word is undefined." emit-fatal-error!,

            nip typecheck-name!
        )),

        drop
    ))

def(typecheck-name!, Name --,
    name-checked? if(
        drop,

        1 over name-checked!

        name-is-prim? if(
            drop,

        name-undefined? if(
            "error: Name undefined: " str-trace!
            name-load! str-buf-trace! trace-ln!,

        name-is-word? if(
            typecheck-word!,

        name-is-buffer? if(
            typecheck-buffer!,

        name-is-external? if(
            drop, # TODO: check the signature

        name-is-type? if(
            drop, # TODO

            "error: Dont know how to typecheck name: "
            str-trace! name-load! str-buf-trace! trace-ln!
            1 posix-exit!

        ))))))
    ))

def(typecheck-word!, Name --,
    dup name-word@ elab-word-sig! drop
    name-sig? typecheck-word-sig!

#    dup name-load! str-buf-trace! " : " str-trace!
#    dup name-word@ elab-word-type! type-trace-sig! trace-ln!

    # ctx-empty elab-ctx!
    # name-sig? elab-sig! over name-type!
    # over name-load! str-buf-trace!
    # elab-ctx@ ctx-is-empty? if(
    #     drop,
    #     " (" str-trace! ctx-trace! ")" str-trace!
    # )
    # " : " str-trace!
    # type-trace-sig! trace-ln!

    tstack-enter!
    name-sig? sig-push-inputs!
    dup name-word@ word-body@ typecheck-run!
    name-sig? sig-match-outputs!
    # FIXME: sig-effects
    tstack-leave!
    drop)

def(typecheck-word-sig!, Token --,

    sig-has-dashes? if(
        typecheck-sig-inputs! token-succ
        typecheck-sig-outputs!,
        typecheck-sig-outputs!
    ))

def(typecheck-sig-inputs!, Token -- Token,
    while(token-is-dashes? not,
        dup typecheck-sig-input-token!
        token-succ))

def(typecheck-sig-outputs!, Token --,
    while(token-is-arg-end? not,
        dup typecheck-sig-output-token!
        token-succ)
    drop)

def(typecheck-sig-input-token!, Token --,
    sig-token-is-type-con? if(
        token-name? name-is-type? nip if(
            drop,
            "Unknown type" emit-error!
        ),

    sig-token-is-type-var? if(
        drop, # TODO: register variable?

        "Unexpected token in type sig" emit-error!
    )))

def(typecheck-sig-output-token!, Token --,
    sig-token-is-type-con? if(
        token-name? name-is-type? nip if(
            drop,
            "Unknown type" emit-error!
        ),

    sig-token-is-type-var? if(
        drop, # TODO: register variable?

    sig-token-is-effect-con? if(
        drop, # TODO: check if effect exists

        "Unexpected token in type sig" emit-error!
    ))))


def(typecheck-buffer!, Name --,
    drop) # FIXME: check the type

def(typecheck-run!, Token --,
    while(token-is-arg-end? not,
        dup typecheck-run-one!
        token-next)
    drop)

def(typecheck-run-one!, Token --,
    dup typecheck-token!
    dup elab-token!

    token-type? TOKEN_INT = if(
        0 1 tstack-arity-check!
        token-args-0
        TYPE_INT tstack-push!,

    token-type? TOKEN_STR = if(
        0 1 tstack-arity-check!
        token-args-0
        TYPE_PTR tstack-push!,

    token-type? TOKEN_NAME = if(
        token-name? typecheck-run-name!,

        "Unexpected token type." emit-fatal-error!
    ))))

def(typecheck-run-name!, Token Name --,
    name-is-prim? if(
        drop typecheck-run-prim!,

    name-is-word? if(
        over token-args-0
        name-sig@ sig-apply!,

    name-is-external? if(
        over token-args-0
        name-sig@ sig-apply!,

    name-is-buffer? if(
        drop token-args-0
        TYPE_PTR tstack-push!,

        drop
        "Don't know how to typecheck token." emit-fatal-error!
    )))))

def(typecheck-run-prim!, Token --,
    token-name? Name->Prim
    dup PRIM_ID = if(
        drop token-args-0,

    dup PRIM_DUP = if(
        drop 1 2 tstack-arity-check! token-args-0
        tstack-pop! dup tstack-push2!,

    dup PRIM_DROP = if(
        drop 1 0 tstack-arity-check! token-args-0
        tstack-pop! drop,

    dup PRIM_SWAP = if(
        drop 2 2 tstack-arity-check! token-args-0
        tstack-pop2! swap tstack-push2!,

    dup PRIM_DIP = if(
        drop 1 1 tstack-arity-check! token-args-1
        tstack-pop! swap typecheck-run! tstack-push!,

    dup PRIM_IF = if(
        drop 1 0 tstack-arity-check! dup token-args-2
        tstack-pop! drop # FIXME: check that it's TYPE_BOOL
        tstack-frame-dup!
        dip(typecheck-run!)
        tstack-frame-stash!
        typecheck-run!
        tstack-frame-unify!
        drop,

    dup PRIM_WHILE = if(
        drop 0 0 tstack-arity-check! dup token-args-2
        # FIXME: check that tstack top is TYPE_BOOL
        tstack-frame-dup!
        tstack-frame-stash!
        dip(typecheck-run!
            tstack-pop! drop
            tstack-frame-unify!)
        tstack-frame-dup!
        tstack-frame-stash!
        typecheck-run!
        tstack-frame-unify!
        drop,

    dup PRIM_INT_ADD = if(
        drop 2 1 tstack-arity-check! token-args-0
        tstack-pop2! elab+ tstack-push!,
    dup PRIM_INT_SUB = if(
        drop 2 1 tstack-arity-check! token-args-0
        tstack-pop2! elab- tstack-push!,
    dup PRIM_INT_MUL = if(
        drop 2 1 tstack-arity-check! token-args-0
        tstack-pop2! elab* tstack-push!,
    dup PRIM_INT_DIV = if(
        drop 2 1 tstack-arity-check! token-args-0
        tstack-pop2! elab/ tstack-push!,
    dup PRIM_INT_MOD = if(
        drop 2 1 tstack-arity-check! token-args-0
        tstack-pop2! elab% tstack-push!,
    dup PRIM_INT_EQ = if(
        drop 2 1 tstack-arity-check! token-args-0
        tstack-pop2! elab= tstack-push!,
    dup PRIM_INT_LT = if(
        drop 2 1 tstack-arity-check! token-args-0
        tstack-pop2! elab= tstack-push!,
    dup PRIM_INT_LE = if(
        drop 2 1 tstack-arity-check! token-args-0
        tstack-pop2! elab= tstack-push!,
    dup PRIM_INT_AND = if(
        drop 2 1 tstack-arity-check! token-args-0
        tstack-pop2! elab& tstack-push!,
    dup PRIM_INT_OR = if(
        drop 2 1 tstack-arity-check! token-args-0
        tstack-pop2! elab& tstack-push!,
    dup PRIM_INT_XOR = if(
        drop 2 1 tstack-arity-check! token-args-0
        tstack-pop2! elab& tstack-push!,
    dup PRIM_INT_SHL = if(
        drop 2 1 tstack-arity-check! token-args-0
        tstack-pop2! elab& tstack-push!,
    dup PRIM_INT_SHR = if(
        drop 2 1 tstack-arity-check! token-args-0
        tstack-pop2! elab& tstack-push!,

    dup PRIM_MEM_GET = if(
        drop 1 1 tstack-arity-check! token-args-0
        tstack-pop! elab@ tstack-push!,
    dup PRIM_MEM_GET_BYTE = if(
        drop 1 1 tstack-arity-check! token-args-0
        tstack-pop! elab@ tstack-push!,
    dup PRIM_MEM_SET = if(
        drop 2 0 tstack-arity-check! token-args-0
        tstack-pop2! elab!,
    dup PRIM_MEM_SET_BYTE = if(
        drop 2 0 tstack-arity-check! token-args-0
        tstack-pop2! elab!,

    dup PRIM_MEM_GET_U8 = if(
        drop 1 1 tstack-arity-check! token-args-0
        tstack-pop! TYPE_PTR expect1 if(
            TYPE_U8, TYPE_ERROR
        ) tstack-push!,
    dup PRIM_MEM_GET_U16 = if(
        drop 1 1 tstack-arity-check! token-args-0
        tstack-pop! TYPE_PTR expect1 if(
            TYPE_U16, TYPE_ERROR
        ) tstack-push!,
    dup PRIM_MEM_GET_U32 = if(
        drop 1 1 tstack-arity-check! token-args-0
        tstack-pop! TYPE_PTR expect1 if(
            TYPE_U32, TYPE_ERROR
        ) tstack-push!,
    dup PRIM_MEM_GET_U64 = if(
        drop 1 1 tstack-arity-check! token-args-0
        tstack-pop! TYPE_PTR expect1 if(
            TYPE_U64, TYPE_ERROR
        ) tstack-push!,
    dup PRIM_MEM_GET_I8 = if(
        drop 1 1 tstack-arity-check! token-args-0
        tstack-pop! TYPE_PTR expect1 if(
            TYPE_I8, TYPE_ERROR
        ) tstack-push!,
    dup PRIM_MEM_GET_I16 = if(
        drop 1 1 tstack-arity-check! token-args-0
        tstack-pop! TYPE_PTR expect1 if(
            TYPE_I16, TYPE_ERROR
        ) tstack-push!,
    dup PRIM_MEM_GET_I32 = if(
        drop 1 1 tstack-arity-check! token-args-0
        tstack-pop! TYPE_PTR expect1 if(
            TYPE_I32, TYPE_ERROR
        ) tstack-push!,
    dup PRIM_MEM_GET_I64 = if(
        drop 1 1 tstack-arity-check! token-args-0
        tstack-pop! TYPE_PTR expect1 if(
            TYPE_I64, TYPE_ERROR
        ) tstack-push!,

    dup PRIM_MEM_SET_U8 = if(
        drop 1 1 tstack-arity-check! token-args-0
        tstack-pop2! TYPE_U8 TYPE_PTR expect2 drop,
    dup PRIM_MEM_SET_U16 = if(
        drop 1 1 tstack-arity-check! token-args-0
        tstack-pop2! TYPE_U16 TYPE_PTR expect2 drop,
    dup PRIM_MEM_SET_U32 = if(
        drop 1 1 tstack-arity-check! token-args-0
        tstack-pop2! TYPE_U32 TYPE_PTR expect2 drop,
    dup PRIM_MEM_SET_U64 = if(
        drop 1 1 tstack-arity-check! token-args-0
        tstack-pop2! TYPE_U64 TYPE_PTR expect2 drop,
    dup PRIM_MEM_SET_I8 = if(
        drop 1 1 tstack-arity-check! token-args-0
        tstack-pop2! TYPE_I8 TYPE_PTR expect2 drop,
    dup PRIM_MEM_SET_I16 = if(
        drop 1 1 tstack-arity-check! token-args-0
        tstack-pop2! TYPE_I16 TYPE_PTR expect2 drop,
    dup PRIM_MEM_SET_I32 = if(
        drop 1 1 tstack-arity-check! token-args-0
        tstack-pop2! TYPE_I32 TYPE_PTR expect2 drop,
    dup PRIM_MEM_SET_I64 = if(
        drop 1 1 tstack-arity-check! token-args-0
        tstack-pop2! TYPE_I64 TYPE_PTR expect2 drop,

    dup PRIM_POSIX_EXIT = if(
        drop 1 0 tstack-arity-check! token-args-0
        tstack-pop! elab-posix-exit,
    dup PRIM_POSIX_READ = if(
        drop 3 1 tstack-arity-check! token-args-0
        tstack-pop3! elab-posix-read tstack-push!,
    dup PRIM_POSIX_WRITE = if(
        drop 3 0 tstack-arity-check! token-args-0
        tstack-pop3! elab-posix-write,
    dup PRIM_POSIX_OPEN = if(
        drop 3 1 tstack-arity-check! token-args-0
        tstack-pop3! elab-posix-open tstack-push!,
    dup PRIM_POSIX_CLOSE = if(
        drop 1 1 tstack-arity-check! token-args-0
        tstack-pop! elab-posix-close tstack-push!,
    dup PRIM_POSIX_MMAP = if(
        drop 6 1 tstack-arity-check! token-args-0
        tstack-pop3! dip(dip(dip(tstack-pop3!)))
        elab-posix-mmap tstack-push!, # not always a pointer...

    dup PRIM_DEBUG = if(
        drop token-args-0,
    dup PRIM_MIRTH_REVISION = if(
        drop 0 1 tstack-arity-check! token-args-0
        TYPE_INT tstack-push!,
    dup PRIM_RUNNING_OS = if(
        drop 0 1 tstack-arity-check! token-args-0
        TYPE_INT tstack-push!,

        drop "Unknown primitive" emit-error!
    ))))))))))))))))))))))))))))))))))))))))))))))))))

def(tstack-arity-check!, Token Int Int -- Token +TSTACK,
    dip(dip(tstack-len@))
    dip(-) over tstack-base@ < if(
        drop2
        dup "Stack underflow." emit-error!, # FIXME: upgrade to error

        + TSTACK_SIZE > if(
            "compiler error: tstack overflow." emit-fatal-error! 0,

            id
        )
    ))

#############
# Type Sigs #
#############

def(token-is-dashes, Token -- Bool,
    token-type? TOKEN_NAME = if(
        token-name@ PRIM_DASHES Prim->Name =,
        drop 0
    ))

def(token-is-dashes?, Token -- Token Bool,
    dup token-is-dashes)

def(sig-is-stack-end?, Token -- Token Bool,
    token-is-dashes? if(
        1,
        token-run-end?
    ))

def(sig-has-dashes, Token -- Bool,
    while(sig-is-stack-end? not, token-next)
    token-is-dashes)

def(sig-has-dashes?, Token -- Token Bool,
    dup sig-has-dashes)

def(sig-arity, Token -- Int Int,
    sig-has-dashes? if(
        sig-count-types
        token-next
        sig-count-types
        drop,

        dip(0)
        sig-count-types
        drop
    ))

def(sig-count-types, Token -- Int Token,
    dip(0)
    while(sig-is-stack-end? not,
        sig-token-is-type? if(dip(1+), id)
        token-next
    ))

def(sig-token-is-type?, Token -- Token Bool,
    token-type? TOKEN_NAME = if(
        token-name? name-could-be-type,
        0
    ))

def(sig-token-is-type-con?, Token -- Token Bool,
    token-type? TOKEN_NAME = if(
        token-name? name-could-be-type-con,
        0
    ))

def(sig-token-is-type-var?, Token -- Token Bool,
    token-type? TOKEN_NAME = if(
        token-name? name-could-be-type-var,
        0
    ))

def(sig-token-is-stack-var?, Token -- Token Bool,
    token-type? TOKEN_NAME = if(
        token-name? name-could-be-stack-var,
        0
    ))

def(sig-token-is-effect-con?, Token -- Token Bool,
    token-type? TOKEN_NAME = if(
        token-name? name-could-be-effect-con,
        0
    ))

def(sig-push-inputs!, Token -- +TSTACK,
    sig-has-dashes? if(
        while(sig-is-stack-end? not,
            sig-token-is-type-con? if(
                token-name? name-is-type? if(
                    name-type@ tstack-push!,
                    drop TYPE_ERROR tstack-push!
                ),

            sig-token-is-type-var? if(
                TYPE_ERROR # FIXME: push rigid type var and
                           # register it in context.
                tstack-push!,

                "Expected type."
                emit-fatal-error! 0 Int->Token
            ))
            token-next
        ) drop,

        drop
    ))

def(sig-skip-dashes, Token -- Token,
    sig-has-dashes? if(
        while(token-is-dashes? not, token-next) token-next,
        id
    ))

def(sig-match-outputs!, Token -- +TSTACK,
    dup sig-arity nip dup
    tstack-length? = if(
        drop
        sig-skip-dashes
        sig-match-outputs-aux,

        swap token-location location-trace!
        ": error: Expected " str-trace!
        int-trace!
        " outputs, but got " str-trace!
        tstack-length? int-trace!
        " outputs." str-trace-ln!
        1 posix-exit!
    ))

def(sig-match-outputs-aux, Token -- +TSTACK,
    token-is-arg-end? if(
        drop,

        dup token-next sig-match-outputs-aux
        sig-token-is-type-con? if(
            dup elab-token!
            token-name@ name-type@
            tstack-pop! swap expect1 drop,

        sig-token-is-type-var? if(
            tstack-pop! drop2, # TODO
            drop
        ))
    ))

def(sig-apply!, Token Token -- +TSTACK,
    dup2 sig-pop-inputs! sig-push-outputs!)

def(sig-pop-inputs!, Token Token -- +TSTACK,
    dip(elab-token!)
    sig-has-dashes? if(
        sig-pop-inputs-aux!,
        drop
    ))

def(sig-pop-inputs-aux!, Token -- +TSTACK,
    token-is-dashes? if(
        drop,

        dup token-next
        sig-pop-inputs-aux!
        tstack-empty? if(
            "Stack underflow" elab-emit-fatal-error!
            drop,

        sig-token-is-type-con? if(
            token-name@ name-type@
            tstack-pop! swap expect1 drop,

        sig-token-is-type-var? if(
            tstack-pop! drop2,
            # TODO: "define" the type variable

            tstack-pop! drop2
            # error in type sig, but it's caught elsewhere
        )))
    ))

def(sig-push-outputs!, Token Token -- +TSTACK,
    dip(elab-token!)
    sig-skip-dashes
    while(token-is-arg-end? not,
        sig-token-is-type-con? if(
            token-name? name-type@ tstack-push!,

        sig-token-is-type-var? if(
            TYPE_ERROR tstack-push!, # TODO

        sig-token-is-effect-con? if(
            id, # TODO

            # unknown, but error is caught elsewhere
            TYPE_ERROR tstack-push!
        )))
        token-next)
    drop)


# elab type for + primitive
def(elab+, Type Type -- Type,
    dup TYPE_ERROR = if(
        drop2 TYPE_ERROR,

    dup TYPE_INT = if(
        drop
        dup TYPE_ERROR = if(
            drop TYPE_ERROR,
        dup TYPE_INT = if(
            drop TYPE_INT,
        dup TYPE_PTR = if(
            drop TYPE_PTR,
            drop TYPE_ERROR
            "attempted to add int to unknown type" elab-emit-error!
        ))),

    dup TYPE_PTR = if(
        drop
        dup TYPE_ERROR = if(
            drop TYPE_ERROR,
        dup TYPE_INT = if(
            drop TYPE_PTR,
        dup TYPE_PTR = if(
            drop
            "attempted to add two pointers" elab-emit-error!
            TYPE_ERROR,

            drop
            "attempted to add pointer to unknown type" elab-emit-error!
            TYPE_ERROR
        ))),

        drop
        dup TYPE_ERROR = if(
            drop TYPE_ERROR,
        dup TYPE_INT = if(
            drop
            "attempted to add unkwown type to int" elab-emit-error!
            TYPE_ERROR,
        dup TYPE_PTR = if(
            drop
            "attempted to add unkwown type to pointer" elab-emit-error!
            TYPE_ERROR,

            drop
            "attempted to add two unknown types" elab-emit-error!
            TYPE_ERROR
        )))
    ))))

# elab type for - primitive
def(elab-, Type Type -- Type,
    dup TYPE_ERROR = if(
        drop2 TYPE_ERROR,

    dup TYPE_INT = if(
        drop
        dup TYPE_ERROR = if(
            drop TYPE_ERROR,

        dup TYPE_INT = if(
            drop TYPE_INT,
        dup TYPE_PTR = if(
            drop TYPE_PTR,
            "attempted to subtract int from unknown type" elab-emit-error!
            drop TYPE_ERROR
        ))),

    dup TYPE_PTR = if(
        drop
        dup TYPE_ERROR = if(
            drop TYPE_ERROR,
        dup TYPE_INT = if(
            "attempted to subtract pointer from int" elab-emit-error!
            drop TYPE_ERROR,
        dup TYPE_PTR = if(
            "subtracting two pointers is dangerous" elab-emit-warning!
            drop TYPE_INT,
            "attempted to subtract pointer from unknown type" elab-emit-error!
            drop TYPE_ERROR
        ))),

        drop
        dup TYPE_ERROR = if(
            drop TYPE_ERROR,
        dup TYPE_INT = if(
            "attempted to subtract unknown type from int" elab-emit-error!
            drop TYPE_ERROR,
        dup TYPE_PTR = if(
            "attempted to subtract unknown type from ptr" elab-emit-error!
            drop TYPE_ERROR,
            "attempted to subtract two unknown types" elab-emit-error!
            drop TYPE_ERROR
        )))
    ))))

# elab for * primitive
def(elab*, Type Type -- Type,
    dup TYPE_ERROR = if(
        drop2 TYPE_ERROR,

    dup TYPE_INT = if(
        drop
        dup TYPE_ERROR = if(
            drop TYPE_ERROR,
        dup TYPE_INT = if(
            drop TYPE_INT,
            "attempted to multiply int with unknown type" elab-emit-error!
            drop TYPE_ERROR
        )),

        drop
        dup TYPE_ERROR = if(
            drop TYPE_ERROR,

        dup TYPE_INT = if(
            "attempted to multiply unknown type with int" elab-emit-error!
            drop TYPE_ERROR,

            "attempted to multiply unknown types" elab-emit-error!
            drop TYPE_ERROR
        ))
    )))

# elab for / primitive
def(elab/, Type Type -- Type,
    dup TYPE_ERROR = if(
        drop2 TYPE_ERROR,

    dup TYPE_INT = if(
        drop
        dup TYPE_ERROR = if(
            drop TYPE_ERROR,
        dup TYPE_INT = if(
            drop TYPE_INT,
            "attempted to divide unknown type from int" elab-emit-error!
            drop TYPE_ERROR
        )),

        drop
        dup TYPE_ERROR = if(
            drop TYPE_ERROR,

        dup TYPE_INT = if(
            "attempted to divide int from unknown type" elab-emit-error!
            drop TYPE_ERROR,

            "attempted to divide unknown types" elab-emit-error!
            drop TYPE_ERROR
        ))
    )))

# elab type for % primitive
def(elab%, Type Type -- Type,
    dup TYPE_ERROR = if(
        drop2 TYPE_ERROR,

    dup TYPE_INT = if(
        drop
        dup TYPE_ERROR = if(
            drop TYPE_ERROR,

        dup TYPE_INT = if(
            drop TYPE_INT,
        dup TYPE_PTR = if(
            drop TYPE_INT,
            "attempted to modulo int from unknown type" elab-emit-error!
            drop TYPE_ERROR
        ))),

    dup TYPE_PTR = if(
        drop
        dup TYPE_ERROR = if(
            drop TYPE_ERROR,
        dup TYPE_INT = if(
            "attempted to modulo pointer from int" elab-emit-error!
            drop TYPE_ERROR,
        dup TYPE_PTR = if(
            "attempted to module two pointers" elab-emit-error!
            drop TYPE_ERROR,
            "attempted to modulo pointer from unknown type" elab-emit-error!
            drop TYPE_ERROR
        ))),

        drop
        dup TYPE_ERROR = if(
            drop TYPE_ERROR,
        dup TYPE_INT = if(
            "attempted to modulo unknown type from int" elab-emit-error!
            drop TYPE_ERROR,
        dup TYPE_PTR = if(
            "attempted to modulo unknown type from ptr" elab-emit-error!
            drop TYPE_ERROR,
            "attempted to modulo two unknown types" elab-emit-error!
            drop TYPE_ERROR
        )))
    ))))

# elab for =, <, <= primitives
def(elab=, Type Type -- Type,
    dup TYPE_ERROR = if(
        drop2 TYPE_ERROR,
        expect1 drop TYPE_INT
    ))

# elab for &, ^, | primitives
def(elab&, Type Type -- Type,
    dup TYPE_ERROR = if(
        drop2 TYPE_ERROR,

    dup TYPE_INT = if(
        drop
        dup TYPE_ERROR = if(
            drop TYPE_ERROR,
        dup TYPE_INT = if(
            drop TYPE_INT,
            "attempted to use bitwise operation between unknown type and int" elab-emit-error!
            drop TYPE_ERROR
        )),

        drop
        dup TYPE_ERROR = if(
            drop TYPE_ERROR,

        dup TYPE_INT = if(
            "attempted to use bitwise operation between int and unknown type" elab-emit-error!
            drop TYPE_ERROR,

            "attempted to use bitwise operation on unknown types" elab-emit-error!
            drop TYPE_ERROR
        ))
    )))

# elab for @ primitive
def(elab@, Type -- Type,
    dup TYPE_ERROR = if(
        drop TYPE_ERROR,

    dup TYPE_PTR = if(
        drop TYPE_INT,

        "attempted to load from non-pointer" elab-emit-error!
        drop TYPE_ERROR
    )))

def(elab!, Type Type --,
    dup TYPE_ERROR = if(
        drop2,

    dup TYPE_PTR = if(
        drop
        dup TYPE_ERROR = if(
            drop,

        dup TYPE_INT = if(
            drop,

            "attempted to store unknown type" elab-emit-error!
            drop
        )),

        drop2
        "attempted to store to non-pointer" elab-emit-error!
    )))

def(elab-posix-exit, Type -- +Elab,
    TYPE_INT expect1 drop) # TODO: set absurd flag

def(elab-posix-read, Type Type Type -- Type +Elab,
    TYPE_INT TYPE_PTR TYPE_INT expect3
    if(TYPE_INT, TYPE_ERROR))

def(elab-posix-write, Type Type Type -- +Elab,
    TYPE_INT TYPE_PTR TYPE_INT expect3 drop)

def(elab-posix-open, Type Type Type -- Type +Elab,
    TYPE_PTR TYPE_INT TYPE_INT expect3
    if(TYPE_INT, TYPE_ERROR))

def(elab-posix-close, Type -- Type +Elab,
    TYPE_INT expect1 if(TYPE_INT, TYPE_ERROR))

def(elab-posix-mmap, Type Type Type Type Type Type -- Type +Elab,
    TYPE_INT TYPE_INT TYPE_INT expect3 if(
        TYPE_PTR TYPE_INT TYPE_INT expect3 if(
            TYPE_PTR,
            TYPE_ERROR
        ),
        drop3 TYPE_ERROR
    )) # TODO: improve diagnostics

def(expect1, Type Type -- Bool +Elab,
    over TYPE_ERROR = if(
        drop2 0,
    dup2 = if(
        drop2 1,
        drop2 0
        "type error" elab-emit-error!
        # TODO: improve diagnostics
    )))

def(expect2, Type Type Type Type -- Bool +Elab,
    dip(swap) expect1 if(expect1, drop2 0)
    ) # TODO: improve diagnostics

def(expect3, Type Type Type Type Type Type -- Bool +Elab,
    dip(rotl) expect1 if(
        expect2,
        drop2 drop2 0
    )) # TODO: improve diagnostics
