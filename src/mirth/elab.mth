module(mirth.elab)

import(prelude)
import(platform.posix)
import(data.str)
import(data.lazy)
import(data.list)
import(data.maybe)
import(data.path)
import(mirth.data.name)
import(mirth.data.def)
import(mirth.data.token)
import(mirth.data.type)
import(mirth.data.data)
import(mirth.data.ctx)
import(mirth.data.external)
import(mirth.data.word)
import(mirth.data.var)
import(mirth.data.buffer)
import(mirth.data.variable)
import(mirth.data.constant)
import(mirth.data.table)
import(mirth.data.var)
import(mirth.data.arrow)
import(mirth.data.word)
import(mirth.data.prim)
import(mirth.data.module)
import(mirth.data.alias)
import(mirth.data.match)
import(mirth.lexer)
import(mirth.codegen)

####################
# Type Elaboration #
####################

data(TypeElab, TYPE_ELAB -> Bool Ctx)
def(type-elab-default, TypeElab, F CTX0 TYPE_ELAB)
def(type-elab-stack-assertion, Ctx -- TypeElab, dip(T) TYPE_ELAB)
def(type-elab-holes-allowed, TypeElab -- Bool, TYPE_ELAB -> drop)
def(type-elab-ctx, TypeElab -- Ctx, TYPE_ELAB -> nip)
def(type-elab-ctx?, TypeElab -- TypeElab Ctx, dup type-elab-ctx)
def(type-elab-ctx-replace, TypeElab Ctx -- TypeElab,
    swap match(TYPE_ELAB -> drop swap TYPE_ELAB))

def(elab-type-sig!, TypeElab Token -- TypeElab ArrowType Token,
    dup run-end? then(dup "expected type signature" emit-error!)
    elab-type-sig-params! dip(swap)
    elab-type-stack! dip(swap)
    dup sig-dashes? if(
        next elab-type-stack! dip(swap),
        dip(T0 rotr))
    dup run-end? else(dup "expected right paren or comma" emit-error!)
    dip(rot4r dip(swap for(T*)) T->))

def(elab-type-sig-params!, TypeElab Token -- TypeElab List(Type) Token,
    dup lparen? .if(
        dup next dip(
            L0 rotr args
            for(elab-type-sig! drop ArrowType>Type swap dip(snoc))
            swap
        ),
        L0 swap
    ))

def(elab-type-stack!, TypeElab Token -- TypeElab StackType Token,
    dup sig-stack-var? if(
        elab-stack-var! dip(STVar),
        dip(T0)
    )
    elab-type-stack-rest!)

def(elab-type-stack-rest!, TypeElab StackType Token -- TypeElab StackType Token,
    while(dup sig-stack-end2? not,
        swap dip(elab-type-atom!) swap
        dip(swap T*)
    ))

def(elab-type-arg!, TypeElab Token -- TypeElab Type Token,
    elab-type-atom!
    dup arg-end? if(
        id,
        "Unexpected token after type." emit-fatal-error!
    ))

def(elab-type-atom!, TypeElab Token -- TypeElab Type Token,
    # TODO: handle Mut sugar
    dup sig-type-var? if(
        elab-type-var! dip(TVar),

    dup sig-type-con? if(
        elab-type-con!,

    dup pat-underscore? if(
        elab-type-dont-care!,

    dup sig-type-hole? if(
        elab-type-hole!,

    dup lsquare? .if(
        elab-type-quote!,

        dup "Expected type, got unknown token." emit-error!
        dip(TYPE_ERROR) next
    ))))))

def(elab-stack-var!, TypeElab Token -- TypeElab Var Token,
    TYPE_STACK elab-implicit-var!)

def(elab-type-var!, TypeElab Token -- TypeElab Var Token,
    TYPE_TYPE elab-implicit-var!)

def(elab-implicit-var!, TypeElab Token Type -- TypeElab Var Token,
    dip2(type-elab-ctx?) over
    dip2(name? unwrap dup2 swap lookup)
    rotl match(
        SOME ->
            rotr dip2(nip dup type)
            elab-type-unify! nip,
        NONE ->
            dip(
                swap Var.new!
                sip(Ctx.new)
            )
    )
    next
    dip2(type-elab-ctx-replace))

def(elab-type-con!, TypeElab Token -- TypeElab Type Token,
    dup name? unwrap >Str "Mut" = if(
        tuck args-1 elab-type-arg! drop TMut
        rotl next,

        dup name? unwrap >Def match(
            DEF_TYPE ->
                over num-args
                over arity = if(
                    elab-type-args!,

                    drop dup
                    "Wrong number of arguments for type." emit-error!
                    TYPE_ERROR
                ),
            DEF_NONE ->
                dup "Unknown type." emit-error! TYPE_ERROR,
            _ ->
                drop dup "Not a type." emit-error! TYPE_ERROR
        )
        swap next
    ))

def(elab-type-args!, TypeElab Token Type -- TypeElab Token Type,
    over has-args? if(
        dip(tuck) swap succ
        while(dup args-end? not,
            succ swap
            dip(elab-type-arg!) swap
            dip(swap TApp))
        drop dip(swap),

        id
    ))

def(elab-type-hole!, TypeElab Token -- TypeElab Type Token,
    over type-elab-holes-allowed if(
        dup args-0
        dup name? unwrap THole
        swap next,
        "type holes are not allowed here" emit-fatal-error!
    ))

def(elab-type-dont-care!, TypeElab Token -- TypeElab Type Token,
    over type-elab-holes-allowed if(
        dup args-0
        TYPE_DONT_CARE
        swap next,
        "underscore is not allowed here" emit-fatal-error!
    ))

def(elab-type-quote!, TypeElab Token -- TypeElab Type Token,
    args-1 dup sig-has-dashes? if(
        elab-type-sig! dip(>Type),
        elab-type-stack! dip(>Type)
    ) next)

def(elab-type-unify!, Type Type Token -- Type Token,
    sip(GAMMA rotr unify! nip))
def(elab-stack-type-unify!, StackType StackType Token -- StackType Token,
    sip(GAMMA rotr unify! nip))

def(elab-simple-type-arg!, Token -- Type,
    dip(type-elab-default) elab-type-arg! drop nip)

####################
# Word Elaboration #
####################

# AB = Arrow Builder = Arrow Elaborator
var(ab-home, Maybe(Word))
var(ab-homeidx, Int)
var(ab-arrow, Arrow)
def(ab-ctx, Mut(Ctx), ab-arrow @ ~ctx)
def(ab-token, Mut(Token), ab-arrow @ ~token-end)
def(ab-type, Mut(StackType), ab-arrow @ ~cod)

def(init-elab!, --,
    Arrow.nil ab-arrow !)

def(ab-save!(f), (*a -- *b) *a -- *b,
    ab-arrow @ dip(f) ab-arrow !)

def(ab-build!(f), (*a -- *b) *a Ctx StackType Token -- *b Arrow,
    ab-save!(
        Arrow.alloc!
        ab-home @ over ~home !
        ab-homeidx @ over ~homeidx !
        ab-homeidx modify(1+)
        tuck dup2 ~token-start ! ~token-end !
        tuck dup2 ~dom ! ~cod !
        tuck ~ctx !
        L0 over ~atoms !
        ab-arrow !
        f
        ab-arrow @
    ))

||| Like ab-build! but takes a morphism type to build
||| instead of just the domain. The codomain is placed
||| on the stack for (in)convenience. (You can ignore it with dip.)
def(ab-build-hom!(f), (*a StackType -- *b StackType) *a Ctx ArrowType Token -- *b Arrow,
    dip(unpack rotr)
    ab-build!(f ab-unify-type!))
def(ab-build-word-arrow!(f), (*a StackType -- *b StackType) *a Word -- *b Arrow,
    dup SOME ab-home ! 0 ab-homeidx !
    sip(elab-word-ctx-type-weak!)
    body ab-build-hom!(f)
    NONE ab-home !)
def(ab-build-word!(f), (*a -- *b) *a Word -- *b Word,
    sip(ab-build-word-arrow!(dip(f)) ready)
    tuck ~arrow !)

def(ab-unify-type!, StackType --,
    dip(ab-token @ GAMMA ab-type @) unify! ab-type ! drop)

def(ab-atom!, Atom --,
    dup token ab-token !
    # atom-dom? ab-unify-type!     # moved to ab-expand-opsig!
        # ^ a sanity check to make sure
        # atom dom matches ab-arrow cod
    dup cod ab-type !
    dip(ab-arrow @ atoms)
    ab-optimized-snoc!
    ab-arrow @ ~atoms !)

||| Add an atom to a list of atoms ... smartly.
def(ab-optimized-snoc!, List(Atom) Atom -- List(Atom),
    while(dip?(atoms-has-last-block?) and(atom-accepts-args?),
        swap atoms-turn-last-block-to-arg swap)
    snoc)

def(atom-accepts-args?, Atom -- Atom Bool,
    dup op match(
        OP_WORD -> dip(dup args len) type max-num-params <,
        OP_PRIM ->
            match(
                PRIM_CORE_RUN -> dup args len 1 <, # this one's dubious
                PRIM_CORE_DIP -> dup args len 1 <,
                PRIM_CORE_IF -> dup args len 2 <,
                PRIM_CORE_WHILE -> dup args len 2 <,
                _ -> drop F
            ),
        _ -> drop F
    ))

def(atoms-has-last-block?, List(Atom) -- List(Atom) Bool,
    dup last match(
        NONE -> F,
        SOME ->
            op match(
                OP_BLOCK -> drop T,
                _ -> drop F
            )
    ))

def(atoms-turn-last-block-to-arg, Atom List(Atom) -- Atom List(Atom),
    >List+ match(
        NONE -> L0,
        SOME ->
            unsnoc dup op match(
                OP_BLOCK ->
                    { Atom List(Atom) Atom Block }
                    dip(cod rotl tuck ~dom !)
                    { List(Atom) Atom Block }
                    ARG_BLOCK over add-arg-left!
                    swap,
                _ -> drop snoc
            )
    ))

def(block-to-run-var, Block -- Maybe(Var),
    arrow arrow-to-run-var)

def(arrow-to-run-var, Arrow -- Maybe(Var),
    atoms match(
        L1 -> atom-to-run-var,
        _ -> drop NONE
    ))

def(atom-to-run-var, Atom -- Maybe(Var),
    op match(
        OP_VAR -> dup auto-run? if(SOME, drop NONE),
        _ -> drop NONE
    ))

def(ab-op!, Op --,
    Atom.alloc!
    ab-ctx @ over ~ctx !
    ab-token @ over ~token !
    dup2 ~op !
    swap elab-op-fresh-sig!
    dip(over ~subst !)
    ab-expand-opsig!
    dip(over ~dom !) over ~cod !
    L0 over ~args !
    ab-atom!)

def(ab-expand-opsig!, OpSig -- StackType StackType,
    OPSIG_ID -> ab-type @ dup,
    OPSIG_PUSH -> dip(ab-type @ dup) STCons,
    OPSIG_APPLY ->
        dip(ab-type @) unpack
        dip(ab-token @ elab-stack-type-unify! drop))

def(ab-int!, Int --, OP_INT ab-op!)
def(ab-str!, Str --, OP_STR ab-op!)
def(ab-buffer!, Buffer --, OP_BUFFER ab-op!)
def(ab-variable!, Variable --, OP_VARIABLE ab-op!)
def(ab-constant!, Constant --, OP_CONSTANT ab-op!)
def(ab-field!, Field --, OP_FIELD ab-op!)
def(ab-var!, Var --, OP_VAR ab-op!)
def(ab-tag!, Tag --, OP_TAG ab-op!)
def(ab-prim!, Prim --,
    dup ~type mut-is-set if(
        OP_PRIM ab-op!,
        ab-token @ "prim does not have type" emit-fatal-error!
    ))
def(ab-word!, Word --, OP_WORD ab-op!)
def(ab-external!, External --, OP_EXTERNAL ab-op!)

def(ab-block-at!(f), (*a -- *b) *a Token -- *b,
    ab-ctx @ MetaVar.new! STMeta rotl ab-build!(f)
    Block.new! OP_BLOCK ab-op!)

def(ab-block!(f), (*a -- *b) *a -- *b,
    ab-token @ ab-block-at!(f))

def(ab-dip!(f), (*a -- *b) *a -- *b,
    ab-block!(f) PRIM_CORE_DIP ab-prim!)

def(ab-if!(f,g), (*a -- *b, *b -- *c) *a -- *c,
    ab-block!(f) ab-block!(g) PRIM_CORE_IF ab-prim!)

def(ab-while!(f,g), (*a -- *b, *b -- *c) *a -- *c,
    ab-block!(f) ab-block!(g) PRIM_CORE_WHILE ab-prim!)

def(ab-lambda!(f), (*a -- *b) *a List(Param) -- *b ,
    Lambda.alloc!
    ab-ctx @ over ~outer-ctx !
    ab-type @ over ~dom !
    ab-token @ over ~token !
    dup2 ~params !
    dip(ab-ctx @ ab-type @ rotl reverse-for(
        swap dip(>Var dup dip(Ctx.new))
        ab-token @ elab-expand-tensor!
        dip(rotl type) elab-type-unify! drop2
    ))
    tuck ~mid !
    tuck ~inner-ctx !

    { *a Lambda }

    dup inner-ctx
    over mid
    ab-token @
    ab-build!(
        dip(f)
        ab-type @ over ~cod !
    )
    over ~body !
    OP_LAMBDA ab-op!)

data(OpSig,
    OPSIG_ID,
    OPSIG_PUSH -> Type,
    OPSIG_APPLY -> ArrowType)

def(elab-op-fresh-sig!, Op -- Subst OpSig,
    Subst.nil swap match(
        OP_NONE -> OPSIG_ID,
        OP_INT -> VALUE_INT TValue OPSIG_PUSH,
        OP_STR -> VALUE_STR TValue OPSIG_PUSH,
        OP_BUFFER -> drop TYPE_PTR OPSIG_PUSH,
        OP_VARIABLE -> type TMut OPSIG_PUSH,
        OP_CONSTANT -> value TValue OPSIG_PUSH,
        OP_TAG -> type freshen-sig OPSIG_APPLY,
        OP_WORD -> type freshen-sig OPSIG_APPLY,
        OP_PRIM -> type freshen-sig OPSIG_APPLY,
        OP_EXTERNAL -> type freshen-sig OPSIG_APPLY,
        OP_FIELD -> type freshen-sig OPSIG_APPLY,
        OP_BLOCK -> elab-block-sig!,
        OP_VAR -> elab-var-sig!,
        OP_MATCH -> elab-match-sig!,
        OP_LAMBDA -> elab-lambda-sig!,
    ))

def(elab-block-sig!, Block -- OpSig,
    VALUE_BLOCK TValue OPSIG_PUSH)

def(elab-match-sig!, Match -- OpSig,
    sip(dom) cod T-> OPSIG_APPLY)

def(elab-lambda-sig!, Lambda -- OpSig,
    sip(dom) cod T-> OPSIG_APPLY)

def(elab-var-sig!, Var -- OpSig,
    dup auto-run? if(
        type morphism? unwrap semifreshen-sig OPSIG_APPLY,
        type OPSIG_PUSH
    ))

def(elab-word-ctx-type-weak!, Word -- Ctx ArrowType,
    dup sig match(
        NONE -> ~ctx-type @ match(
            LAZY_READY -> unpack2,
            _ -> drop CTX0 MetaVar.new! STMeta MetaVar.new! STMeta T->
        ),
        SOME -> drop ctx-type
    ))

def(elab-arrow!, Ctx ArrowType Token -- Arrow,
    dip(unpack) elab-arrow-hom!)

def(elab-arrow-hom!, Ctx StackType StackType Token -- Arrow,
    swap dip(
        elab-arrow-fwd!
        dup token-end GAMMA
        over cod
    )
    unify! drop2)

def(elab-arrow-fwd!, Ctx StackType Token -- Arrow,
    ab-build!(elab-atoms!))

def(elab-atoms!, --,
    while(
        elab-atoms-done? not,
        elab-atom! ab-token modify(next)
    ))

def(elab-atoms-done?, Bool,
    ab-token @ run-end?)

def(elab-atom!, --,
    ab-token @ value match(
        TOKEN_NAME -> elab-atom-name!,
        TOKEN_INT -> ab-int!,
        TOKEN_STR -> ab-str!,
        TOKEN_LSQUARE -> drop elab-atom-block!,
        TOKEN_LCURLY -> drop elab-atom-assert!,
        _ -> ab-token @ "Unexpected token in elab-atom!" emit-fatal-error!
    ))

def(elab-atom-block!, --,
    ab-token @ args-1 elab-block-at!)

def(elab-block-at!, Token --,
    ab-ctx @ swap Block.new-deferred! OP_BLOCK ab-op!)

def(elab-args!, --,
    ab-token @ args for(elab-block-at!))

def(elab-no-args!, --,
    ab-token @ args-0)

def(elab-atom-name!, Name --,
    dup ab-ctx @ lookup match(
        SOME -> nip elab-args! ab-var!,
        NONE ->
            elab-relativize-name!
            elab-check-name-visible!
            elab-atom-name-global!
    ))

def(elab-relativize-name!, Name -- Name,
    name-undefined? and(dup could-be-relative) if(
        ab-type @ top-tycon-name for(
            >Str over to-overload-suffix cat Name.search for(
                name-defined? if(
                    nip,
                    drop
                )
            )
        ),
        id
    ))

def(elab-check-name-visible!, Name -- Name,
    dup >Def >Module? for(
        dup elab-module-is-visible if(drop,
            "name not visible, must import " swap name >Str cat
            ab-token @ swap emit-error!)
    ))

def(elab-module-is-visible, Module -- Bool,
    ab-token @ .module visible)

def(elab-atom-name-global!, Name --,
    dup >Def match(
        DEF_ALIAS -> nip target elab-atom-name-global!,
        DEF_BUFFER -> nip elab-no-args! ab-buffer!,
        DEF_VARIABLE -> nip elab-no-args! ab-variable!,
        DEF_CONSTANT -> nip elab-no-args! ab-constant!,
        DEF_EXTERNAL -> nip elab-no-args! ab-external!,
        DEF_FIELD -> nip elab-no-args! ab-field!,
        DEF_WORD -> nip elab-args! ab-word!,
        DEF_TAG -> nip elab-args! ab-tag!,
        DEF_PRIM -> nip elab-prim!,
        _ ->
            # TODO emit error if stack isn't STACK_TYPE_ERROR
            drop
            dip(ab-token @ "Unknown word: ")
            >Str cat emit-error! STACK_TYPE_ERROR ab-type !
    ))

def(elab-prim!, Prim --,
    match(
        PRIM_CORE_MATCH -> elab-atom-match!,
        PRIM_CORE_LAMBDA -> elab-atom-lambda!,
        _ -> elab-args! ab-prim!
    ))

def(elab-atom-assert!, --,
    ab-token @ GAMMA
    ab-ctx @ type-elab-stack-assertion
    ab-token @ args-1 elab-type-stack!
    drop nip ab-type @ swap unify! drop2)

def(elab-atom-lambda!, --,
    Lambda.alloc!
    ab-ctx @ over ~outer-ctx !
    ab-type @ over ~dom !
    ab-token @ over ~token !
    elab-lambda!
    OP_LAMBDA ab-op!)

||| Elaborate a match body within AB. Takes the output stack type,
||| and the token for the body of the match, from the stack. Takes
||| the rest from the AB environment.
def(elab-match-at!, StackType Token --,
    Match.alloc!
    ab-ctx @ over ~ctx !
    ab-type @ over ~dom !
    ab-token @ over ~token !
    tuck ~body !
    tuck ~cod !
    elab-match-cases!
    elab-match-exhaustive!
    OP_MATCH ab-op!)

def(elab-atom-match!, --,
    MetaVar.new! STMeta
    ab-token @ args+ first+
    elab-match-at!)

def(elab-lambda!, Lambda -- Lambda,
    elab-lambda-params!
    elab-lambda-body!)

def(elab-expand-tensor!, StackType Token -- StackType Type Token,
    swap expand match(
        STACK_TYPE_ERROR -> dip(STACK_TYPE_ERROR TYPE_ERROR),
        STCons -> rotl,
        STMeta ->
            dip(MetaVar.new! STMeta
                MetaVar.new! TMeta
                dup2 T* >Type SOME)
            ~type? ! rotl,
        _ ->
            drop dup "expected tuple type" emit-error!
            dip(STACK_TYPE_ERROR TYPE_ERROR)
    ))

# def(elab-expand-morphism!, Type Token -- Type Type Token,
#     swap expand match(
#         TYPE_ERROR -> dip(TYPE_ERROR TYPE_ERROR),
#         TMorphism -> unpack rotl,
#         TMeta ->
#             dip(MetaVar.new! TMeta
#                 MetaVar.new! TMeta
#                 dup2 T-> SOME)
#             ~type? ! rotl,
#         _ ->
#             drop dup "expected block type" emit-error!
#             dip(TYPE_ERROR TYPE_ERROR)
#     ))

def(elab-lambda-pop-from-mid!, Lambda Token -- Lambda Type Token,
    dip(dup mid)
    elab-expand-tensor!
    dip2(over ~mid !))

def(token-is-lambda-param?, Token -- Token Bool,
    dup sig-type-var? if( # TODO use better named predicate than sig-type-var
        dup has-args? not,
    dup lsquare? .if(
        dup T
        dip(succ dup sig-type-var?) &&
        dip(succ dup rsquare? some?) &&
        nip,
        F
    )))

def(elab-lambda-params!, Lambda -- Lambda,
    L0 over ~params !
    dup outer-ctx over ~inner-ctx !
    dup dom over ~mid !
    dup token args-1
    while(token-is-lambda-param?, next)
    expect-token-arrow prev
    while(token-is-lambda-param?,
        elab-lambda-pop-from-mid! sip(
            dup sig-type-var? if(
                name? unwrap Var.new!,

                succ dip(expand dup morphism?) swap .if(
                    name? unwrap Var.new-auto-run!,

                    "block pattern on non-block argument" emit-fatal-error!
                )
            )
            dip(dup params) sip(Var>Param swap cons over ~params !)
            dip(dup inner-ctx) Ctx.new over ~inner-ctx !
        )
        prev)
    drop)

def(elab-lambda-body!, Lambda -- Lambda,
    dup token args-1
    while(token-is-lambda-param?, next) succ
    dip(dup mid dip(dup inner-ctx))
    elab-arrow-fwd!
    dup2 swap ~body !
    cod over ~cod !)

||| Check that match is exhaustive.
def(elab-match-exhaustive!, Match -- Match,
    dup is-exhaustive? else(
        dup token "Pattern match not exhaustive." emit-error!
    ))

||| Elaborate match cases.
def(elab-match-cases!, Match -- Match,
    L0 over ~cases !
    dup body
    while(dup rparen? not, elab-match-case!)
    drop)

||| Elaborate a single match case `pattern -> body ,`
def(elab-match-case!, Match Token -- Match Token,
    Case.alloc!
    dup2 ~token !
    swap dip(dup2 ~match !)
    elab-case-pattern!
    expect-token-arrow succ
    elab-case-body!
    dip(over add-case!)
    dup comma? then(succ))

||| Elaborate case pattern.
def(elab-case-pattern!, Case Token -- Case Token,
    dup pat-underscore? if(
        # set case pattern
        dip(PATTERN_UNDERSCORE over ~pattern !)

        # set case mid
        dip(dup .match dom STACK_TYPE_DONT_CARE TYPE_DONT_CARE T*)
        elab-stack-type-unify! dip(over ~mid !)

        # advance token
        succ,

    dup name? if-some(
        >Def match(
            DEF_TAG -> { Case Token Tag }

                # set case pattern
                dup PATTERN_TAG rotr
                dip2(over ~pattern !)

                # set case mid
                dip2(dup .match dom) { Case StackType Token Tag }
                type Subst.nil swap freshen-sig
                rotr dip(
                    dip(unpack)
                    dip2(swap) elab-stack-type-unify! nip
                    dip(over ~mid !)
                )
                swap dip(over ~subst !)

                # advance token
                succ,

            DEF_NONE ->
                "Unknown constructor." emit-fatal-error!,

            _ ->
                drop "Not a constructor." emit-fatal-error!
        ),

        "Expected constructor name." emit-fatal-error!
    )))

||| Elaborate case body.
def(elab-case-body!, Case Token -- Case Token,
    dip(dup mid dip(dup .match ctx)) elab-arrow-fwd!
    dup token-end dip(dup cod) { Case Arrow StackType Token }
    dip2(over ~body !) { Case StackType Token }
    dip2(dup .match cod) elab-stack-type-unify! nip)

######################
# Module Elaboration #
######################

||| Elaborate all of a module.
def(elab-module!, Module -- Module,
    dup start
    elab-module-header!
    while(dup module-end? not, elab-module-decl!)
    drop)

||| Check that the `module(M)` statement exists and save the name.
def(elab-module-header!, Token -- Token,
    # dup token-name@ name-str @ str-trace-ln!
    dup module-header? if(
        sip(next) args-1
        dup name? unwrap-or("Expected module name." emit-fatal-error!)
        name-defined? then(drop "Module name already taken." emit-fatal-error!)
        over .module
        dup2 ~name !
        dup2 DEF_MODULE swap ~Def !
        path swap
        to-module-path = if(drop,
            "Module name should match path." emit-error!),
        dup "Expected module header." emit-error!
    ))

||| Elaborate a declaration. Returns the next token.
def(elab-module-decl!, Token -- Token,
    dup
    name? unwrap-or("unknown declaration" emit-fatal-error!)
    >Def prim? unwrap-or("unknown declaration" emit-fatal-error!)
    decl unwrap-or("unknown declaration" emit-fatal-error!)
    run)

||| Elaborate `import(M)` statement. Return token after import.
def(elab-module-import!, Token -- Token,
    sip(next)
    args-1 dup value match(
        TOKEN_NAME ->
            dup >Def match(
                DEF_MODULE ->
                    dip(drop2 dup .module) add-import!,
                    # module is already loaded

                DEF_NONE ->
                    to-module-path run-lexer!
                    elab-module!
                    dip(drop dup .module) add-import!,
                    # elab the imported module
                    # TODO: avoid elaborating here,
                    # use a single loop to dispatch top-level module elaboration.

                _ ->
                    drop2 "module name already taken" emit-fatal-error!
            ),
        _ ->
            drop "expected module name" emit-fatal-error!
    ))

||| Elaborate a data definition `data(T, ...)`
def(elab-data!, Token -- Token,
    sip(
        Data.alloc!
        L0 over ~tags !
        swap args+
        uncons dip(elab-data-header!)
        for(elab-data-tag!)
        drop
    ) next)

||| Get the header, name, arity for a data type.
def(elab-data-header!, Data Token -- Data,
    dup2 SOME swap ~head? !
    dup sig-type-con? else("Expected type name." emit-fatal-error!)
    dup2 name? unwrap name-undefined? else(drop2 "Type name already defined." emit-fatal-error!)
    over TData DEF_TYPE over ~Def !
    swap ~name !
    # TODO check header args are well-formed / elaborate them properly
    num-args over ~arity !)

||| Get a tag associated with a data type.
||| This looks like either "TAG" or "TAG -> TYPE1 ... TYPEN".
def(elab-data-tag!, Data Token -- Data,
    dup name? unwrap-or("Expected constructor name." emit-fatal-error!)
    name-undefined? else(drop "Constructor name already defined." emit-fatal-error!)
    Tag.alloc!
    dup2 DEF_TAG swap ~Def !
    tuck ~name !
    { Data Token Tag }
    dip(over) dup2 ~data !
    tuck dip(add-tag!)
    { Data Token Tag }
    swap succ
    dup pat-arrow? if(
        succ SOME over ~sig? !,
    dup run-end? if(
        drop NONE over ~sig? !,
        "Expected arrow, comma, or right paren." emit-fatal-error!
    ))
    { Data Tag }
    dup delay(
        type-elab-default
        over .data head? unwrap elab-type-atom! drop T1
        dip(T0 rotl sig? for(
            elab-type-stack-rest!
            dup run-end? else("syntax error" emit-fatal-error!) drop
        ))
        T-> dip(type-elab-ctx) pack2
    )
    over ~ctx-type !
    sip(num-inputs-from-sig) ~num-inputs !)

def(expect-token-arrow, Token -- Token,
    dup pat-arrow? else("Expected arrow." emit-fatal-error!))

||| Break apart the arguments for `def` into three categories:
|||     - head: the name of the definition, plus params
|||     - (optional) sig: the type signature
|||     - body: a nonempty list of body arguments
def(token-def-args, Token -- Token Maybe(Token) List+(Token),
    dup args dup len 2 >= if(nip,
        drop "def expects at least two arguments" emit-fatal-error!)
    >List+ unwrap uncons
    >List+ unwrap uncons
    >List+ if-some(
        over run-has-arrow? if(
            cons+ dip(NONE),
            dip(SOME)
        ),
        L1+ dip(NONE)
    ))

||| Elaborate an alias `alias(w1,w2)`
def(elab-alias!, Token -- Token,
    sip(next) args-2 swap
    dup name? unwrap-or("expected word name" emit-fatal-error!) dip(dup args-0)
    name-undefined? else(drop "word already defined" emit-fatal-error!) rotl
    dup name? unwrap-or("expected word name" emit-fatal-error!) dip(args-0)
    Alias.new! drop)

||| Elaborate a missing word definition `def-missing(w,t,b...)`
def(elab-def-missing!, Token -- Token,
    # TODO, verify has args
    dup succ succ dup name? unwrap-or("expected name" emit-fatal-error!) nip name-defined? nip if(
        next,
        elab-def!
    ))

||| Elaborate a word definition `def(w, t, b...)`.
def(elab-def!, Token -- Token,
    sip(next) token-def-args
    uncons is-empty if(id,
        dup run-has-arrow? if(id,
            "expected match case" emit-fatal-error!))
    rotl dup name? unwrap-or("expected word name" emit-fatal-error!)
    name-undefined? if(id, drop "word already defined" emit-fatal-error!)

    Word.new!
    tuck ~sig !

    dup delay(
        type-elab-default
        over sig unwrap-or(over head "need word signature" emit-fatal-error!) # TODO make sig mandatory again.
        elab-type-sig! drop dip(type-elab-ctx)
        pack2 nip
    ) over ~ctx-type !
    dup delay(elab-def-params!) over ~params !
    dup delay(
        dup ab-build-word-arrow!(
            swap params dup is-empty if(
                drop elab-def-body!,
                ab-lambda!(elab-def-body!)
            )
        )
    ) swap ~arrow !)

||| Elaborate a word's parameters from its type and declaration.
def(elab-def-params!, Word -- List(Param),
    L0 over elab-word-ctx-type-weak! nip
    rotl head dip(unpack) nip
    args reverse-for(
        dup sig-param-name? else("expected parameter name" emit-fatal-error!)
        dup succ dup run-end? if(drop, "expected right paren or comma" emit-fatal-error!)
        elab-expand-tensor!
        over morphism? else(
            "need function type for param" emit-fatal-error!)
        name? unwrap Var.new-auto-run!
        PARAM rotr dip(cons)
    ) drop)

||| Elaborate the body of a `def`. Takes the codomain from the stack,
||| and the rest from the AB environment.
def(elab-def-body!, StackType -- StackType,
    ab-token @ run-has-arrow? if(
        dup ab-token @ elab-match-at!,
        elab-atoms!
    ))

||| Elaborate an external declaration `def-external(w, t)`
def(elab-def-external!, Token -- Token,
    sip(next) args-2
    swap dup name? unwrap-or("expected word name" emit-fatal-error!)
    name-undefined? else(drop "word already defined" emit-fatal-error!)
    nip
    External.alloc!
    dup2 DEF_EXTERNAL swap ~Def !
    tuck ~name !
    tuck ~sig !
    dup delay(
        type-elab-default swap sig
        elab-type-sig! drop dip(type-elab-ctx) pack2
    ) swap ~ctx-type !)

||| Elaborate a type definition `def-type(t1, t2)`.
def(elab-def-type!, Token -- Token,
    sip(next) args-2
    swap dup sig-type-con? else("expected type constructor" emit-fatal-error!)
    dup name? unwrap name-undefined? else(drop "type name already defined" emit-fatal-error!)
    nip swap elab-simple-type-arg! DEF_TYPE swap ~Def !)

||| Elaborate a buffer definition `buffer(B, size)`.
def(elab-buffer!, Token -- Token,
    sip(next) args-2
    swap dup name? unwrap-or("expected buffer name" emit-fatal-error!)
    name-undefined? else(drop "buffer name already defined" emit-fatal-error!)
    rotl dup int? unwrap-or("expected buffer size" emit-fatal-error!) nip
    Buffer.new! drop)

||| Elaborate a var declaration `var(v, type)`.
def(elab-variable!, Token -- Token,
    sip(next) args-2
    swap dup name? unwrap-or("expected variable name" emit-fatal-error!)
    name-undefined? else(drop "variable name already defined" emit-fatal-error!)
    rotl delay(elab-simple-type-arg!)
    Variable.new! drop)

||| Elaborate a table definition `table(T)`.
def(elab-table!, Token -- Token,
    sip(next) args-1
    dup sig-type-con? else("expected type name" emit-fatal-error!)
    dup name? unwrap name-undefined? else(drop "table name already defined" emit-fatal-error!)
    table-new! drop)

||| Elaborate C99 build target.
def(elab-target-c99!, Token -- Token,
    typecheck-everything!
    sip(next) args-2
    dip(dup str? unwrap-or("expected output path" emit-fatal-error!) nip >Path)
    dip(CTX0 T0 T0 T->)
    elab-arrow!
    swap run-output-c99!)

||| Embed a file as a string, embed-str(name, "path").
||| The path is relative to compiler's cwd, not source root.
def(elab-embed-str!, Token -- Token,
    sip(next) args-2 swap
    dup name? unwrap-or("expected embedded constant name" emit-fatal-error!)
    name-undefined? else(drop "embedded constant name already defined" emit-fatal-error!)
    rotl dup str? unwrap-or("expected source path" emit-fatal-error!)
    with-open-file!(read-file! nip, "could not open source file" emit-fatal-error!)
    VALUE_STR Constant.new! drop)

||| Ensure that everything so far has been typechecked.
def(typecheck-everything!, --,
    Name.for(>Def typecheck!)
    Block.for(typecheck!))

#########
# TABLE #
#########

def(TABLE_MAX_SIZE, Int, 0x10000)

def(table-word-new!, Table Str -- Word,
    dip(dup head dup rotl name) Name.cat Word.new!)

def(table-new!, Token Name -- Table,
    Table.alloc!
    tuck ~name !
    tuck ~head !
    TABLE_MAX_SIZE over ~max-count !
    dup TTable DEF_TYPE over name ~Def !


    # Table.MAX
    dup ".MAX" table-word-new!

    L0 CTX
    T0 TYPE_INT T1 T->
    ready2 over ~ctx-type !

    ab-build-word!(
        dup head ab-token !
        TABLE_MAX_SIZE ab-int!
    ) drop

    # Table.nil
    dup ".nil" table-word-new!

    L0 CTX
    T0 over3 TTable T1 T->
    ready2 over ~ctx-type !

    ab-build-word!(
        dup head ab-token !
        0 ab-int!
        PRIM_UNSAFE_CAST ab-prim!
    ) drop

    # Table.NUM
    dup head
    over name ".NUM" Name.cat
    8 Buffer.new!
    over ~num-buffer !

    # Table.id
    dup ".id" table-word-new!

    L0 CTX
    over2 TTable T1 TYPE_INT T1 T->
    ready2 over ~ctx-type !

    ab-build-word! (
        dup head ab-token !
        PRIM_UNSAFE_CAST ab-prim!
    ) drop

    # Table.from-id
    dup ".from-id" table-word-new!

    L0 CTX
    over2 TTable T1 TYPE_INT T1 swap T->
    ready2 over ~ctx-type !

    ab-build-word! (
        dup head ab-token !
        PRIM_UNSAFE_CAST ab-prim!
    ) drop

    # Table.succ
    dup ".succ" table-word-new!

    L0 CTX
    over2 TTable T1 dup T->
    ready2 over ~ctx-type !

    ab-build-word! (
        dup head ab-token !
        PRIM_UNSAFE_CAST ab-prim!
        1 ab-int!
        PRIM_INT_ADD ab-prim!
        dup num-buffer ab-buffer!
        PRIM_U64_GET ab-prim!
        PRIM_UNSAFE_CAST ab-prim!
        1 ab-int!
        PRIM_INT_ADD ab-prim!
        PRIM_INT_MOD ab-prim!
        PRIM_UNSAFE_CAST ab-prim!
    ) drop

    # Table.pred
    dup ".pred" table-word-new!

    L0 CTX
    over2 TTable T1 dup T->
    ready2 over ~ctx-type !

    ab-build-word! (
        dup head ab-token !
        PRIM_UNSAFE_CAST ab-prim!
        PRIM_CORE_DUP ab-prim!
        0 ab-int!
        PRIM_INT_EQ ab-prim!
        ab-if!(
            id,
            1 ab-int!
            PRIM_INT_SUB ab-prim!
        )
        PRIM_UNSAFE_CAST ab-prim!
    ) drop

    # Table.for

    dup ".for" table-word-new!
    TYPE_STACK "*a" >Name Var.new! dup STVar
    \(t w va a -> a t TTable T* a T-> >Type "x" >Name Var.new-auto-run!
    \(x ->
        va CTX1
        a a t TTable T* a T-> >Type T* a T->
        ready2 w ~ctx-type !

        w ab-build-word! (
            t head ab-token !
            x Var>Param L1 ab-lambda! (
                1 ab-int!
                ab-while! (
                    PRIM_CORE_DUP ab-prim!
                    t num-buffer ab-buffer!
                    PRIM_U64_GET ab-prim!
                    PRIM_UNSAFE_CAST ab-prim!
                    1 ab-int!
                    PRIM_INT_ADD ab-prim!
                    PRIM_INT_LT ab-prim!,

                    PRIM_CORE_DUP ab-prim!
                    ab-dip! (
                        PRIM_UNSAFE_CAST ab-prim!
                        x ab-var!
                    )
                    1 ab-int!
                    PRIM_INT_ADD ab-prim!
                )
                PRIM_CORE_DROP ab-prim!
            )
        ) drop

    t))

    # Table.alloc!
    dup ".alloc!" table-word-new!

    L0 CTX
    T0 over3 TTable T1 T->
    ready2 over ~ctx-type !

    ab-build-word! (
        dup head ab-token !
        dup num-buffer ab-buffer!
        PRIM_U64_GET ab-prim!
        PRIM_UNSAFE_CAST ab-prim!
        1 ab-int!
        PRIM_INT_ADD ab-prim!
        PRIM_CORE_DUP ab-prim!
        PRIM_UNSAFE_CAST ab-prim!
        dup num-buffer ab-buffer!
        PRIM_U64_SET ab-prim!
        PRIM_UNSAFE_CAST ab-prim!
    )
    drop
    )

#########
# FIELD #
#########

||| Elaborate a field definition `field(f, T1, T2)`.
def(elab-field!, Token -- Token,
    sip(next) args-3 rotl dup value match(
        TOKEN_NAME ->
            name-undefined? if(id,
                drop "name already defined" emit-fatal-error!)
            field-new! drop,
        _ ->
            drop "expected field name" emit-fatal-error!
    ))

def(field-new!, Token Token Token Name -- Field,
    Field.alloc!
    tuck dup2 ~name !
    DEF_FIELD swap ~Def !
    tuck ~head !
    swap delay(elab-simple-type-arg!) over ~value-type !
    swap delay(elab-simple-type-arg!) over ~index-type !)
