module(mirth/elab)
import(mirth/data/name)
import(mirth/data/token)
import(mirth/data/type)
import(mirth/data/ctx)

####################
# Type Elaboration #
####################

data(HolesAllowed, ALLOW_HOLES, FORBID_HOLES)
def(HolesAllowed->Bool, HolesAllowed -- Bool, ALLOW_HOLES ==)

data(TypeElab, TYPE_ELAB -> HolesAllowed Ctx)
def(type-elab-default, TypeElab, FORBID_HOLES ctx-empty TYPE_ELAB)
def(type-elab-stack-assertion, Ctx -- TypeElab, dip(ALLOW_HOLES) TYPE_ELAB)
def(type-elab-holes-allowed?, TypeElab -- TypeElab HolesAllowed,
    dup match(TYPE_ELAB -> drop))
def(type-elab-ctx, TypeElab -- Ctx,
    match(TYPE_ELAB -> nip))
def(type-elab-ctx?, TypeElab -- TypeElab Ctx, dup type-elab-ctx)
def(type-elab-ctx!, TypeElab Ctx -- TypeElab,
    swap match(TYPE_ELAB -> drop swap TYPE_ELAB))

def(elab-type-sig!, TypeElab Token -- TypeElab Type Token,
    elab-type-stack!
    token-is-dashes? if(
        token-next
        swap dip(elab-type-stack!) swap,
        dip(TYPE_UNIT))
    while(sig-token-is-effect-con?, token-next) # TODO: elaborate effect type
    dip(swap TMorphism))

def(elab-type-stack!, TypeElab Token -- TypeElab Type Token,
    sig-token-is-stack-var? if(
        elab-stack-var! dip(TVar),
        dip(TYPE_UNIT)
    )
    elab-type-stack-rest!)

def(elab-type-stack-rest!, TypeElab Type Token -- TypeElab Type Token,
    while(sig-is-stack-end2? not,
        swap dip(elab-type-atom!) swap
        dip(swap TTensor)
    ))

def(elab-type-arg!, TypeElab Token -- TypeElab Type Token,
    elab-type-atom!
    token-is-arg-end? if(
        id,
        "Unexpected token after type." emit-fatal-error!
    ))

def(elab-type-atom!, TypeElab Token -- TypeElab Type Token,
    sig-token-is-type-var? if(
        elab-type-var! dip(TVar),

    sig-token-is-type-con? if(
        elab-type-con!,

    token-is-underscore? if(
        elab-type-dont-care!,

    sig-token-is-type-hole? if(
        elab-type-hole!,

    token-is-lsquare? if(
        elab-type-quote!,

        dup "Expected type, got unknown token." emit-error!
        dip(TYPE_ERROR) token-next
    ))))))

def(elab-stack-var!, TypeElab Token -- TypeElab Var Token,
    TYPE_STACK elab-implicit-var!)

def(elab-type-var!, TypeElab Token -- TypeElab Var Token,
    TYPE_TYPE elab-implicit-var!)

def(elab-implicit-var!, TypeElab Token Type -- TypeElab Var Token,
    dip2(type-elab-ctx?) over
    dip2(token-name@ dup2 swap ctx-lookup)
    rotl match(
        SOME ->
            rotr dip2(nip var-type?)
            elab-type-unify! nip,
        NONE ->
            dip(
                dip(var-new-implicit!)
                over var-type!
                dup dip(ctx-new!)
            )
    )
    token-next
    dip2(type-elab-ctx!))

def(elab-type-con!, TypeElab Token -- TypeElab Type Token,
    token-name? name-value@ match(
        DEF_TYPE ->
            over token-num-args
            over type-arity == if(
                elab-type-args!,

                drop dup
                "Wrong number of arguments for type." emit-error!
                TYPE_ERROR
            ),
        DEF_NONE ->
            dup "Unknown type." emit-error! TYPE_ERROR,
        _ ->
            drop dup "Not a type." emit-error! TYPE_ERROR
    )
    swap token-next)

def(elab-type-args!, TypeElab Token Type -- TypeElab Token Type,
    dip(token-has-args?) swap if(
        dip(tuck) swap token-succ
        while(token-is-right-enclosure? not,
            token-succ swap
            dip(elab-type-arg!) swap
            dip(swap TApp))
        drop dip(swap),

        id
    ))

def(elab-type-hole!, TypeElab Token -- TypeElab Type Token,
    dip(type-elab-holes-allowed?) swap HolesAllowed->Bool if(
        token-has-args? if(
            dup "Types with args not yet supported." emit-error! TYPE_ERROR,
            token-name? THole)
        swap token-next,
        "type holes are not allowed here" emit-fatal-error!
    ))

def(elab-type-dont-care!, TypeElab Token -- TypeElab Type Token,
    dip(type-elab-holes-allowed?) swap HolesAllowed->Bool if(
        token-has-args? if(
            dup "Types with args not yet supported." emit-error! TYPE_ERROR,
            TYPE_DONT_CARE)
        swap token-next,
        "type don't care is not allowed here" emit-fatal-error!
    ))

def(elab-type-quote!, TypeElab Token -- TypeElab Type Token,
    token-args-1
    sig-has-dashes? if(
        elab-type-sig!,
        elab-type-stack!
    )
    token-next)

def(elab-type-unify!, Type Type Token -- Type Token,
    dup dip(GAMMA rotr type-unify! nip))

def(elab-simple-type-arg!, Token -- Type,
    dip(type-elab-default) elab-type-arg! drop nip)

####################
# Word Elaboration #
####################

# AB = Arrow Builder = Arrow Elaborator
buffer(AB_ARROW, 16)
def(ab-arrow@, Arrow +AB, AB_ARROW value@)
def(ab-arrow!, Arrow -- +AB, AB_ARROW value!)
def(ab-ctx@, Ctx +AB, ab-arrow@ arrow-ctx@)
def(ab-ctx!, Ctx -- +AB, ab-arrow@ arrow-ctx!)
def(ab-token@, Token +AB, ab-arrow@ arrow-token-end@)
def(ab-token!, Token -- +AB, ab-arrow@ arrow-token-end!)
def(ab-type@, Type +AB, ab-arrow@ arrow-cod@)
def(ab-type!, Type -- +AB, ab-arrow@ arrow-cod!)

ab-save! : *a [ *a -- *b +AB ] -- *b +AB
ab-save! = ab-arrow@ dip(run) ab-arrow!

ab-build! : *a Ctx Type Token [ *a -- *b +AB ] -- *b Arrow +AB
ab-build! =
    ab-save!(
        dip(
            Arrow.alloc!
            tuck dup2 arrow-token-start! arrow-token-end!
            tuck dup2 arrow-dom! arrow-cod!
            tuck arrow-ctx!
            ab-arrow!
        )
        run
        ab-arrow@
    )

ab-build-for-word! : *a Word [ *a -- *b +AB ] -- *b Word +AB
ab-build-for-word! = (
    dip (
        word-ctx? swap
        word-type? swap
        word-body? swap
        dip(elab-expand-morphism! swap)
    )
    { *a Ctx Type Token Type Word [ *a -- *b +AB ] }
    rotr dip(
        dip(ab-build!) over
        arrow-cod? swap arrow-token-end@
        elab-type-unify! drop2
    )
    tuck word-arrow!
)

ab-unify-type! : Type -- +AB
ab-unify-type! =
    dip(ab-token@ GAMMA ab-type@) type-unify! ab-type! drop

ab-atom! : Atom -- +AB
ab-atom! = (
    atom-token? ab-token!
    atom-dom? ab-unify-type!
        # ^ a sanity check to make sure
        # atom dom matches ab-arrow cod
    atom-cod? ab-type!
    dip(ab-arrow@ arrow-atoms@)
    snoc ab-arrow@ arrow-atoms!
)

ab-op! : Op -- +AB
ab-op! = (
    Atom.alloc!
    ab-ctx@ over atom-ctx!
    ab-token@ over atom-token!
    dup2 atom-op!
    swap elab-op-fresh-sig! dip(over atom-subst!)
    ab-token@ elab-expand-morphism! drop
    dip(over atom-dom!) over atom-cod!
    ab-atom!
)

ab-int! : Int -- +AB
ab-int! = OP_INT ab-op!

ab-str! : Str -- +AB
ab-str! = OP_STR ab-op!

ab-buffer! : Buffer -- +AB
ab-buffer! = OP_BUFFER ab-op!

ab-var! : Var -- +AB
ab-var! = OP_VAR ab-op!

ab-tag! : Tag -- +AB
ab-tag! = OP_TAG ab-op!

ab-prim! : Prim -- +AB
ab-prim! = OP_PRIM ab-op!

ab-word! : Word -- +AB
ab-word! = OP_WORD ab-op!

ab-external! : External -- +AB
ab-external! = OP_EXTERNAL ab-op!

ab-block! : *a [ *a -- *b +AB ] -- *b +AB
ab-block! =
    Block.alloc! dip(
        dip( ab-ctx@ meta-alloc! TMeta ab-token@ ) ab-build!
    ) tuck block-arrow! OP_BLOCK ab-op!

ab-dip! : *a [ *a -- *b +AB ] -- *b +AB
ab-dip! = ab-block! PRIM_CORE_DIP ab-prim!

ab-if! : *a [ *a -- *b +AB ] [ *b -- *c +AB ] -- *c +AB
ab-if! = dip(ab-block!) ab-block! PRIM_CORE_IF ab-prim!

ab-while! : *a [ *a -- *b +AB ] [ *b -- *c +AB ] -- *c +AB
ab-while! = dip(ab-block!) ab-block! PRIM_CORE_WHILE ab-prim!

elab-op-fresh-sig! : Op -- Subst Type +AB
elab-op-fresh-sig! =
    subst-nil swap match(
        OP_NONE -> elab-id-sig!,
        OP_INT -> drop TYPE_INT elab-push-sig!,
        OP_STR -> drop TYPE_STR elab-push-sig!,
        OP_BUFFER -> drop TYPE_PTR elab-push-sig!,
        OP_BLOCK -> elab-block-sig!,
        OP_VAR -> elab-var-sig!,
        OP_TAG -> elab-tag-sig! type-freshen-sig,
        OP_WORD -> elab-word-sig! type-freshen-sig,
        OP_PRIM -> prim-type@ type-freshen-sig,
        OP_EXTERNAL -> elab-external-sig! type-freshen-sig,
        OP_MATCH -> elab-match-sig!,
        OP_LAMBDA -> elab-lambda-sig!,
    )

elab-id-sig! : Type
elab-id-sig! = meta-alloc! TMeta dup T->

elab-push-sig! : Type -- Type
elab-push-sig! = dip(meta-alloc! TMeta dup) T* T->

elab-block-sig! : Block -- Type
elab-block-sig! = block-arrow@ elab-arrow-sig! elab-push-sig!

elab-arrow-sig! : Arrow -- Type
elab-arrow-sig! = arrow-dom? swap arrow-cod@ T->

elab-match-sig! : Match -- Type
elab-match-sig! = match-dom? swap match-cod@ T->

elab-lambda-sig! : Lambda -- Type
elab-lambda-sig! = lambda-dom? swap lambda-cod@ T->

elab-var-sig! : Var -- Type
elab-var-sig! =
    var-auto-run? if(
        var-type@ type-semifreshen-sig,
        var-type@ elab-push-sig!
    )

def(elab-tag-sig!, Tag -- Type +Elab,
    elab-tag-ctx-sig! nip)

def(elab-tag-ctx!, Tag -- Ctx +Elab,
    elab-tag-ctx-sig! drop)

def(elab-tag-ctx-sig!, Tag -- Ctx Type +Elab,
    tag-sig-is-checked? if(
        tag-type-raw? dip(tag-ctx@),

        type-elab-default over

        { Tag TypeElab Tag }
        tag-data@ data-header@ elab-type-atom! drop T1
        { Tag TypeElab Type }
        dip(
            over tag-has-sig?
            if(
                tag-sig@ T0 swap elab-type-stack-rest!
                token-run-end? if(drop, "syntax error" emit-fatal-error!),

                drop T0
            )
        )
        { Tag TypeElab Type Type }
        T-> dip(type-elab-ctx)
        { Tag Ctx Type }
        dup2 dip2(
            rotl
            tuck tag-type-raw!
            tuck tag-ctx!
            true swap tag-sig-is-checked!
        )
    ))


def(elab-external-sig!, External -- Type +Elab,
    elab-external-ctx-sig! nip)

def(elab-external-ctx!, External -- Ctx +Elab,
    elab-external-ctx-sig! drop)

def(elab-external-ctx-sig!, External -- Ctx Type +Elab,
    external-sig-is-checked? if(
        external-type? dip(external-ctx@),

        external-sig?
        dip(type-elab-default)
        elab-type-sig! drop dip(type-elab-ctx)
        dup2 dip2(
            rotl
            tuck external-type!
            tuck external-ctx!
            true swap external-sig-is-checked!
        )
    ))

def(elab-word-sig!, Word -- Type +Elab,
    elab-word-ctx-sig! nip)

def(elab-word-ctx!, Word -- Ctx +Elab,
    elab-word-ctx-sig! drop)

def(elab-word-ctx-sig!, Word -- Ctx Type +Elab,
    word-sig-is-checked? if(
        word-type? dip(word-ctx@),

        word-sig?
        dip(type-elab-default)
        elab-type-sig! drop dip(type-elab-ctx)
        dup2 dip2(
            rotl
            tuck word-type!
            tuck word-ctx!
            true swap word-sig-is-checked!
        )
    ))

def(elab-word-body!, Word -- Arrow +Elab,
    word-body-is-checked? if(
        word-arrow@,

    word-body? is-nil if(
        word-sig@ token-prev token-prev # not very good :-/
        "Missing word definition."
        emit-fatal-error!,

        dup dip(elab-word-ctx-sig!)
        dup dip(word-body@ elab-arrow!)
        dup2 word-arrow!
        true swap word-body-is-checked!
    )))

def(elab-arrow!, Ctx Type Token -- Arrow,
    elab-expand-morphism! elab-arrow-hom!)

def(elab-arrow-hom!, Ctx Type Type Token -- Arrow,
    swap dip(
        elab-arrow-fwd!
        arrow-token-end? GAMMA
        over arrow-cod@
    )
    type-unify! drop2)

def(elab-arrow-fwd!, Ctx Type Token -- Arrow,
    Arrow.alloc!
    tuck dup2 arrow-token-start! arrow-token-end!
    tuck dup2 arrow-dom! arrow-cod!
    tuck arrow-ctx!
    while(elab-arrow-done? not,
        elab-arrow-step!))

||| Is this arrow at the end of a run?
def(elab-arrow-done?, Arrow -- Arrow Bool,
    arrow-token-end? token-run-end? nip)

||| From the {ctx, dom, token} fields, elaborate the
||| arrow's {op, arg, next} fields, returning
||| the next arrow with {ctx, dom, token} set.
def(elab-arrow-step!, Arrow -- Arrow,
    Atom.alloc!
    over arrow-ctx@ over atom-ctx!
    over arrow-cod@ over atom-dom!
    over arrow-token-end@ over atom-token!
    elab-atom-op! over
    over atom-cod@ over arrow-cod!
    arrow-token-end? token-next over arrow-token-end!
    arrow-atoms@ swap snoc over arrow-atoms!)

||| From the atom's {ctx, dom, token} fields, elaborate
||| the atom's {op, args, cod} fields.
def(elab-atom-op!, Atom -- Atom,
    atom-token? token-value@ match(
        TOKEN_NAME -> elab-atom-op-name!,
        TOKEN_INT -> elab-atom-op-int!,
        TOKEN_STR -> elab-atom-op-str!,
        TOKEN_LSQUARE -> drop atom-token? elab-atom-op-block!,
        TOKEN_LCURLY -> drop atom-token? elab-atom-op-stack-assertion!,
        _ ->
            drop atom-token?
            "Unexpected token in elab-atom-op!"
            emit-fatal-error!
    ))

def(elab-atom-op-name!, Atom Name -- Atom,
    dup2 swap atom-ctx@ ctx-lookup match(
        NONE ->
            name-value@ match(
                DEF_BUFFER -> elab-atom-op-buffer!,
                DEF_EXTERNAL -> elab-atom-op-external!,
                DEF_WORD -> elab-atom-op-word!,
                DEF_PRIM -> elab-atom-op-prim!,
                DEF_TAG -> elab-atom-op-tag!,
                _ -> drop atom-token? "Unknown word." emit-error!
            ),
        SOME ->
            nip elab-atom-op-var!
    ))

def(elab-atom-op-block!, Atom Token -- Atom,
    dip(atom-ctx?) meta-alloc! TMeta tuck
    dip(token-args-1 Block.alloc! dip(elab-arrow!)
        tuck block-arrow! OP_BLOCK over atom-op!
        atom-dom?)
    T* over atom-cod!)

def(elab-atom-op-var!, Atom Var -- Atom,
    dup2 OP_VAR swap atom-op!
    var-auto-run? if(
        var-type@ elab-atom-op-apply-semifresh!, # run var
        dip(atom-dom?) var-type@ T* over atom-cod! # push var
    ))

def(elab-atom-op-int!, Atom Int -- Atom,
    OP_INT over atom-op!
    atom-dom? TYPE_INT T* over atom-cod!)

def(elab-atom-op-str!, Atom Str -- Atom,
    OP_STR over atom-op!
    atom-dom? TYPE_STR T* over atom-cod!)

def(elab-atom-op-buffer!, Atom Buffer -- Atom,
    OP_BUFFER over atom-op!
    atom-dom? TYPE_PTR T* over atom-cod!)

def(elab-atom-op-stack-assertion!, Atom Token -- Atom,
    dip(atom-ctx? type-elab-stack-assertion)
    token-args-1 elab-type-stack!
    drop nip
    over atom-token@
    dip2(atom-dom?)
    elab-type-unify! drop2
    atom-dom? over atom-cod!)

def(elab-atom-op-external!, Atom External -- Atom,
    dup2 OP_EXTERNAL swap atom-op!
    elab-external-sig! elab-atom-op-apply-fresh!)

def(elab-atom-op-word!, Atom Word -- Atom,
    dup2 OP_WORD swap atom-op!
    elab-word-sig! elab-atom-op-apply-fresh!)

def(elab-atom-op-tag!, Atom Tag -- Atom,
    dup2 OP_TAG swap atom-op!
    elab-tag-sig! elab-atom-op-apply-fresh!)

def(elab-atom-op-prim!, Atom Prim -- Atom,
    dup PRIM_CORE_MATCH == if(
        drop elab-atom-op-match!,

    dup PRIM_CORE_LAMBDA == if(
        drop elab-atom-op-lambda!,

    prim-type? is-nil if(
        drop atom-token@ "compiler error: prim type missing" emit-fatal-error!,

        dup2 OP_PRIM swap atom-op!
        prim-type@ elab-atom-op-apply-fresh!
    ))))

def(elab-atom-op-lambda!, Atom -- Atom,
    Lambda.alloc!
    dup2 OP_LAMBDA swap atom-op!
    over atom-ctx@ over lambda-outer-ctx!
    over atom-dom@ over lambda-dom!
    dip(atom-token?) tuck lambda-token!
    elab-lambda! lambda-cod@ over atom-cod!)

def(elab-lambda!, Lambda -- Lambda,
    elab-lambda-params!
    elab-lambda-body!)

def(elab-expand-tensor!, Type Token -- Type Type Token,
    dip2(meta-alloc! TMeta meta-alloc! TMeta dup2 T*)
    elab-type-unify! nip dip(dip(type-expand) type-expand))

def(elab-expand-morphism!, Type Token -- Type Type Token,
    dip2(meta-alloc! TMeta meta-alloc! TMeta dup2 T->)
    elab-type-unify! nip dip(dip(type-expand) type-expand))

def(elab-lambda-pop-from-mid!, Lambda Token -- Lambda Type Token,
    dip(lambda-mid?)
    elab-expand-tensor!
    dip2(over lambda-mid!))

def(token-is-lambda-param?, Token -- Token Bool,
    sig-token-is-type-var? if(
        token-has-args? not,
    token-is-lsquare? if(
        dup true
        dip(token-succ sig-token-is-type-var?) &&
        dip(token-succ token-is-rsquare?) &&
        nip,
        false
    )))

def(elab-lambda-params!, Lambda -- Lambda,
    lambda-outer-ctx? over lambda-inner-ctx!
    lambda-dom? over lambda-mid!
    lambda-token? token-args-1
    while(token-is-lambda-param?, token-next)
    expect-token-arrow token-prev
    while(token-is-lambda-param?,
        elab-lambda-pop-from-mid! dup dip(
            sig-token-is-type-var? if(
                token-name@ var-new! tuck var-type!,

                token-succ dip(type-expand type-is-morphism?) swap if(
                    token-name@ var-new!
                    true over var-auto-run!
                    tuck var-type!,

                    "block pattern on non-block argument" emit-fatal-error!
                )
            )
            dip(lambda-params?) dup dip(swap cons over lambda-params!)
            dip(lambda-inner-ctx?) ctx-new! over lambda-inner-ctx!
        )
        token-prev)
    drop)
def(elab-lambda-body!, Lambda -- Lambda,
    lambda-token? token-args-1
    while(token-is-lambda-param?, token-next) token-succ
    dip(lambda-mid? dip(lambda-inner-ctx?))
    elab-arrow-fwd!
    dup2 swap lambda-body!
    arrow-cod@ over lambda-cod!)

def(elab-atom-op-match!, Atom -- Atom,
    Match.alloc!
    dup2 OP_MATCH swap atom-op!
    over atom-ctx@ over match-ctx!
    over atom-dom@ over match-dom!
    dip(atom-token?) tuck match-token!
    meta-alloc! TMeta over match-cod!
    elab-match! match-cod@ over atom-cod!)

||| Elaborate `match(...)` expression.
def(elab-match!, Match -- Match,
    elab-match-cases!
    elab-match-exhaustive!)

||| Check that match is exhaustive.
def(elab-match-exhaustive!, Match -- Match,
    match-has-default-case? if(
        id,
        match-scrutinee-data? match(
            SOME ->
                data-num-tags dip(match-num-cases?) < if(
                    match-token? "Pattern match not exhaustive." emit-error!,
                    # TODO -- print missing patterns.
                    id
                ),
            NONE ->
                id
        )
    ))

||| Elaborate match cases.
def(elab-match-cases!, Match -- Match,
    match-token? token-has-args? if(
        token-succ token-succ
        while(token-is-rparen? not, elab-match-case!)
        drop,
        "match expects an arg" emit-fatal-error!
    ))

||| Elaborate a single match case `pattern -> body ,`
def(elab-match-case!, Match Token -- Match Token,
    Case.alloc!
    dup2 case-token!
    swap dip(dup2 case-match!)
    elab-case-pattern!
    expect-token-arrow token-succ
    elab-case-body!
    dip(match-add-case!)
    token-is-comma? if(token-succ, id))

||| Elaborate case pattern.
def(elab-case-pattern!, Case Token -- Case Token,
    token-is-underscore? if(
        # set case pattern
        dip(PATTERN_UNDERSCORE over case-pattern!)

        # set case mid
        dip(case-match? match-dom@ TYPE_DONT_CARE TYPE_DONT_CARE T*)
        elab-type-unify! dip(over case-mid!)

        # advance token
        token-succ,

    token-is-name? if(
        token-name? name-value@ match(
            DEF_TAG -> { Case Token Tag }

                # set case pattern
                dup PATTERN_TAG rotr
                dip2(over case-pattern!)

                # set case mid
                dip2(case-match? match-dom@) { Case Type Token Tag }
                elab-tag-sig! subst-nil swap type-freshen-sig
                { Case Type Token Subst Type }
                rotr dip(
                    elab-expand-morphism!
                    dip2(swap) elab-type-unify! nip
                    dip(over case-mid!)
                )
                swap dip(over case-subst!)

                # advance token
                token-succ,

            DEF_NONE ->
                "Unknown constructor." emit-fatal-error!,

            _ ->
                drop "Not a constructor." emit-fatal-error!
        ),

        "Expected constructor name." emit-fatal-error!
    )))

||| Elaborate case body.
def(elab-case-body!, Case Token -- Case Token,
    dip(case-mid? dip(case-match? match-ctx@)) elab-arrow-fwd!
    arrow-token-end? dip(arrow-cod?) { Case Arrow Type Token }
    dip2(over case-body!) { Case Type Token }
    dip2(case-match? match-cod@) elab-type-unify! nip)

||| Apply a type signature after freshening to get a codomain.
def(elab-atom-op-apply-fresh!, Atom Type -- Atom,
    subst-nil swap type-freshen-sig
    dip(over atom-subst!)
    elab-atom-op-apply!)

||| Same as elab-arrow-op-apply! but it uses a fresh stack var
||| if the morphism has unit type.
def(elab-atom-op-apply-semifresh!, Atom Type -- Atom,
    type-semifreshen-sig
    elab-atom-op-apply!)

||| Apply a type signature to get a codomain.
def(elab-atom-op-apply!, Atom Type -- Atom,
    type-expand

    over atom-token@ token-num-args
    over type-max-num-params > if(
        over atom-token@
        "Too many arguments." emit-fatal-error!
        drop2 TYPE_ERROR, # TODO: improve error message

    over atom-token@ dup token-num-args
    elab-expand-params! drop
    dip(swap dip(elab-atom-unify-dom!))
    dip(elab-atom-op-args!))
    over atom-cod!)

def(elab-expand-params!, Type Token Int -- List(Type) Type Type Token,
    dip(elab-expand-morphism! dip(swap))
    elab-expand-tensors!
    dip(rotr swap))

def(elab-expand-tensors!, Type Token Int -- Type List(Type) Token,
    dup 0 > if(
        dip(elab-expand-tensor!) rotl
        dip(1- elab-expand-tensors!) rotr
        dip(cons),
        drop nil swap
    ))

||| Unify a type with the dom of an arrow, returning the original arrow.
def(elab-atom-unify-dom!, Atom Type -- Atom,
    over atom-dom? swap atom-token@ elab-type-unify! drop2)

||| Elaborate the args of an arrow.
def(elab-atom-op-args!, Atom List(Type) -- Atom,
    dip(atom-token? token-succ)
    for(dip(token-succ) elab-atom-arg!) drop)

||| Elaborate one arg of a given type, move token to the end of the argument.
def(elab-atom-arg!, Atom Token Type -- Atom Token,
    over token-is-name? dip(token-succ token-is-arg-end? nip) && if(
        dup3 drop token-name@
        dip(atom-ctx@) swap ctx-lookup
        match(
            SOME ->
                var-auto-run? if(
                    elab-atom-arg-var-run!,
                    drop elab-atom-arg-block!
                ),
            NONE -> elab-atom-arg-block!
        ),
        elab-atom-arg-block!
    ))

||| Elaborate ARG_BLOCK argument, move token to the end of the argument.
def(elab-atom-arg-block!, Atom Token Type -- Atom Token,
    over dip2(over atom-ctx@)
    Block.alloc! dip(elab-arrow!)
    tuck block-arrow! ARG_BLOCK
    swap token-next-arg-end
    dip(atom-arg-add!))

||| Elaborate ARG_VAR_RUN argument, move token to the end of the argument.
def(elab-atom-arg-var-run!, Atom Token Type Var -- Atom Token,
    dup dip(var-type@ rotl elab-type-unify! nip)
    swap token-next-arg-end
    dip(ARG_VAR_RUN atom-arg-add!))

######################
# Module Elaboration #
######################

||| Elaborate all of a module.
def(elab-module!, Module -- Module +Mirth,
    module-start?
    token-skip-newlines
    elab-module-header!
    elab-module-imports!
    elab-module-decls!
    typecheck-everything!
    drop)

||| Check that the `module(M)` statement exists and save the name.
def(elab-module-header!, Module Token -- Module Token +Mirth,
    PRIM_SYNTAX_MODULE token-prim=? if(
        dup2 elab-module-name! token-next,
        dup "Expected module header." emit-error!
    )
    token-skip-newlines)

||| Check & save the module name from the module header `module(M)`.
def(elab-module-name!, Module Token -- +Mirth,
    token-args-1 token-is-name? if(
        token-name?
        name-defined? if(
            drop "Module name already taken." emit-fatal-error!,
            dip(swap)
            dup2 swap module-name!
            dup2 name-module!

            # check module name matches module path
            dip(module-path@ Path->Str)
            name-str@ ".mth" str-cat str-eq if(
                drop,
                "Module name should match path." emit-error!
            )
        ),
        "Expected module name." emit-fatal-error!
    ))


||| Elaborate module imports. Return token after imports.
def(elab-module-imports!, Module Token -- Module Token +Mirth,
    while(PRIM_SYNTAX_IMPORT token-prim=?, elab-module-import!))

||| Elaborate `import(M)` statement. Return token after import.
def(elab-module-import!, Module Token -- Module Token +Mirth,
    dup dip(token-next)
    token-args-1 token-value? match(
        TOKEN_NAME ->
            name-value? match(
                DEF_MODULE ->
                    drop3,
                    # module is already loaded (TODO: add import to a list)

                DEF_NONE ->
                    name-str@ ".mth" str-cat
                    Str->Path run-lexer!
                    elab-module! drop2,
                    # elab the imported module (TODO: add import to a list)

                _ ->
                    drop2 "module name already taken" emit-fatal-error!
            ),
        _ ->
            drop "expected module name" emit-fatal-error!
    )
    token-skip-newlines)

||| Elaborate the rest of the module.
def(elab-module-decls!, Module Token -- Module Token +Mirth,
    while(token-is-module-end? not, elab-module-decl!))

||| Elaborate a declaration. Returns the next token.
def(elab-module-decl!, Module Token -- Module Token +Mirth,
    PRIM_SYNTAX_DEF token-prim=? if( elab-def!,
    PRIM_SYNTAX_DEF_EXTERNAL token-prim=? if( elab-def-external!,
    PRIM_SYNTAX_DEF_TYPE token-prim=? if( elab-def-type!,
    PRIM_SYNTAX_BUFFER token-prim=? if( elab-buffer!,
    PRIM_SYNTAX_TABLE token-prim=? if( elab-table!,
    PRIM_SYNTAX_FIELD token-prim=? if( elab-field!,
    PRIM_SYNTAX_TARGET_C99 token-prim=? if(elab-target-c99!,
    PRIM_SYNTAX_DATA token-prim=? if( elab-data!,
    token-could-be-word-sig? if(elab-decl-word-sig!,
    token-could-be-word-def? if(elab-decl-word-def!,
    "unknown declaration" emit-fatal-error!))))))))))
    token-skip-newlines)

||| Elaborate a data definition `data T ... end` or `data(T, ...)`
def(elab-data!, Module Token -- Module Token +Mirth,
    Data.alloc! swap
    elab-data-header!
    elab-data-tags!)

||| Get the header, name, arity for a data type. Doesn't move the Token.
def(elab-data-header!, Module Data Token -- Module Data Token +Mirth,
    dup2 token-has-args? if(
        token-succ token-succ,
        token-succ
    )
    dup2 swap data-header!
    sig-token-is-type-con? if(
        token-name?
        name-undefined? if(
            dip(over)
            dup2 swap data-name!
            dip(TData) name-type!,
            drop "Name already defined." emit-fatal-error!
        ),
        drop2 "Expected type name." emit-fatal-error!
    )

    token-has-args? if(
        # TODO check arguments are well-formed / elaborate them properly
        token-num-args swap data-arity!,
        drop2
    ))

||| Get the tags (i.e. constructors) associated with a data type.
||| Moves the Token to after the data declaration.
def(elab-data-tags!, Module Data Token -- Module Token +Mirth,
    token-has-args? if(
        token-succ token-succ token-next
        token-is-rparen? if(
            token-succ,
        token-is-comma? if(
            token-succ
            elab-data-tags-body!
            expect-token-rparen token-succ,
            "Expected comma or right parenthesis." emit-fatal-error!
        )),

        token-succ token-next
        expect-token-newline token-skip-newlines
        elab-data-tags-body!
        expect-token-end token-succ
    )
    nip)

expect-token-comma : Token -- Token
expect-token-comma = token-is-comma? if(id, "Expected comma." emit-fatal-error!)

expect-token-rparen : Token -- Token
expect-token-rparen = token-is-rparen? if(id, "Expected right parenthesis." emit-fatal-error!)

expect-token-newline : Token -- Token
expect-token-newline = token-is-newline? if(id, "Expected newline." emit-fatal-error!)

expect-token-end : Token -- Token
expect-token-end = PRIM_SYNTAX_END token-prim=? if(id, "Expected 'end'" emit-fatal-error!)

expect-token-arrow : Token -- Token
expect-token-arrow = token-is-arrow? if(id, "Expected arrow." emit-fatal-error!)

||| Get the tags (i.e. constructors) associated with a data type,
||| from inside the data declaration, one at a time. Moves the Token
||| to just after the last tag.
elab-data-tags-body! : Module Data Token -- Module Data Token
elab-data-tags-body! = while(elab-data-tags-done? not, elab-data-tag!)

elab-data-tags-done? : Token -- Token Bool
elab-data-tags-done? = token-is-rparen? if(true, PRIM_SYNTAX_END token-prim=?)

||| Get a tag associated with a data type.
||| This looks like either "TAG" or "TAG -> TYPE1 ... TYPEN".
||| Moves the Token to after the tag declaration.
elab-data-tag! : Module Data Token -- Module Data Token +Mirth
elab-data-tag! = (
    token-is-name? if(
        token-name? name-undefined? if(
            Tag.alloc!
            dup2 swap name-tag!
            tuck tag-name!,
            drop "Name already defined. (Overlapping tags not yet supported.)" emit-fatal-error!
        )
        { Module Data Token Tag }
        dip(over) dup2 tag-data!
        tuck dip(data-add-tag!)
        { Module Data Token Tag }
        swap token-succ
        token-is-arrow? if(
            dip(true over tag-has-sig!)
            token-succ tuck dip(tag-sig!)
            while(token-run-end? not, token-next),
        token-run-end? if(
            nip,
            "Expected arrow, comma, right paren, or newline." emit-fatal-error!
        ))
        { Module Data Token },

        "Expected constructor name." emit-fatal-error!
    )
    token-is-comma? if(token-succ, id)
    token-skip-newlines
)

||| Elaborate a word definition `def(w, t, b)`.
def(elab-def!, Module Token -- Module Token +Mirth,
    dup dip(token-next) token-args-3
    rotl token-is-name? if(
        token-name?
        name-undefined? if(
            nip
            Word.alloc!
            dup2 swap name-word!
            dup dip(word-name!)
            dup dip(word-body!)
            word-sig!,

            drop "word already defined" emit-fatal-error!
        ),
        "expected word name" emit-fatal-error!
    ))

||| Elaborate a word signature "foo : Bar -- Baz"
def(elab-decl-word-sig!, Module Token -- Module Token +Mirth,
    token-name? name-undefined? if(
        Word.alloc! tuck
        dup2 word-name!
        swap name-word!
        dip(token-next token-succ dup) word-sig!
        while(token-is-newline? not, token-next) token-skip-newlines,

        drop "word already defined" emit-fatal-error!
    ))

||| Elaborate a word definition "foo = bar"
def(elab-decl-word-def!, Module Token -- Module Token +Mirth,
    token-name? name-value@ match(
        DEF_WORD ->
            word-body? is-nil if(
                dip(token-next token-succ
                    token-is-lparen? if(token-succ, token-skip-newlines)
                    dup) word-body!
                while(token-is-newline? not, token-next) token-skip-newlines,
                drop "word already defined" emit-fatal-error!
            ),
        DEF_NONE ->
            "missing word signature" emit-fatal-error!,
        _ ->
            drop "name already defined, not a word" emit-fatal-error!
    ))

||| Elaborate an external declaration `def-external(w, t)`
def(elab-def-external!, Module Token -- Module Token +Mirth,
    dup dip(token-next) token-args-2
    swap token-is-name? if(
        token-name? name-undefined? if(
            nip
            External.alloc!
            dup2 swap name-external!
            tuck external-name!
            external-sig!,

            drop "word already defined" emit-fatal-error!
        ),
        "expected word name" emit-fatal-error!
    ))

||| Elaborate a type definition `def-type(t1, t2)`.
def(elab-def-type!, Module Token -- Module Token +Mirth,
    dup dip(token-next) token-args-2
    swap sig-token-is-type-con? if(
        token-name? name-undefined? if(
            nip swap
            elab-simple-type-arg!
            swap name-type!,

            drop "type already defined" emit-fatal-error!
        ),
        "expected type constructor" emit-fatal-error!
    ))

||| Elaborate a buffer definition `buffer(B, size)`.
def(elab-buffer!, Module Token -- Module Token +Mirth,
    dup dip(token-next) token-args-2
    swap token-is-name? if(
        token-name? name-undefined? if(
            nip swap
            token-int@ buffer-alloc! drop,
            drop "buffer already defined" emit-fatal-error!
        ),
        "expected buffer name" emit-fatal-error!
    ))

||| Elaborate a table definition `table(T)`.
def(elab-table!, Module Token -- Module Token +Mirth,
    dup dip(token-next) token-args-1
    sig-token-is-type-con? if(
        token-name@ table-new! drop,
        "expected table name" emit-fatal-error!
    ))

||| Elaborate a field definition `field(f, T1, T2)`.
def(elab-field!, Module Token -- Module Token +Mirth,
    dup dip(token-next) token-args-3
    rotl token-value? match(
        TOKEN_NAME ->
            nip rotl dup elab-simple-type-arg!
            type-max-count? match(
                NONE -> drop "expected table type or enum" emit-fatal-error!,
                SOME ->
                    dip(nip rotl elab-simple-type-arg!)
                    field-new! drop,
            ),
        _ ->
            drop "expected field name" emit-fatal-error!
    ))

||| Elaborate C99 build target.
def(elab-target-c99!, Module Token -- Module Token +Mirth,
    typecheck-everything!

    dup dip(token-next) token-args-2
    dip(token-str@ Str->Path)
    dip(ctx-empty T0 T0 T->)
    elab-arrow!
    swap run-output-c99!)

||| Ensure that everything so far has been typechecked.
def(typecheck-everything!, --,
    Name.for(typecheck-name!))

||| Typecheck name.
def(typecheck-name!, Name --,
    name-value@ match(
        DEF_NONE -> id,
        DEF_MODULE -> drop,
        DEF_BUFFER -> drop,
        DEF_PRIM -> drop,
        DEF_TYPE -> drop,
        DEF_EXTERNAL -> elab-external-sig! drop,
        DEF_WORD -> elab-word-body! drop,
        DEF_TAG -> elab-tag-sig! drop,
    ))



#########
# TABLE #
#########

def(TABLE_MAX_SIZE, Int, 0x20000)

def(table-new!, Name -- Table,
    table-alloc!
    dup2 TTable swap name-type!
    tuck table-name!

    TABLE_MAX_SIZE over table-max-count!

    # Table.MAX
    table-name? ".MAX" name-cat!
    Word.alloc!
    dup2 swap name-word!
    tuck word-name!

    TYPE_UNIT
    TYPE_UNIT TYPE_INT TTensor
    TMorphism
    over word-type!
    true over word-sig-is-checked!

    ab-build-for-word!( TABLE_MAX_SIZE ab-int! )
    true swap word-body-is-checked!

    # Table.NUM
    table-name? ".NUM" name-cat!
    8 buffer-alloc!
    over table-num-buffer!

    # Table.for
    table-name? ".for" name-cat!
    Word.alloc!
    dup2 swap name-word!
    tuck word-name!

    \(t w ->

        "a" name-new! var-new-implicit!
        "x" name-new! var-new!
        \(a x ->
            TYPE_STACK a var-type!
            ctx-empty a ctx-new!
            w word-ctx!

            a TVar a TVar t TTable T* a TVar T-> T*
            a TVar T->
            w word-type!

            true w word-sig-is-checked!
            true w word-body-is-checked!

            a TVar t TTable T* a TVar T-> x var-type!
            true x var-auto-run!

            Lambda.alloc!
            x L1 over lambda-params!

            1 arrow-new-int!
            dup2 swap lambda-body!

            PRIM_CORE_WHILE arrow-push-prim!
                PRIM_CORE_DUP arrow-new-prim!
                dup block-new! ARG_BLOCK swap
                t table-num-buffer@ arrow-push-buffer!
                PRIM_INT_GET arrow-push-prim!
                PRIM_VALUE_LE arrow-push-prim!
                drop

                PRIM_CORE_DUP arrow-new-prim!
                dup block-new! ARG_BLOCK swap
                PRIM_CORE_DIP arrow-push-prim!
                    x ARG_VAR_RUN
                arrow-arg-add!
                1 arrow-push-int!
                PRIM_INT_ADD arrow-push-prim!
                drop
            dip(arrow-arg-add!) arrow-arg-add!

            PRIM_CORE_DROP arrow-push-prim!
            drop

            arrow-new-lambda!
            w word-arrow!)

        t)

    # Table.alloc!
    table-name? ".alloc!" name-cat!
    Word.alloc!
    dup2 swap name-word!
    tuck word-name!

    over dip(T0) TTable T1 T->
    over word-type!
    true over word-sig-is-checked!

    # TODO: perform bounds check in Table.alloc!
    over table-num-buffer@ dup
    dip(
        arrow-new-buffer!
        dup2 swap word-arrow!
        PRIM_INT_GET arrow-push-prim!
        1 arrow-push-int!
        PRIM_INT_ADD arrow-push-prim!
        PRIM_CORE_DUP arrow-push-prim!
    )
    arrow-push-buffer!
    PRIM_INT_SET arrow-push-prim!
    drop true swap word-body-is-checked!)

#########
# FIELD #
#########

def(Field->Int, Field -- Int, cast)
def(field-alloc!, Field, Field.alloc!)
def(field-new!, Name Type Type Int -- Field,
    dip(
        field-alloc!
        tuck field-type!
        tuck field-table!
        tuck field-name!

        # define the buffer for the field
        field-name? "-buffer" name-cat!
    )
    16 * buffer-alloc! over field-buffer!

    # field&
    field-name? "&" name-cat!
    Word.alloc!
    dup2 swap name-word!
    tuck word-name!

    over field-table@
    TYPE_UNIT swap TTensor
    TYPE_UNIT TYPE_PTR TTensor
    TMorphism
    over word-type!
    true over word-sig-is-checked!

    # FIXME: need a better arrow-building inteface that tracks types
    #  i.e. a better elaborator API.
    16 arrow-new-int!
    dup2 swap word-arrow!
    PRIM_INT_MUL arrow-push-prim!
    dip(over field-buffer@) swap arrow-push-buffer!
    PRIM_PTR_ADD arrow-push-prim!
    drop true over word-body-is-checked!
    over field-word-ptr!

    # field!
    field-name? "!" name-cat!
    Word.alloc!
    dup2 swap name-word!
    tuck word-name!

    over field-table?
    dip(field-type@ dip(TYPE_UNIT) TTensor) TTensor
    TYPE_UNIT TMorphism
    over word-type!
    true over word-sig-is-checked!

    over field-word-ptr@ arrow-new-word!
    dup2 swap word-arrow!
    PRIM_VALUE_SET arrow-push-prim!
    drop true swap word-body-is-checked!

    # field@
    field-name? "@" name-cat!
    Word.alloc!
    dup2 swap name-word!
    tuck word-name!

    over field-table? swap field-type@
    dip(TYPE_UNIT swap TTensor)
    TYPE_UNIT swap TTensor
    TMorphism
    over word-type!
    true over word-sig-is-checked!

    over field-word-ptr@ arrow-new-word!
    dup2 swap word-arrow!
    PRIM_VALUE_GET arrow-push-prim!
    drop true swap word-body-is-checked!

    # field?
    field-name? "?" name-cat!
    Word.alloc!
    dup2 swap name-word!
    tuck word-name!

    over field-table? swap field-type@
    dip(TYPE_UNIT swap TTensor)
    dip(dup) TTensor
    TMorphism
    over word-type!
    true over word-sig-is-checked!

    over field-word-ptr@
    dip(
        PRIM_CORE_DUP arrow-new-prim!
        dup2 swap word-arrow!
    )
    arrow-push-word!
    PRIM_VALUE_GET arrow-push-prim!
    drop true swap word-body-is-checked!)
