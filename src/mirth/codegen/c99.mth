module(mirth.codegen.c99)
import(prelude)
import(data.str)
import(data.stack)
import(data.path)
import(data.list)
import(data.lazy)
import(data.byte)
import(data.maybe)
import(resource.file)
import(resource.output)
import(mirth.data.error)
import(mirth.data.module)
import(mirth.data.location)
import(mirth.data.token)
import(mirth.data.name)
import(mirth.data.buffer)
import(mirth.data.arrow)
import(mirth.data.word)
import(mirth.data.table)
import(mirth.data.variable)
import(mirth.data.external)
import(mirth.data.constant)
import(mirth.data.ctx)
import(mirth.data.type)
import(mirth.data.data)
import(mirth.data.prim)
import(mirth.data.var)
import(mirth.data.match)
import(mirth.elab)
import(mirth.analysis.need)

#######
# C99 #
#######

data(+C99, MKC99 -> Nat +Needs +Output)
def(+C99/MKC99, +C99 -- Nat +Needs +Output, MKC99 -> id)

def(+C99.depth@, +C99 -- Nat +C99, /MKC99 dup dip(MKC99))
def(+C99.depth!, Nat +C99 -- +C99, dip(/MKC99 drop) MKC99)

def(+C99~Needs(f), (*a +Needs -- *b +Needs) *a +C99 -- *b +C99,
    /MKC99 dip(rdip(f)) MKC99)
def(+C99~Output(f), (*a +Output -- *b +Output) *a +C99 -- *b +C99,
    /MKC99 dip(rdip'(f)) MKC99)

def(Str+C99.put, Str +C99 -- +C99, ~Output(put))
def(Int+C99.put, Int +C99 -- +C99, ~Output(put))
def(Nat+C99.put, Nat +C99 -- +C99, ~Output(put))
def(Size+C99.put, Size +C99 -- +C99, ~Output(put))
def(Byte+C99.put, Byte +C99 -- +C99, ~Output(put))
def(+C99.line, +C99 -- +C99, ~Output(line))

def(Word+C99.needed?, Word +C99 -- Bool +C99, ~Needs(needed?))
def(Block+C99.needed?, Block +C99 -- Bool +C99, ~Needs(needed?))

def(c99-start!, Arrow Path +World -- Arrow +World +C99,
    to-output-path create-file! output-start!
    rdip(+Needs.new dup determine-arrow-needs!)
    0 >Nat MKC99)

def(c99-end!, +World +C99 -- +World,
    /MKC99 drop rdip(rdrop) output-end! +File.close-file!)

def(run-output-c99!, Arrow Path +World -- +World,
    num-errors @ 0> if(
        drop2,

        c99-start!
        c99-header!
        c99-tags!
        c99-buffers!
        c99-variables!
        c99-externals!
        c99-word-sigs!
        c99-block-sigs!
        c99-field-sigs!
        c99-main!
        c99-field-defs!
        c99-word-defs!
        c99-block-defs!
        c99-end!
    ))

def(Name+C99.put, Name +C99 -- +C99, mangled put)
def(Name+C99.sig, Name +C99 -- Str +C99, dip("static void mw_") mangled cat " (void)" cat)
def(Name+C99.cosig, Name +C99 -- Str +C99, dip("static void mp_") mangled cat " (void)" cat)

embed-str(c99-header-str, "src/mirth/codegen/mirth.h")
def(c99-header!, +C99 -- +C99, c99-header-str put line)

def(c99-buffers!, +C99 -- +C99, Buffer.for(c99-buffer!) line)
def(c99-buffer!, Buffer +C99 -- +C99,
    dup name sig put " {" put line
    "    static uint8_t b[" put dup size put "] = {0};" put line
    "    push_ptr(&b);" put line
    "}" put line
    drop)

def(c99-variables!, +C99 -- +C99, Variable.for(c99-variable!) line)
def(c99-variable!, Variable +C99 -- +C99,
    name sig put " {" put line
    "    static VAL v = {0};" put line
    "    push_ptr(&v);" put line
    "}" put line)

def(c99-tags!, +C99 -- +C99, Tag.for(c99-tag!) line)
def(c99-tag!, Tag +C99 -- +C99,
    dup name sig put " {" put line
    dup is-transparent? if(
        id,
        "    VAL tag = MKU64(" put dup value put "LL);" put line
        "    VAL car = (" put
        dup num-type-inputs repeat(
            "pop_value());" put line
            "    car = mkcons(car, " put
        )
        dup num-resource-inputs repeat(
            "pop_resource());" put line
            "    car = mkcons(car, " put
        )
        "tag);" put line
        dup outputs-resource? if(
            "    push_resource(car);",
            "    push_value(car);"
        ) put line
    )
    "}" put line

    dup name cosig put " {" put line
    dup is-transparent? if(
        id,
        dup outputs-resource? if(
            "    VAL car = pop_resource();",
            "    VAL car = pop_value();"
        ) put line
        dup num-resource-inputs over num-type-inputs + 0> then(
            "    VAL cdr;" put line
        )
        "    decref("
        over num-resource-inputs repeat(
            "    value_uncons_c(car, &car, &cdr);" put line
            put "cdr);" put line
            "    push_resource("
        )
        over num-type-inputs repeat(
            "    value_uncons_c(car, &car, &cdr);" put line
            put "cdr);" put line
            "    push_value("
        )
        put "car);" put line
    )
    "}" put line

    drop)

def(c99-externals!, +C99 -- +C99,
    External.for(c99-external!) line)

def(c99-external!, External +C99 -- +C99,
    dup sig sig-arity
    dup 2 >Nat >= if(
        "can't declare external with multiple return values" panic!,

        dup 1 >Nat >= if(
            "int64_t ",
            "void "
        ) put
    )

    dip2(dup name >Str put)

    " (" put
    over dup 0> if("int64_t" put 1- repeat(", int64_t" put), drop "void" put)
    ");" put line

    dip2(dup name sig put) " {" put line
    over countdown("    int64_t x" put put " = pop_i64();" put line)
    dup 0> if("    push_i64(", "    ") put
    dip2(dup name >Str put)
    "(" put
    dip(dup 0> if(
        dup 1- dup count("x" put put ", " put) "x" put put,
        id
    ))
    ")" put
    dup 0> if(");", ";") put line
    "}" put line
    drop3)

def(c99-nest(f), (*a +C99 -- *b +C99) *a +C99 -- *b +C99,
    depth@ 1+ depth!
    f
    depth@ 1- depth!)

def(+C99.indent, +C99 -- +C99, depth@ repeat("    " put))
def(c99-line(f), (*a +C99 -- *b +C99) *a +C99 -- *b +C99, indent f line)

def(c99-call!, List(Arg) Name +C99 -- +C99,
    dip(c99-args-push!)
    c99-line("mw_" put put "();" put))

def(c99-arrow!, Arrow +C99 -- +C99, atoms for(c99-atom!))
def(c99-atom!, Atom +C99 -- +C99,
    c99-line("WORD_ATOM(" put
        dup token row >Int put ", " put
        dup token col >Int put ", " put
        dup token name? if-some(>Str, "") put-cstr
        ");" put)
    sip(args) op
    c99-args-op!)

def(c99-args-op!, List(Arg) Op +C99 -- +C99,
    OP_NONE     -> drop,
    OP_INT      -> nip c99-int!,
    OP_STR      -> nip c99-str!,
    OP_CONSTANT -> nip c99-constant!,
    OP_WORD     -> name c99-call!,
    OP_EXTERNAL -> name c99-call!,
    OP_BUFFER   -> name c99-call!,
    OP_VARIABLE -> name c99-call!,
    OP_FIELD    -> name c99-call!,
    OP_TAG      -> name c99-call!,
    OP_PRIM     -> c99-prim!,
    OP_MATCH    -> nip c99-match!,
    OP_LAMBDA   -> nip c99-lambda!,
    OP_VAR      -> nip c99-var!,
    OP_BLOCK    -> nip c99-block-push!,
    OP_COERCE   -> drop2)

def(c99-int!, Int +C99 -- +C99,
    c99-line("push_i64(" put put "LL);" put))

def(c99-str!, Str +C99 -- +C99,
    c99-line("{" put)
    c99-nest(
        c99-line("static bool vready = false;" put)
        c99-line("static VAL v;" put)
        c99-line("if (! vready) {" put)
        c99-nest(
            dup num-bytes 4090 >Size > if(
                c99-line("v = mkstr(" put)
                c99-nest(
                    c99-line(dup put-cstr-long "," put)
                    c99-line(dup num-bytes put)
                )
                c99-line(");" put),
                c99-line("v = mkstr(" put dup put-cstr ", " put dup num-bytes put ");" put)
            )
            c99-line("vready = true;" put)
        )
        c99-line("}" put)
        c99-line("push_value(v);" put)
        c99-line("incref(v);" put)
    )
    c99-line("}" put)
    drop)

def(+C99.put-cstr-long, Str +C99 -- +C99,
    BQUOTE put
    BNUL swap str-bytes-for(
        swap BLF = then(
            BQUOTE put
            line indent
            BQUOTE put
        )
        dup c99-string-byte!
    )
    BQUOTE put
    drop
)

def(+C99.put-cstr, Str +C99 -- +C99,
    BQUOTE put str-bytes-for(c99-string-byte!) BQUOTE put)

def(c99-string-byte!, Byte +C99 -- +C99,
    B'\' -> "\\\\" put,
    BQUOTE -> "\\\"" put,
    BHT -> "\\t" put,
    BLF -> "\\n" put,
    BCR -> "\\r" put,
    _ ->
        dup BSPACE B'~' in-range if(
            put,
            "\\x" put to-hexdigits dip(put) put
        )
    )

def(c99-constant!, Constant +C99 -- +C99,
    value c99-value!)

def(c99-value!, Value +C99 -- +C99,
    VALUE_INT -> c99-int!,
    VALUE_STR -> c99-str!,
    VALUE_BLOCK -> c99-block-push!)

def(c99-prim!, List(Arg) Prim +C99 -- +C99,
    PRIM_CORE_DIP ->
        match(
            L1 ->
                c99-line("{" put)
                c99-nest(
                    c99-line("VAL d" put depth@ put " = pop_value();" put)
                    c99-arg-run!
                    c99-line("push_value(d" put depth@ put ");" put)
                )
                c99-line("}" put),
            _ ->
                PRIM_CORE_DIP c99-prim-default!
        ),

    PRIM_CORE_RDIP ->
        match(
            L1 ->
                c99-line("{" put)
                c99-nest(
                    c99-line("VAL d" put depth@ put " = pop_resource();" put)
                    c99-arg-run!
                    c99-line("push_resource(d" put depth@ put ");" put)
                )
                c99-line("}" put),
            _ ->
                PRIM_CORE_RDIP c99-prim-default!
        ),

    PRIM_CORE_IF ->
        match(
            L2 ->
                c99-line("if (pop_u64()) {" put)
                c99-nest(swap c99-arg-run!)
                c99-line("} else {" put)
                c99-nest(c99-arg-run!)
                c99-line("}" put),
            _ ->
                PRIM_CORE_IF c99-prim-default!
        ),

    PRIM_CORE_WHILE ->
        match(
            L2 ->
                c99-line("while(1) {" put)
                c99-nest(
                    swap c99-arg-run!
                    c99-line("if (! pop_u64()) break;" put)
                    c99-arg-run!
                )
                c99-line("}" put),

            _ ->
                PRIM_CORE_WHILE c99-prim-default!
        ),

    _ -> c99-prim-default!)

def(c99-prim-default!, List(Arg) Prim +C99 -- +C99,
    name c99-call!)

def(c99-args-push!, List(Arg) +C99 -- +C99,
    for(c99-arg-push!))

def(c99-arg-push!, Arg +C99 -- +C99,
    ARG_BLOCK -> c99-block-push!)

def(c99-arg-run!, Arg +C99 -- +C99,
    ARG_BLOCK -> c99-block-run!)

def(c99-block-run!, Block +C99 -- +C99,
    arrow c99-arrow!)

def(Var+C99.put, Var +C99 -- +C99, "var_" put name put)
def(Param+C99.put, Param +C99 -- +C99, >Var put)

def(c99-pack-ctx!, Ctx +C99 -- +C99,
    c99-line("push_u64(0);" put)
    physical-vars for(
        c99-var-push!
        c99-line("mw_prim_pack_cons();" put)
    ))

def(c99-unpack-ctx!, Ctx +C99 -- +C99,
    physical-vars reverse-for(
        c99-line("mw_prim_pack_uncons();" put)
        c99-line("VAL " put put " = pop_value();" put)
    )
    c99-line("mw_prim_drop();" put))

def(c99-decref-ctx!, Ctx +C99 -- +C99,
    physical-vars reverse-for(
        c99-line("decref(" put put ");" put)
    ))

def(c99-block-push!, Block +C99 -- +C99,
    dup to-run-var match(
        SOME -> nip c99-var-push!,
        NONE ->
            dup ctx c99-pack-ctx!
            c99-line("push_fnptr(&" put put ");" put)
            c99-line("mw_prim_pack_cons();" put)
    ))

def(c99-var!, Var +C99 -- +C99,
    dup auto-run? if(c99-var-run!, c99-var-push!))

def(c99-var-run!, Var +C99 -- +C99,
    c99-line("incref(" put dup put ");" put)
    c99-line("run_value(" put dup put ");" put)
    drop)

def(c99-var-push!, Var +C99 -- +C99,
    c99-line("incref(" put dup put ");" put)
    c99-line("push_value(" put dup put ");" put)
    drop)

def(c99-lambda!, Lambda +C99 -- +C99,
    c99-line("{" put)
    c99-nest(
        dup params reverse-for(
            c99-line("VAL " put put " = pop_value();" put)
        )
        dup body c99-arrow!
        params reverse-for(
            c99-line("decref(" put put ");" put)
        )
    )
    c99-line("}" put))

def(c99-match!, Match +C99 -- +C99,
    dup is-transparent? if(
        cases first unwrap body c99-arrow!,

        dup scrutinee-data?
        unwrap-or(token "non-uniform match, not supported at present" emit-fatal-error!)
        is-resource? if(
            c99-line("switch (get_top_resource_data_tag()) {" put),
            c99-line("switch (get_top_data_tag()) {" put)
        )
        c99-nest(
            dup cases for(c99-case!)
            has-default-case? else(
                c99-line("default: write(2, \"unexpected fallthrough in match\\n\", 32); mw_prim_debug(); exit(99);" put)
            )
        )
        c99-line("}" put)
    ))

def(c99-case!, Case +C99 -- +C99,
    dup pattern c99-pattern!
    c99-nest(
        body c99-arrow!
        c99-line("break;" put)
    ))

def(c99-pattern!, Pattern +C99 -- +C99,
    PATTERN_UNDERSCORE ->
        c99-line("default:" put),

    PATTERN_TAG ->
        c99-line("case " put dup value put "LL:" put)
        c99-nest(
            c99-line("mp_" put name put "();" put)
        )
    )

def(c99-word-sigs!, +C99 -- +C99, Word.for(dup needed? if(c99-word-sig!, drop)) line)
def(c99-word-sig!, Word +C99 -- +C99,
    c99-line("static void mw_" put name put " (void);" put))

def(c99-block-sigs!, +C99 -- +C99, Block.for(dup needed? if(c99-block-sig!, drop)) line)
def(c99-block-sig!, Block +C99 -- +C99,
    c99-line("static void " put put " (void);" put))

def(c99-field-sigs!, +C99 -- +C99, Field.for(c99-field-sig!) line)
def(c99-field-sig!, Field +C99 -- +C99,
    c99-line("static void mw_" put name put " (void);" put))

def(c99-block-enter!, Block +C99 -- +C99,
    c99-line("WORD_ENTER(" put
        dup put ", " put
        dup home match(
            HOME_MAIN -> drop "block",
            HOME_WORD -> name >Str " block" cat,
        ) put-cstr ", " put
        dup token .module source-path >Str put-cstr ", " put
        dup token row >Int put ", " put
        dup token col >Int put ");" put)
    drop)

def(c99-block-exit!, Block +C99 -- +C99,
    c99-line("WORD_EXIT(" put put ");" put))

def(c99-block-defs!, +C99 -- +C99, Block.for(dup needed? if(c99-block-def!, drop)) line)
def(c99-block-def!, Block +C99 -- +C99,
    c99-line("static void " put dup put " (void) {" put)
    c99-nest(
        dup c99-block-enter!
        dup arrow
        dup ctx c99-unpack-ctx!
        dup c99-arrow!
        ctx c99-decref-ctx!
        c99-block-exit!
    )
    c99-line("}" put) line)

def(Block+C99.put, Block +C99 -- +C99,
    "mb_" put
    dup home match(
        HOME_MAIN -> "main_" put dip(arrow token-start .id) .id - put,
        HOME_WORD -> dup name put "_" put dip(arrow) arrow both(token-start .id) - put
    ))

def(c99-word-enter!, Word +C99 -- +C99,
    c99-line("WORD_ENTER(" put
        "mw_" put dup name put ", " put
        dup name >Str put-cstr ", " put
        dup body .module source-path >Str put-cstr ", " put
        dup body row >Int put ", " put
        dup body col >Int put ");" put)
    drop)

def(c99-word-exit!, Word +C99 -- +C99,
    c99-line("WORD_EXIT(" put
        "mw_" put dup name put ");" put)
    drop)

def(c99-word-defs!, +C99 -- +C99, Word.for(dup needed? if(c99-word-def!, drop)) line)
def(c99-word-def!, Word +C99 -- +C99,
    c99-line(dup name sig put " {" put)
    c99-nest(
        dup c99-word-enter!
        dup arrow c99-arrow!
        dup c99-word-exit!
    )
    c99-line("}" put)
    drop)

def(c99-field-defs!, +C99 -- +C99, Field.for(c99-field-def!) line)
def(c99-field-def!, Field +C99 -- +C99,
    "static VAL* fieldptr_" put dup name put " (size_t i) {" put line
    "    static struct VAL * p = 0;" put line
    "    size_t m = " put TABLE_MAX_COUNT put ";" put line
    "    if (! p) { p = calloc(m, sizeof *p); }" put line
    "    if (i>=m) { write(2,\"table too big\\n\",14); exit(123); }" put line
    "    return p+i;" put line
    "}" put line line
        # TODO make this more flexible wrt table size
        # note it's important to have stability,
        # so we can't just realloc as we used to.
    dup name sig put "{" put
    "    size_t index = (size_t)pop_u64();" put line
    "    VAL *v = fieldptr_" put dup name put "(index);" put line
    "    push_ptr(v);" put line
    "}" put line line
    drop)

def(c99-main!, Arrow +C99 -- +C99,
    c99-line("int main (int argc, char** argv) {" put)
    c99-nest(
        c99-line("global_argc = argc;" put)
        c99-line("global_argv = argv;" put)
        c99-line("push_resource(MKU64(0));" put) # world
        c99-line("WORD_ENTER(" put
            "(void(*)(void))0, " put
            "\"<main>\", " put
            dup token-start .module source-path >Str put-cstr ", " put
            dup token-start row >Int put ", " put
            dup token-start col >Int put ");" put)
        c99-arrow!
        c99-line("WORD_EXIT((void(*)(void))0);" put)
        c99-line("return 0;" put)
    )
    c99-line("}" put))
