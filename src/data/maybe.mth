module(data.maybe)
import(prelude)

data Maybe(t)
    NONE
    SOME -> t
end

is-none : Maybe(t) -- Bool
is-none = is-nil

is-some : Maybe(t) -- Bool
is-some = is-nil not

is-none? : Maybe(t) -- Maybe(t) Bool
is-none? = is-nil?

is-some? : Maybe(t) -- Maybe(t) Bool
is-some? = is-nil? not

maybe-map : *c Maybe(a) [*c a -- *c b] -- *c Maybe(b)
maybe-map = \([f] ->
    match(
        NONE -> NONE,
        SOME -> f SOME,
    )
)

maybe-bind : *c Maybe(a) [*c a -- *c Maybe(b)] -- *c Maybe(b)
maybe-bind = \([f] ->
    match(
        NONE -> NONE,
        SOME -> f
    )
)

maybe-for : *c Maybe(a) [*c a -- *c] -- *c
maybe-for = \([f] ->
    match(
        NONE -> id,
        SOME -> f
    )
)

maybe-filter : *c Maybe(a) [*c a -- *c a Bool] -- *c Maybe(a)
maybe-filter = \([f] ->
    match(
        NONE -> NONE,
        SOME -> f if(SOME, drop NONE)
    )
)
