module(data.maybe)
import(prelude)

data(Maybe(t), NONE, SOME -> t)

def(is-none, Maybe(t) -- Bool, is-nil)
def(is-some, Maybe(t) -- Bool, is-nil not)
def(is-none?, Maybe(t) -- Maybe(t) Bool, is-nil?)
def(is-some?, Maybe(t) -- Maybe(t) Bool, is-nil? not)

def(unwrap, Maybe(t) -- t,
    NONE -> "tried to unwrap NONE" panic!,
    SOME -> id)

def(unwrap-or(f), (*a -- *a t) *a Maybe(t) -- *a t,
    NONE -> f,
    SOME -> id)

def(maybe-map(f), (*c a -- *c b) *c Maybe(a) -- *c Maybe(b),
    NONE -> NONE,
    SOME -> f SOME)

def(maybe-bind(f), (*c a -- *c Maybe(b)) *c Maybe(a) -- *c Maybe(b),
    NONE -> NONE,
    SOME -> f)

def(maybe-for(f), (*c a -- *c) *c Maybe(a) -- *c,
    NONE -> id,
    SOME -> f)

def(maybe-filter(f), (*c a -- *c a Bool) *c Maybe(a) -- *c Maybe(a),
    NONE -> NONE,
    SOME -> f if(SOME, drop NONE))

def(while-some(f,g), (*a -- *a Maybe(b), *a b -- *a) *a -- *a,
    f while(is-some?, unwrap g f) drop)
