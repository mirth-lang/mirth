module(data.maybe)
import(prelude)

data(Maybe(t), NONE, SOME -> t)

def(is-none, Maybe(t) -- Bool, is-nil)
def(is-some, Maybe(t) -- Bool, is-nil not)
def(is-none?, Maybe(t) -- Maybe(t) Bool, is-nil?)
def(is-some?, Maybe(t) -- Maybe(t) Bool, is-nil? not)

def(unwrap, Maybe(t) -- t,
    NONE -> "tried to unwrap NONE" panic!,
    SOME -> id)

def(maybe-map, *c Maybe(a) [*c a -- *c b] -- *c Maybe(b),
    \([f] -> match(
        NONE -> NONE,
        SOME -> f SOME,
    )))

def(maybe-bind, *c Maybe(a) [*c a -- *c Maybe(b)] -- *c Maybe(b),
    \([f] -> match(
        NONE -> NONE,
        SOME -> f
    )))

def(maybe-for, *c Maybe(a) [*c a -- *c] -- *c,
    \([f] -> match(
        NONE -> id,
        SOME -> f
    )))

def(maybe-filter, *c Maybe(a) [*c a -- *c a Bool] -- *c Maybe(a),
    \([f] -> match(
        NONE -> NONE,
        SOME -> f if(SOME, drop NONE)
    )))

def(while-some, *a [*a b -- *a] [*a -- *a Maybe(b)] -- *a,
    \([g][f] -> f while(is-some?, unwrap g f) drop))
