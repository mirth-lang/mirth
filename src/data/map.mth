module(data.map)

import(prelude)
import(data.bag)
import(data.maybe)
import(data.list)

||| A map associates keys with values. A single key
||| has at most one value it corresponds to. Maps are
||| represented as bags, but with the condition that
||| no two pairs share the same key.
data(Map(k,v), MAP -> Bag([v k]))

def(unMAP, Map(k,v) -- Bag([v k]), MAP -> id)
def(map-empty, Map(k,v), B0 MAP)
def(map-is-empty, Map(k,v) -- Bool, MAP -> bag-is-empty)
def(map-singleton, [v k] -- Map(k,v), B1 MAP)
def(map-is-singleton, Map(k,v) -- Bool, unMAP bag-is-singleton)
def(map-has, Map(k,v) k -- Bool, map-lookup is-some)
def(map-has?, Map(k,v) k -- Map(k,v) k Bool, dup2 map-has)
def(map-lookup, Map(k,v) k -- Maybe(v), dip(unMAP) bag-lookup-key)
def(map-lookup?, Map(k,v) k -- Map(k,v) k Maybe(v), dup2 map-lookup)
def(map-insert, Map(k,v) [v k] -- Map(k,v), dip(unMAP) bag-replace-key MAP)
def(map-cons, [v k] Map(k,v) -- Map(k,v), swap map-insert)
def(map-snoc, Map(k,v) [v k] -- Map(k,v), map-insert)
def(map-pairs, Map(k,v) -- List([v k]), unMAP bag-values)
def(map-keys, Map(k,v) -- List(k), map-pairs map(unpack2 nip))
def(map-values, Map(k,v) -- List(v), map-pairs map(unpack2 drop))
