module(data.bag)
import(prelude)
import(data.list)
import(data.maybe)

||| A bag is a set where items can appear more than once.
||| Bags are represented by sorted lists, where the sorting
||| is done by the generic order relation on values (<=).
data Bag(v)
    BAG -> List(v)
end

unBAG : Bag(v) -- List(v)
unBAG = match(BAG -> id)

B0 : Bag(v)
B0 = nil

B1 : v -- Bag(v)
B1 = L1 BAG

B2 : v v -- Bag(v)
B2 = order2 L2 BAG

B3 : v v v -- Bag(v)
B3 = order3 L3 BAG


||| Same as `Bag(v)` but non-empty.
data Bag+(v)
    BAG+ -> List+(v)
end

unBAG+ : Bag+(v) -- List+(v)
unBAG+ = match(BAG+ -> id)

B1+ : v -- Bag+(v)
B1+ = L1+ BAG+

B2+ : v v -- Bag+(v)
B2+ = order2 L2+ BAG+

B3+ : v v v -- Bag+(v)
B3+ = order3 L3+ BAG+

Bag+->Bag : Bag+(v) -- Bag(v)
Bag+->Bag = unBAG+ List+->List BAG

Bag->Bag+ : Bag(v) -- Maybe(Bag+(v))
Bag->Bag+ = unBAG List->List+ maybe-map(BAG+)

bag-empty : Bag(v)
bag-empty = nil

bag-is-empty : Bag(v) -- Bool
bag-is-empty = is-nil

bag-is-empty? : Bag(v) -- Bag(v) Bool
bag-is-empty? = is-nil?

bag-singleton : v -- Bag(v)
bag-singleton = B1

bag-is-singleton : Bag(v) -- Bool
bag-is-singleton = bag-len 1 ==

bag-is-singleton+ : Bag+(v) -- Bool
bag-is-singleton+ = bag-len+ 1 ==

bag-len : Bag(v) -- Int
bag-len = unBAG len

bag-len? : Bag(v) -- Bag(v) Int
bag-len? = dup bag-len

bag-len+ : Bag+(v) -- Int
bag-len+ = unBAG+ len+

bag-len+? : Bag+(v) -- Bag+(v) Int
bag-len+? = dup bag-len+

bag-first : Bag(v) -- Maybe(v)
bag-first = unBAG first

bag-last : Bag(v) -- Maybe(v)
bag-last = unBAG last

bag-middle : Bag(v) -- Maybe(v)
bag-middle = unBAG middle

bag-first+ : Bag+(v) -- v
bag-first+ = unBAG+ first+

bag-last+ : Bag+(v) -- v
bag-last+ = unBAG+ last+

bag-middle+ : Bag+(v) -- v
bag-middle+ = unBAG+ middle+

bag-split-half-left : Bag+(v) -- Bag+(v) Bag(v)
bag-split-half-left = unBAG+ split-half-left dip(BAG+) BAG

bag-split-half-right : Bag+(v) -- Bag(v) Bag+(v)
bag-split-half-right = unBAG+ split-half-right dip(BAG) BAG+

bag-split-half : Bag(v) -- Bag(v) Bag(v)
bag-split-half = unBAG split-half dip(BAG) BAG

bag-uncons : Bag+(v) -- v Bag(v)
bag-uncons = unBAG+ uncons BAG

bag-unsnoc : Bag+(v) -- Bag(v) v
bag-unsnoc = unBAG+ unsnoc dip(BAG)

bag-cons : v Bag(v) -- Bag(v)
bag-cons = swap bag-insert

bag-snoc : Bag(v) v -- Bag(v)
bag-snoc = bag-insert

bag-cons+ : v Bag(v) -- Bag+(v)
bag-cons+ = swap bag-insert+

bag-snoc+ : Bag(v) v -- Bag+(v)
bag-snoc+ = bag-insert+

bag-cons++ : v Bag+(v) -- Bag+(v)
bag-cons++ = swap bag-insert++

bag-snoc++ : Bag+(v) v -- Bag+(v)
bag-snoc++ = bag-insert++

bag-has : Bag(v) v -- Bool
bag-has =
    swap Bag->Bag+ match(
        NONE -> drop false,
        SOME -> swap bag-has+
    )

bag-has+ : Bag+(v) v -- Bool
bag-has+ =
    over bag-is-singleton+ if(
        dip(bag-first+) ==,

        dip(bag-split-half-right)
        over bag-first+
        cmp? match(
            EQ -> drop4 true,
            LT -> drop nip bag-has,
            GT -> drop dip(nip) bag-has+
        )
    )

bag-has? : Bag(v) v -- Bag(v) v Bool
bag-has? = dup2 bag-has

||| Insert a value into the bag in the proper location.
||| Note that `bag-insert` will happily insert duplicates.
||| Use `bag-replace` to prevent duplicate insertion.
bag-insert : Bag(v) v -- Bag(v)
bag-insert = bag-insert+ Bag+->Bag

||| Same as `bag-insert` but returns a `Bag+`.
bag-insert+ : Bag(v) v -- Bag+(v)
bag-insert+ =
    swap Bag->Bag+ match(
        NONE -> B1+,
        SOME -> swap bag-insert++
    )

||| Same as `bag-insert` but takes and returns a `Bag+`.
bag-insert++ : Bag+(v) v -- Bag+(v)
bag-insert++ =
    over bag-is-singleton+ if(
        dip(bag-first+) B2+,

        dip(bag-split-half-right)
        over bag-first+
        dup2 >= if(
            drop bag-insert++ bag-cat-unsafe_+,
            drop swap dip(bag-insert+) bag-cat-unsafe+
        )
    )

||| Insert a value into the bag in the proper location,
||| unless the bag already contains this value. This
||| prevents introducing new duplicates. Use `bag-insert`
||| instead if duplicates are desirable.
bag-replace : Bag(v) v -- Bag(v)
bag-replace = bag-has? if(drop, bag-insert)

||| Concatenate two bags. To maintain the bag invariant,
||| it is necessary for the last item of the first bag
||| be less than or equal to the first item of the
||| second bag. In normal code it is recommended to
||| use `bag-merge` instead.
bag-cat-unsafe : Bag(v) Bag(v) -- Bag(v)
bag-cat-unsafe = dip(unBAG) unBAG cat BAG

bag-cat-unsafe_+ : Bag(v) Bag+(v) -- Bag+(v)
bag-cat-unsafe_+ = dip(unBAG) unBAG+ cat_+ BAG+

bag-cat-unsafe+ : Bag+(v) Bag+(v) -- Bag+(v)
bag-cat-unsafe+ = dip(unBAG+) unBAG+ cat+ BAG+

||| Put two stack items in order.
order2 : v v -- v v
order2 = dup2 <= if(id, swap)

||| Put three stack items in order.
order3 : v v v -- v v v
order3 = dip(order2) dup2 <= if(id, swap dip(order2))

||| Prerform lookup as an ordered map. Use the key to
||| find a corresponding item. Note: If multiple items
||| match the key, you may get any of them. There's
||| no guarantee it'll be the first item, last item,
||| middle item, etc, to match the key.
bag-lookup-key : Bag([v k]) k -- Maybe(v)
bag-lookup-key =
    swap Bag->Bag+ match(
        NONE -> drop NONE,
        SOME -> swap bag-lookup-key+
    )

||| Same as `bag-lookup-key` for non-empty bags.
bag-lookup-key+ : Bag+([v k]) k -- Maybe(v)
bag-lookup-key+ =
    over bag-is-singleton+ if(
        dip(bag-first+ unpack2) == if(SOME, drop NONE),

        dip(bag-split-half-right dup bag-first+ unpack2)
        cmp? match(
            EQ -> drop2 SOME dip(drop2),
            LT -> dip(drop2 nip) bag-lookup-key+,
            GT -> dip(drop3) bag-lookup-key
        )
    )

||| See `bag-lookup-key`.
bag-lookup-key? : Bag([v k]) k -- Bag([v k]) k Maybe(v)
bag-lookup-key? = dup2 bag-lookup-key


||| Insert key/value pair in bag, but replace an item
||| with a matching key if it exists.
bag-replace-key : Bag([v k]) [v k] -- Bag([v k])
bag-replace-key = bag-replace-key+ Bag+->Bag

||| Same as `bag-replace-key` but returns a `Bag+`.
bag-replace-key+ : Bag([v k]) [v k] -- Bag+([v k])
bag-replace-key+ =
    swap Bag->Bag+ match(
        NONE -> B1+,
        SOME -> swap bag-replace-key++
    )

||| Same as `bag-replace-key` but takes and returns a `Bag+`.
bag-replace-key++ : Bag+([v k]) [v k] -- Bag+([v k])
bag-replace-key++ =
    over bag-is-singleton+ if(
        dip(bag-first+) dup2 ==key if(
            nip B1+,
            B2+
        ),

        dip(bag-split-half-right dup bag-first+)
        dup2 <=key if(
            nip bag-replace-key++ bag-cat-unsafe_+,
            nip swap dip(bag-replace-key+) bag-cat-unsafe+
        )
    )

||| Compare two pairs by their top item (the "key").
==key : [v k] [v k] -- Bool
==key = dip(.0) .0 ==

||| Compare two pairs by their top item (the "key").
<=key : [v k] [v k] -- Bool
<=key = dip(.0) .0 <=

||| Get underlying list of values from bag.
bag-values : Bag(v) -- List(v)
bag-values = unBAG

||| Get underlying non-empty list of values from non-empty bag.
bag-values+ : Bag+(v) -- List+(v)
bag-values+ = unBAG+
