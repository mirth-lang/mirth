module(data.char)
import(prelude)

||| Get the byte list of a character under UTF8 encoding.
def(char-bytes, Char -- List(U8),
    char-width?
    dup 1 == if(
        drop Char->Int
        Int->U8
        L1,
    dup 2 == if(
        drop Char->Int
        dup 8 >> Int->U8
        dip(0xFF & Int->U8)
        L2,
    3 == if(
        Char->Int
        dup 16 >> Int->U8
        dip(dup 8 >> 0xFF & Int->U8
        dip(0xFF & Int->U8))
        L3,
        Char->Int
        dup 24 >> Int->U8
        dip(dup 16 >> 0xFF & Int->U8
        dip(dup 8 >> 0xFF & Int->U8
        dip(0xFF & Int->U8)))
        L4
    ))))

||| Validate character for WTF-8 encoding.
def(char-valid-wobbly, Char -- Bool,
    char-width?
    dup 1 == if(
        drop char-valid-1,
    dup 2 == if(
        drop char-valid-2,
    dup 3 == if(
        drop char-valid-3-wobbly,
        drop char-valid-4
    ))))

char-valid-3-wobbly : Char -- Bool
char-valid-3-wobbly = (
    dup Char->Int 0xFFC0C0F0 & 0x008080E0 ==
    swap char-codepoint-3
    0x0800 0xFFFF in-range &&
)

def(char-valid?, Char -- Char Bool,
    dup char-valid)

||| Validate character for UTF-8 encoding.
def(char-valid, Char -- Bool,
    char-width?
    dup 1 == if(
        drop char-valid-1,
    dup 2 == if(
        drop char-valid-2,
    dup 3 == if(
        drop char-valid-3,
        drop char-valid-4
    ))))

char-valid-1 : Char -- Bool
char-valid-2 : Char -- Bool
char-valid-3 : Char -- Bool
char-valid-4 : Char -- Bool
char-valid-1 = Char->Int 0xFFFFFF80 & 0x00000000 ==
char-valid-2 = (
    Char->Int
    dup 0xFFFFC0E0 & 0x000080C0 ==

# range check:
    swap 0x1F & 0x02 >= && # overlong
# alternative:
    # swap char-codepoint-2 0x80 0x7FF in-range
    # &&
)
char-valid-3 = (
    dup Char->Int 0xFFC0C0F0 & 0x008080E0 ==
    swap char-codepoint-3
    dup 0x0800 0xFFFF in-range # overlong
    swap 0xD800 0xDFFF in-range not # surrogate pair
    && &&
)
char-valid-4 = (
    dup Char->Int 0xC0C0C0F8 & 0x808080F0 ==

# range check:
    # swap dup 0x3007 & 0 != # overlong
    # swap dup 0x04 & 0 == swap 0x3003 & 0 == || # too large
    # && &&
# alternative:
    swap char-codepoint-4 0x10000 0x10FFFF in-range
    &&
)

||| Get the unicode codepoint of a character.
def(char-codepoint, Char -- Int,
    char-width?
    dup 1 == if(
        drop char-codepoint-1,
    dup 2 == if(
        drop char-codepoint-2,
    dup 3 == if(
        drop char-codepoint-3,
        drop char-codepoint-4
    ))))

char-codepoint-1 : Char -- Int
char-codepoint-2 : Char -- Int
char-codepoint-3 : Char -- Int
char-codepoint-4 : Char -- Int
char-codepoint-1 = Char->Int
char-codepoint-2 = (
    Char->Int
    dup 0x3F00 & 8 >>
    dip(0x1F & 6 <<) |
)
char-codepoint-3 = (
    Char->Int
    dup 0x3F0000 & 16 >>
    dip(dup 0x3F00 & 2 >>
    dip(0x0F & 12 <<)) | |
)
char-codepoint-4 = (
    Char->Int
    dup 0x3F000000 & 24 >>
    dip(dup 0x3F0000 & 10 >>
    dip(dup 0x3F00 & 4 <<
    dip(0x7 & 18 <<))) | | |
)

||| Write a character. This writes 4 bytes in UTF8, happily
||| writing up to 3 bytes ahead. The idea is that you'll
||| overwrite with the next character. Don't use this if you need
||| pinpoint precision writing. Use [char!-precise] instead.
def(char!, Char Ptr --, dip(Char->Int Int->U32) u32!)

||| Writes precisely the bytes in the UTF8 representation of the
||| character. This will only write one byte if the character
||| happens to be one byte long.
def(char!-precise, Char Ptr --,
    dip(char-width?) swap
    dup 1 == if(
        drop dip(Char->Int Int->U8) u8!,
    dup 2 == if(
        drop dip(Char->Int Int->U16) u16!,
    dup 3 == if(
        drop
        dip(Char->Int dup 0xFFFF & Int->U16) dup
        dip(u16! 16 >> Int->U8 2) ptr+ u8!,
        drop dip(Char->Int Int->U32) u32!
    ))))

||| Write character and advance pointer by character width.
def(char!++, Char Ptr -- Ptr,
    dup2 char! dip(char-width) ptr+)

||| Read character and advance pointer by character width.
def(char?++, Ptr -- Ptr Char,
    char? char-width? rotr dip(ptr+))

||| Read character but keep pointer on stack.
def(char?, Ptr -- Ptr Char,
    dup char@)

||| Read character. This will read 4 bytes at once and then
||| mask away the unnecessary bits. Use [char@-precise] if you
||| need pinpoint reading instead.
def(char@, Ptr -- Char,
    u32@ U32->Int
    dup dip(0xC5AAFFFFFFFFFFFF) 0xF8 & 2 >> >> 0x3 &
    dip(0xFFFFFFFF) 3 << >> &
    Int->Char)

def(char@-width, Ptr -- Int,
    u8@ U8->Int Int->Char char-width)
def(char-width, Char -- Int,
    Char->Int dip(0x3A55000000000000) 0xF8 & 2 >> >> 0x3 & 1 +)
def(char-width?, Char -- Char Int,
    dup char-width)

def(is-nul?, Char -- Char Bool, dup Char->Int 0 ==)

def(is-tab?, Char -- Char Bool, dup Char->Int 9 ==)
def(is-newline?, Char -- Char Bool, dup Char->Int 10 ==)
def(is-vtab?, Char -- Char Bool, dup Char->Int 11 ==)
def(is-return?, Char -- Char Bool, dup Char->Int 13 ==)
def(is-space?, Char -- Char Bool, dup Char->Int 32 ==)

def(is-quote?, Char -- Char Bool, dup Char->Int 34 ==)
def(is-pound?, Char -- Char Bool, dup Char->Int 35 ==)
def(is-lparen?, Char -- Char Bool, dup Char->Int 40 ==)
def(is-rparen?, Char -- Char Bool, dup Char->Int 41 ==)
def(is-asterisk?, Char -- Char Bool, dup Char->Int 42 ==)
def(is-plus?, Char -- Char Bool, dup Char->Int 43 ==)
def(is-comma?, Char -- Char Bool, dup Char->Int 44 ==)
def(is-minus?, Char -- Char Bool, dup Char->Int 45 ==)
def(is-dash?, Char -- Char Bool, dup Char->Int 45 ==)
def(is-dot?, Char -- Char Bool, dup Char->Int 46 ==)
def(is-digit?, Char -- Char Bool, dup Char->Int 48 57 in-range)
def(is-colon?, Char -- Char Bool, dup Char->Int 58 ==)
def(is-semicolon?, Char -- Char Bool, dup Char->Int 59 ==)
def(is-lt?, Char -- Char Bool, dup Char->Int 60 ==)
def(is-eq?, Char -- Char Bool, dup Char->Int 61 ==)
def(is-gt?, Char -- Char Bool, dup Char->Int 62 ==)
def(is-question-mark?, Char -- Char Bool, dup Char->Int 63 ==)

def(is-upper?, Char -- Char Bool, dup Char->Int 65 90 in-range)
def(is-upper-hexdigit?, Char -- Char Bool, dup Char->Int 65 70 in-range)

def(is-lsquare?, Char -- Char Bool, dup Char->Int 91 ==)
def(is-backslash?, Char -- Char Bool, dup Char->Int 92 ==)
def(is-rsquare?, Char -- Char Bool, dup Char->Int 93 ==)
def(is-underscore?, Char -- Char Bool, dup Char->Int 95 ==)

def(is-lower?, Char -- Char Bool, dup Char->Int 97 122 in-range)
def(is-lower-hexdigit?, Char -- Char Bool, dup Char->Int 97 102 in-range)
def(is-n?, Char -- Char Bool, dup Char->Int 110 ==)
def(is-r?, Char -- Char Bool, dup Char->Int 114 ==)
def(is-t?, Char -- Char Bool, dup Char->Int 116 ==)

def(is-lcurly?, Char -- Char Bool, dup Char->Int 123 ==)
def(is-pipe?, Char -- Char Bool, dup Char->Int 124 ==)
def(is-rcurly?, Char -- Char Bool, dup Char->Int 125 ==)

is-whitespace? : Char -- Char Bool
is-whitespace? = (
    dup Char->Int dup 33 <
    dip(dip(0x100020E00) >> 0x1 & 0 !=) &&
# Equivalent to:
#    is-space? or(is-tab?) or(is-return?) or(is-newline?) or(is-vtab?)
)

is-hexdigit? : Char -- Char Bool
is-hexdigit? = is-digit? dip(is-upper-hexdigit?) || dip(is-lower-hexdigit?) ||

is-sign? : Char -- Char Bool
is-sign? = is-plus? dip(is-minus?) ||

is-alpha? : Char -- Char Bool
is-alpha? = (
    dup Char->Int 0xFFFFFFDF & 65 90 in-range
# Equivalent to:
    # is-lower? dip(is-upper?) ||
)

is-string-end? : Char -- Char Bool
is-string-end? = (
    dup Char->Int dup 64 <
    dip(dip(0x400000401) >> 0x1 & 0 !=) &&
# Equivalent to:
#   is-quote? or(is-newline?) or(is-nul?)
)

underscore : Char
underscore = 95 Int->Char

||| An approximation of visible characters. Technically this includes a lot of
||| stuff that is invisible, like zero-width spaces and such.
is-visible? : Char -- Char Bool
is-visible? = dup Char->Int 32 >

is-name-char? : Char -- Char Bool
is-name-char? = (
    # dup Char->Int dup 64 < if(
    #     0xFBFFECF200000000,
    #     64 - 0x57FFFFFFD7FFFFFF
    # ) swap >> 0x1 & 0 !=
    # # TODO: support unicode properly

# (should be but isn't) equivalent to:
    is-visible? dip(is-special-char? not) &&
)

is-special-char? : Char -- Char Bool
is-special-char? = (
    dup Char->Int dup 64 < if(
        0x0400130C00000000,
        64 - 0x2800000028000000
    ) swap >> 0x1 & 0 !=
    # TODO: support unicode properly

# Equivalent to:
    # dup Char->Int 64 < if(
    #     dup Char->Int dip(0x0400130C00000000) >> 0x1 & 0 !=,
    #     dup Char->Int 64 - dip(0x2800000028000000) >> 0x1 & 0 !=
    # )

# Equivalent to:
    # dup Char->Int 64 < if(
    #     is-quote? or(is-comma?) or(is-colon?) or(is-pound?)
    #     or(is-lparen?) or(is-rparen?),

    #     is-lsquare? or(is-rsquare?)
    #     or(is-lcurly?) or(is-rcurly?)
    # )

# Equivalent to:

    # is-quote? or(is-comma?) or(is-colon?) or(is-pound?)
    # or(is-lparen?) or(is-rparen?)
    # or(is-lsquare?) or(is-rsquare?)
    # or(is-lcurly?) or(is-rcurly?)
)

# This number:
#
#    0x0400130C00000000
#
# Codes for:
#
#     quote = 34
#     pound = 35
#     lparen = 40
#     rparen = 41
#     comma = 44
#     colon = 58
#
# Via (python code):
#
#    hex((1 << 34) | (1 << 35) | (1 << 40)
#      | (1 << 41) | (1 << 44) | (1 << 58))

# This number:
#
#     0x2800000028000000
#
# Codes for:
#
#    lsquare = 91
#    rsquare = 93
#    lcurly = 123
#    rcurly = 125
#
# Via (python code):
#
#    hex(((1 << 91) | (1 << 93)
#       | (1 << 123) | (1 << 125)) >> 64)
