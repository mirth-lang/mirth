module(data.char)

import(prelude)
import(data.list)

||| Get the byte list of a character under UTF8 encoding.
def(char-bytes, Char -- List(U8),
    char-width?
    dup 1 == if(
        drop Char->Int
        Int->U8
        L1,
    dup 2 == if(
        drop Char->Int
        dup 8 >> Int->U8
        dip(0xFF & Int->U8)
        L2,
    3 == if(
        Char->Int
        dup 16 >> Int->U8
        dip(dup 8 >> 0xFF & Int->U8
        dip(0xFF & Int->U8))
        L3,
        Char->Int
        dup 24 >> Int->U8
        dip(dup 16 >> 0xFF & Int->U8
        dip(dup 8 >> 0xFF & Int->U8
        dip(0xFF & Int->U8)))
        L4
    ))))

||| Validate character for WTF-8 encoding.
def(char-valid-wobbly, Char -- Bool,
    char-width?
    dup 1 == if(
        drop char-valid-1,
    dup 2 == if(
        drop char-valid-2,
    dup 3 == if(
        drop char-valid-3-wobbly,
        drop char-valid-4
    ))))

def(char-valid-3-wobbly, Char -- Bool,
    dup Char->Int 0xFFC0C0F0 & 0x008080E0 ==
    swap char-codepoint-3
    0x0800 0xFFFF in-range &&)

def(char-valid?, Char -- Char Bool,
    dup char-valid)

||| Validate character for UTF-8 encoding.
def(char-valid, Char -- Bool,
    char-width?
    dup 1 == if(
        drop char-valid-1,
    dup 2 == if(
        drop char-valid-2,
    dup 3 == if(
        drop char-valid-3,
        drop char-valid-4
    ))))

def(char-valid-1, Char -- Bool,
    Char->Int 0xFFFFFF80 & 0x00000000 ==)
def(char-valid-2, Char -- Bool,
    Char->Int
    dup 0xFFFFC0E0 & 0x000080C0 ==
    swap 0x1F & 0x02 >= # overlong
    &&)
def(char-valid-3, Char -- Bool,
    dup Char->Int 0xFFC0C0F0 & 0x008080E0 ==
    swap char-codepoint-3
    dup 0x0800 0xFFFF in-range # overlong
    swap 0xD800 0xDFFF in-range not # surrogate pair
    && &&)
def(char-valid-4, Char -- Bool,
    dup Char->Int 0xC0C0C0F8 & 0x808080F0 ==
    swap char-codepoint-4 0x10000 0x10FFFF in-range
    &&)

||| Get the unicode codepoint of a character.
def(char-codepoint, Char -- Int,
    char-width?
    dup 1 == if(
        drop char-codepoint-1,
    dup 2 == if(
        drop char-codepoint-2,
    dup 3 == if(
        drop char-codepoint-3,
        drop char-codepoint-4
    ))))

def(char-codepoint-1, Char -- Int, Char->Int)
def(char-codepoint-2, Char -- Int,
    Char->Int
    dup 0x3F00 & 8 >>
    dip(0x1F & 6 <<) |)
def(char-codepoint-3, Char -- Int,
    Char->Int
    dup 0x3F0000 & 16 >>
    dip(dup 0x3F00 & 2 >>
    dip(0x0F & 12 <<)) | |)
def(char-codepoint-4, Char -- Int,
    Char->Int
    dup 0x3F000000 & 24 >>
    dip(dup 0x3F0000 & 10 >>
    dip(dup 0x3F00 & 4 <<
    dip(0x7 & 18 <<))) | | |)

||| Writes a character in UTF8 representation of the character.
||| This will only write one byte if the character
||| happens to be one byte long.
def(char!, Char Ptr --,
    dip(char-width?) swap
    dup 1 == if(
        drop dip(Char->Int Int->U8) u8!,
    dup 2 == if(
        drop dip(Char->Int Int->U16) u16!,
    dup 3 == if(
        drop
        dip(Char->Int dup 0xFFFF & Int->U16) dup
        dip(u16! 16 >> Int->U8 2) with-ptr+(u8!),
        drop dip(Char->Int Int->U32) u32!
    ))))

||| Write character and advance pointer by character width.
def(char!++, Char Ptr -- Ptr,
    dup2 char! dip(char-width) ptr+)

||| Read character and advance pointer by character width.
def(char?++, Ptr -- Ptr Char,
    char? char-width? rotr dip(ptr+))

||| Read character but keep pointer on stack.
def(char?, Ptr -- Ptr Char,
    dup char@)

||| Read character. This will read 4 bytes at once and then
||| mask away the unnecessary bits. Use [char@-precise] if you
||| need pinpoint reading instead.
def(char@, Ptr -- Char,
    dup char@-width
    dup 1 == if(
        drop u8@ U8->Int Int->Char,
    dup 2 == if(
        drop u16@ U16->Int Int->Char,
    dup 3 == if(
        drop dup dip(u16@ U16->Int 2) ptr+ u8@ U8->Int 16 << | Int->Char,
        drop u32@ U32->Int Int->Char
    ))))

def(char@-width, Ptr -- Int,
    u8@ U8->Int Int->Char char-width)
def(char-width, Char -- Int,
    Char->Int dip(0x3A55000000000000) 0xF8 & 2 >> >> 0x3 & 1 +)
def(char-width?, Char -- Char Int,
    dup char-width)

def(is-nul, Char -- Bool, Char->Int 0=)
def(is-tab, Char -- Bool, Char->Int 9 ==)
def(is-newline, Char -- Bool, Char->Int 10 ==)
def(is-vtab, Char -- Bool, Char->Int 11 ==)
def(is-return, Char -- Bool, Char->Int 13 ==)
def(is-space, Char -- Bool, Char->Int 32 ==)

def(is-quote, Char -- Bool, Char->Int 34 ==)
def(is-pound, Char -- Bool, Char->Int 35 ==)
def(is-lparen, Char -- Bool, Char->Int 40 ==)
def(is-rparen, Char -- Bool, Char->Int 41 ==)
def(is-asterisk, Char -- Bool, Char->Int 42 ==)
def(is-plus, Char -- Bool, Char->Int 43 ==)
def(is-comma, Char -- Bool, Char->Int 44 ==)
def(is-minus, Char -- Bool, Char->Int 45 ==)
def(is-dash, Char -- Bool, Char->Int 45 ==)
def(is-dot, Char -- Bool, Char->Int 46 ==)
def(is-digit, Char -- Bool, Char->Int 48 57 in-range)
def(is-colon, Char -- Bool, Char->Int 58 ==)
def(is-semicolon, Char -- Bool, Char->Int 59 ==)
def(is-lt, Char -- Bool, Char->Int 60 ==)
def(is-eq, Char -- Bool, Char->Int 61 ==)
def(is-gt, Char -- Bool, Char->Int 62 ==)
def(is-question-mark, Char -- Bool, Char->Int 63 ==)
def(is-upper, Char -- Bool, Char->Int 65 90 in-range)
def(is-upper-hexdigit, Char -- Bool, Char->Int 65 70 in-range)
def(is-lsquare, Char -- Bool, Char->Int 91 ==)
def(is-backslash, Char -- Bool, Char->Int 92 ==)
def(is-rsquare, Char -- Bool, Char->Int 93 ==)
def(is-underscore, Char -- Bool, Char->Int 95 ==)
def(is-lower, Char -- Bool, Char->Int 97 122 in-range)
def(is-lower-hexdigit, Char -- Bool, Char->Int 97 102 in-range)
def(is-n, Char -- Bool, Char->Int 110 ==)
def(is-r, Char -- Bool, Char->Int 114 ==)
def(is-t, Char -- Bool, Char->Int 116 ==)
def(is-lcurly, Char -- Bool, Char->Int 123 ==)
def(is-pipe, Char -- Bool, Char->Int 124 ==)
def(is-rcurly, Char -- Bool, Char->Int 125 ==)
def(is-whitespace, Char -- Bool,
    Char->Int dup 33 <
    dip(dip(0x100020E00) >> 0x1 & 0 <>) &&)
# Equivalent to:
#    is-space? or(is-tab?) or(is-return?) or(is-newline?) or(is-vtab?)

def(is-hexdigit, Char -- Bool,
    dup is-digit swap
    dup is-upper-hexdigit swap
    is-lower-hexdigit || ||)

def(is-sign, Char -- Bool,
    dup is-plus swap is-minus ||)

def(is-alpha, Char -- Bool,
    Char->Int 0xFFFFFFDF & 65 90 in-range)

def(is-string-end, Char -- Bool,
    Char->Int dup 64 < and(0x400000401 over >> 0x1 & 0 <>) nip)
# Equivalent to:
#   is-quote? or(is-newline?) or(is-nul?)

def(underscore, Char, 95 Int->Char)

||| An approximation of visible characters. Technically this includes a lot of
||| stuff that is invisible, like zero-width spaces and such.
def(is-visible, Char -- Bool, Char->Int 32 >)
def(is-name-char, Char -- Bool, dup is-visible swap is-special-char not &&)
def(is-special-char, Char -- Bool,
    Char->Int dup 64 < if(
        0x0400130C00000000 swap >>,
        64 - dup 64 < if(0x2800000028000000 swap >>, drop 0)
    ) 0x1 & 0 <>)
    # TODO: support unicode properly

# Equivalent to:
    # dup Char->Int 64 < if(
    #     dup Char->Int dip(0x0400130C00000000) >> 0x1 & 0 <>,
    #     dup Char->Int 64 - dip(0x2800000028000000) >> 0x1 & 0 <>
    # )

# Equivalent to:
    # dup Char->Int 64 < if(
    #     is-quote? or(is-comma?) or(is-colon?) or(is-pound?)
    #     or(is-lparen?) or(is-rparen?),

    #     is-lsquare? or(is-rsquare?)
    #     or(is-lcurly?) or(is-rcurly?)
    # )

# Equivalent to:

    # is-quote? or(is-comma?) or(is-colon?) or(is-pound?)
    # or(is-lparen?) or(is-rparen?)
    # or(is-lsquare?) or(is-rsquare?)
    # or(is-lcurly?) or(is-rcurly?)

# This number:
#
#    0x0400130C00000000
#
# Codes for:
#
#     quote = 34
#     pound = 35
#     lparen = 40
#     rparen = 41
#     comma = 44
#     colon = 58
#
# Via (python code):
#
#    hex((1 << 34) | (1 << 35) | (1 << 40)
#      | (1 << 41) | (1 << 44) | (1 << 58))

# This number:
#
#     0x2800000028000000
#
# Codes for:
#
#    lsquare = 91
#    rsquare = 93
#    lcurly = 123
#    rcurly = 125
#
# Via (python code):
#
#    hex(((1 << 91) | (1 << 93)
#       | (1 << 123) | (1 << 125)) >> 64)
