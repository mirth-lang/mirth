module(data.char)
import(prelude)

def(Int->Char, Int -- Char, cast) # unsafe
def(Char->Int, Char -- Int, cast)

def(is-nul?, Char -- Char Bool, dup Char->Int 0 ==)

def(is-tab?, Char -- Char Bool, dup Char->Int 9 ==)
def(is-newline?, Char -- Char Bool, dup Char->Int 10 ==)
def(is-vtab?, Char -- Char Bool, dup Char->Int 11 ==)
def(is-return?, Char -- Char Bool, dup Char->Int 13 ==)
def(is-space?, Char -- Char Bool, dup Char->Int 32 ==)

def(is-quote?, Char -- Char Bool, dup Char->Int 34 ==)
def(is-pound?, Char -- Char Bool, dup Char->Int 35 ==)
def(is-lparen?, Char -- Char Bool, dup Char->Int 40 ==)
def(is-rparen?, Char -- Char Bool, dup Char->Int 41 ==)
def(is-asterisk?, Char -- Char Bool, dup Char->Int 42 ==)
def(is-plus?, Char -- Char Bool, dup Char->Int 43 ==)
def(is-comma?, Char -- Char Bool, dup Char->Int 44 ==)
def(is-minus?, Char -- Char Bool, dup Char->Int 45 ==)
def(is-dash?, Char -- Char Bool, dup Char->Int 45 ==)
def(is-dot?, Char -- Char Bool, dup Char->Int 46 ==)
def(is-digit?, Char -- Char Bool, dup Char->Int 48 57 in-range)
def(is-colon?, Char -- Char Bool, dup Char->Int 58 ==)
def(is-semicolon?, Char -- Char Bool, dup Char->Int 59 ==)
def(is-lt?, Char -- Char Bool, dup Char->Int 60 ==)
def(is-eq?, Char -- Char Bool, dup Char->Int 61 ==)
def(is-gt?, Char -- Char Bool, dup Char->Int 62 ==)
def(is-question-mark?, Char -- Char Bool, dup Char->Int 63 ==)

def(is-upper?, Char -- Char Bool, dup Char->Int 65 90 in-range)
def(is-upper-hexdigit?, Char -- Char Bool, dup Char->Int 65 70 in-range)

def(is-lsquare?, Char -- Char Bool, dup Char->Int 91 ==)
def(is-backslash?, Char -- Char Bool, dup Char->Int 92 ==)
def(is-rsquare?, Char -- Char Bool, dup Char->Int 93 ==)
def(is-underscore?, Char -- Char Bool, dup Char->Int 95 ==)

def(is-lower?, Char -- Char Bool, dup Char->Int 97 122 in-range)
def(is-lower-hexdigit?, Char -- Char Bool, dup Char->Int 97 102 in-range)
def(is-n?, Char -- Char Bool, dup Char->Int 110 ==)
def(is-r?, Char -- Char Bool, dup Char->Int 114 ==)
def(is-t?, Char -- Char Bool, dup Char->Int 116 ==)

def(is-lcurly?, Char -- Char Bool, dup Char->Int 123 ==)
def(is-pipe?, Char -- Char Bool, dup Char->Int 124 ==)
def(is-rcurly?, Char -- Char Bool, dup Char->Int 125 ==)

is-whitespace? : Char -- Char Bool
is-whitespace? = (
    dup Char->Int dup 33 <
    dip(dip(0x100020E00) >> 0x1 & 0 !=) &&
# Equivalent to:
#    is-space? or(is-tab?) or(is-return?) or(is-newline?) or(is-vtab?)
)

is-hexdigit? : Char -- Char Bool
is-hexdigit? = is-digit? dip(is-upper-hexdigit?) || dip(is-lower-hexdigit?) ||

is-sign? : Char -- Char Bool
is-sign? = is-plus? dip(is-minus?) ||

is-alpha? : Char -- Char Bool
is-alpha? = is-lower? dip(is-upper?) ||

is-string-end? : Char -- Char Bool
is-string-end? = (
    dup Char->Int dup 64 <
    dip(dip(0x400000401) >> 0x1 & 0 !=) &&
# Equivalent to:
#   is-quote? or(is-newline?) or(is-nul?)
)

underscore : Char
underscore = 95 Int->Char

is-visible? : Char -- Char Bool
is-visible? = dup Char->Int 33 126 in-range

is-name-char? : Char -- Char Bool
is-name-char? = (
    dup Char->Int dup 64 < if(
        0xFBFFECF200000000,
        64 - 0x57FFFFFFD7FFFFFF
    ) swap >> 0x1 & 0 !=
    # TODO: support unicode properly

# Equivalent to:
#   is-visible? dip(is-special-char? not) &&
)

is-special-char? : Char -- Char Bool
is-special-char? = (
    dup Char->Int dup 64 < if(
        0x0400130C00000000,
        64 - 0x2800000028000000
    ) swap >> 0x1 & 0 !=
    # TODO: support unicode properly

# Equivalent to:
    # dup Char->Int 64 < if(
    #     dup Char->Int dip(0x0400130C00000000) >> 0x1 & 0 !=,
    #     dup Char->Int 64 - dip(0x2800000028000000) >> 0x1 & 0 !=
    # )

# Equivalent to:
    # dup Char->Int 64 < if(
    #     is-quote? or(is-comma?) or(is-colon?) or(is-pound?)
    #     or(is-lparen?) or(is-rparen?),

    #     is-lsquare? or(is-rsquare?)
    #     or(is-lcurly?) or(is-rcurly?)
    # )

# Equivalent to:

    # is-quote? or(is-comma?) or(is-colon?) or(is-pound?)
    # or(is-lparen?) or(is-rparen?)
    # or(is-lsquare?) or(is-rsquare?)
    # or(is-lcurly?) or(is-rcurly?)
)

# This number:
#
#    0x0400130C00000000
#
# Codes for:
#
#     quote = 34
#     pound = 35
#     lparen = 40
#     rparen = 41
#     comma = 44
#     colon = 58
#
# Via (python code):
#
#    hex((1 << 34) | (1 << 35) | (1 << 40)
#      | (1 << 41) | (1 << 44) | (1 << 58))

# This number:
#
#     0x2800000028000000
#
# Codes for:
#
#    lsquare = 91
#    rsquare = 93
#    lcurly = 123
#    rcurly = 125
#
# Via (python code):
#
#    hex(((1 << 91) | (1 << 93)
#       | (1 << 123) | (1 << 125)) >> 64)
