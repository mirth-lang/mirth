module(data.str)
import(data.list)
import(data.char)
import(data.maybe)
import(prelude)

data(StrSlice, STR_SLICE -> Str Ptr Size)
def(str-slice, Str -- StrSlice, dup with-str-data(STR_SLICE))
def(str-slice-head, StrSlice -- Char,
    STR_SLICE -> 0 > if(char@ nip, drop2 0 Int->Char))
def(str-slice-tail, StrSlice -- StrSlice, str-slice-next drop)
def(str-slice-next, StrSlice -- StrSlice Maybe(Char),
    STR_SLICE -> dup 0 > if(
        over char@ dup SOME
        dip(char-width tuck - dip(swap ptr+) STR_SLICE),
        STR_SLICE NONE
    ))
def(str-slice-copy, StrSlice -- Str,
    STR_SLICE -> str-copy nip)

def(str-nil, Str, "")

def(str-num-chars, Str -- Size,
    0 swap str-chars-for(drop 1+))
def(str-num-codepoints, Str -- Size,
    0 swap str-codepoints-for(drop 1+))
def(str-num-bytes, Str -- Size,
    prim-str-size nip)

def(str-cat, Str Str -- Str, prim-str-cat)
def(str-concat, List(Str) -- Str,
    List->List+ match(
        NONE -> str-nil,
        SOME -> uncons for(str-cat)
    ))

def(str-is-empty, Str -- Bool,
    str-num-bytes 0=)
def(str-is-empty?, Str -- Str Bool,
    dup str-is-empty)

||| Copy string bytes to second argument without adding 0 at end.
||| Return first unwritten location in second argument.
def(str-copy-partial!, Str Ptr -- Ptr,
    swap with-str-data(
        rotl
        dup2 ptr+
        dip(prim-ptr-copy)
    ))

def(STR_BUF_SIZE, Int, 0x2000)
buffer(STR_BUF, 0x2000)
var(STR_BUF_LEN, Int)

def(build-str!(f), (*a -- *b) *a -- *b Str,
    str-buf-dup! str-buf-clear! dip(
        f str-buf-dup!
    ) str-buf!)

def(str-copy, Ptr Size -- Str,
    prim-str-copy)

def(str-copy-cstr, Ptr -- Str,
    dup cstr-num-bytes prim-str-copy)

def(cstr-num-bytes, Ptr -- Size,
    0 swap while(dup u8@ U8->Int 0 >, dip(1+ 1) ptr+) drop)

def(str-buf-dup!, Str,
    STR_BUF str-buf-length? prim-str-copy)

def(str-buf-length?, Int,
    STR_BUF_LEN @)

def(str-buf-length!, Int --,
    dup STR_BUF_LEN !
    dip(0 Int->U8) str-buf-u8!)

def(str-buf-u8@, Offset -- U8,
    STR_BUF u8@@)

def(str-buf-u8!, U8 Offset --,
    STR_BUF u8!!)

def(str-buf-char@, Offset -- Char,
    STR_BUF with-ptr+(char@))

def(str-buf-empty?, str-buf-length? 0=)
def(str-buf-full?, str-buf-length? 1+ STR_BUF_SIZE >=)

def(str-buf-clear!, --,
    0 str-buf-length!)

def(str-buf-push-u8!, U8 --,
    # str-buf-full? not if(
        str-buf-length? str-buf-u8!
        str-buf-length? 1+ str-buf-length!
    #     "str-buf-push! but STR_BUF is already full" panic!
    # )
    )

def(str-buf-push-char!, Char --,
    dup str-buf-length? STR_BUF with-ptr+(char!)
    char-width str-buf-length? + str-buf-length!)

||| Append the given string into STR_BUF. If the string is
||| too large it gets truncated.
def(str-buf-push-str!, Str --,
    with-str-data(str-buf-push-ptr!))

def(with-str-data(f), (*a Ptr Size -- *b) *a Str -- *b,
    dup dip(prim-str-size dip(prim-str-base) f) drop)

def(str-buf-push-ptr!, Ptr Size -- ,
    tuck str-buf-length? STR_BUF with-ptr+(prim-ptr-copy)
    str-buf-length? + str-buf-length!)

||| Set the STR_BUF to a given string. If the string is
||| too large it gets truncated.
def(str-buf!, Str --,
    str-buf-clear! str-buf-push-str!)

def(str-buf-char!, Char --,
    dup STR_BUF char! char-width str-buf-length!)

def(to-digit, Int -- Char,
    10 % 48 + Int->Char)

||| Put integer into STR_BUF.
def(str-buf-int!, Int --,
    int-to-str str-buf!)

alias(int-to-str, prim-int-to-str)

||| Swap two bytes in STR_BUF.
def(str-buf-swap-u8!, Int Int --,
    dup2 swap
    dip3(str-buf-u8@)
    dip(str-buf-u8@)
    str-buf-u8! str-buf-u8!)

||| Reverse contents of STR_BUF bytewise.
def(str-buf-reverse!, --,
    0 str-buf-length? 1-
    while(dup2 <,
        dup2 str-buf-swap-u8!
        dip(1+) 1-
    )
    drop2)

||| Traverse string chars.
def(str-chars-for(f), (*a Char -- *a) *a Str -- *a,
    str-slice while-some(
        str-slice-next,
        swap dip(f)
    ) drop)

||| Traverse string codepoints.
def(str-codepoints-for(f), (*a Int -- *a) *a Str -- *a,
    str-chars-for(char-codepoint f))

||| Traverse string bytes.
def(str-bytes-for(f), (*a U8 -- *a) *a Str -- *a,
    with-str-data(repeat(
        dup dip(u8@ f 1) ptr+
    ) drop))

data(TransducerStep,
    TS_STOP,
    TS_SKIP,
    TS_CHAR -> Char,
    TS_PUSH -> List(Char),
    TS_COPY -> Str)

def(str-transduce(f), (*a Char -- *a TransducerStep) *a Str -- *a Str,
    build-str!(
        str-slice while-some(
            str-slice-next,
            swap dip(f) swap
            str-transduce-step
        ) drop
    ))

def(str-transduce-step, StrSlice TransducerStep -- StrSlice,
    TS_STOP -> drop str-nil str-slice,
    TS_SKIP -> id,
    TS_CHAR -> str-buf-push-char!,
    TS_PUSH -> for(str-buf-push-char!),
    TS_COPY -> str-buf-push-str!)

def(str-chars, Str -- List(Char),
    dip(L0) str-chars-for(snoc))

def(str-codepoints, Str -- List(Int),
    dip(L0) str-codepoints-for(snoc))

def(str-bytes, Str -- List(U8),
    dip(L0) str-bytes-for(snoc))
