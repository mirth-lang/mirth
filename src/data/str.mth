module(data.str)
import(data.list)
import(data.maybe)
import(data.byte)
import(prelude)

alias(Str.num-bytes, prim-str-num-bytes)
alias(Str.cat, prim-str-cat)
def(Str.is-empty, Str -- Bool, num-bytes 0=)

||| Copy string bytes to second argument without adding 0 at end.
||| Return first unwritten location in second argument.
def(str-copy-partial!, Str Ptr -- Ptr,
    swap with-str-data(
        rotl
        dup2 .offset-unsafe
        dip(prim-ptr-copy)
    ))

def(STR_BUF_SIZE, Int, 0x2000)
buffer(STR_BUF, 0x2000)
var(STR_BUF_LEN, Int)

def(build-str!(f), (*a -- *b) *a -- *b Str,
    str-buf-dup! str-buf-clear! dip(
        f str-buf-dup!
    ) str-buf!)

def(str-copy, Ptr Size -- Str,
    prim-str-copy)

def(str-copy-cstr, Ptr -- Str,
    dup cstr-num-bytes prim-str-copy)

def(cstr-num-bytes, Ptr -- Size,
    dup 0 swap while(dup @U8 >Int 0>, dip(1+ 1) .offset-unsafe) drop nip)

def(str-buf-dup!, Str,
    STR_BUF str-buf-length? prim-str-copy)

def(str-buf-length?, Int,
    STR_BUF_LEN @)

def(str-buf-length!, Int --,
    dup STR_BUF_LEN !
    dip(0 >U8) str-buf-u8!)

def(str-buf-u8@, Offset -- U8,
    STR_BUF @@U8)

def(str-buf-u8!, U8 Offset --,
    STR_BUF !!U8)

def(str-buf-byte@, Offset -- Byte,
    STR_BUF .offset(@Byte))

def(str-buf-empty?, str-buf-length? 0=)
def(str-buf-full?, str-buf-length? 1+ STR_BUF_SIZE >=)

def(str-buf-clear!, --,
    0 str-buf-length!)

def(str-buf-push-u8!, U8 --,
    assert!(str-buf-full? not, "str-buf-push! but STR_BUF is already full")
    str-buf-length? str-buf-u8!
    str-buf-length? 1+ str-buf-length!)

def(str-buf-push-byte!, Byte --,
    >U8 str-buf-push-u8!)

||| Append the given string into STR_BUF. If the string is
||| too large it gets truncated.
def(str-buf-push-str!, Str --,
    with-str-data(str-buf-push-ptr!))

def(with-str-data(f), (*a Ptr Size -- *b) *a Str -- *b,
    dup dip(dup dip(prim-str-base) num-bytes f) drop)

def(str-buf-push-ptr!, Ptr Size -- ,
    tuck str-buf-length? STR_BUF .offset(prim-ptr-copy)
    str-buf-length? + str-buf-length!)

||| Set the STR_BUF to a given string. If the string is
||| too large it gets truncated.
def(str-buf!, Str --,
    str-buf-clear! str-buf-push-str!)

||| Put integer into STR_BUF.
def(str-buf-int!, Int --,
    int-to-str str-buf!)

alias(int-to-str, prim-int-to-str)

||| Traverse string bytes.
def(str-bytes-for(f), (*a Byte -- *a) *a Str -- *a,
    with-str-data(repeat(
        dup dip(@Byte f 1) .offset-unsafe
    ) drop))
