module(data.str)
import(prelude)
import(data.list)
import(data.maybe)
import(data.byte)
import(resource.buffer)

alias(Str.num-bytes, prim-str-num-bytes)
alias(Str.cat, prim-str-cat)
def(Str.is-empty, Str -- Bool, num-bytes 0=)

||| Copy string bytes to second argument without adding 0 at end.
||| Return first unwritten location in second argument.
def(str-copy-partial!, Str Ptr -- Ptr,
    swap with-str-data(
        rotl
        dup2 .offset-unsafe
        dip(prim-ptr-copy)
    ))

data(+Str, +STR -> Str)
def(Str.thaw, Str -- +Str, +STR)
def(+Str.freeze, +Str -- Str, +STR -> id)

def(build-str!(f), (*a +Str -- *b +Str) *a -- *b Str,
    "" thaw f freeze)

def(str-copy, Ptr Size -- Str,
    prim-str-copy)

def(str-copy-cstr, Ptr -- Str,
    dup cstr-num-bytes prim-str-copy)

def(cstr-num-bytes, Ptr -- Size,
    dup 0 swap while(dup @U8 >Int 0>, dip(1+ 1) .offset-unsafe) drop nip)

def(str-buf-dup!, +Str -- Str +Str,
    +STR -> dup dip(+STR))

def(str-buf-num-bytes?, +Str -- Int +Str,
    +STR -> dup num-bytes dip(+STR))

def(str-buf-byte@, Offset +Str -- Byte +Str,
    str-buf-dup! with-str-data(drop .offset(@Byte))) # TODO make this safer

def(str-buf-empty?, +Str -- Bool +Str,
    +STR -> dup +STR is-empty)

def(str-buf-clear!, +Str -- +Str,
    +STR -> drop "" +STR)

def(str-buf-push-byte-unsafe!, Byte +Str -- +Str,
    to-str-unsafe str-buf-push-str!)

def(str-buf-push-byte-ascii!, Byte +Str -- +Str,
    to-ascii-str unwrap str-buf-push-str!)

||| Append the given string into STR_BUF. If the string is
||| too large it gets truncated.
def(str-buf-push-str!, Str +Str -- +Str,
    +STR -> swap cat +STR)

def(with-str-data(f), (*a Ptr Size -- *b) *a Str -- *b,
    dup dip(dup dip(prim-str-base) num-bytes f) drop)

||| Set the STR_BUF to a given string. If the string is
||| too large it gets truncated.
def(str-buf!, Str +Str -- +Str,
    +STR -> drop +STR)

||| Put integer into STR_BUF.
def(str-buf-int!, Int +Str -- +Str,
    +STR -> drop >Str +STR)

alias(int-to-str, prim-int-to-str)
alias(Int>Str, prim-int-to-str)

||| Traverse string bytes.
def(str-bytes-for(f), (*a Byte -- *a) *a Str -- *a,
    with-str-data(repeat(
        dup dip(@Byte f 1) .offset-unsafe
    ) drop))

def(Str.first-byte, Str -- Maybe(Byte),
    with-str-data(
        1 >= if(
            @U8 U8>Byte SOME,
            drop NONE
        )
    ))

def(Str.from-bytes-unsafe, List(Byte) -- Str,
    dup len +Buffer.new
    dip(0) for(>U8 over !U8 1+) drop
    buffer-base buffer-size prim-str-copy
    rdrop)
    
def(Str.with-cstr(f), (*a Ptr -- *b) *a Str -- *b,
    with-str-data(
        over prim-ptr-add @U8 >Int
        expect!(dup 0=, "tried to use string as cstring, but no null terminator")
        drop f
    ))
