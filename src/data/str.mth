module(data.str)
import(data.list)
import(data.char)
import(prelude)

def(str-head, Str -- Char, Str->Ptr char@)
def(str-head-width, Str -- Int, Str->Ptr char@-width)

def(str-tail, Str -- Str,
    sip(str-head-width) Str->Ptr ptr+ Ptr->Str)

def(str-size?, Str -- Str Int,
    prim.str.size)

def(str-size, Str -- Int,
    prim.str.size dip(drop))

def(str-length, Str -- Int,
    0 swap while(
        str-is-empty? not,
        dip(1+) str-tail
    ) drop)

def(str-length?, Str -- Str Int,
    dup str-length)

def(str-concat, List(Str) -- Str,
    dup 0 swap for(str-size +)
    prim.str.alloc sip(
        prim.str.base
        swap for(swap str-copy-partial!)
        nil swap u8!
    ))

def(str-cat, Str Str -- Str,
    L2 str-concat)

def(str-is-empty, Str -- Bool,
    is-nil? if(drop true, str-head is-nil))

def(str-is-empty?, Str -- Str Bool,
    dup str-is-empty)

||| Copy string bytes to second argument without adding 0 at end.
||| Return first unwritten location in second argument.
def(str-copy-partial!, Str Ptr -- Ptr,
    dip(dup Str->Ptr swap str-size)
    dup2 ptr+ dip(prim.ptr.copy))

def(STR_BUF_SIZE, Int, 0x2000)
buffer(STR_BUF, 0x2000)
var(STR_BUF_LEN, Int)

def(build-str!(f), (*a -- *b) *a -- *b Str,
    str-buf-dup! str-buf-clear! dip(
        f str-buf-dup!
    ) str-buf!)

def(str-buf-dup!, Str,
    STR_BUF str-buf-length? dup prim.str.alloc
    sip(prim.str.base prim.ptr.copy))

def(str-buf-length?, Int,
    STR_BUF_LEN @)

def(str-buf-length!, Int --,
    dup STR_BUF_LEN !
    dip(0 Int->U8) str-buf-u8!)

def(str-buf-u8@, Offset -- U8,
    STR_BUF u8@@)

def(str-buf-u8!, U8 Offset --,
    STR_BUF u8!!)

def(str-buf-char@, Offset -- Char,
    STR_BUF ptr+ char@)

def(str-buf-empty?, Bool,
    str-buf-length? 0=)

def(str-buf-full?, Bool,
    str-buf-length? 1+ STR_BUF_SIZE >=)

def(str-buf-clear!, --,
    0 str-buf-length!)

def(str-buf-push-u8!, U8 --,
    # str-buf-full? not if(
        str-buf-length? str-buf-u8!
        str-buf-length? 1+ str-buf-length!
    #     "str-buf-push! but STR_BUF is already full" panic!
    # )
    )

def(str-buf-push-char!, Char --,
    dup str-buf-length? STR_BUF ptr+ char!
    char-width str-buf-length? + str-buf-length!)

||| Append the given string into STR_BUF. If the string is
||| too large it gets truncated.
def(str-buf-push-str!, Str --,
    dup Str->Ptr swap str-size str-buf-push-ptr!)

def(str-buf-push-ptr!, Ptr Size -- ,
    tuck str-buf-length? STR_BUF ptr+ prim.ptr.copy
    str-buf-length? + str-buf-length!)

||| Set the STR_BUF to a given string. If the string is
||| too large it gets truncated.
def(str-buf!, Str --,
    str-buf-clear! str-buf-push-str!)

def(str-buf-char!, Char --,
    dup STR_BUF char! char-width str-buf-length!)

def(to-digit, Int -- Char,
    10 % 48 + Int->Char)

||| Put integer into STR_BUF.
def(str-buf-int!, Int --,
    dup 0= if(
        drop "0" str-buf!,
        sip(
            abs
            str-buf-clear!
            while(dup 0>, dup to-digit str-buf-push-char! 10 /) drop
        ) 0 < if(45 Int->Char str-buf-push-char!, id)
        str-buf-reverse!
    ))

def(int-show, Int -- Str,
    build-str!(str-buf-int!))

||| Swap two bytes in STR_BUF.
def(str-buf-swap-u8!, Int Int --,
    dup2 swap
    dip3(str-buf-u8@)
    dip(str-buf-u8@)
    str-buf-u8! str-buf-u8!)

||| Reverse contents of STR_BUF bytewise.
def(str-buf-reverse!, --,
    0 str-buf-length? 1-
    while(dup2 <,
        dup2 str-buf-swap-u8!
        dip(1+) 1-
    )
    drop2)

||| Are two strings equal?
def(str-eq, Str Str -- Bool, prim.str.eq)

||| Are two strings equal? Preserve pointers.
def(str-eq?, Str Str -- Str Str Bool, dup2 str-eq)

||| Traverse string characters.
def(str-for(f), (*a Char -- *a) *a Str -- *a,
    while(str-is-empty? not,
        dup str-tail
        dip(str-head f)
    ) drop)

data(TransducerStep,
    TS_STOP,
    TS_SKIP,
    TS_CHAR -> Char,
    TS_PUSH -> List(Char),
    TS_COPY -> Str)

def(str-transduce(f), (*a Char -- *a TransducerStep) *a Str -- *a Str,
    build-str!(
        while(str-is-empty? not,
            sip(str-head f) str-tail
            swap str-transduce-step
        ) drop
    ))

def(str-transduce-step, Str TransducerStep -- Str,
    TS_STOP -> drop "",
    TS_SKIP -> id,
    TS_CHAR -> str-buf-push-char!,
    TS_PUSH -> for(str-buf-push-char!),
    TS_COPY -> str-buf-push-str!)

def(str-chars, Str -- List(Char),
    dip(L0) str-for(snoc))

def(str-codepoints, Str -- List(Int),
    dip(L0) str-for(char-codepoint snoc))

def(str-bytes, Str -- List(U8),
    L0 swap
    dup Str->Ptr swap str-size
    while(
        dup 0 >,
        1- dip(sip(u8@ snoc 1) ptr+)
    )
    drop2)
