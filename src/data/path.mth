module(data.path)
import(data.str)
import(prelude)

data(Path, PATH -> Str)
def(/PATH, Path -- Str, PATH -> id)
alias(Str->Path, PATH)
alias(Path->Str, /PATH)
def(path==, Path Path -- Bool, both(/PATH) str==)

def(init-paths!, --,
    "src" Str->Path source-path-root !
    "bin" Str->Path output-path-root !)

var(source-path-root, Path)
var(output-path-root, Path)

def(path-separator, Str, RUNNING_OS OS_WINDOWS os== if("\\", "/"))
def(path-is-empty, Path -- Bool, /PATH str-is-empty)
def(path-join-with, Path Path Str -- Path,
    over2 path-is-empty if(
        drop nip,
        dip2(/PATH) swap /PATH
        dip(str-cat) str-cat PATH
    ))

def(path-join, Path Path -- Path, path-separator path-join-with)
def(path-join-unix, Path Path -- Path, "/" path-join-with)

||| Make a source path from a project-relative path.
def(make-source-path, Path -- Path, source-path-root @ swap path-join-unix)

||| Make an output path from a project-relative path.
def(make-output-path, Path -- Path, output-path-root @ swap path-join-unix)
