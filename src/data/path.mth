module(data.path)
import(data.str)
import(prelude)

data(Path, PATH -> Str)
def(Str->Path, Str -- Path, PATH)
def(Path->Str, Path -- Str, PATH -> id)

def(init-paths!, --,
    "src" Str->Path source-path-root !
    "bin" Str->Path output-path-root !)

var(source-path-root, Path)
var(output-path-root, Path)

def(path-separator, Str, RUNNING_OS OS_WINDOWS == if("\\", "/"))
def(path-is-empty?, Path -- Path Bool, dup Path->Str str-is-empty)
def(path-join, Path Path -- Path,
    swap path-is-empty? if(
        drop,
        Path->Str path-separator rotl Path->Str
        dip(str-cat) str-cat Str->Path
    ))

def(unix-path-join, Path Path -- Path,
    swap path-is-empty? if(
        drop,
        Path->Str "/" rotl Path->Str
        dip(str-cat) str-cat Str->Path
    ))

||| Make a source path from a project-relative path.
def(make-source-path, Path -- Path, source-path-root @ swap unix-path-join)

||| Make an output path from a project-relative path.
def(make-output-path, Path -- Path, output-path-root @ swap unix-path-join)
