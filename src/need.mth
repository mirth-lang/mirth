module mirth.need

import std.prelude
import std.list
import std.maybe
import std.set
import mirth.mirth
import mirth.prim
import mirth.arrow
import mirth.word
import mirth.label
import mirth.data
import mirth.match

########
# NEED #
########

data Need {
    Word [ Word ]
    Block [ Block ]
    TagWord [ Tag ]
    TagPattern [ Tag ]
    Label [ Label ]
    --
    def >Nat [ Need -- Nat ] {
        { Word       -> index 5u *      }
        { Block      -> index 5u * 1u + }
        { TagWord    -> index 5u * 2u + }
        { TagPattern -> index 5u * 3u + }
        { Label      -> index 5u * 4u + }
    }
}

#########
# NEEDS #
#########

struct +Needs {
    stack: List(Need)
    +set: +Set
    --
    def New [ +Needs ] { List.Nil >stack +Set.Empty >+set +Needs }
    def rdrop [ +Needs -- ] { /+Needs +set> rdrop stack> drop }

    def Need.needed?     [ +Needs |- Need  -- Bool ] { >Nat +set:member? }
    def Word.needed?     [ +Needs |- Word  -- Bool ] { Need.Word needed? }
    def Block.needed?    [ +Needs |- Block -- Bool ] { Need.Block needed? }
    def Tag.word-needed? [ +Needs |- Tag   -- Bool ] { Need.TagWord needed? }
    def Tag.pat-needed?  [ +Needs |- Tag   -- Bool ] { Need.TagPattern needed? }
    def Label.needed?    [ +Needs |- Label -- Bool ] { Need.Label needed? }

    def need! [ +Needs |- Need -- ] {
        dup needed? if(
            drop,
            dup >Nat +set:insert! stack:List.Cons
        )
    }
    def need-word!  [ +Needs |- Word -- ] { Need.Word need! }
    def need-block! [ +Needs |- Block -- ] { Need.Block need! }
    def need-tag-word! [ +Needs |- Tag -- ] { Need.TagWord need! }
    def need-tag-pat!  [ +Needs |- Tag -- ] { Need.TagPattern need! }
    def need-label!    [ +Needs |- Label -- ] { Need.Label need! }

    def determine-arrow-needs! [ +Mirth +Needs |- Arrow -- ] {
        run-arrow! determine-transitive-needs!
    }
    def determine-transitive-needs! [ +Mirth +Needs |- ] {
        while-some(stack:uncons, run-need!)
    }

    def run-need! [ +Mirth +Needs |- Need -- ] {
        { Block -> run-block! }
        { Word -> run-word! }
        { TagWord -> drop }
        { TagPattern -> drop }
        { Label -> drop }
    }

    def run-args!  [ +Mirth +Needs |- List(Arg) -- ] { for(run-arg!) }
    def run-arg!   [ +Mirth +Needs |- Arg       -- ] { Block -> run-block! }
    def run-block! [ +Mirth +Needs |- Block     -- ] { rdip:arrow run-arrow! }
    def run-word!  [ +Mirth +Needs |- Word      -- ] { rdip:arrow run-arrow! }
    def run-arrow! [ +Mirth +Needs |- Arrow     -- ] { atoms for(run-atom!) }
    def run-atom!  [ +Mirth +Needs |- Atom      -- ] { sip(args) op run-op! }

    def run-op! [ +Mirth +Needs |- List(Arg) Op -- ] {
        { Push -> drop2 }
        { Word -> dup rdip:prefer-inline? if(run-word!, need-word!) push-args! }
        { External -> drop push-args! }
        { Buffer -> drop push-args! }
        { Field -> drop push-args! }
        { Tag -> need-tag-word! push-args! }
        { Prim -> run-prim! }
        { Match -> nip run-match! }
        { Lambda -> nip run-lambda! }
        { Var -> drop2 }
        { BlockPush -> nip push-block! }
        { BlockRun -> nip run-block! }
        { LabelPush -> nip need-label! }
        { LabelPop -> nip need-label! }
        { LabelPushR -> nip need-label! }
        { LabelPopR -> nip need-label! }
        { DataGetEnumValue -> drop2 }
        { DataFromEnumValue -> drop2 }
        { DataGetLabel -> nip label need-label! }
        { DataSetLabel -> nip label need-label! }
        { TableToIndex -> drop2 }
        { TableFromIndex -> drop2 }
    }

    def run-prim! [ +Mirth +Needs |- List(Arg) Prim -- ] {
        { Dip -> dup single? if(run-args!, push-args!) }
        { RDip -> dup single? if(run-args!, push-args!) }
        { If -> dup pair? if(run-args!, push-args!) }
        { While -> dup pair? if(run-args!, push-args!) }
        { _ -> drop push-args! }
    }

    def run-match!  [ +Mirth +Needs |- Match  -- ] { cases for(run-case!) }
    def run-case!   [ +Mirth +Needs |- Case   -- ] { dup pattern run-pattern! body run-arrow! }
    def run-lambda! [ +Mirth +Needs |- Lambda -- ] { body run-arrow! }

    def run-pattern! [ +Mirth +Needs |- Pattern     -- ] { atoms for:run-patatom! }
    def run-patatom! [ +Mirth +Needs |- PatternAtom -- ] {
        op match {
            { Underscore -> id }
            { Tag -> need-tag-pat! }
        }
    }

    def push-args! [ +Mirth +Needs |- List(Arg) -- ] { for(push-arg!) }
    def push-arg!  [ +Mirth +Needs |- Arg -- ] {
        { Block -> push-block! }
    }
    def push-block! [ +Mirth +Needs |- Block -- ] {
        dup rdip:to-run-var match(
            Some -> drop2,
            None -> need-block!
        )
    }
}
