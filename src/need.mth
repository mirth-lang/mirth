module(mirth.need)

import(std.prelude)
import(std.list)
import(std.maybe)
import(std.set)
import(mirth.prim)
import(mirth.arrow)
import(mirth.word)
import(mirth.data)
import(mirth.match)

########
# NEED #
########

data(Need,
    NEED_WORD  -> Word,
    NEED_BLOCK -> Block,
    NEED_TAGW  -> Tag,
    NEED_TAGP  -> Tag)

def(Need.>Nat, Need -- Nat,
    NEED_WORD  -> index 4 * >Nat,
    NEED_BLOCK -> index 4 * 1 + >Nat,
    NEED_TAGW  -> index 4 * 2 + >Nat,
    NEED_TAGP  -> index 4 * 3 + >Nat)

#########
# NEEDS #
#########

data(+Needs, +Needs ->
    stack: List(Need)
    +Set(Need))

def(+Needs.set(f), (*a +Set(Need) -- *b +Set(Need)) *a +Needs -- *b +Needs,
    /+Needs stack> dip(f) >stack +Needs)

def(+Needs.new, -- +Needs, L0 >stack +Set.new(Need.>Nat) +Needs)
def(+Needs.rdrop, +Needs --, /+Needs rdrop stack> drop)

def(Need.needed?, Need +Needs -- Bool +Needs, set:member?)
def(Word.needed?, Word +Needs -- Bool +Needs, NEED_WORD needed?)
def(Block.needed?, Block +Needs -- Bool +Needs, NEED_BLOCK needed?)
def(Tag.word-needed?, Tag +Needs -- Bool +Needs, NEED_TAGW needed?)
def(Tag.pat-needed?, Tag +Needs -- Bool +Needs, NEED_TAGP needed?)

def(+Needs.need!, Need +Needs -- +Needs,
    dup needed? if(
        drop,
        dup set:insert! stack:cons
    ))
def(+Needs.need-word!, Word +Needs -- +Needs, NEED_WORD need!)
def(+Needs.need-block!, Block +Needs -- +Needs, NEED_BLOCK need!)
def(+Needs.need-tag-word!, Tag +Needs -- +Needs, NEED_TAGW need!)
def(+Needs.need-tag-pat!, Tag +Needs -- +Needs, NEED_TAGP need!)

def(+Needs.determine-arrow-needs!, Arrow +Needs -- +Needs,
    run-arrow! determine-transitive-needs!)
def(+Needs.determine-transitive-needs!, +Needs -- +Needs,
    while-some(stack:uncons, run-need!))

def(+Needs.run-need!, Need +Needs -- +Needs,
    NEED_BLOCK -> run-block!,
    NEED_WORD -> run-word!,
    NEED_TAGW -> drop,
    NEED_TAGP -> drop)

def(+Needs.run-args!, List(Arg) +Needs -- +Needs, for(run-arg!))
def(+Needs.run-arg!, Arg +Needs -- +Needs, ArgBlock -> run-block!)
def(+Needs.run-block!, Block +Needs -- +Needs, arrow run-arrow!)
def(+Needs.run-word!, Word +Needs -- +Needs, arrow run-arrow!)
def(+Needs.run-arrow!, Arrow +Needs -- +Needs, atoms for(run-atom!))
def(+Needs.run-atom!, Atom +Needs -- +Needs, sip(args) op run-op!)
def(+Needs.run-op!, List(Arg) Op +Needs -- +Needs,
    OpNone -> drop,
    OpInt -> drop2,
    OpStr -> drop2,
    OpWord -> dup prefer-inline? if(run-word!, need-word!) push-args!,
    OpExternal -> drop push-args!,
    OpBuffer -> drop push-args!,
    OpVariable -> drop push-args!,
    OpField -> drop push-args!,
    OpTag -> need-tag-word! push-args!,
    OpPrim -> run-prim!,
    OpMatch -> nip run-match!,
    OpLambda -> nip run-lambda!,
    OpVar -> drop2,
    OpBlockPush -> nip push-block!,
    OpBlockRun -> nip run-block!,
    OpCoerce -> drop2,
    OpLabelPush -> drop2,
    OpLabelPop -> drop2,
    OpDataGetTag -> drop2,
    OpDataGetLabel -> drop3,
    OpDataSetLabel -> drop3)
def(+Needs.run-prim!, List(Arg) Prim +Needs -- +Needs,
    PRIM_CORE_DIP -> dup /L1 if(run-args!, push-args!),
    PRIM_CORE_RDIP -> dup /L1 if(run-args!, push-args!),
    PRIM_CORE_IF -> dup /L2 if(run-args!, push-args!),
    PRIM_CORE_WHILE -> dup /L2 if(run-args!, push-args!),
    _ -> drop push-args!)
def(+Needs.run-match!, Match +Needs -- +Needs, cases for(run-case!))
def(+Needs.run-case!, Case +Needs -- +Needs, dup pattern run-pattern! body run-arrow!)
def(+Needs.run-lambda!, Lambda +Needs -- +Needs, body run-arrow!)

def(+Needs.run-pattern!, Pattern +Needs -- +Needs, atoms for:run-patatom!)
def(+Needs.run-patatom!, PatternAtom +Needs -- +Needs,
    op match(
        PatOpUnderscore -> id,
        PatOpTag -> need-tag-pat!
    ))

def(+Needs.push-args!, List(Arg) +Needs -- +Needs, for(push-arg!))
def(+Needs.push-arg!, Arg +Needs -- +Needs,
    ArgBlock -> push-block!)
def(+Needs.push-block!, Block +Needs -- +Needs,
    dup to-run-var match(
        Some -> drop2,
        None -> need-block!
    ))
