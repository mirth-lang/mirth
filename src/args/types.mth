module(args.types)

import(prelude)
import(data.maybe)
import(data.str)

import(args.parse)

table(ArgumentParser)
field(ArgumentParser~options, ArgumentParser, List(ArgpOption))
field(ArgumentParser~parser, ArgumentParser, Maybe([ +ArgumentParser a Maybe(Str) ArgpOptionType -- +ArgumentParser a ]))
field(ArgumentParser~args-doc, ArgumentParser, Maybe(Str))
field(ArgumentParser~doc, ArgumentParser, Str)
def(ArgumentParser.new, List(ArgpOption) Maybe([ +ArgumentParser a Maybe(Str) ArgpOptionType -- +ArgumentParser a ]) Maybe(Str) Str -- ArgumentParser,
  ArgumentParser.alloc!
  dup dip(~doc !)
  dup dip(~args-doc !)
  dup dip(~parser !)
  dup dip(~options !)
)

data(ArgumentParserStateArgvInfo,
  ARGUMENT_PARSER_STATE_ARGV_INFO -> List(Str) Str Int
)

data(ArgumentParserStateCurrentArg,
  ARGUMENT_PARSER_STATE_CURRENT_ARG -> Bool Maybe(ArgpOptionType) Maybe(ArgpOption)
)

data(ArgumentParserState(a),
  ARGUMENT_PARSER_STATE -> a ArgumentParserStateArgvInfo ArgumentParserStateCurrentArg Int Maybe(ArgumentParsingError)
)

def(ArgumentParser.parser, ArgumentParser -- Maybe([ +ArgumentParser a Maybe(Str) ArgpOptionType -- +ArgumentParser a ]), ~parser @)

def(ArgumentParserState.init, a -- ArgumentParserState(a),
    argv-to-str 
    0 unsafe(read-from-argv)
    0
  ARGUMENT_PARSER_STATE_ARGV_INFO
    F 
    NONE
    NONE
  ARGUMENT_PARSER_STATE_CURRENT_ARG
  0
  NONE
  ARGUMENT_PARSER_STATE
)

def(ArgumentParserState.argv, ArgumentParserState(a) -- List(Str),
  ArgumentParserState.argv-info ArgumentParserStateArgvInfo.argv
)

def(ArgumentParserState.program-name, ArgumentParserState(a) -- Str,
  argv-info program-name
)

def(ArgumentParserStateArgvInfo.program-name, ArgumentParserStateArgvInfo -- Str,
  ARGUMENT_PARSER_STATE_ARGV_INFO -> drop swap drop)

def(ArgumentParserState.argv-info, ArgumentParserState(a) -- ArgumentParserStateArgvInfo,
  ARGUMENT_PARSER_STATE -> drop3 swap drop)

def(ArgumentParserStateArgvInfo.argv, ArgumentParserStateArgvInfo -- List(Str),
  ARGUMENT_PARSER_STATE_ARGV_INFO -> drop2)

def(ArgumentParserState.current-arg, ArgumentParserState(a) -- ArgumentParserStateCurrentArg,
  ARGUMENT_PARSER_STATE -> drop2 dip(drop2))
def(ArgumentParserState.current-arg!, ArgumentParserStateCurrentArg ArgumentParserState(a) -- ArgumentParserState(a),
  ARGUMENT_PARSER_STATE -> dip2(drop over2) ARGUMENT_PARSER_STATE swap drop)
  

def(ArgumentParserState.current-error, ArgumentParserState(a) -- Maybe(ArgumentParsingError),
  ARGUMENT_PARSER_STATE -> dip(drop4))
def(ArgumentParserState.current-error!, Maybe(ArgumentParsingError) ArgumentParserState(a) -- ArgumentParserState(a),
  ARGUMENT_PARSER_STATE -> drop over4 ARGUMENT_PARSER_STATE swap drop)

def(ArgumentParserState.current-positional-arg, ArgumentParserState(a) -- Int,
  ARGUMENT_PARSER_STATE -> drop dip(drop2 drop))
def(ArgumentParserState.current-positional-arg!, Int ArgumentParserState(a) -- ArgumentParserState(a),
  ARGUMENT_PARSER_STATE -> dip(drop over3) ARGUMENT_PARSER_STATE swap drop)

def(ArgumentParserState.arguments, ArgumentParserState(a) -- a,
  ARGUMENT_PARSER_STATE -> drop4)
def(ArgumentParserState.arguments!, a ArgumentParserState(a) -- ArgumentParserState(a),
  ARGUMENT_PARSER_STATE -> dip3(dip(drop)) ARGUMENT_PARSER_STATE)


def(ArgumentParserStateCurrentArg.current-option-option, ArgumentParserStateCurrentArg -- Maybe(ArgpOption),
  ARGUMENT_PARSER_STATE_CURRENT_ARG -> dip(drop2))
def(ArgumentParserStateCurrentArg.current-option-option!, Maybe(ArgpOption) ArgumentParserStateCurrentArg -- ArgumentParserStateCurrentArg,
  ARGUMENT_PARSER_STATE_CURRENT_ARG -> drop rotl ARGUMENT_PARSER_STATE_CURRENT_ARG)

def(ArgumentParserState.current-option-option, ArgumentParserState(a) -- Maybe(ArgpOption),
  current-arg current-option-option)
def(ArgumentParserState.current-option-option!, Maybe(ArgpOption) ArgumentParserState(a) -- ArgumentParserState(a),
  dup dip(current-arg current-option-option!) current-arg!)


def(ArgumentParserStateCurrentArg.current-option, ArgumentParserStateCurrentArg -- Maybe(ArgpOptionType),
  ARGUMENT_PARSER_STATE_CURRENT_ARG -> drop dip(drop))
def(ArgumentParserStateCurrentArg.current-option!, Maybe(ArgpOptionType) ArgumentParserStateCurrentArg -- ArgumentParserStateCurrentArg,
  ARGUMENT_PARSER_STATE_CURRENT_ARG -> dip(drop swap) ARGUMENT_PARSER_STATE_CURRENT_ARG) 

def(ArgumentParserState.current-option, ArgumentParserState(a) -- Maybe(ArgpOptionType),
  current-arg current-option)
def(ArgumentParserState.current-option!, Maybe(ArgpOptionType) ArgumentParserState(a) -- ArgumentParserState(a),
  dup dip(current-arg current-option!) current-arg!)


def(ArgumentParserStateCurrentArg.currently-parsing-option, ArgumentParserStateCurrentArg -- Bool,
  ARGUMENT_PARSER_STATE_CURRENT_ARG -> drop2)
def(ArgumentParserStateCurrentArg.currently-parsing-option!, Bool ArgumentParserStateCurrentArg -- ArgumentParserStateCurrentArg,
  ARGUMENT_PARSER_STATE_CURRENT_ARG -> dip2(drop) ARGUMENT_PARSER_STATE_CURRENT_ARG) 

def(ArgumentParserState.currently-parsing-option, ArgumentParserState(a) -- Bool,
  current-arg currently-parsing-option)
def(ArgumentParserState.currently-parsing-option!, Bool ArgumentParserState(a) -- ArgumentParserState(a),
  dup dip(current-arg currently-parsing-option!) current-arg!)








data(+ArgumentParser, +ARGUMENTPARSER -> ArgumentParser ArgumentParserState(a))
def(+ArgumentParser-ARGUMENTPARSER, +ArgumentParser -- ArgumentParser ArgumentParserState(a), +ARGUMENTPARSER -> id)
def(+ArgumentParser.rdrop, +ArgumentParser --, -ARGUMENTPARSER drop2)

def(+ArgumentParser.argument-parser, +ArgumentParser -- ArgumentParser +ArgumentParser, -ARGUMENTPARSER over dip(+ARGUMENTPARSER))
def(+ArgumentParser.state, +ArgumentParser -- ArgumentParserState(a) +ArgumentParser, -ARGUMENTPARSER dup dip(+ARGUMENTPARSER))
def(+ArgumentParser.state!, +ArgumentParser ArgumentParserState(a) -- +ArgumentParser, -ARGUMENTPARSER drop swap +ARGUMENTPARSER)

def(+ArgumentParser.parser, +ArgumentParser -- +ArgumentParser Maybe([ +ArgumentParser a Maybe(Str) ArgpOptionType -- +ArgumentParser a ]), argument-parser ArgumentParser.parser)

data(ArgpOptionType,
  OPTION_SHORT -> Byte,
  OPTION_LONG_ONLY -> Str,
  OPTION_POSITIONAL,
  OPTION_END 
)

def(ArgpOptionType.has-short?, ArgpOptionType -- Bool,
  match(
    OPTION_SHORT -> drop T,
    _ -> drop F
  )
)

table(ArgpOption)
field(ArgpOption~long, ArgpOption, Maybe(Str))
field(ArgpOption~type, ArgpOption, ArgpOptionType)
field(ArgpOption~arg, ArgpOption, Maybe(Str))
field(ArgpOption~doc, ArgpOption, Maybe(Str))
field(ArgpOption~group, ArgpOption, Maybe(Int))

def(ArgpOption.new, Maybe(Str) ArgpOptionType Maybe(Str) Maybe(Str) Maybe(Int) -- ArgpOption,
  ArgpOption.alloc!
  dup dip(~group !)
  dup dip(~doc !)
  dup dip(~arg !)
  dup dip(~type !)
  dup dip(~long !)
)

data(ArgumentParsingError,
  NO_ARGS_PARSED,
  MISSING_ARGUMENT_VALUE,
  MISSING_ARG -> Str,
  TOO_MANY_ARGS,
  TOO_FEW_ARGS,
  UNKNOWN_ARG
)

def(ArgumentParsingError.show, ArgumentParsingError -- Str,
  NO_ARGS_PARSED -> "Failed to parse any CLI arguments",
  MISSING_ARG -> "Missing argument: Need " swap cat,
  MISSING_ARGUMENT_VALUE -> "Missing associated value for flag option",
  TOO_MANY_ARGS -> "Too many positional arguments passed",
  TOO_FEW_ARGS -> "Too few positional arguments passed",
  UNKNOWN_ARG -> "Got an unknown option"
)

