module(args.state)

import(std.prelude)
import(std.maybe)
import(std.str)
import(args.parse)

data(ArgvInfo,
  ARGV_INFO ->
    argv:List(Str)
    program-name:Str
)

def(ArgvInfo.program-name, ArgvInfo -- Str, ARGV_INFO -> program-name> dup >program-name ARGV_INFO drop)
def(ArgvInfo.argv, ArgvInfo -- List(Str), ARGV_INFO -> argv> dup >argv ARGV_INFO drop)

data(CurrentArg,
  CURRENT_ARG ->
    parsing?:Bool 
    option:Maybe(ArgpOptionType) 
    option-option:Maybe(ArgpOption))

def(CurrentArg.option-option, CurrentArg -- Maybe(ArgpOption),
  CURRENT_ARG -> option-option> dup >option-option CURRENT_ARG drop)

def(CurrentArg.option-option!, Maybe(ArgpOption) CurrentArg -- CurrentArg,
  CURRENT_ARG -> option-option> drop >option-option CURRENT_ARG)

def(CurrentArg.option, CurrentArg -- Maybe(ArgpOptionType),
  CURRENT_ARG ->  option> dup >option CURRENT_ARG drop)

def(CurrentArg.option!, Maybe(ArgpOptionType) CurrentArg -- CurrentArg,
  CURRENT_ARG -> option> drop >option CURRENT_ARG)

def(CurrentArg.parsing?, CurrentArg -- Bool,
  CURRENT_ARG -> parsing?> dup >parsing? CURRENT_ARG drop)

def(CurrentArg.parsing!, Bool CurrentArg -- CurrentArg,
  CURRENT_ARG -> parsing?> drop >parsing? CURRENT_ARG)

data(State(a),
  STATE ->
    arguments:a
    argv-info:ArgvInfo
    arg:CurrentArg 
    positional-index:Int
    error:Maybe(ArgumentParsingError)
)

def(State.init, a -- State(a),
    argv-to-str >argv
    0 unsafe(read-from-argv) >program-name
  ARGV_INFO >argv-info

    F >parsing?
    NONE >option
    NONE >option-option
  CURRENT_ARG >arg

  >arguments
  0 >positional-index
  NONE >error
  STATE
)

def(State.argv, State(a) -- List(Str), argv-info ArgvInfo.argv)

def(State.program-name, State(a) -- Str, argv-info program-name)

def(State.argv-info, State(a) -- ArgvInfo,
  STATE -> argv-info> dup >argv-info STATE drop)

def(State.parsing?, State(a) -- Bool, arg parsing?)

def(State.parsing!, Bool State(a) -- State(a),
  dup dip(arg parsing!) arg!)

def(State.option, State(a) -- Maybe(ArgpOptionType),
  arg option)

def(State.option!, Maybe(ArgpOptionType) State(a) -- State(a),
  dup dip(arg option!) arg!)

def(State.option-option, State(a) -- Maybe(ArgpOption),
  arg option-option)

def(State.option-option!, Maybe(ArgpOption) State(a) -- State(a),
  dup dip(arg option-option!) arg!)

def(State.arg, State(a) -- CurrentArg,
  STATE -> arg> dup >arg STATE drop)

def(State.arg!, CurrentArg State(a) -- State(a),
  STATE -> arg> drop >arg STATE)

def(State.error, State(a) -- Maybe(ArgumentParsingError),
  STATE -> error> dup >error STATE drop)

def(State.error!, Maybe(ArgumentParsingError) State(a) -- State(a),
  STATE -> error> drop >error STATE)

def(State.positional-index, State(a) -- Int,
  STATE -> positional-index> dup >positional-index STATE drop)

def(State.positional-index!, Int State(a) -- State(a),
  STATE -> positional-index> drop >positional-index STATE)

def(State.arguments, State(a) -- a,
  STATE -> arguments> dup >arguments STATE drop)

def(State.arguments!, a State(a) -- State(a),
  STATE -> arguments> drop >arguments STATE)
