module(resource.array)
import(prelude)
import(data.byte)
import(resource.buffer)

data(SpanFn(k), MkSpanFn -> [k -- Offset Size])
data(PtrGetFn(v), MkPtrGetFn -> [Ptr +Unsafe -- v +Unsafe])
data(PtrSetFn(v), MkPtrSetFn -> [v Ptr +Unsafe -- +Unsafe])

def(SpanFn.use, k SpanFn(k) -- Offset Size, MkSpanFn -> run)
def(PtrGetFn.use, Ptr PtrGetFn(v) +Unsafe -- v +Unsafe, MkPtrGetFn -> run)
def(PtrSetFn.use, v Ptr PtrSetFn(v) +Unsafe -- +Unsafe, MkPtrSetFn -> run)

def(SpanFn.reindex(f), (k1 -- k2) SpanFn(k2) -- SpanFn(k1),
    MkSpanFn -> [f] swap compose MkSpanFn)
def(PtrGetFn.map(f), (u -- v) PtrGetFn(u) -- PtrGetFn(v),
    MkPtrGetFn -> [f] compose MkPtrGetFn)
def(PtrSetFn.comap(f), (v -- u) PtrSetFn(u) -- PtrSetFn(v),
    MkPtrSetFn -> [dip(f)] swap compose MkPtrSetFn)

data(+Array(k,v), +ARRAY -> SpanFn(k) PtrGetFn(v) PtrSetFn(v) +Buffer)
def(-ARRAY, +Array(k,v) -- SpanFn(k) PtrGetFn(v) PtrSetFn(v) +Buffer, +ARRAY -> id)

def(+Array~Buffer(f), (*a +Buffer -- *b +Buffer) *a +Array(k,v) -- *b +Array(k,v),
    -ARRAY dip3(f) +ARRAY)
def(+Array.spanFn, +Array(k,v) -- SpanFn(k) +Array(k,v), -ARRAY over2 dip(+ARRAY))
def(+Array.ptrGetFn, +Array(k,v) -- PtrGetFn(v) +Array(k,v), -ARRAY over dip(+ARRAY))
def(+Array.ptrSetFn, +Array(k,v) -- PtrSetFn(v) +Array(k,v), -ARRAY dup dip(+ARRAY))

def(+Array.key-span, k +Array(k,v) -- Offset Size +Array(k,v),
    -ARRAY over2 dip(+ARRAY) use)
def(+Array.unsafe-load, Ptr +Array(k,v) -- v +Array(k,v),
    -ARRAY over dip(+ARRAY) unsafe(use))
def(+Array.unsafe-store, v Ptr +Array(k,v) -- +Array(k,v),
    -ARRAY dup dip(+ARRAY) unsafe(use))

def(+Array.new(f,g,h), (k -- Offset Size, Ptr +Unsafe -- v +Unsafe, v Ptr +Unsafe -- +Unsafe) Size -- +Array(k,v),
    +Buffer.new MkSpanFn(f) MkPtrGetFn(g) MkPtrSetFn(h) +ARRAY)

def(+Array.new<U8> (f), (k -- Int) Size -- +Array(k, U8 ),
    +Array.new(f     >Offset 1 >Size, @U8 , !U8 ))
def(+Array.new<U16>(f), (k -- Int) Size -- +Array(k, U16),
    +Array.new(f 2 * >Offset 2 >Size, @U16, !U16))
def(+Array.new<U32>(f), (k -- Int) Size -- +Array(k, U32),
    +Array.new(f 4 * >Offset 4 >Size, @U32, !U32))
def(+Array.new<U64>(f), (k -- Int) Size -- +Array(k, U64),
    +Array.new(f 8 * >Offset 8 >Size, @U64, !U64))
def(+Array.new<I8> (f), (k -- Int) Size -- +Array(k, I8 ),
    +Array.new(f     >Offset 1 >Size, @I8 , !I8 ))
def(+Array.new<I16>(f), (k -- Int) Size -- +Array(k, I16),
    +Array.new(f 2 * >Offset 2 >Size, @I16, !I16))
def(+Array.new<I32>(f), (k -- Int) Size -- +Array(k, I32),
    +Array.new(f 4 * >Offset 4 >Size, @I32, !I32))
def(+Array.new<I64>(f), (k -- Int) Size -- +Array(k, I64),
    +Array.new(f 8 * >Offset 8 >Size, @I64, !I64))

def(+Array.new<Int>(f), (k -- Int) Size -- +Array(k, Int),
    +Array.new<I64>(f) transport(I64>Int, Int>I64))
def(+Array.new<Byte>(f), (k -- Int) Size -- +Array(k, Byte),
    +Array.new<U8>(f) transport(U8>Byte, Byte>U8))

def(+Array.transport(f,g), (u -- v, v -- u) +Array(k,u) -- +Array(k,v),
    -ARRAY dip(map(f)) comap(g) +ARRAY)

def(+Array.unsafe-ptr, k +Array(k,v) -- Ptr +Array(k,v),
    key-span ~Buffer(over >Int >Size + expand! buffer-base unsafe(offset)))
def(+Array.get!, k +Array(k,v) -- v +Array(k,v), unsafe-ptr unsafe-load)
def(+Array.set!, v k +Array(k,v) -- +Array(k,v), unsafe-ptr unsafe-store)
