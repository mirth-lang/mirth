module(resource.buffer)
import(prelude)
import(data.str)

data(+Buffer, +BUFFER -> Size Ptr)
def(-BUFFER, +Buffer -- Size Ptr, +BUFFER -> id)

def(+Buffer.new, Size -- +Buffer,
    dup dup prim-ptr-alloc +BUFFER
    0 swap erase-span!)

def(+Buffer.resize!, Size +Buffer -- +Buffer,
    -BUFFER dip(over dup) swap prim-ptr-realloc +BUFFER
    dup2 >= if(
        tuck - erase-span!,
        drop2
    ))

||| Resize buffer only if the new size is larger,
||| and resize by a factor of at least two.
def(+Buffer.expand!, Size +Buffer -- +Buffer,
    dup buffer-size > if(buffer-size 2 * max resize!, drop))

def(+Buffer.rdrop, +Buffer -- ,
    -BUFFER prim-ptr-free drop)

def(+Buffer.erase-span!, Offset Size +Buffer -- +Buffer,
    over 1 check-offset!
    dup 0<= then("size must be positive" panic!)
    dup2 + 1- 1 check-offset!
    dip2(0) swap buffer-base prim-ptr-add prim-ptr-fill)

def(+Buffer.buffer-size, +Buffer -- Size +Buffer,
    -BUFFER over dip(+BUFFER))
def(+Buffer.buffer-base, +Buffer -- Ptr +Buffer,
    -BUFFER dup dip(+BUFFER))

def(+Buffer.check-offset!, Offset Size +Buffer -- +Buffer,
    dup2 dip(0 buffer-size) - in-range
    else("memory access out of bounds" panic!)
    % 0= else("memory access unaligned" panic!))

def(+Buffer@U8, Offset +Buffer -- U8 +Buffer,
    dup 1 check-offset! buffer-base prim-ptr-add prim-u8-get)
def(+Buffer@U16, Offset +Buffer -- U16 +Buffer,
    dup 2 check-offset! buffer-base prim-ptr-add prim-u16-get)
def(+Buffer@U32, Offset +Buffer -- U32 +Buffer,
    dup 4 check-offset! buffer-base prim-ptr-add prim-u32-get)
def(+Buffer@U64, Offset +Buffer -- U64 +Buffer,
    dup 8 check-offset! buffer-base prim-ptr-add prim-u64-get)

def(+Buffer!U8, U8 Offset +Buffer -- +Buffer,
    dup 1 check-offset! buffer-base prim-ptr-add prim-u8-set)
def(+Buffer!U16, U16 Offset +Buffer -- +Buffer,
    dup 2 check-offset! buffer-base prim-ptr-add prim-u16-set)
def(+Buffer!U32, U32 Offset +Buffer -- +Buffer,
    dup 4 check-offset! buffer-base prim-ptr-add prim-u32-set)
def(+Buffer!U64, U64 Offset +Buffer -- +Buffer,
    dup 8 check-offset! buffer-base prim-ptr-add prim-u64-set)

def(+Buffer!Str, Str Offset +Buffer -- +Buffer,
    dup 1 check-offset!
    over num-bytes over + 1- 1 check-offset!
    buffer-base prim-ptr-add
    str-copy-partial! drop)
