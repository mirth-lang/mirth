module(core)
import(prelude)
import(names)
import(tokens)
import(strings)
import(diagnostics)

def(init-core!, +Core, id)

########
# CORE #
########
# Mirth Core is Mirth's main intermediate representation. Its goal
# is to temper the craziness of the elaborator, by providing a language
# that is easy to typecheck, easy to generate code for, and easy to
# embed in other domains semantically. This language is based on
# premonoidal categories, or equivalently, ordered string diagrams.
# From a practical perspective, this means:
#
#    - Mirth Core code is a sequence of instructions, either
#      primitive, or subroutine, or control flow.
#    - Each instruction takes a number of inputs and outputs.
#    - Each input/output value has a type associated with it.
#      In some cases, the type is "the value itself", which
#      is appropriate for literals and other constructed
#      values, and the type then gets specialized before use.
#    - Duplication is handled implicitly for some types,
#      explicitly for others. The dividing line is whether
#      the duplication would be easy to implement or costly.
#      In particular, duplication up to U512 is free, after
#      U512 it needs to be handled explicitly.
#    - Unlike in Mirth, we don't really want to treat stack
#      types in a special manner, we want the elaborator to
#      take care of hiding that complexity from the core.
#      So we're always talking about concrete value types
#      at each step, and we're only touching the values we
#      need to, not passing in extra values as a matter of
#      course. This makes Mirth Core a lot simpler than Mirth,
#      but also frustrating to use directly.
#
# In the end though, Mirth Core still looks a lot like Mirth,
# just with a lot of craziness removed.

def(CORE_SIZE, Size, 1 24 <<)
CORE_SIZE def-static-buffer(CORE_BUF)

# Pointer to a core instruction. 24 bits wide.
def-type(CorePtr, I32) # actually U24

# Output value of a core instruction.
# The higher 24 bits indicate the instruction (i.e. ), the lower
# 8 bits select which instruction output we want.
def-type(CoreVal, U32)

def(CoreVal->CorePtr, CoreVal -- CorePtr,
    U32->Int 4 >> Int->I32)

def(core-val-ptr, CoreVal -- CorePtr,
    U32->Int 8 >> Int->I32)
def(core-val-output, CoreVal -- Int,
    U32->Int 0xFF &)
