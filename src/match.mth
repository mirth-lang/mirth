module(mirth.match)

import(std.prelude)
import(std.maybe)
import(std.list)

import(mirth.mirth)
import(mirth.type)
import(mirth.data)
import(mirth.token)
import(mirth.var)
import(mirth.arrow)

#########
# Match #
#########

data(Match, Match ->
    home:Home token:Token body:Token
    ctx:Ctx dom:StackType cod:StackType
    cases:List(Case))

data(+Match, +Match ->
    home:Home token:Token body:Token
    ctx:Ctx dom:StackType cod:StackType
    cases:List(Case))

def(Match.thaw, Match -- +Match, Match -> +Match)
def(+Match.freeze, +Match -- Match, +Match -> Match)

data(Case, CASE -> pattern:Pattern body:Arrow)
def(Case.outer-ctx, Case -- Ctx, pattern outer-ctx)
def(Case.inner-ctx, Case -- Ctx, pattern inner-ctx)

def(Match.is-exhaustive?, Match -- Bool,
    dup has-default-case? or(
        dup scrutinee-data? match(
            Some ->
                num-tags
                over cases len ==,
            None ->
                dup cases len 0>,
                # presume exhaustiveness generally.
                # and don't support empty matches for now.
        )
    ) nip)

def(Match.has-default-case?, Match -- Bool,
    cases has(is-default-case?))

||| Get "data" associated with scrutinee. Only returns Data if all the
||| TAG patterns use it.
def(Match.scrutinee-data?, Match -- Maybe(Data),
    cases filter(is-default-case? not) dup
    first bind(pattern single-tag?) map(.data) if-some(
        swap all(pattern single-tag? if-some(dip:dup .data ==, False)) if(
            Some,
            drop None
        ),
        drop None
    ))

def(Match.is-transparent?, Match -- Bool,
    cases /L1
    bind(pattern atoms /L1)
    has(op match(
        PatOpTag -> .data is-transparent?,
        PatOpUnderscore -> True
    )))

def(Match.semi-transparent-tag?, Match -- Maybe(Tag),
    cases /L1
    bind(pattern atoms /L1)
    bind(op match(
        PatOpTag -> Some,
        _ -> drop None
    ))
    filter(.data is-semi-transparent?))

def(+Match.add-case, +Mirth +Match Case -- +Mirth +Match,
    dup case-redundant? if(
        pattern token-start "Case is unreachable." rdip:emit-error!,
        cases(swap List.snoc)
    ))

def(+Match.case-redundant?, Case +Match -- Bool +Match,
    cases member(covers?))

########
# CASE #
########

||| Ask whether the second case covers the first case.
def(Case.covers?, Case Case -- Bool, both(pattern) covers?)

||| Is this a "default" case?
def(Case.is-default-case?, Case -- Bool, pattern is-default?)

###########
# Pattern #
###########

data(Pattern, Pattern ->
    home:Home
    token-start:Token
    token-end:Token
    outer-ctx:Ctx       # Context coming from outside.
    inner-ctx:Ctx       # Context for case body.
    saved:List(Type)    # List of types set aside by underscores.
    mid:StackType       # Stack type on the left of the pattern.
    cod:StackType       # Stack type coming from outside match.
    atoms:List(PatternAtom))
def(Pattern.dom, Pattern -- StackType, sip:mid saved for(STCons))
def(Pattern.thaw, Pattern -- +Pattern, >pattern +Pattern)

def(Pattern.single-tag?, Pattern -- Maybe(Tag),
    atoms /L1 bind(op /PatOpTag))

def(Pattern.is-default?, Pattern -- Bool,
    atoms all(op /PatOpUnderscore))

data(+Pattern, +Pattern -> pattern:Pattern)
def(+Pattern.freeze, +Pattern -- Pattern, /+Pattern pattern>)

data(PatternAtom, PATATOM ->
    token:Token
    ctx:Ctx
    saved:List(Type)
    dom:StackType
    cod:StackType
    subst:Subst
    op:PatternOp)

data(PatternOp,
    PatOpUnderscore,
    PatOpTag -> Tag)

def(+Pattern.op!, PatternOp +Mirth +Pattern -- +Mirth +Pattern,
    PatOpUnderscore -> underscore!,
    PatOpTag -> tag!)

def(+Pattern.underscore!, +Mirth +Pattern -- +Mirth +Pattern,
    pattern token-start >token
    pattern inner-ctx >ctx
    pattern mid >cod
    SUBST_NIL >subst
    PatOpUnderscore >op
    pattern mid force-cons?! match(
        None ->
            pattern token-start "pattern expects something on stack" rdip:emit-error!
            STACK_TYPE_ERROR TYPE_ERROR,
        Some ->
            unpack2
    )
    dup pattern:saved:cons
    L1 >saved dup >dom pattern:mid!
    PATATOM pattern:atoms:cons)

def(+Pattern.tag!, +Mirth +Pattern Tag -- +Mirth +Pattern,
    dup PatOpTag >op L0 >saved
    pattern token-start >token
    pattern inner-ctx >ctx
    dip:SUBST_NIL rdip:type freshen-sig unpack
    dip(pattern mid)
    pattern token-start >token +Gamma rdip':unify! rdrop >cod
    dup >dom pattern:mid!
    >subst PATATOM pattern:atoms:cons)

||| Asks whether the second pattern covers the first pattern.
def(Pattern.covers?, Pattern Pattern -- Bool,
    both(atoms /L1) zip match(
        None -> False,
        Some -> unpack2 op match(
            PatOpUnderscore -> drop True,
            PatOpTag -> swap op match(
                PatOpUnderscore -> drop False,
                PatOpTag -> ==
            )
        )
    ))

def(PatternOp./PatOpTag, PatternOp -- Maybe(Tag), PatOpTag -> Some, _ -> drop None)
def(PatternOp./PatOpUnderscore, PatternOp -- Bool, PatOpUnderscore -> True, _ -> drop False)

## TODO: introduce case trees
## https://github.com/mirth-lang/mirth/issues/238
