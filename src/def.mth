module(mirth.def)

import(std.prelude)
import(std.maybe)
import(std.list)

import(mirth.name)
import(mirth.alias)
import(mirth.buffer)
import(mirth.data)
import(mirth.external)
import(mirth.module)
import(mirth.package)
import(mirth.prim)
import(mirth.table)
import(mirth.token)
import(mirth.tycon)
import(mirth.type)
import(mirth.typedef)
import(mirth.variable)
import(mirth.word)

data(Def,
    DefAlias -> Alias,
    DefModule -> Module,
    DefPackage -> Package,
    DefData -> Data,
    DefTable -> Table,
    DefType -> TypeDef,
    DefTag -> Tag,
    DefPrim -> Prim,
    DefWord -> Word,
    DefBuffer -> Buffer,
    DefVariable -> Variable,
    DefExternal -> External,
    DefField -> Field)

def(Def>Module?, Def -- Maybe(Module),
    DefPackage -> drop None,
    DefModule -> drop None,
    DefAlias -> head .module Some,
    DefData -> head? map(.module),
    DefTable -> head .module Some,
    DefType -> head? map(.module),
    DefTag -> .data head? map(.module),
    DefPrim -> drop None,
    DefWord -> head .module Some,
    DefBuffer -> head .module Some,
    DefVariable -> head .module Some,
    DefExternal -> sig .module Some,
    DefField -> head .module Some)

def(Def.package?, Def -- Maybe(Package), DefPackage -> Some, _ -> drop None)
def(Def.module?, Def -- Maybe(Module), DefModule -> Some, _ -> drop None)
def(Def.alias?, Def -- Maybe(Alias), DefAlias -> Some, _ -> drop None)
def(Def.data?, Def -- Maybe(Data), DefData -> Some, _ -> drop None)
def(Def.table?, Def -- Maybe(Table), DefTable -> Some, _ -> drop None)
def(Def.typedef?, Def -- Maybe(TypeDef), DefType -> Some, _ -> drop None)
def(Def.tag?, Def -- Maybe(Tag), DefTag -> Some, _ -> drop None)
def(Def.prim?, Def -- Maybe(Prim), DefPrim -> Some, _ -> drop None)
def(Def.word?, Def -- Maybe(Word), DefWord -> Some, _ -> drop None)
def(Def.buffer?, Def -- Maybe(Buffer), DefBuffer -> Some, _ -> drop None)
def(Def.variable?, Def -- Maybe(Variable), DefVariable -> Some, _ -> drop None)
def(Def.external?, Def -- Maybe(External), DefExternal -> Some, _ -> drop None)
def(Def.field?, Def -- Maybe(Field), DefField -> Some, _ -> drop None)

def(Def.typecheck!, Def --,
    DefAlias -> target typecheck!,
    DefPackage -> drop,
    DefModule -> drop,
    DefBuffer -> drop,
    DefPrim -> drop,
    DefData -> drop,
    DefTable -> drop,
    DefType -> drop,
    DefExternal -> type drop,
    DefWord -> dup type drop arrow drop,
    DefField -> type drop,
    DefTag -> type drop,
    DefVariable -> type drop)

def(Def.callable?, Def -- Bool,
    DefAlias -> target callable?,
    DefPackage -> drop F,
    DefModule -> drop F,
    DefBuffer -> drop T,
    DefPrim -> drop T,
    DefData -> drop F,
    DefTable -> drop F,
    DefType -> drop F,
    DefExternal -> drop T,
    DefWord -> drop T,
    DefField -> drop T,
    DefTag -> drop T,
    DefVariable -> drop T)

def(Def.defines-a-type?, Def -- Bool,
    DefAlias -> target defines-a-type?,
    DefPackage -> drop F,
    DefModule -> drop F,
    DefBuffer -> drop F,
    DefPrim -> drop F,
    DefData -> drop T,
    DefTable -> drop T,
    DefType -> drop T,
    DefExternal -> drop F,
    DefWord -> drop F,
    DefField -> drop F,
    DefTag -> drop F,
    DefVariable -> drop F)

def(Def.exposed-tycon?, Def -- Maybe(Tycon),
    DefAlias -> target exposed-tycon?,
    DefPackage -> drop None,
    DefModule -> drop None,
    DefData -> TYCON_DATA Some,
    DefTable -> TYCON_TABLE Some,
    DefType -> target tycon?,
    DefBuffer -> drop None,
    DefPrim -> drop None,
    DefExternal -> drop None,
    DefWord -> drop None,
    DefField -> drop None,
    DefTag -> drop None,
    DefVariable -> drop None)

def(Def.head?, Def -- Maybe(Token),
    DefAlias -> head Some,
    DefPackage -> drop None,
    DefModule -> start Some,
    DefData -> head?,
    DefTable -> head Some,
    DefType -> head?,
    DefBuffer -> drop None,
    DefPrim -> drop None,
    DefExternal -> head Some,
    DefWord -> head Some,
    DefField -> head Some,
    DefTag -> .data head?,
    DefVariable -> head Some)

def(Def.defining-module?, Def -- Maybe(Module),
    head? map(.module))

def(Def.qname, Def -- QName,
    DefAlias -> qname,
    DefPackage -> qname,
    DefModule -> qname,
    DefBuffer -> qname,
    DefPrim -> qname,
    DefData -> qname,
    DefTable -> qname,
    DefType -> qname,
    DefExternal -> qname,
    DefWord -> qname,
    DefField -> qname,
    DefTag -> qname,
    DefVariable -> qname)

def(Def.register, Def --,
    dup qname
    dup undefined? else("qualified name already has definition" panic!)
    name ~defs modify(Cons))

def(Def.def-index, Def -- Nat,
    qname dup name defs filter(dup2 qname <=) len nip)
