module mirth.def

import std.prelude
import std.maybe
import std.list
import std.str

import mirth.mirth
import mirth.name
import mirth.alias
import mirth.buffer
import mirth.data
import mirth.external
import mirth.module
import mirth.package
import mirth.prim
import mirth.table
import mirth.token
import mirth.tycon
import mirth.type
import mirth.typedef
import mirth.variable
import mirth.word
import mirth.macro

data Def {
    DefAlias [ Alias ]
    DefModule [ Module ]
    DefPackage [ Package ]
    DefData [ Data ]
    DefTable [ Table ]
    DefType [ TypeDef ]
    DefTag [ Tag ]
    DefPrim [ Prim ]
    DefWord [ Word ]
    DefBuffer [ Buffer ]
    DefVariable [ Variable ]
    DefExternal [ External ]
    DefField [ Field ]
    DefMacro [ Macro ]
    --

    def package? { DefPackage -> Some, _ -> drop None }
    def module? { DefModule -> Some, _ -> drop None }
    def alias? { DefAlias -> Some, _ -> drop None }
    def data? { DefData -> Some, _ -> drop None }
    def table? { DefTable -> Some, _ -> drop None }
    def typedef? { DefType -> Some, _ -> drop None }
    def tag? { DefTag -> Some, _ -> drop None }
    def prim? { DefPrim -> Some, _ -> drop None }
    def word? { DefWord -> Some, _ -> drop None }
    def buffer? { DefBuffer -> Some, _ -> drop None }
    def variable? { DefVariable -> Some, _ -> drop None }
    def external? { DefExternal -> Some, _ -> drop None }
    def field? { DefField -> Some, _ -> drop None }
    def macro? { DefMacro -> Some, _ -> drop None }

    def == [ Def Def -- Bool ] {
        { DefPackage -> Some swap package? == }
        { DefModule -> Some swap module? == }
        { DefAlias -> Some swap alias? == }
        { DefData -> Some swap data? == }
        { DefTable -> Some swap table? == }
        { DefType -> Some swap typedef? == }
        { DefTag -> Some swap tag? == }
        { DefPrim -> Some swap prim? == }
        { DefWord -> Some swap word? == }
        { DefBuffer -> Some swap buffer? == }
        { DefVariable -> Some swap variable? == }
        { DefExternal -> Some swap external? == }
        { DefField -> Some swap field? == }
        { DefMacro -> Some swap macro? == }
    }

    def typecheck! [ +Mirth Def -- +Mirth ] {
        { DefPackage -> drop }
        { DefModule -> drop }
        { DefAlias -> target typecheck! }
        { DefData -> drop }
        { DefTable -> drop }
        { DefType -> target drop }
        { DefTag -> type drop }
        { DefPrim -> drop }
        { DefWord -> dup type drop arrow drop }
        { DefBuffer -> drop }
        { DefVariable -> type drop }
        { DefExternal -> type drop }
        { DefField -> type drop }
        { DefMacro -> drop }
    }

    def callable? [ +Mirth Def -- +Mirth Bool ] {
        { DefAlias -> ~target try-force! has(callable?) }
        { DefPackage -> drop False }
        { DefModule -> drop False }
        { DefBuffer -> drop True }
        { DefPrim -> drop True }
        { DefData -> drop False }
        { DefTable -> drop False }
        { DefType -> drop False }
        { DefExternal -> drop True }
        { DefWord -> drop True }
        { DefField -> drop True }
        { DefTag -> drop True }
        { DefVariable -> drop True }
        { DefMacro -> action callable? }
    }

    def defines-a-type? [ +Mirth Def -- +Mirth Bool ] {
        { DefAlias -> ~target try-force! has(defines-a-type?) }
        { DefPackage -> drop False }
        { DefModule -> drop False }
        { DefBuffer -> drop False }
        { DefPrim -> drop False }
        { DefData -> drop True }
        { DefTable -> drop True }
        { DefType -> drop True }
        { DefExternal -> drop False }
        { DefWord -> drop False }
        { DefField -> drop False }
        { DefTag -> drop False }
        { DefVariable -> drop False }
        { DefMacro -> drop False }
    }

    def exposed-tycon? [ +Mirth Def -- +Mirth Maybe(Tycon) ] {
        { DefAlias -> ~target try-force! bind(exposed-tycon?) }
        { DefPackage -> drop None }
        { DefModule -> drop None }
        { DefData -> TYCON_DATA Some }
        { DefTable -> TYCON_TABLE Some }
        { DefType -> target tycon? }
        { DefBuffer -> drop None }
        { DefPrim -> drop None }
        { DefExternal -> drop None }
        { DefWord -> drop None }
        { DefField -> drop None }
        { DefTag -> drop None }
        { DefVariable -> drop None }
        { DefMacro -> drop None }
    }

    def head? [ Def -- Maybe(Token) ] {
        { DefAlias -> head Some }
        { DefPackage -> drop None }
        { DefModule -> start Some }
        { DefData -> head? }
        { DefTable -> head Some }
        { DefType -> head? }
        { DefBuffer -> drop None }
        { DefPrim -> drop None }
        { DefExternal -> head Some }
        { DefWord -> head Some }
        { DefField -> head Some }
        { DefTag -> .data head? }
        { DefVariable -> head Some }
        { DefMacro -> head? }
    }

    def defining-module? [ Def -- Maybe(Module) ] {
        head? map(.module)
    }

    def same-resolved? [ +Mirth Def Def -- +Mirth Bool ] {
        on2(resolve) ==
    }

    def resolve [ +Mirth Def -- +Mirth Def ] {
        while-some(dup alias?, nip target)
    }

    def name [ Def -- Name ] {
        { DefAlias -> name }
        { DefPackage -> name }
        { DefModule -> name }
        { DefBuffer -> name }
        { DefPrim -> name }
        { DefData -> name }
        { DefTable -> name }
        { DefType -> name }
        { DefExternal -> name }
        { DefWord -> name }
        { DefField -> name }
        { DefTag -> name }
        { DefVariable -> name }
        { DefMacro -> name }
    }

    def arity [ Def -- Int ] {
        { DefAlias -> arity }
        { DefPackage -> drop 0 }
        { DefModule -> drop 0 }
        { DefBuffer -> drop 0 }
        { DefPrim -> arity }
        { DefData -> arity }
        { DefTable -> drop 0 }
        { DefType -> drop 0 }
        { DefExternal -> arity }
        { DefWord -> arity >Int }
        { DefField -> drop 0 }
        { DefTag -> drop 0 }
        { DefVariable -> drop 0 }
        { DefMacro -> arity }
    }

    def qname-soft [ +Mirth Def -- +Mirth Maybe(QName) ] {
        { DefAlias -> qname-soft }
        { DefPackage -> qname Some }
        { DefModule -> qname Some }
        { DefBuffer -> qname Some }
        { DefPrim -> qname Some }
        { DefData -> qname-soft }
        { DefTable -> qname-soft }
        { DefType -> qname-soft }
        { DefExternal -> qname-soft }
        { DefWord -> qname-soft }
        { DefField -> qname-soft }
        { DefTag -> qname Some }
        { DefVariable -> qname Some }
        { DefMacro -> qname-soft }
    }

    def qname-hard [ +Mirth Def -- +Mirth QName ] {
        { DefAlias -> qname-hard }
        { DefPackage -> qname }
        { DefModule -> qname }
        { DefBuffer -> qname }
        { DefPrim -> qname }
        { DefData -> qname-hard }
        { DefTable -> qname-hard }
        { DefType -> qname-hard }
        { DefExternal -> qname-hard }
        { DefWord -> qname-hard }
        { DefField -> qname-hard }
        { DefTag -> qname }
        { DefVariable -> qname }
        { DefMacro -> qname-hard }
    }

    def as-namespace? [ +Mirth Def -- +Mirth Maybe(Namespace) ] {
        { DefAlias -> ~target try-force! bind(as-namespace?) }
        { DefPackage -> NAMESPACE_PACKAGE Some }
        { DefModule -> NAMESPACE_MODULE Some }
        { DefData -> TYCON_DATA NAMESPACE_TYCON Some }
        { DefTable -> TYCON_TABLE NAMESPACE_TYCON Some }
        { DefType -> target tycon? map(NAMESPACE_TYCON) }
        { DefWord -> NAMESPACE_WORD Some }
        { _ -> drop None }
    }

    def register [ +Mirth Def -- +Mirth ] {
        dup qname-soft for(
            dup undefined-soft? else(
                >Str "qualified name already has definition: " swap cat fatal-error!
            ) drop
        )
        dup name ~defs modify(Cons)
    }
}
