
# TODO:
#  - Add basic (semi-high-level) file IO words.

###########
# Prelude #
###########

def(trip, a -- a a a, dup dup)
def(rotr, a b c -- c a b, swap dip(swap))
def(rotl, a b c -- b c a, dip(swap) swap)
def(over, a b -- a b a, dip(dup) swap)
def(tuck, a b -- b a b, dup dip(swap))
def(nip, a b -- b, dip(drop))
def(dup2, a b -- a b a b, over over)
def(drop2, a b --, drop drop)
def(swap2, a b c d -- c d a b, dip(rotr) rotr)

def(>, Int Int -- Bool, swap <)
def(>=, Int Int -- Bool, swap <=)

def(0=, Int -- Bool, 0 =)
def(0<, Int -- Bool, 0 <)
def(0>, Int -- Bool, 0 >)
def(0<=, Int -- Bool, 0 <=)
def(0>=, Int -- Bool, 0 >=)

def(1=, Int -- Bool, 1 =)
def(1<, Int -- Bool, 1 <)
def(1>, Int -- Bool, 1 >)
def(1<=, Int -- Bool, 1 <=)
def(1>=, Int -- Bool, 1 >=)
def(1+, Int -- Int, 1 +)
def(1-, Int -- Int, 1 -)

def(2*, Int -- Int, 2 *)
def(2/, Int -- Int, 2 /)
def(2%, Int -- Int, 2 %)
def(2+, Int -- Int, 2 +)
def(2-, Int -- Int, 2 -)

def(|u8|, 1)
def(|u16|, 2)
def(|u32|, 4)
def(|u64|, 8)
def(|i8|, 1)
def(|i16|, 2)
def(|i32|, 4)
def(|i64|, 8)

def(not, Bool -- Bool, 0 =)
def(and, Bool Bool -- Bool, swap if(id, drop 0))
def(or, Bool Bool -- Bool, swap if(drop 1, id))

# Assertions

def(!!, Bool --, if(id, "Assertion failed" panic!))
def(!!=, Int Int --, = !!)
def(!!0, Int --, 0 !!=)
def(!!1, Int --, 1 !!=)
def(!!00, Int Int --, !!0 !!0)
def(!!01, Int Int --, !!1 !!0)
def(!!10, Int Int --, !!0 !!1)
def(!!11, Int Int --, !!1 !!1)
def(!!000, Int Int --, !!0 !!0 !!0)
def(!!001, Int Int --, !!1 !!0 !!0)
def(!!010, Int Int --, !!0 !!1 !!0)
def(!!011, Int Int --, !!1 !!1 !!0)
def(!!100, Int Int --, !!0 !!0 !!1)
def(!!101, Int Int --, !!1 !!0 !!1)
def(!!110, Int Int --, !!0 !!1 !!1)
def(!!111, Int Int --, !!1 !!1 !!1)


def(str-head?, Str -- Str Int, dup str-head)
def(str-tail?, Str -- Str Str, dup str-tail)
def(str-null, Str -- Bool, str-head 0=)
def(str-null?, Str -- Str Bool, dup str-null)
def(str-not-null, Str -- Bool, str-null not)
def(str-not-null?, Str -- Str Bool, dup str-not-null)
def(str-length?, Str -- Str Int, dup str-length)
def(str-length, Str -- Int,
    dip(0) str-not-null? while(
        drop str-tail dip(1+)
        str-not-null?
    ) drop)

def(STR_BUF_SIZE, 0x1000)
|u64| def-static-buffer(STR_BUF_LEN)
STR_BUF_SIZE def-static-buffer(STR_BUF)
def(str-buf-length?, 0 u64@(STR_BUF_LEN))
def(str-buf-length!, dup 0 u64!(STR_BUF_LEN) dip(0) str-buf-u8!)
def(str-buf-u8@, u8@(STR_BUF))
def(str-buf-u8!, u8!(STR_BUF))
def(str-buf-full?, str-buf-length? 1+ STR_BUF_SIZE >=)
def(str-buf-clear!, 0 str-buf-length!)
def(str-buf-push!,
    str-buf-full? if(
        "str-buf-push but STR_BUF is already full" panic!,
        str-buf-length? str-buf-u8!
        str-buf-length? 1+ str-buf-length!
    ))
def(str-buf-write!, 0 str-buf-length? syscall-write!(STR_BUF))
def(str-buf-print!, file-out? str-buf-write!)
def(str-buf-trace!, file-err? str-buf-trace!)

def(str-buf-read!, File -- +IO,
    str-buf-clear!
    0 STR_BUF_SIZE 1- syscall-read!(STR_BUF)
    dup 0 < if(
        "str-buf-read! failed" panic!,
        str-buf-length!
    )
)



# Clear STR_BUF and copy prefix of string over to it.
# Returns remaining string.
def(str-buf-copy!, Str -- Str,
    str-buf-clear!
    str-head?
    while(
        str-buf-push!
        str-tail
        str-buf-full? if(0, str-head?)
    ))

# Set the STR_BUF to a given string. If the string is
# too large (> STR_BUF_SIZE - 1) it gets truncated.
def(str-buf!, Str --, str-buf-copy! drop)

# Tests

def(run-tests, --, test-if test-drop test-dup test-swap test-dip
    test-trip test-rotr test-rotl test= test< test<= test> test>=
    test+ test- test* test/ test% test@! test-str test-while)
def(test-if, --, 0 !!0 1 !!1 0 1 !!1 !!0)
def(test-drop, --, 0 1 drop !!0)
def(test-dup, --, 0 1 dup !!011)
def(test-swap, --, 0 1 0 swap !!001)
def(test-dip, --, 0 0 dip(1) !!010)
def(test-trip, --, 0 1 trip !!111 !!0)
def(test-rotr, --,
    1 0 0 rotr !!010
    0 1 0 rotr !!001
    0 0 1 rotr !!100)
def(test-rotl, --,
    1 0 0 rotl !!001
    0 1 0 rotl !!100
    0 0 1 rotl !!010)

def(test=, --,
    0 0 = !!1
    0 1 = !!0
    1 0 = !!0
    1 1 = !!1
    1 2 = !!0
    2 1 = !!0
    2 2 = !!1)
def(test<, --,
    0 0 < !!0
    0 1 < !!1
    1 0 < !!0
    1 1 < !!0
    1 2 < !!1
    2 1 < !!0
    2 2 < !!0)
def(test<=, --,
    0 0 <= !!1
    0 1 <= !!1
    1 0 <= !!0
    1 1 <= !!1
    1 2 <= !!1
    2 1 <= !!0
    2 2 <= !!1)
def(test>, --,
    0 0 > !!0
    0 1 > !!0
    1 0 > !!1
    1 1 > !!0
    1 2 > !!0
    2 1 > !!1
    2 2 > !!0)
def(test>=, --,
    0 0 >= !!1
    0 1 >= !!0
    1 0 >= !!1
    1 1 >= !!1
    1 2 >= !!0
    2 1 >= !!1
    2 2 >= !!1
    -1 0 >= !!0
    -1 -1 >= !!1
    0 -1 >= !!1
    -1 -2 >= !!1
    -2 -2 >= !!1
    -2 -1 >= !!0)

def(test+, --,
    0 0 + !!0
    0 1 + !!1
    1 0 + !!1
    1 1 + 2 = !!1
    2 2 + 4 = !!1
    2 -2 + !!0)

def(test-, --,
    0 0 - !!0
    1 0 - !!1
    1 1 - !!0
    0 1 - -1 !!=
    2 2 - !!0
    2 4 - -2 !!=
    4 2 - 2 !!=)

def(test*, --,
    0 0 * !!0
    2 1 * 2 !!=
    2 2 * 4 !!=
    2 4 * 8 !!=)

def(test/, --,
    1 1 / !!1
    -5 2 / -2 !!=
    -4 2 / -2 !!=
    -3 2 / -1 !!=
    -2 2 / -1 !!=
    -1 2 / !!0
    0 2 / !!0
    1 2 / !!0
    2 2 / !!1
    3 2 / !!1
    4 2 / 2 !!=
    5 2 / 2 !!=
    0 -2 / !!0
    1 -2 / !!0
    2 -2 / -1 !!=
    3 -2 / -1 !!=
    4 -2 / -2 !!=
    5 -2 / -2 !!=)

def(test%, --,
    1 1 % !!0
    -5 2 % -1 !!=
    -4 2 % !!0
    -3 2 % -1 !!=
    -2 2 % !!0
    -1 2 % -1 !!=
    0 2 % !!0
    1 2 % !!1
    2 2 % !!0
    3 2 % !!1
    4 2 % !!0
    5 2 % !!1)

2 |u64| * def-static-buffer(TestBuffer)

def(u8@test, u8@(TestBuffer))
def(i8@test, i8@(TestBuffer))
def(u8!test, u8!(TestBuffer))
def(i8!test, i8!(TestBuffer))
def(u16@test, u16@(TestBuffer))
def(i16@test, i16@(TestBuffer))
def(u16!test, u16!(TestBuffer))
def(i16!test, i16!(TestBuffer))
def(u32@test, u32@(TestBuffer))
def(i32@test, i32@(TestBuffer))
def(u32!test, u32!(TestBuffer))
def(i32!test, i32!(TestBuffer))
def(u64@test, u64@(TestBuffer))
def(i64@test, i64@(TestBuffer))
def(u64!test, u64!(TestBuffer))
def(i64!test, i64!(TestBuffer))

def(test@!, --,
    # persistence tests -- i.e. get and set behave as expected and
    # don't interfere when performed at non-overlapping locations
    # -- we don't make architectural assumptions here, like little
    # endian vs big endian.

    999 0 0 u8!test 999 !!= 0 |u8| u8!test
    10 0 u8!test 0 u8@test 10 !!= |u8| u8@test 0 !!=
    20 0 u8!test 0 u8@test 20 !!= |u8| u8@test 0 !!=
    30 |u8| u8!test 0 u8@test 20 !!= |u8| u8@test 30 !!=

    999 0 0 u16!test 999 !!= 0 |u16| u16!test
    10 0 u16!test 0 u16@test 10 !!= |u16| u16@test 0 !!=
    20 0 u16!test 0 u16@test 20 !!= |u16| u16@test 0 !!=
    30 |u16| u16!test 0 u16@test 20 !!= |u16| u16@test 30 !!=

    999 0 0 u32!test 999 !!= 0 |u32| u32!test
    10 0 u32!test 0 u32@test 10 !!= |u32| u32@test 0 !!=
    20 0 u32!test 0 u32@test 20 !!= |u32| u32@test 0 !!=
    30 |u32| u32!test 0 u32@test 20 !!= |u32| u32@test 30 !!=

    999 0 0 u64!test 999 !!= 0 |u64| u64!test
    10 0 u64!test 0 u64@test 10 !!= |u64| u64@test 0 !!=
    20 0 u64!test 0 u64@test 20 !!= |u64| u64@test 0 !!=
    30 |u64| u64!test 0 u64@test 20 !!= |u64| u64@test 30 !!=

    0 0 i8!test 0 |i8| i8!test
    10 0 i8!test 0 i8@test 10 !!= |i8| i8@test 0 !!=
    -20 0 i8!test 0 i8@test -20 !!= |i8| i8@test 0 !!=
    30 |i8| i8!test 0 i8@test -20 !!= |i8| i8@test 30 !!=

    0 0 i16!test 0 |i16| i16!test
    10 0 i16!test 0 i16@test 10 !!= |i16| i16@test 0 !!=
    -20 0 i16!test 0 i16@test -20 !!= |i16| i16@test 0 !!=
    30 |i16| i16!test 0 i16@test -20 !!= |i16| i16@test 30 !!=

    0 0 i32!test 0 |i32| i32!test
    10 0 i32!test 0 i32@test 10 !!= |i32| i32@test 0 !!=
    -20 0 i32!test 0 i32@test -20 !!= |i32| i32@test 0 !!=
    30 |i32| i32!test 0 i32@test -20 !!= |i32| i32@test 30 !!=

    0 0 i64!test 0 |i64| i64!test
    10 0 i64!test 0 i64@test 10 !!= |i64| i64@test 0 !!=
    -20 0 i64!test 0 i64@test -20 !!= |i64| i64@test 0 !!=
    30 |i64| i64!test 0 i64@test -20 !!= |i64| i64@test 30 !!=)

def(test-str,
    "AaBb"
    dup str-head 65 !!=
    dup str-tail str-head 97 !!=
    dup str-tail str-tail str-head 66 !!=
    dup str-tail str-tail str-tail str-head 98 !!=
    dup str-tail str-tail str-tail str-tail str-head 0 !!=
    drop

    "" str-length 0 !!=
    "hello" str-length 5 !!=
    "hello, world!" str-length 13 !!=
    )

def(test-while,
    999 10 20 while(1- dip(1+)) 30 !!= 999 !!=)

def(stdout, File, 1)
def(stderr, File, 2)
def(stdin,  File, 0)

def(init, init-io)
def(init-io,
    0 file-in!
    1 file-out!
    2 file-err!)

|u64| def-static-buffer(FILE_IN)
def(file-in!, 0 u64!(FILE_IN))
def(file-in?, 0 u64@(FILE_IN))

|u64| def-static-buffer(FILE_OUT)
def(file-out!, 0 u64!(FILE_OUT))
def(file-out?, 0 u64@(FILE_OUT))

|u64| def-static-buffer(FILE_ERR)
def(file-err!, 0 u64!(FILE_ERR))
def(file-err?, 0 u64@(FILE_ERR))

def(str-write!, Str File --,
    swap str-not-null? while(
        drop str-buf-copy!
        dip(dup str-buf-write!)
        str-not-null?
    ) drop2
    )

def(str-print!, file-out? str-write!)
def(str-trace!, file-err? str-write!)
def(str-print-sp!, str-print! print-sp!)
def(str-trace-sp!, str-trace! trace-sp!)
def(str-print-ln!, str-print! print-ln!)
def(str-trace-ln!, str-trace! trace-ln!)

def(print-sp!, " " str-print!)
def(trace-sp!, " " str-trace!)
def(print-ln!, "\n" str-print!)
def(trace-ln!, "\n" str-trace!)

def(to-digit, Int -- Char, 10 % 48 +)

# put integer into str buf
def(str-buf-int!, Int --,
    dup 0= if(
        "0" str-buf!,
        dup dip(
            str-buf-clear!
            while(dup to-digit str-buf-push! 10 /)
        ) 0 < if(45 str-buf-push!, id)
        str-buf-reverse!
    ))

def(int-write!, Int File -- +IO, dip(str-buf-int!) str-buf-write!)
def(int-print!, Int -- +IO, file-out? int-write!)
def(int-trace!, Int -- +IO, file-err? int-write!)
def(int-print-sp!, Int -- +IO, int-print! print-sp!)
def(int-trace-sp!, Int -- +IO, int-trace! trace-sp!)
def(int-print-ln!, Int -- +IO, int-print! print-ln!)
def(int-trace-ln!, Int -- +IO, int-trace! trace-ln!)

def(panic!, Str -- +IO,
    "panic: " str-trace! str-trace-ln! 0 syscall-exit!)

# reverse contents of str buf

def(str-buf-swap-u8!, Int Int --,
    dup2 swap
    dip(dip(dip(str-buf-u8@)))
    dip(str-buf-u8@)
    str-buf-u8! str-buf-u8!
)

def(str-buf-reverse!, --,
    0 str-buf-length? 1- dup2 <
    while(drop
        dup2 str-buf-swap-u8!
        dip(1 +) 1- dup2 <
    )
    drop2
)

#########
# Lexer #
#########

def(FILE_BUF_SIZE, 0x100000)
|u64| def-static-buffer(FILE_BUF_LENGTH)
FILE_BUF_SIZE def-static-buffer(FILE_BUF)

def(file-buf-length!, Int --, 0 u64!(FILE_BUF_LENGTH))
def(file-buf-length?, -- Int, 0 u64@(FILE_BUF_LENGTH))

# def(str-buf-open-file!, -- File +IO,
#     0 0 syscall-open!(STR_BUF)
#     dup -1 = if("failed to open file!" panic!, id))

# def(str-buf-create-file!, -- File +IO,
#     1 0 syscall-open!(STR_BUF)
#     dup -1 = if("failed to open file!" panic!, id))

# def(str-open-file!, Str -- File +IO, str-buf! str-buf-open-file!)
# def(str-create-file!, Str -- File +IO, str-buf! str-buf-create-file!)

# def(read-file!, File -- +IO,
#     0 syscall-read!(FILE_BUF)
#     dup -1 = if(
#         "failed to read file" panic!,
#         file-buf-length!
#     ))

# "mirth.mth" str-open-file! read-file!

#########
# Main #
#########

def(main,
    run-tests

    print-ln!
    "Mirth v0.0.0" str-print-ln!
    "Hello, world!" str-print-ln!
    0 10 20 30 while(int-print-sp!) print-ln!
    print-ln!

    stdin "What is your name?" str-print-sp! str-buf-read!
    str-buf-print!
    str-buf-print!
    "Hello!" str-print-ln! print-ln!
)

main

###############
# Build Rules #
###############

"mirth.asm" output-asm(main)
