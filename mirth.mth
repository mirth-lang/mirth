
# TODO:
#  - Add arithmetic words.
#  - Add memory access.
#  - Add (0-initialized) static variables.
#  - Add basic (semi-high-level) file IO words.
#  - Add while loops.

# Prelude

def(trip, a -- a a a, dup dup)
def(rotr, a b c -- c a b, swap dip(swap))
def(rotl, a b c -- b c a, dip(swap) swap)
def(over, a b -- a b a, dip(dup) swap)
def(tuck, a b -- b a b, dup dip(swap))
def(nip, a b -- b, dip(drop))
def(dup2, a b -- a b a b, over over)
def(drop2, a b --, drop drop)
def(swap2, a b c d -- c d a b, dip(rotr) rotr)

def(>, Int Int -- Bool, swap <)
def(>=, Int Int -- Bool, swap <=)

def(0=, Int -- Bool, 0 =)
def(0<, Int -- Bool, 0 <)
def(0>, Int -- Bool, 0 >)
def(0<=, Int -- Bool, 0 <=)
def(0>=, Int -- Bool, 0 >=)

def(1=, Int -- Bool, 1 =)
def(1<, Int -- Bool, 1 <)
def(1>, Int -- Bool, 1 >)
def(1<=, Int -- Bool, 1 <=)
def(1>=, Int -- Bool, 1 >=)


# Tests

def(expect0, Int --, 0= if(id, "assertion failed" panic))
def(expect1, Int --, 1= if(id, "assertion failed" panic))
def(expect00, Int Int --, expect0 expect0)
def(expect01, Int Int --, expect1 expect0)
def(expect10, Int Int --, expect0 expect1)
def(expect11, Int Int --, expect1 expect1)
def(expect000, Int Int --, expect0 expect0 expect0)
def(expect001, Int Int --, expect1 expect0 expect0)
def(expect010, Int Int --, expect0 expect1 expect0)
def(expect011, Int Int --, expect1 expect1 expect0)
def(expect100, Int Int --, expect0 expect0 expect1)
def(expect101, Int Int --, expect1 expect0 expect1)
def(expect110, Int Int --, expect0 expect1 expect1)
def(expect111, Int Int --, expect1 expect1 expect1)

def(run-tests, --, test-if test-drop test-dup test-swap test-dip
    test-trip test-rotr test-rotl test= test< test<= test> test>=)
def(test-if, --, 0 expect0 1 expect1 0 1 expect1 expect0)
def(test-drop, --, 0 1 drop expect0)
def(test-dup, --, 0 1 dup expect011)
def(test-swap, --, 0 1 0 swap expect001)
def(test-dip, --, 0 0 dip(1) expect010)
def(test-trip, --, 0 1 trip expect1 expect011)
def(test-rotr, --,
    1 0 0 rotr expect010
    0 1 0 rotr expect001
    0 0 1 rotr expect100)
def(test-rotl, --,
    1 0 0 rotl expect001
    0 1 0 rotl expect100
    0 0 1 rotl expect010)

def(test=, --,
    0 0 = expect1
    0 1 = expect0
    1 0 = expect0
    1 1 = expect1
    1 2 = expect0
    2 1 = expect0
    2 2 = expect1)
def(test<, --,
    0 0 < expect0
    0 1 < expect1
    1 0 < expect0
    1 1 < expect0
    1 2 < expect1
    2 1 < expect0
    2 2 < expect0)
def(test<=, --,
    0 0 <= expect1
    0 1 <= expect1
    1 0 <= expect0
    1 1 <= expect1
    1 2 <= expect1
    2 1 <= expect0
    2 2 <= expect1)
def(test>, --,
    0 0 > expect0
    0 1 > expect0
    1 0 > expect1
    1 1 > expect0
    1 2 > expect0
    2 1 > expect1
    2 2 > expect0)
def(test>=, --,
    0 0 >= expect1
    0 1 >= expect0
    1 0 >= expect1
    1 1 >= expect1
    1 2 >= expect0
    2 1 >= expect1
    2 2 >= expect1)

run-tests

# Build

"mirth.asm" output-asm(run-tests)
