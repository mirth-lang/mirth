
# TODO:
#  - Add basic (semi-high-level) file IO words.

###########
# Prelude #
###########

def(trip, a -- a a a, dup dup)
def(rotr, a b c -- c a b, swap dip(swap))
def(rotl, a b c -- b c a, dip(swap) swap)
def(over, a b -- a b a, dip(dup) swap)
def(tuck, a b -- b a b, dup dip(swap))
def(nip, a b -- b, dip(drop))
def(dup2, a b -- a b a b, over over)
def(drop2, a b --, drop drop)
def(swap2, a b c d -- c d a b, dip(rotr) rotr)

def(>, Int Int -- Bool, swap <)
def(>=, Int Int -- Bool, swap <=)

def(0=, Int -- Bool, 0 =)
def(0<, Int -- Bool, 0 <)
def(0>, Int -- Bool, 0 >)
def(0<=, Int -- Bool, 0 <=)
def(0>=, Int -- Bool, 0 >=)

def(1=, Int -- Bool, 1 =)
def(1<, Int -- Bool, 1 <)
def(1>, Int -- Bool, 1 >)
def(1<=, Int -- Bool, 1 <=)
def(1>=, Int -- Bool, 1 >=)
def(1+, Int -- Int, 1 +)
def(1-, Int -- Int, 1 -)

def(2*, Int -- Int, 2 *)
def(2/, Int -- Int, 2 /)
def(2%, Int -- Int, 2 %)
def(2+, Int -- Int, 2 +)
def(2-, Int -- Int, 2 -)

def(|u8|, 1)
def(|u16|, 2)
def(|u32|, 4)
def(|u64|, 8)
def(|i8|, 1)
def(|i16|, 2)
def(|i32|, 4)
def(|i64|, 8)

# Assertions

def(!!, Bool --, if(id, "Assertion failed" panic))
def(!!=, Int Int --, = !!)
def(!!0, Int --, 0 !!=)
def(!!1, Int --, 1 !!=)
def(!!00, Int Int --, !!0 !!0)
def(!!01, Int Int --, !!1 !!0)
def(!!10, Int Int --, !!0 !!1)
def(!!11, Int Int --, !!1 !!1)
def(!!000, Int Int --, !!0 !!0 !!0)
def(!!001, Int Int --, !!1 !!0 !!0)
def(!!010, Int Int --, !!0 !!1 !!0)
def(!!011, Int Int --, !!1 !!1 !!0)
def(!!100, Int Int --, !!0 !!0 !!1)
def(!!101, Int Int --, !!1 !!0 !!1)
def(!!110, Int Int --, !!0 !!1 !!1)
def(!!111, Int Int --, !!1 !!1 !!1)

# Tests

def(run-tests, --, test-if test-drop test-dup test-swap test-dip
    test-trip test-rotr test-rotl test= test< test<= test> test>=
    test+ test- test* test/ test% test@! test-str test-while)
def(test-if, --, 0 !!0 1 !!1 0 1 !!1 !!0)
def(test-drop, --, 0 1 drop !!0)
def(test-dup, --, 0 1 dup !!011)
def(test-swap, --, 0 1 0 swap !!001)
def(test-dip, --, 0 0 dip(1) !!010)
def(test-trip, --, 0 1 trip !!111 !!0)
def(test-rotr, --,
    1 0 0 rotr !!010
    0 1 0 rotr !!001
    0 0 1 rotr !!100)
def(test-rotl, --,
    1 0 0 rotl !!001
    0 1 0 rotl !!100
    0 0 1 rotl !!010)

def(test=, --,
    0 0 = !!1
    0 1 = !!0
    1 0 = !!0
    1 1 = !!1
    1 2 = !!0
    2 1 = !!0
    2 2 = !!1)
def(test<, --,
    0 0 < !!0
    0 1 < !!1
    1 0 < !!0
    1 1 < !!0
    1 2 < !!1
    2 1 < !!0
    2 2 < !!0)
def(test<=, --,
    0 0 <= !!1
    0 1 <= !!1
    1 0 <= !!0
    1 1 <= !!1
    1 2 <= !!1
    2 1 <= !!0
    2 2 <= !!1)
def(test>, --,
    0 0 > !!0
    0 1 > !!0
    1 0 > !!1
    1 1 > !!0
    1 2 > !!0
    2 1 > !!1
    2 2 > !!0)
def(test>=, --,
    0 0 >= !!1
    0 1 >= !!0
    1 0 >= !!1
    1 1 >= !!1
    1 2 >= !!0
    2 1 >= !!1
    2 2 >= !!1
    -1 0 >= !!0
    -1 -1 >= !!1
    0 -1 >= !!1
    -1 -2 >= !!1
    -2 -2 >= !!1
    -2 -1 >= !!0)

def(test+, --,
    0 0 + !!0
    0 1 + !!1
    1 0 + !!1
    1 1 + 2 = !!1
    2 2 + 4 = !!1
    2 -2 + !!0)

def(test-, --,
    0 0 - !!0
    1 0 - !!1
    1 1 - !!0
    0 1 - -1 !!=
    2 2 - !!0
    2 4 - -2 !!=
    4 2 - 2 !!=)

def(test*, --,
    0 0 * !!0
    2 1 * 2 !!=
    2 2 * 4 !!=
    2 4 * 8 !!=)

def(test/, --,
    1 1 / !!1
    -5 2 / -2 !!=
    -4 2 / -2 !!=
    -3 2 / -1 !!=
    -2 2 / -1 !!=
    -1 2 / !!0
    0 2 / !!0
    1 2 / !!0
    2 2 / !!1
    3 2 / !!1
    4 2 / 2 !!=
    5 2 / 2 !!=
    0 -2 / !!0
    1 -2 / !!0
    2 -2 / -1 !!=
    3 -2 / -1 !!=
    4 -2 / -2 !!=
    5 -2 / -2 !!=)

def(test%, --,
    1 1 % !!0
    -5 2 % -1 !!=
    -4 2 % !!0
    -3 2 % -1 !!=
    -2 2 % !!0
    -1 2 % -1 !!=
    0 2 % !!0
    1 2 % !!1
    2 2 % !!0
    3 2 % !!1
    4 2 % !!0
    5 2 % !!1)

2 |u64| * def-static-buffer(TestBuffer)

def(u8@test, u8@(TestBuffer))
def(i8@test, i8@(TestBuffer))
def(u8!test, u8!(TestBuffer))
def(i8!test, i8!(TestBuffer))
def(u16@test, u16@(TestBuffer))
def(i16@test, i16@(TestBuffer))
def(u16!test, u16!(TestBuffer))
def(i16!test, i16!(TestBuffer))
def(u32@test, u32@(TestBuffer))
def(i32@test, i32@(TestBuffer))
def(u32!test, u32!(TestBuffer))
def(i32!test, i32!(TestBuffer))
def(u64@test, u64@(TestBuffer))
def(i64@test, i64@(TestBuffer))
def(u64!test, u64!(TestBuffer))
def(i64!test, i64!(TestBuffer))

def(test@!, --,
    # persistence tests -- i.e. get and set behave as expected and
    # don't interfere when performed at non-overlapping locations
    # -- we don't make architectural assumptions here, like little
    # endian vs big endian.

    0 0 u8!test 0 |u8| u8!test
    10 0 u8!test 0 u8@test 10 !!= |u8| u8@test 0 !!=
    20 0 u8!test 0 u8@test 20 !!= |u8| u8@test 0 !!=
    30 |u8| u8!test 0 u8@test 20 !!= |u8| u8@test 30 !!=

    0 0 u16!test 0 |u16| u16!test
    10 0 u16!test 0 u16@test 10 !!= |u16| u16@test 0 !!=
    20 0 u16!test 0 u16@test 20 !!= |u16| u16@test 0 !!=
    30 |u16| u16!test 0 u16@test 20 !!= |u16| u16@test 30 !!=

    0 0 u32!test 0 |u32| u32!test
    10 0 u32!test 0 u32@test 10 !!= |u32| u32@test 0 !!=
    20 0 u32!test 0 u32@test 20 !!= |u32| u32@test 0 !!=
    30 |u32| u32!test 0 u32@test 20 !!= |u32| u32@test 30 !!=

    0 0 u64!test 0 |u64| u64!test
    10 0 u64!test 0 u64@test 10 !!= |u64| u64@test 0 !!=
    20 0 u64!test 0 u64@test 20 !!= |u64| u64@test 0 !!=
    30 |u64| u64!test 0 u64@test 20 !!= |u64| u64@test 30 !!=

    0 0 i8!test 0 |i8| i8!test
    10 0 i8!test 0 i8@test 10 !!= |i8| i8@test 0 !!=
    -20 0 i8!test 0 i8@test -20 !!= |i8| i8@test 0 !!=
    30 |i8| i8!test 0 i8@test -20 !!= |i8| i8@test 30 !!=

    0 0 i16!test 0 |i16| i16!test
    10 0 i16!test 0 i16@test 10 !!= |i16| i16@test 0 !!=
    -20 0 i16!test 0 i16@test -20 !!= |i16| i16@test 0 !!=
    30 |i16| i16!test 0 i16@test -20 !!= |i16| i16@test 30 !!=

    0 0 i32!test 0 |i32| i32!test
    10 0 i32!test 0 i32@test 10 !!= |i32| i32@test 0 !!=
    -20 0 i32!test 0 i32@test -20 !!= |i32| i32@test 0 !!=
    30 |i32| i32!test 0 i32@test -20 !!= |i32| i32@test 30 !!=

    0 0 i64!test 0 |i64| i64!test
    10 0 i64!test 0 i64@test 10 !!= |i64| i64@test 0 !!=
    -20 0 i64!test 0 i64@test -20 !!= |i64| i64@test 0 !!=
    30 |i64| i64!test 0 i64@test -20 !!= |i64| i64@test 30 !!=)

def(test-str,
    "AaBb"
    dup str-head 65 !!=
    dup str-tail str-head 97 !!=
    dup str-tail str-tail str-head 66 !!=
    dup str-tail str-tail str-tail str-head 98 !!=
    dup str-tail str-tail str-tail str-tail str-head 0 !!=
    drop)

def(test-while,
    10 20 while(1- dip(1+)) 30 !!=)

run-tests

#########
# Lexer #
#########



#########
# Build #
#########

"mirth.asm" output-asm(run-tests)
