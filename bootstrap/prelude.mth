# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

#
# basic words
#

dup  : a -- a a
drop : a --
id   : --
swap : a b -- b a
dip(f : *a -- *b) : *a c -- *b c

dup    = _prim_dup
drop   = _prim_drop
id     = 0 drop
swap   = _prim_swap
dip(f) = _prim_dip(f)

dup drop == id
dup swap == dup
swap swap == id

nip  : a b -- b
tuck : a b -- b a b
over : a b -- a b a
nip  = dip(drop)
tuck = dup dip(swap)
over = dip(dup) swap
nip drop == drop drop
swap nip == drop
tuck drop == swap
tuck nip == nip dup
over nip == drop dup

rotr : a b c -- c a b
rotl : a b c -- b c a
rotr = swap dip(swap)
rotl = dip(swap) swap
rotl rotr == id
rotr rotl == id
rotl rotl == rotr
rotr rotr == rotl

rot4r : a b c d -- d a b c
rot4l : a b c d -- b c d a
rot4r = swap dip(rotr)
rot4l = dip(rotl) swap

rot5r : a b c d e -- e a b c d
rot5l : a b c d e -- b c d e a
rot5r = swap dip(rot4r)
rot5l = dip(rot4l) swap

save(f : *a c -- *b) : *a c -- *b c
save(f) = dup dip(f)

par(f : *a -- *b, g : c -- d) : *a c -- *b d
par(f,g) = dip(f) g

both(f : a -- b) : a a -- b b
both(f) = par(f,f)

#
# words over pairs
#

dup2  : a1 a2 -- a1 a2 a1 a2
drop2 : a1 a2 --
swap2 : a1 a2 b1 b2 -- b1 b2 a1 a2
dip2(f : *a -- *b) : *a x y -- *b x y

dup2  = over over
drop2 = drop drop
swap2 = dip(rotr) rotr
dip2(f) = dip(dip(f))

dup2 drop2 == id
dup2 swap2 == dup2
swap2 swap2 == id

nip2  : a1 a2 b1 b2 -- b1 b2
tuck2 : a1 a2 b1 b2 -- b1 b2 a1 a2 b1 b2
over2 : a1 a2 b1 b2 -- a1 a2 b1 b2 a1 a2
nip2  = dip2(drop2)
tuck2 = dup2 dip2(swap2)
over2 = dip2(dup2) swap2

save2(f : *a c1 c2 -- *b) : *a c1 c2 -- *b c1 c2
save2(f) = dup2 dip2(f)

#
# words over triples
#

dup3  : a1 a2 a3 -- a1 a2 a3 a1 a2 a3
drop3 : a1 a2 a3 --
dip3(f : *a -- *b) : *a x y z -- *b x y z

dup3 = dip(dup2) dup dip(rotr)
drop3 = drop2 drop
dip3(f) = dip(dip(dip(f)))

dup3 drop3 == id

#
# words over quadruples
#

dip4(f : *a -- *b) : *a w x y z -- *b w x y z
dip4(f) = dip2(dip2(f))

drop4 : a b c d --
drop4 = drop2 drop2

dup4 : a b c d -- a b c d a b c d
dup4 = over2 over2

#
# even more
#

dip5(f: *a -- *b) : *a x1 x2 x3 x4 x5 -- *b x1 x2 x3 x4 x5
dip5(f) = dip3(dip2(f))

#
# shifted dips
#

dip'(f: *a a1 -- *b b1) : *a x a1 -- *b x b1
dip'(f) = swap dip(f) swap

dip2'(f: *a a1 -- *b b1) : *a x a1 y -- *b x b1 y
dip2'(f) = dip(dip'(f))

dip2''(f: *a a1 -- *b b1) : *a x y a1 -- *b x y b1
dip2''(f) = rotr dip2(f) rotl

dip3'(f: *a a1 -- *b b1) : *a x a1 y z -- *b x b1 y z
dip3'(f) = dip2(dip'(f))

dip3''(f: *a a1 -- *b b1) : *a x y a1 z -- *b x y b1 z
dip3''(f) = dip(dip2''(f))

dip3'''(f: *a a1 -- *b b1) : *a x y z a1 -- *b x y z b1
dip3'''(f) = rot4r dip3(f) rot4l

#
# query words
#

swap?(f : *a c b -- *a c b p) : *a b c -- *a b c p
swap?(f) = swap f dip(swap)

dip?(f : *a -- *a p) : *a b -- *a b p
dip?(f) = dip(f) swap

dip2?(f : *a -- *a p) : *a b1 b2 -- *a b1 b2 p
dip2?(f) = dip?(dip?(f))

dip3?(f : *a -- *a p) : *a b1 b2 b3 -- *a b1 b2 b3 p
dip3?(f) = dip2?(dip?(f))

#
# misc
#

$(f: *a -- *b) : *a -- *b
$(f) = f

#
# bool
#

true : Bool
false : Bool
if (f: *a -- *b, g : *a -- *b) : *a Bool -- *b

true  = _prim_bool_true
false = _prim_bool_false
if(f,g) = _prim_bool_if(f,g)

and : Bool Bool -- Bool
and = if(id, drop false)

true true and == true
true false and == false
false true and == false
false false and == false
true and == id
swap and == and
dup and and == and
and and == dip(and) and

or : Bool Bool -- Bool
or = if(drop true, id)

true true or == true
true false or == true
false true or == true
false false or == false
false or == id
swap or == or
dup or or == or
or or == dip(or) or

not : Bool -- Bool
not = if(false, true)

not not == id
and not == dip(not) not or
or not == dip(not) not and

xor : Bool Bool -- Bool
xor = if(not, id)

true true xor == false
true false xor == true
false true xor == true
false false xor == false

false xor == id
xor xor == dip(xor) xor
xor not == not xor
swap xor == xor

while(f : *a -- *a Bool, g : *a -- *a) : *a -- *a
while(f,g) = f if(g while(f,g), )

and? (f : *a -- *a Bool, g : *a -- *a Bool) : *a -- *a Bool
or?  (f : *a -- *a Bool, g : *a -- *a Bool) : *a -- *a Bool
xor? (f : *a -- *a Bool, g : *a -- *a Bool) : *a -- *a Bool
and? (f, g) = f if(g, false)
or?  (f, g) = f if(true, g)
xor? (f, g) = f if(g not, g)

and? (true, true) == true
and? (true, false) == false
and? (false, true) == false
and? (false, false) == false

or? (true, true) == true
or? (true, false) == true
or? (false, true) == true
or? (false, false) == false

implies? (f : *a -- *a Bool, g : *a -- *a Bool) : *a -- *a Bool
implies? (f, g) = or? (f not, g)

implies? (true, true) == true
implies? (true, false) == false
implies? (false, true) == true
implies? (false, false) == true

iff? (f : *a -- *a Bool, g : *a -- *a Bool) : *a -- *a Bool
iff? (f, g) = xor? (f, g) not

iff? (true, true) == true
iff? (true, false) == false
iff? (false, true) == false
iff? (false, false) == true

#
# pack
#

inpack(f: *a -- *b) : Pack(*a) -- Pack(*b)
inpack(f) = _prim_tuple_intuple(f)

pack2 : a b -- Pack(a b)
pack2 = _prim_tuple_pack2

unpack2 : Pack(a b) -- a b
unpack2 = _prim_tuple_unpack2

pack0 : -- Pack()
pack0 = 0 0 pack2 inpack(drop2)

unpack0 : Pack() --
unpack0 = drop

pack0 unpack0 == id
unpack0 pack0 == id

pack1 : a -- Pack(a)
pack1 = 0 pack2 inpack(drop)

unpack1 : Pack(a) -- a
unpack1 = inpack(0) unpack2 drop

pack1 unpack1 == id
unpack1 pack1 == id

pack2 unpack2 == id
unpack2 pack2 == id

pack3 : a b c -- Pack(a b c)
pack3 = pack2 pack2 inpack(unpack2)

unpack3 : Pack(a b c) -- a b c
unpack3 = inpack(pack2) unpack2 unpack2

pack3 unpack3 == id
unpack3 pack3 == id

pack4 : a b c d -- Pack(a b c d)
pack4 = pack2 pack3 inpack(unpack2)

unpack4 : Pack(a b c d) -- a b c d
unpack4 = inpack(pack2) unpack3 unpack2

pack4 unpack4 == id
unpack4 pack4 == id
