# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

import base/int
import base/nat
import base/maybe
import base/list

export base/char
  type Char
  Char.generate : Int -- Char
  char->int : Char -- Int
  char->str : Char -- Str
  int->char : Int -- Char
  str->char : Str -- Char

  char<  : Char Char -- Bool
  char>  : Char Char -- Bool
  char<= : Char Char -- Bool
  char>= : Char Char -- Bool

  chareq : Char Char -- Bool
  chareq? : Char Char -- Char Char Bool

  islower? : Char -- Char Bool
  isupper? : Char -- Char Bool
  isdigit? : Char -- Char Bool
  ishexdigit? : Char -- Char Bool
  isalpha? : Char -- Char Bool

  '\s' : Char
  '\n' : Char
  '\t' : Char
  '\r' : Char

  showChar : Char -- Str
end

export base/str
  type Char
  type Nat
  type Maybe(t)
  Char.generate : Int -- Char

  strnull? : Str -- Str Bool
  strnull  : Str -- Bool
  strlen?  : Str -- Str Nat
  strlen   : Str -- Nat

  strelem : Char Str -- Bool
  strall? (p: Char -- Char Bool) : Str -- Str Bool

  strbreak : Str Nat -- Str Str
  strbreakL : Str Nat -- Str Str
  strbreakR : Str Nat -- Str Str
  strbreakWhen (p: Char -- Char Bool) : Str -- Str Str

  strtakeL : Str Nat -- Str
  strtakeR : Str Nat -- Str
  strdropL : Str Nat -- Str
  strdropR : Str Nat -- Str

  strprefix? : Str Str -- Str Str Bool
  strprefix  : Str Str -- Bool
  strsuffix? : Str Str -- Str Str Bool
  strsuffix  : Str Str -- Bool
  streq : Str Str -- Bool
  <> : Str Str -- Str
  strfold(f : *a Char -- *a) : *a Str -- *a

  unlines : List(Str) -- Str

  strmatch : Str Str -- Maybe(Nat)

  showStr : Str -- Str
end

#
# char
#

data Char
  MkChar : Int -- Char
end

Char.generate : Int -- Char
Char.generate = int->char

char->int : Char -- Int
char->int = match ( MkChar -> id )

char->str : Char -- Str
char->str = match ( MkChar -> _prim_str_from_codepoint )

int->char : Int -- Char
int->char = znat nint MkChar

str->char : Str -- Char
str->char = dup _prim_str_len 0 z= if(
    drop 0 MkChar,
    1 _prim_str_break drop _prim_str_to_codepoint MkChar
  )
"" str->char == 0 int->char

char->int int->char == id
char->str str->char == id

char< : Char Char -- Bool
char< = both(char->int) z<

char> : Char Char -- Bool
char> = swap char<

char<= : Char Char -- Bool
char<= = dip(char->int) char->int z<=

char>= : Char Char -- Bool
char>= = swap char<=

chareq : Char Char -- Bool
chareq = dip(char->int) char->int z=
dup  chareq == drop true
swap chareq == chareq

chareq? : Char Char -- Char Char Bool
chareq? = dup2 chareq

# TODO: add char literals.
'\t' : Char
'\t' = "\t" str->char

'\n' : Char
'\n' = "\n" str->char

'\r' : Char
'\r' = "\r" str->char

'\s' : Char
'\s' = " " str->char

inrange?(a: Str, b: Str) : Char -- Char Bool
inrange?(a,b) = and? ( dup a str->char char>=, dup b str->char char<= )

islower? : Char -- Char Bool
islower? = inrange?("a", "z")
islower? drop == id

isupper? : Char -- Char Bool
isupper? = inrange?("A", "Z")
isupper? drop == id

isdigit? : Char -- Char Bool
isdigit? = inrange?("0", "9")
isdigit? drop == id

ishexdigit? : Char -- Char Bool
ishexdigit? = or? (isdigit?, or?( inrange?("a", "f"), inrange?("A", "F") ))
ishexdigit? drop == id

isalpha? : Char -- Char Bool
isalpha? = or?(islower?, isupper?)
isalpha? drop == id

#
# str
#

<> : Str Str -- Str
<> = _prim_str_cat
"" <> == id
dip("") <> == id
<> <> == dip(<>) <>
dip(char->str) <> str->char == drop

strbreak : Str Nat -- Str Str
strbreak = nint _prim_str_break
strbreak <> == drop

strprefix : Str Str -- Bool
strprefix = dip?(strlen?) strbreak drop streq
strprefix? = dup2 strprefix

"foo" "foo.mth" strprefix == true
"foobar" "foo.mth" strprefix == false
dup strprefix == drop true

strsuffix = dup2 both(strlen) swap n- znat strbreak nip streq
strsuffix? = dup2 strsuffix

".mth" "foo.mth" strsuffix == true
".bar" "foo.bar" strsuffix == true
".zero" "foo.one" strsuffix == false

strlen : Str -- Nat
strlen = _prim_str_len znat
<> strlen == dip(strlen) strlen n+

strlen? : Str -- Str Nat
strlen? = dup strlen
strlen? drop == id
strlen? nip  == strlen

strnull : Str -- Bool
strnull = strlen n0 n=

strnull? : Str -- Str Bool
strnull? = dup strnull
strnull? drop == id
strnull? nip  == strnull

data StrView
  strnil  : StrView
  strcons : Char Str -- StrView
end

strview : Str -- StrView
strview = strnull? if(
    drop strnil,
    n1 strbreak dip(_prim_str_to_codepoint MkChar) strcons
  )

"" strview == strnil
"a" strview == 97 MkChar "" strcons
" foo" strview == 32 MkChar "foo" strcons

streq : Str Str -- Bool
streq = strview match(
  strnil  -> strnull,
  strcons -> rotl strview match(
    strnil  -> drop2 false,
    strcons -> dip(swap dip(chareq)) rotl if(streq, drop2 false)
  )
)

"" "" streq == true
"a" "" streq == false
"" "a" streq == false
"foo" "foo" streq == true
"foo" "bar" streq == false
"bar" "bar" streq == true
"bar" "baz" streq == false
"baz" "baz" streq == true
dup  streq == drop true
swap streq == streq

streq? : Str Str -- Str Str Bool
streq? = dup2 streq
streq? drop == id
streq? nip nip == streq

strfold(f : *a Char -- *a) : *a Str -- *a
strfold(f) = strview match(
  strnil  -> id,
  strcons -> dip(f) strfold(f)
)
dip("") strfold(char->str <>) == id

strall?(f: Char -- Char Bool) : Str -- Str Bool
strall?(f) = strview match(
  strnil  -> "" true,
  strcons -> and?(dip?(f), strall?(f)) dip(dip(char->str) <>)
)

strelem : Char Str -- Bool
strelem = dip(char->str) _prim_str_elem

strelem? : Char Str -- Char Str Bool
strelem? = dup2 strelem
strelem? drop == id

strBreakOnAux(f: Char -- Char Bool) : Str Str -- Str Str
strBreakOnAux(f) = strview match(
  strnil  -> "",
  strcons -> dip?(f) if(dip(char->str) <>, dip(char->str <>) strBreakOnAux(f))
)

strbreakWhen(f: Char -- Char Bool) : Str -- Str Str
strbreakWhen(f) = dip("") strBreakOnAux(f)
strbreakWhen(islower?) <> == id
strbreakWhen(isupper?) <> == id
strbreakWhen(dup char->int z2% n0 n=) <> == id

strbreakL : Str Nat -- Str Str
strbreakL = strbreak

strbreakR : Str Nat -- Str Str
strbreakR = dip(strlen?) n- znat strbreak

strtakeL : Str Nat -- Str
strtakeL = strbreakL drop

strdropL : Str Nat -- Str
strdropL = strbreak nip

strtakeR : Str Nat -- Str
strtakeR = strbreakR nip

strdropR : Str Nat -- Str
strdropR = strbreakR drop

showDigitHex : Nat -- Str
showDigitHex = nint dup 10 z< if(48, 55) z+ int->char char->str

showCodepointHex : Int -- Str
showCodepointHex = $(
  16 zpos z/% showDigitHex
  dip(16 zpos z/% showDigitHex) <>
  dip(16 zpos z/% showDigitHex) <>
  dip(16 zpos z/% showDigitHex) <>
  dip(16 zpos z/% showDigitHex) <>
  dip(16 zpos z% showDigitHex) <>
)

showCharBody : Char -- Str
showCharBody =
  char->int cond(
    dup 9  z= -> drop "\\t",
    dup 10 z= -> drop "\\n",
    dup 13 z= -> drop "\\r",
    dup 34 z= -> drop "\\\"",
    dup 92 z= -> drop "\\\\",
    and?(dup 32 z>=, dup 127 z<) -> int->char char->str,
    dip("\\u") showCodepointHex <>
  )

showChar = showCharBody dip("'") "'" <> <>
showStr = dip("\"") strfold(showCharBody <>) "\"" <>

"tnrfoo" showStr == "\"tnrfoo\""
"\t\n\r\\\"" showStr == "\"\\t\\n\\r\\\\\\\"\""
272 int->char char->str showStr == "\"\\u000110\""

strmatch = _prim_str_rematch if(znat Some, drop None)

unlines = dip("") for("\n" <> <>)
