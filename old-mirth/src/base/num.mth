# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

import base/order
import base/char
import base/str

export base/int
  type Comp
  type Nat
  type Pos

  int->str : Int -- Str

  znat  : Int -- Nat
  zpos  : Int -- Pos
  nint  : Nat -- Int
  pint  : Pos -- Int

  z+    : Int Int -- Int
  z-    : Int Int -- Int
  z*    : Int Int -- Int
  z/    : Int Pos -- Int
  z%    : Int Pos -- Nat
  z/%   : Int Pos -- Int Nat

  zcmp  : Int Int -- Comp
  zcmp? : Int Int -- Int Int Comp
  z<    : Int Int -- Bool
  z>    : Int Int -- Bool
  z<=   : Int Int -- Bool
  z>=   : Int Int -- Bool
  z=    : Int Int -- Bool
  z!=   : Int Int -- Bool

  z0 : Int
  z1 : Int
  z2 : Int

  z0?   : Int -- Int Bool
  z1?   : Int -- Int Bool
  z2?   : Int -- Int Bool
  zpos? : Int -- Int Bool
  zneg? : Int -- Int Bool

  zneg  : Int -- Int
  zabs  : Int -- Nat
  z1+   : Int -- Int
  z1-   : Int -- Int
  z2*   : Int -- Int
  z2/   : Int -- Int
  z2%   : Int -- Nat
end

export base/nat
  type Comp
  type Nat
  type Pos

  Nat.generate : Int -- Nat

  nat->str : Nat -- Str

  nint  : Nat -- Int
  npos  : Nat -- Pos
  znat  : Int -- Nat
  pnat  : Pos -- Nat

  n+    : Nat Nat -- Nat
  n-    : Nat Nat -- Int
  n*    : Nat Nat -- Nat
  n/    : Nat Pos -- Nat
  n%    : Nat Pos -- Nat
  n/%   : Nat Pos -- Nat Nat

  ncmp  : Nat Nat -- Comp
  ncmp? : Nat Nat -- Nat Nat Comp
  n<    : Nat Nat -- Bool
  n>    : Nat Nat -- Bool
  n<=   : Nat Nat -- Bool
  n>=   : Nat Nat -- Bool
  n=    : Nat Nat -- Bool
  n!=   : Nat Nat -- Bool
  nmax  : Nat Nat -- Nat
  nmin  : Nat Nat -- Nat

  n0    : Nat
  n1    : Nat
  n2    : Nat

  n0?   : Nat -- Nat Bool
  n1?   : Nat -- Nat Bool
  n2?   : Nat -- Nat Bool
  npos? : Nat -- Nat Bool

  nneg  : Nat -- Int
  n1+   : Nat -- Pos
  n1-   : Nat -- Int
  n2*   : Nat -- Nat
  n2/   : Nat -- Nat
  n2%   : Nat -- Nat

  nsplit : Nat -- Nat Nat

  nmatch (z: *a -- *b, s: *a Nat -- *b) : *a Nat -- *b
  nrepeat (f: *a -- *a) : *a Nat -- *a
end

export base/pos
  type Comp
  type Nat
  type Pos

  pos->str : Pos -- Str

  Pos.generate : Int -- Pos

  pint  : Pos -- Int
  pnat  : Pos -- Nat
  zpos  : Int -- Pos
  npos  : Nat -- Pos

  p+    : Pos Pos -- Pos
  p-    : Pos Pos -- Int
  p*    : Pos Pos -- Pos
  p/    : Pos Pos -- Nat
  p%    : Pos Pos -- Nat
  p/%   : Pos Pos -- Nat Nat

  pcmp  : Pos Pos -- Comp
  pcmp? : Pos Pos -- Pos Pos Comp
  p<    : Pos Pos -- Bool
  p>    : Pos Pos -- Bool
  p<=   : Pos Pos -- Bool
  p>=   : Pos Pos -- Bool
  p=    : Pos Pos -- Bool
  p!=   : Pos Pos -- Bool

  p1    : Pos
  p2    : Pos

  p1?   : Pos -- Pos Bool
  p2?   : Pos -- Pos Bool

  pneg  : Pos -- Int
  p1+   : Pos -- Pos
  p1-   : Pos -- Nat
  p2*   : Pos -- Pos
  p2/   : Pos -- Nat
  p2%   : Pos -- Nat

  psplit : Pos -- Pos Nat
end

data Nat
  _nat : Int -- Nat
end

data Pos
  _pos : Nat -- Pos
end

Nat.generate = zabs
Pos.generate = Nat.generate n1+

znat = dup 0 z<= if(drop 0, id) _nat
zpos = dup 1 z<= if(drop 1, id) _nat _pos
nint = match(_nat -> id)
npos = nint zpos
pint = pnat nint
pnat = match(_pos -> id)

nint2 : Nat Nat -- Int Int
pint2 : Pos Pos -- Int Int
pnat2 : Pos Pos -- Nat Nat
nint2 = both(nint)
pint2 = both(pint)
pnat2 = both(pnat)

z+ = _prim_int_add
z- = _prim_int_sub
z* = _prim_int_mul
z/ = pint _prim_int_div
z% = pint _prim_int_mod znat
z/% = dup2 dip2(z/) z%

zcmp? = mkcmp?(dup2 z<)
zcmp  = mkcmp (dup2 z<)
z<    = _prim_int_lt
z>    = swap z<
z=    = _prim_int_eq
z<=   = z> not
z>=   = z< not
z!=   = z= not

z0 = 0
z1 = 1
z2 = 2

z0? = dup z0 z=
z1? = dup z1 z=
z2? = dup z2 z=
zpos? = dup z0 z>
zneg? = dup z0 z<

zneg = dip(z0) z-
zabs = zneg? if(zneg, id) _nat

z1+ = z1 z+
z1- = z1 z-
z2* = z2 z*
z2/ = p2 z/
z2% = p2 z%

n+ = nint2 z+ _nat
n- = nint2 z-
n* = nint2 z* _nat
n/ = dip(nint) z/ _nat
n% = dip(nint) z%
n/% = dup2 dip2(n/) n%

ncmp  = nint2 zcmp
ncmp? = dup2 ncmp
n<    = nint2 z<
n<=   = nint2 z<=
n=    = nint2 z=
n>=   = nint2 z>=
n>    = nint2 z>
n!=   = nint2 z!=

nmax = dup2 n>= if(drop, nip)
nmin = dup2 n<= if(drop, nip)

n0 = 0 _nat
n1 = 1 _nat
n2 = 2 _nat

n0? = dup n0 n=
n1? = dup n1 n=
n2? = dup n2 n=
npos? = dup n0 n>

nneg = nint zneg

n1+ = n1 n+ _pos
n1- = n1 n-
n2* = n2 n*
n2/ = p2 n/
n2% = p2 n%

nsplit = dup par(n2/, n2%) over dip(n+)

nmatch(z,s) = n0? if(drop z, n1- znat s)
nrepeat(f) = nmatch(id, dip(f) nrepeat(f))

p+ = pnat2 n+ _pos
p- = pint2 z-
p* = pnat2 n* _pos
p/ = dip(pnat) n/
p% = dip(pnat) n%
p/% = dup2 dip2(p/) p%

pcmp  = pnat2 ncmp
pcmp? = dup2 pcmp
p<    = pnat2 n<
p<=   = pnat2 n<=
p=    = pnat2 n=
p>=   = pnat2 n>=
p>    = pnat2 n>
p!=   = pnat2 n!=

p1 = n1 _pos
p2 = n2 _pos

p1? = dup p1 p=
p2? = dup p2 p=

pneg = pint zneg

p1+ = p1 p+
p1- = p1 p- _nat
p2* = p2 p*
p2/ = p2 p/
p2% = p2 p%

psplit = pnat nsplit dip(_pos)

digit->str : Nat -- Str
digit->str = nint "0" str->char char->int z+ int->char char->str

int->str = zneg? if(zabs nat->str dip("-") <>, znat nat->str)
pos->str = pnat nat->str

nat->str' : Nat -- Str
nat->str' = n0? if(drop "", 10 zpos n/% dip(nat->str') digit->str <>)
nat->str  = n0? if(drop "0", nat->str')

